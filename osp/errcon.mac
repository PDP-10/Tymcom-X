TITLE ERRCON - MONITOR DETECTED ERROR HANDLING ROUTINES - V425
SUBTTL T. HASTINGS/TH/CHW/TW/RCC SCNSER 07 OCT 70
XP VERRCN,425
		;THIS MACRO PUTS VERSION NO. IN STORAGE MAP AND GLOB

	ENTRY ERRCON	;ALWAYS LOAD ERRCON(IF LIB SEARCH)
ERRCON:

;THESE ERROR ROUTINES PRINT "ERROR IN JOB N"
;FOLLOWED BY AN APPROPRIATE ERROR MESSAGE
;THEN THE JOB IS STOPPED AND CONSOLE IS RETURNED TO
;MONITOR COMMAND MODE

;APR DETECTED ERRORS
;PUSHDOWN OVERFLOW,ILLEGAL MEMORY, NONEXISTENT MEMORY
;FOR WHICH THE USER IS NOT ENABLED.
;SEE APRSER TO SEE HOW APR INTERRUPTS ARE HANDLED
;CALL:	SKIPE T1,APRERR	;RESULT OF CONI APR,APRERR
;	PUSHJ P,APRILM	;FROM CLK SERVICE ROUT.(LOWEST PRIOTITY PI)
;	RETURN TO RESCHEDULE NEW USER

EXTERNAL CONMES,HOLD,INLMES,PJOB,CRLF,ALR620,TTYFND
EXTERNAL TSETBI,GETOPR,TTYFNU,TTYSTR,PIOMOD
EXTERNAL UPTPDL,%UPT,UPTABK,UPTSTS,UPSABK,UPTABL,ABKSET,%UPX,%UPS
EXTERNAL UPTUII,UPTXII
IFCPU (KL),<EXTERNAL AB.USR>
EXTERNAL JBTSTS
EXTERNAL USRXIT,WSCHED,CLKPC1,CLKPC2
EXTERNAL JOB
SUBTTL SYSTEM ERROR EXIT DEFINITIONS
COMMENT #

GENERATE CODE TO STORE ERROR STATUS IN THE FRAME'S UPT, TRAP TO
TRAPHANDLER OR PARENT, PRINT MESSAGE IF NO ONE IS HANDLING ERRORS.

X ARGUMENTS:

CODE	THREE LETTER CODE FOR ERROR. SYMBOLS ERR??? GENERATED TO JRST TO.
TYPE	TYPE NUMBER WITHIN ERROR CLASS.
MESSAGE	BASIC MESSAGE TO PRINT.
TTYFIN	PUSHJ TO THIS ROUTINE TO FINISH MESSAGE.
	ERRSCP - "FOR (EXEC) LOCATION/PAGE <C(M)> AT USER <C(GETPC)>" OR
		 "FOR (EXEC) LOCATION/PAGE <C(M)>; UUO AT EXEC/USER <C(UPTPDL)-1>"
	ERRSCD - "AT USER <C(GETPC)>" OR
		 ";UUO AT <C(UPTPDL)-1>"
	ERRSCM - "AT USER <C(GETPC)-1>" OR
		";UUO AT <C(GETPC)-1>"
	UUOPCP - "AT USER <C(UPTPDL)-1>"
	ERRSCU - "; UUO AT <C(UPTPDL)-1>"
	TCLTTY - CLEAR TYPE AHEAD, PUT TTY IN MONITOR MODE, PRINT CRLF, WATCH
		 DATA, CRLF, AND PERIOD
	TNCTTY - SAME AS TCLTTY, BUT DOESN'T CLEAR TYPE AHEAD
	E1STTY - PRINT WATCH, CRLF, PERIOD, PUT TTY IN MONITOR MODE (FOR EXIT 1,)
	<BLANK> - DOES TCLTTY
STOP	ROUTINE TO USE TO STOP THE JOB, WHETHER OR NOT A MESSAGE
	IS PRINTED.
	KJSTOP - STOP JOB, SET JERR, SET IT TO LOGOUT IF JLOG OFF
	HISTOP - STOP JOB CONTINUABLY, CONTINUES POPJ
		  (FOR HALT INSTRUCTION AND ADDRESS BREAK.)
	HNSTOP - STOP CONTINUABLY, SET JDCON
	BISTOP - SPECIAL RETURN FOR BAD INTERRUPT ADDRESS
	E1STOP - STOP CONTINUABLY, JRST TO USCHED (FOR EXIT 1,)
		 CONTINUES AT ADDRESS C(P) (IS UPTPDL FOR EXIT 1,)
	HLSTOP - STOP CONTINUABLY, CONTINUE WILL POPJ FROM JRST ERR???
	STOP1  - IF JERR NOT ON, WILL RETURN TO CALLER OF ERR???.
		 USED IF CALLER NOT SAME AS THE FRAME THAT IS STOPPING.
		 ALSO USED IF FRAME STOPS BECAUSE OF DELAYED CONTROL-C
		 IN WHICH CASE PUSHJS TO ERR??? AND JRSTS TO WSCHED, USCHED, ETC.
	<BLANK> - KJSTOP
GETPC	<BLANK> - GET PC FROM STACK
	NONE - NO CODE GENERATED TO FETCH PC
	<NON-BLANK> GET PC FROM SPECIFIED ARG
SETTTY	<BLANK> - USE ERRTTY, SETS UP FRAME'S LDB, OR IF NONE, OPR LDB
	<NON BLANK> - PUSHJ TO ARG ROUTINE, JUMP TO STOP JOB ROUTINE IF
			C(U) IS ZERO, ELSE ASSUME F AND U ARE SETUP
	  TTYFNU - RETURNS C(U) 0 IF DETACHED, OR LDB ADDRESS. C(F) GETS TTY DDB ADDRESS
	  ERRFNU - SAME AS TTYFNU, BUT PRESERVES F.
	  EXIFNU - SPECIAL TTY FINDING ROUTINE FOR EXIT, SEE ROUTINE.
	  NOMESS - NO MESSAGE OR TTY NEEDED, JUST STOP THE FRAME.
VALUE	<BLANK> - NO VALUE ASSOCIATED WITH MESSAGE
	<NON-BLANK> - AC NAME TO STORE INTO UPTELC
VALUE1	<BLANK> - NO VALUE
	<NON-BLANK> - AC NAME TO STORE INTO UPTEL1
UPLOC	<BLANK> - CONTEXT PAGES ACCESSIBLE THRU %UPT
	%UPS - THRU %UPS
	%UPX - THRU %UPX
#

DEFINE ERRS<
ERRCLS==0	;CLASS 0, MEMORY VIOLATIONS

X(PCO,0,<PC OUT OF BOUNDS>,ERRSCD)
X(IMR,1,<ILL MEM REF>,ERRSCP)
X(WRV,2,<WRITE VIOLATION>,ERRSCP)
X(ADC,3,<ADDRESS CHECK FOR ,DEV>,ERRSCP)
X(IMU,4,<ILL MEM REF IN UUO>,ERRSCP)
X(IIA,5,<ILLEGAL INTERRUPT ADDRESS>,,BISTOP,NONE)
X(ABK,6,<ADDRESS BREAK>,ERRSCP,HISTOP,P1)
X(POV,7,<PDL OV>,ERRSCD)

ERRCLS==1	;CLASS 1,SYSTEM RELATED ERRORS

X(PIO,0,<PAGE I/O ERROR>,ERRSCP)
X(DFL,1,<DISK FULL DURING C-O-W>,ERRSCP)
X(PHE,2,<PAGING HARDWARE ERROR>,ERRSCP)
X(TPL,3,<TOO MANY PAGES LOCKED, CAN'T HANDLE FAULT>,ERRSCP)
X(CIO,4,<CONTEXT PAGE I/O ERROR>)
X(PAR,5,<PARITY ERROR(S). ALL CORE REMOVED>)

ERRCLS==2	;DEVICE RELATED ERRORS

X(OCI,0,<OUTPUT ,DEV, CANNOT DO INPUT>,UUOPCP)
X(ICO,1,<INPUT ,DEV, CANNOT DO OUTPUT>,UUOPCP)
X(IDM,2,<ILLEGAL DATA MODE FOR ,DEV>,ERRSCU)
X(IUC,3,<IO TO UNASSIGNED CHANNEL>,UUOPCP)
X(HDV,4,<HUNG ,DEV>,ERRSCU)
X(DOP,5,<DEV, OPR ACTION REQUESTED>,,HNSTOP,NONE,ERRFNU)

ERRCLS==3	;ILLEGAL INSTRUCTION TRAPS

X(ILU,0,<ILLEGAL UUO>,UUOPCP)
X(UUE,1,<UUO ERROR>,UUOPCP)
X(ILI,2,<ILL INST>,UUOPCP)
X(HLT,3,<HALT>,ERRSCM,HISTOP,P1)
X(CAL,4,<ILLEGAL CALL NAME>,UUOPCP)

ERRCLS==4	;FRAME EXITS

X(EXI,0,<CRLF,EXIT>,TNCTTY,KJSTOP,NONE,EXIFNU)
X(EX1,1,<>,E1STTY,E1STOP,NONE,EXIFNU)
X(FEX,2,<?fail exit >,FEXPRT,KJSTOP,NONE,EXIFNU,T4)
X(TLE,3,<TIME LIMIT EXCEEDED>,TLETTY,STOP1,NONE,TTYFNU)
X(JSU,4,<FNAME, SETUP>,TNCTTY,KJSTOP,NONE,EXIFNU,P3,P4)
X(JSV,5,<FNAME, SAVED>,TNCTTY,KJSTOP,NONE,EXIFNU,P3,P4)
X(FCL,6,<FRAME CLEARED>,,KJSTOP,NONE,NOMESS)
X(FX1,7,<?fail stop >,FEXPRT,E1STOP,NONE,EXIFNU,T4)

ERRCLS==5	;RUN, RUNSEG, GETSEG UUO ERRORS

X(TRE,0,<CRLFQ,I/O error on file ,FNAME>,,KJSTOP,NONE,EXIFNU)
X(PGN,1,<CRLFQ,DECPRT, PAGES NEEDED>,,KJSTOP,NONE,EXIFNU,M)
X(DNA,2,<CRLFQ,DEV, NOT AVAILABLE>,,KJSTOP,NONE,EXIFNU)
X(FNF,3,<CRLFQ,FNAME, NOT FOUND>,,KJSTOP,NONE,EXIFNU,P3,P4)
X(NSF,4,<CRLFQ,NOT A SAVE FILE>,,KJSTOP,NONE,EXIFNU)
X(EUF,5,<CRLFQ,FNAME, ATTEMPTED ENTER UUO FAILED>,,KJSTOP,NONE,EXIFNU,P3,P4)
X(CAN,6,<CRLFQ,CORE ARGUMENT MUST BE SPECIFIED>,,KJSTOP,NONE,EXIFNU)
X(MHB,7,<CRLFQ,MAG TAPE HISEG FORMAT BAD OR SYSTEM ERRORS>,,KJSTOP,NONE,EXIFNU)
X(RMF,10,<CRLFQ,FATAL ERROR DURING REMAP UUO>,,KJSTOP,NONE,EXIFNU)
X(MGF,11,<CRLFQ,MAGTAPE GET FAILURE>,,KJSTOP,NONE,EXIFNU)
X(NSA,12,<NO START ADDR>,,KJSTOP,NONE,EXIFNU)
>;END ERRS MACRO DEFINITION
SUBTTL ERROR EXIT ROUTINE GENERATION

DEFINE IFADF(ARG1,ARG2,DO,%A)<;BEGIN DEFINITION OF IF ALL DIFFERENT MACRO
%A==0
IRP ARG2,<IFIDN <ARG1> <ARG2> <%A==-1>
>;END IRP ARG2
IFE %A,<'DO>
PURGE %A
>;END IFADF

DEFINE IFOID(ARG1,ARG2,DO,%A)<;BEGIN IF ONE IDENTICAL MACRO
%A==0
IRP ARG2,<IFIDN <ARG1> <ARG2> <%A==-1>
>;END IRP ARG2
IFN %A,<'DO>
PURGE %A
>;END IFOID
;NOW DEFINE X MACRO, SO CAN CALL ERRS AND GENERATE THE ERROR EXITING
; CODE.

DEFINE X(CODE,TYPE,MESS,TTYFIN,STOP,GETPC,SETTTY,VALUE,VALUE1,UPLOC,%STP,%UP)<
IFB <STOP> <%STP==KJSTOP>
IFNB <STOP> <%STP=='STOP>
IFB <UPLOC> <%UP==%UPT>
IFNB <UPLOC> <%UP=='UPLOC>

ERR'CODE::
IFB <GETPC> <
	MOVE P1,(P)>	;IF BLANK, MEANS PC IS (P).
IFADF GETPC,<P1,NONE,>,<
	MOVE P1,'GETPC	;IF NOT BLANK, MEANS GET PC FROM ARG PLACE
>;END IFADF

	MOVE	T1,[ERRCLS,,'TYPE] ;GET CLASS,,TYPE WITHING CLASS
	MOVEM	T1,%UP+UPTETP	;EXIT TYPE
IRP MESS,<IFIDN <MESS> <DEV> <
	MOVE	T1,DEVNAM(F)	;IF ITS A DEVICE MESSAGE, STORE NAME
	MOVEM	T1,%UP+UPTEDV
>>;END IFIDN AND IRP

IFIDN <TTYFIN> <ERRSCP> <
	MOVEM M,%UP+UPTELC 	;IF PRINTING LOC, STORE IT TOO.
>;END IFIDN
IFNB <VALUE> <
	MOVEM 'VALUE,%UP+UPTELC ;OR IF OTHER VALUE SPECIFIED
>;END IFNB <VALUE>
IFNB <VALUE1> <
	MOVEM 'VALUE1,%UP+UPTEL1
>;END IFNB <VALUE1>

IFOID 'UPLOC,<%UPT,>,<
	PUSHJ	P,ERRSET>
IFIDN <UPLOC> <%UPS> <
	PUSHJ	P,ERRSES>
IFIDN <UPLOC> <%UPX> <
	PUSHJ	P,ERRSEX>
	  PJRST	%STP		;GO STOP THE JOB THE RIGHT WAY

IFDIF <SETTTY> <NOMESS> <
IFB <SETTTY> <
	PUSHJ	P,ERRTTY	;FIND A LINE TO TYPE MESSAGE ON
>;END IFB SETTTY

IFNB <SETTTY> <
  IFDIF <SETTTY> <CPOPJ> <
	PUSHJ P,'SETTTY		;SPECIAL ROUTINE TO SET TTY UP
  >;END IFDIF <SETTTY> <CPOPJ>
	JUMPE U,%STP		;JUST STOP JOB
>;END IFNB <SETTTY>
IFNB <MESS> <IRP MESS,<
IFIDN <MESS> <DEV> <
	PUSHJ P,ERNAM>		;PRINT DEVICE X
IFIDN <MESS> <CRLF> <
	PUSHJ P,CRLF>		;PRINT CRLF IF ASKED TO
IFIDN <MESS> <CRLFQ> <
	PUSHJ P,CRLFQ>
IFIDN <MESS> <FNAME> <
	PUSHJ P,ERFNAM>
IFIDN <MESS> <DECPRT> <
	MOVE T1,M		;GET VALUE INTO T1
	PUSHJ P,PRTDIG>
IFADF MESS,<DECPRT,CRLF,CRLFQ,DEV,FNAME>,<
	PUSHJ	P,INLMES
	ASCIZ	\'MESS\
>;END IFADF
>;END IRP MESS
>;END IFNB MESS
IFNB <TTYFIN> <
	PUSHJ P,'TTYFIN>	;IF NEED MORE PC TYPE INFO, DO IT.
IFB <TTYFIN> <
	PUSHJ P,TCLTTY>
>;END IFDIF <SETTTY> <NOMESS>
	PJRST	%STP		;AND STOP THE JOB.
>;END X MACRO DEFINITION
EXTERNAL UPTJOB,UPTETP,UPTEDV,UPTELC,UPTEL1
;NOW GENERATE ALL THE ROUTINES
XALL	;DON'T WASTE PAPER
	ERRS
SALL	;RESTORE REASONABLE LISTING
;HERE ON PAGE FAILURE. MAY BE OLD OR NEW STYLE

EXTERNAL TSTTRP,CLKTR1,COMNT1,COMNT2,PFSWE%,PFDFC%
EXTERNAL JBTPIP,JBYPGT

USRMPT::
IFCPU (KI),<MOVE T1,%UPT+UPTUPF>
IFNCPU (KI),<MOVE T1,%UPT+UPTPFW>
	PUSHJ P,PAGFLU	;CHECK THE FAULT
	  JRST	USRXIT		;IN CASE HE NEEDS TRAP OR ^C OR CLOCK TICKED.
USRSPF:	XCT	UPFTBT(T1)	;DISPATCH FROM TRAP TABLE
				; HERE FOR WRITE VILOATIONS, ILL MEM REFS,
	HRL	F,M		;CONSTRUCT ILL MEM REF FAULT WORD
	MOVEM	F,%UPT+UPTUII	;PUT IN FOR PGISTS UUO
				; AND ADDRESS BREAKS.
	MOVE J,JOB
	MOVE	P1,T1		;SAVE ERROR CODE FOR LATER
	MOVEI T1,FLGMPT
	SKIPGE JBTPIP(J)	;IS THIS OLD STYLE?
	JRST COMNT2		;YES, GO TAKE CARE OF IT
	LDB T1,JBYPGT		;GET NEW STYLE INTERRUPT
	MOVE T2,T1		;IN CASE WE TAKE THE TRAP
	 P,TSTTRP		;CAN WE TRAP RIGHT NOW?
	  JRST	USRSP1		;NO, TREAT AS ERROR.
	POP P,T3		;GET OLD PC
	PUSHJ P,CLKTR1		;SET FOR NEW STYLE TRAP
	JRST COMNT1		;AND GO RETURN TO USER

USRSP1:	XCT	UPFTAB(P1)	;DISPATCH TO PROPER PLACE
	STOPCD			;SHOULD NOT HAPPEN


UPFTBT:	STOPCD			;USER CAN'T FAULT FOR EXEC PAGE
	JFCL			;ILL MEM REF
	JFCL			;WRITE VIOLATION
	JRST	ERRPIO		;PAGE I/O ERROR
	JRST	ERRDFL		;DISK FULL ON COW PAGE
	JRST	USRILR		;USER WROTE INTO COW SUPER PAGE
	JFCL			;LET USER HANDLE ADDRESS BREAK
	JRST	ERRTPL		;HARD PAGE FAIL.
;USER MEMORY PROTECT VIOLATION. CALLED IF NOT ARMED FOR PSUEDO-INTERRUPT
USRMPE::
IFCPU (KI),<MOVE T1,%UPT+UPTUPF>
IFNCPU (KI),<MOVE T1,%UPT+UPTPFW>
	PUSHJ P,PAGFLU
	  JRST	USRXIT		;IN CASE USER IS GETTING FAULT TRAP OR TYPED ^C
USRMP2::XCT	UPFTAB(T1)	;DISPATCH ON ERROR TYPE.
	STOPCD			;NO JFCLS EXPECTED IN TABLE

;ERROR DISPATCH TABLE FOR USER MODE FALTS

UPFTAB:	STOPCD			;USER CAN'T FAULT FOR EXEC PAGE.
	JRST	USRILR		;TRADITIONAL ILL MEM REF
	JRST	ERRWRV		;WRITE VIOLATION
	JRST	ERRPIO		;PAGE I/O ERROR
	JRST	ERRDFL		;DISK FULL ON COW
	JRST	USRILR		;WROTE INTO SUPER COW PAGE
	JRST	USRABK		;ADDRESS BREAK.
	JRST	ERRPHE		;HARDWARE PAGE FAIL.
	JRST	ERRTPL		;TOO MANY PAGES LOCKED
;USER PAGE FAIL ERROR ROUTINES

USRILR:	LDB	T2,[POINT 9,(P),26] ;GET PAGE OF PC
	CAIE	T2,(W)		;SAME AS ERROR PAGE?
	JRST	ERRIMR		;NO, ILL MEM REF
	JRST	ERRPCO		;YES, PC OUT OF BOUNDS.


;HERE FOR ADDRESS BREAK

USRABK:	MOVSI	P1,PC.ADR	;SET IT NOW IN CASE TYPES DDT
	IORB	P1,%UPT+UPTPDL
	MOVEM	P1,%UPT+UPTABL	;THIS IS ADDRESS BREAK LOCATION.
	MOVE	M,%UPT+UPTABK	;GET LOCATION OF ADDRESS BREAK
	JRST	ERRABK		;GO PRINT OR TRAP
;HERE IS THE EXEC PAGE FAILURE TRAP FOR NOW

EXTERNAL KTRRT1,ABKMON

EXCMPE::
IFCPU (KI),<MOVE T1,%UPT+UPTXPF>	;GET THE PAGE FAIL WORD
IFNCPU (KI),<MOVE T1,%UPT+UPTPFW>
	PUSHJ P,PAGFLE		;TAKE USERS PAGE FAULT ROUTINE
	 JRST KTRRT1	;IT WAS OK, PAGE SHOULD NOW BE THERE
	XCT	EPFTAB(T1)	;AND DISPATCH.
	TRNN	F,SPFW.U	;IF EXEC PC FAULT TO EXEC PAGE FAILED,
	STOPCD			;CRASH THE SYSTEM.
	HRRZ	T1,(P)		;GET FAULT PC
	CAIE	T1,CLKPC1	;IN CLKTRP?
	CAIN	T1,CLKPC2
	JRST	ERRIIA		;YES, ILLEGAL INTERRUPT ADDRESS ERROR.
	JRST	UUOADR		;NO, BAD UUO ADDRESS ERROR.

EXCABK:	TRNN	F,SPFW.U	;IF EXEC GOT ADDRESS BREAK FOR USER SPACE,
	JRST	ADRBRK		;FOR EXEC PAGE, DON'T BOTHER USER.
	HRL	F,M		;GET FAULT INFO WORD IN F
	MOVEM	F,%UPT+UPTXII	;AND STORE FOR USER TO SEE WHEN UUO RETURNS.
	MOVSI	T1,PC.ADR
	IORM	T1,(P)
	MOVE	T1,%UPT+UPTPDL	;THIS IS ADDRESS BREAK LOCATION
	SOS	T1		;BACK UP TO LOCATION OF UUO.
	MOVEM	T1,%UPT+UPTABL	;
EXCAB1:	MOVSI	T1,UPSABK	;SET ADDRESS BREAK AT UUO LEVEL FLAG
	IORM	T1,%UPT+UPTSTS
	MOVEI	T1,UTRP		;SET SO USRXIT WILL SEE
	IORM	T1,JBTSTS(J)
	JRST	KTRRT1		;RETURN.
ADRBRK::MOVSI T1,PC.ADR		;NO, INHIBIT ADDRESS FAILURE
	IORM T1,(P)		;SO WE CAN DISMIS
	MOVE	T1,ABKSET	;SEE IF OK TO MESS WITH ADDRESS BREAK
	CAME	T1,[WRADB %UPT+UPTABK] ;IS IT
	JRST	KTRRT1		;NO, NO MESSAGE, HE HAS BP AT ADRBRK
	MOVE	T1,(P)		;GET PC OF ADDRESS BREAK
	MOVEM	T1,%UPT+UPTABL	;PUT EXEC PC FOR ABKPRT TO PRINT
				; MUST BE A %UPT SETUP, OR CAN'T GET ADDRESS BREAK
	MOVEI	T1,ABKACS	;SAVE ACS AT BREAK FOR EXEC ADDRESS SPACE
	XCTFU	<BLT T1,ABKACS+17>
	JRST	EXCAB1		;GO SET UTRP AND UPSABK AND RETURN.


;ROUTINE TO PRINT ADDRESS BREAK AT USER X, STOP JOB WITH NO ERROR
; BIT, AND RETURN. CALLED WITH PUSHJ.

ABKACS::BLOCK	20		;ACS STORED HERE ON EVA BREAK.
;EXEC FAULT ERROR DISPATCH

EPFTAB::STOPCD			;CRASH IF EXEC GETS FAULT FOR
				; CONTEXT PAGE OR EXEC >=400 PAGE.
	JFCL			;ILL MEM REF TO USER
	JFCL			;ILL WRITE REF TO USER
	JRST	EXCPIO		;I/O ERROR ON PAGE
	JRST	EXCDFL		;COW DISK FULL
	STOPCD			;CRASH IF EXEC WRITES INTO SUPER COW.
	JRST	EXCABK		;EXEC ADDRESS BREAK
	STOPCD			;HARD PAGE FAILURE.
	JRST	EXCTPL		;CORE FULL ON MWSRPL

;ERROR ROUTINES

;EXEC PAGE I/O ROUTINE. CALLED FROM PAGFLE ERROR RETURN AND
; FROM DEFFERED I/O ERROR PROCESSING IN USRXIT. ASSUMES
; PAGE FAIL ALWAYS TURNS ON THE IGNORE ERROR BITS FOR VPS
; THAT IT REFERENCES.

EXTERNAL JBYPER,TSTKTP,ABTUUO

;ROUTINE TO PRINT PAGE I/O ERROR OR GIVE RETURN, IN WHICH CASE
; CALLER WILL CAUSE TRAP.

EXCPIO::PUSHJ	P,CHKABT	;ALLOW MONITOR TO CLEAN UP.
	HRRZS	W		;CLEAR LH
	CAILE	W,777		;IF EXEC PAGE,
	JRST	ERRPIO		;NO TRAPS, PLEASE
	LDB	T1,JBYPER	;GET PAGE I/O ERROR CHANNEL
	JUMPE	T1,ERRPIO	;USER NOT ENABLED FOR IT
	PUSHJ	P,TSTKTP	;OK, CAN HE TAKE IT NOW?
	  JRST	[MOVEI T1,ABTUUO ;ROUTINE TO BACKUP PC
		 HRRM T1,(P)	;PUT ONTO RETURN PLACE
		 JRST KTRRT1]	;AND LET CALLER TAKE THE TRAP
	JRST	ERRPIO		;EXEC PAGE ERROR.

EXCPDL::STOPCD .		;DIE.

EXCDFL:	PUSHJ	P,CHKABT	;CLEAN UP IF NECESSARY
	PJRST	ERRDFL		;AND TO DO THE ERROR.

EXCTPL:	PUSHJ	P,CHKABT	;CLEAN UP
	JRST	ERRTPL		;AND GO DO THE ERROR.


EXTERNAL KTRRET,PAGFLU,PAGFLE
;HERE ARE 'UNEXPECTED' UUO'S AND TRAPS. THEY CRASH THE SYS

UUOSTR:	STOPCD .	;SUPERVISOR TRAP. SHOULD NOT BE IN SUP. MODE
UUOSNT:	STOPCD .	;SUPERVISOR NON-TRAP
UUOCTR:	STOPCD .	;CONCEALED TRAP. NO CONCEALED CODE
UUOCNT:	STOPCD .	;CONCEALED NON-TRAP

INTERNAL UUOSTR,UUOSNT,UUOCTR,UUOCNT

ADRERR::PUSHJ	P,CHKAB1	;DO JBTABT ROUTINE IF THERE
	JRST	ERRADC		;AND DO ADDRESS CHECK.

EXTERNAL KTRRET,JBTABT,ABTCPL

UUOADR::PUSHJ	P,CHKABT	;CLEAN UP IF NECESSARY.
	JUMPE F,ERRIMU		;ILLEGAL UUO ADDRESS
	MAP T1,DEVNAM(F)
IFCPU (KI),<TRNE T1,MAP.FL>
IFNCPU (KI),<TLNE T1,PFW.H		;FORGET IT IF HARD ERROR
	JRST ERRIMU
	TLC T1,PFW.A+PFW.W	;MAKE EASY TO SEE IF ONE IS OFF
	TLNE	T1,PFW.R	;IF UNPAGED REF, SKIP
	TLNN	T1,PFW.A+PFW.W	;PAGED. IF A OR W WAS OFF, DIE.
	JRST	.+2>		;UNPAGED OR A AND W WERE BOTH ON.
	JRST ERRIMU		;BAD IF DEVNAM(F) NOT LEGAL ADRESS
	MAP T1,@PJOBN
IFCPU (KI),<TRNE T1,MAP.FL>		;ALSO CHECK THAT LDB PJOBN WILL NOT FAULT
IFNCPU (KI),<TLNE T1,PFW.H		;IF HARD FAILURE, FORGET IT
	JRST ERRIMU
	TLC T1,PFW.A+PFW.W
	TLNE T1,PFW.R
	TLNN T1,PFW.A+PFW.W
	JRST	.+2>
				;MUST BE PAGED WITH A OR W OFF.
	JRST ERRIMU		;NOT FAULT
	LDB T1,PJOBN
	CAMN T1,JOB		;POINTS TO CURRENT JOB?
	JRST ERRADC		;YES, PROBABLY REAL DDB ADDRESS
	JRST ERRIMU		;NO, JUST SAY ILL MEM REF IN UUO


INTERNAL CRSHAC

;ROUTINE TO SET UP F AND J FOR CALLER, AND CALL JBTABT ROUTINE
; IF ONE IS SETUP. CLEARS JBTABT CELL.
; T1 SETUP WITH OLD CONTENTS OF JBTABT CELL FOR THE FRAME.
; JBTABT ROUTINES MUST PRESERVE W AND M.

CHKABT:	UMOVE	F,F		;GET F AT TIME OF ERROR (OR MAYBE USER'S F?)
CHKAB1:	MOVE	J,JOB
	SETZ	T1,
	EXCH	T1,JBTABT(J)
	PJUMPE	T1,ABTCPL	;IF NO JBTABT ROUTINE, JUST GIVE CONTEXT PAGE LOCKS UP
	PUSHJ	P,(T1)		;CALL JBTABT ROUTINE
	MOVE	J,JOB		;IN CASE JBTABT ROUTINE SMASHED IT
	PJRST	ABTCPL		;THEN GIVE UP LOCKS. (JBTABT ROUTINE MAY
				; NEED THE LOCK TO FIX UP STUFF)

;THESE OVERLAY THIS PIECE OF ERROR CODE
;NOTHING BUT CODE THERE NORMALLY, NOT NEEDED AFTER CRASH

CRSHAC::!



;DISK FULL WHEN USER WROTE IN COPY ON WRITE PAGE.
; T1 HAS ERROR CODE, 1 = DISK FULL. OTHERS, CRASH.

EXTERN CRDFL%


NOCREA::HLRZ	M,T1		;GET PAGE NUMBER IN M
	ANDI	M,777		;JUST 9 BITS WORTH
	LSH	M,^D9		;TURN INTO LOCATION (LIE A LITTLE)
	HRRZS	T1		;JUST ERROR CODE IN RH
	CAIE	T1,CRDFL%	;DISK FULL?
	STOPCD			;NO, SOME OTHER REASON.
	JRST	ERRDFL		;DISK FULL.

;ILLEGAL UUO
;CALLED AT UUO LEVEL ONLY

INTERNAL UUOERR,UUOMNR
EXTERN PDNMUP

UUOMNR:
	MOVE T2,PDNMUP(P)	;GET ADDRESS OF UUO
	TLNN T2,PC.USR	;THIS IS STILL A KLUDGE BECAUSE OF NON
			;JUMPS. GOES AWAY WITH SWAPABLE UPT
	STOPCD .
UUOERR:	JRST	ERRILU		;SAY ILLEGAL UUO
;UUO ERROR-MONITOR ERROR AT UUO LEVEL
;CALLED AT UUO LEVEL ONLY
XP UUOER1,ERRUUE

;ILLEGAL INSTRUCTION
;HALT INSTRUCTION IS A SPECIAL CASE WHICH STOPS JOB BUT
;THE USER MAY CONTINUE FROM IT(EFFECTIVE ADR.)
;CALLED AT UUO LEVEL WITH A JRST

INTERNAL ILLINS
EXTERNAL HOLD0,HOLD1

ILLINS:	MOVE	P1,PDNMUP(P)
	TLNN	P1,PC.USR	;MAKE SURE IN USER MODE
	STOPCD	ILLINS
	HLRZ T1,M		;ILLEGAL OPCODE
	CAIN	T1,(JRST 4,)	;IS IT A HALT?
	JRST	[HRRM M,%UPT+UPTPDL ;YES, STORE E OF HALT ON STACK FOR CONTINUE
		 JRST ERRHLT]	;AND GO HALT HIM.
	JRST	ERRILI		;SAY ILL INST

;ROUTINE FOR HUNG IO DEVICE
;CALL	MOVE F,ADDRESS OF DEVICE DATA BLOCK
;	PUSHJ P,DEVHNG
;ASSUMES THAT DEVICE SERVICE ROUTINE HAS BEEN CALLED AND DEVIOS
; WILL NO LONGER BE CHANGED BY INTERRUPT LEVEL.

INTERNAL DEVHNG
EXTERNAL SETIOD

DEVHNG:	MOVE	S,DEVIOS(F)	;GET S
	TLZE	S,IOW		;IS HE IN IO WAIT?
	PUSHJ	P,SETIOD	;YES, WAKE HIM UP
	TLO	S,IOHNG		;TELL WSYNC TO NEVER RETURN
	TRZ	S,IOACT		;TURN OFF IOACT
	MOVEM	S,DEVIOS(F)	;STORE BACK
	POPJ	P,		;AND JOB WILL START AT ERRHDV.


;ROUTINE TO HALT A JOB WHEN A DEVICE IS NOT READY FOR I/O
;CALLED FROM XXXSER AT M LEVEL
;CALL	MOVE F,ADDR. OF DEV. DDB
;	PUSHJ P,HNGSTP

INTERNAL HNGSTP
EXTERNAL PJOBN

HNGSTP:	PUSH P,J
	PUSH P,S
	PUSH P,F
	PUSH P,P1		;P1 USED FOR PRINTING PC
	LDB J,PJOBN
	PUSHJ P,GETOPR		;GET OPR LINE
	MOVE	F,-1(P)		;GET ORIGINAL F BACK FOR PRINTING AND STORING NAME
	JUMPE U,HNGSTW		;NO LINE, IGNORE
	PUSHJ P,INLMES
	ASCIZ /
problem on /
	PUSHJ P,ERNAM
	PUSHJ P,INLMES
	ASCIZ / for job /
	PUSHJ P,PJOB		;NOW THE JOB
	PUSHJ P,CRLF
HNGSTW:	MOVSI T2,FLGHNG		;SET TO FLAG HUNG DEVICE
	LDB T1,JBYHNG		;GET INTERRUPT CHANNEL
	PUSHJ P,TSTKOT		;TEST AND TAKE OLD TRAP
	 JRST ABTUUO		;TOOK TRAP
	JRST	ERRDOP		;DEVICE OPER ACTION REQUESTED ERROR

;HERE TO STOP THE JOB ON OPER ACTION REQUESTED. ACS STILL ON STACK,
; MAYBE LINE, MAYBE NOT.
HNSTOP:	MOVEI T1,JDCON
	IORM T1,JBTSTS(J)
	PUSHJ	P,STOP1		;STOP THE JOB CONTINUABLY
	POP P,P1		;RESTORE SMASHED REG USED FOR PC
	POP P,F
	POP P,S
	POP P,J
	JRST WSCHED		;RESCHEDULE
;MONITOR JOB STARTED UP BY SWAPPER CONTEXT PAGE I/O ERROR CODE.

	EXTERN TPOPJ,JBYHNG,TSTKOT,ABTUUO
	EXTERN ESTOP,MONSTR

ERRSWP::MOVEI	T2,ESTOP	;WHERE TO STOP
	JSP	T1,MONSTR	;SETUP ACS, PDL, CLEAR INTERRUPTS
	MOVEI	T1,ALRACT
	IORM	T1,ALR620
	PUSHJ	P,GETOPR	;NOW PRINT ON OPR CONSOLE
	PUSHJ	P,ERROP1
	PUSHJ	P,INLMES
	ASCIZ	"context page I/O error"
	PJRST	ERRCIO		;GO DO THE RIGHT STUFF FOR THE FRAME.
COMMENT ;@@SUBROUTINE ERRSET/ERRSES/ERRSEX/HLTTRP
@@PURPOSE SETUP J TO RELEVANT FRAME NUMBER, STORE EXIT STATUS IN THE
CONTEXT PAGES OF THE FRAME.
HALT COMMAND CALLS AT HLTTRP TO INTERRUPT PARENT.
@@ENTRY	CONTEXT PAGES AT %UPT,%UPS,%UPX AT ENTRIES ERRSET,ERRSES,ERRSEX
	P1/PC OF ERROR
@@ACCUM T1-T4 (MUST SAVE SAME ACS THAT STOP1 DOES)
@@EXIT NON-SKIP IF NO MESSAGE TO BE PRINTED
	SKIP IF NO TRAPHANDLER OR ENABLED PARENT FOR CONDITION, PRINT MESSAGE
@@RESTRICTIONS ONLY CALLED AT UUO LEVEL.
@@FUNCTION SETUP J FROM JOB IF CALLED AT ERRSET. CHECK J, CRASH IF
OUT OF BOUNDS.
INCREMENT EXIT COUNT IN UPT, STORE PC, LAST UUO PC, AND IF
ENABLED PARENT OR TRAPHANDLER, FIRE UP SOFTWARE INTERRUPT IN
THEM.
@@;


EXTERNAL UPTJOB,PRQM,CPOPJ1,JOBMAX,JBYEXC,IPOPJ1,TAKTRP,JBTSTS
EXTERNAL UPTEPC,UPTEUP,UPTECN,JBTFTR

ERRSES:	MOVEI	T4,%UPS		;CONTEXT PAGES IN %UPS
	JRST	ERRSE0
ERRSEX:	SKIPA	T4,[%UPX]	;CONTEXT PAGES IN %UPX
ERRSET:	MOVEI	T4,%UPT		;CONTEXT PAGES IN %UPT
ERRSE0:	MOVE	J,UPTJOB(T4)	;GET CURRENT JOB NUMBER IN J
	SKIPE	J		;NULL JOB DOESN'T GET ERRORS.
	CAILE	J,JOBMAX	;LEGAL?
	STOPCD			;NO
	MOVEM	P1,UPTEPC(T4)	;REMEMBER IT
	MOVE	T1,UPTPDL(T4)	;GET PC OF LAST UUO
	MOVEM	T1,UPTEUP(T4)	;LAST TOP LEVEL UUO OR FAULT PC
	SETZ	U,		;NO LDB YET - MAYBE TTY FINDING ROUTINE WILL SET IT UP, MAYBE NOT.
				; ZERO IT NOW SO KJSTOP WON'T BE FOOLED
	AOS	UPTECN(T4)	;INCREMENT COUNT OF TIMES JOB EXITED.
HLTTRP:	PUSH	P,J		;SAVE CALLER'S J
	LDB	J,PRNTBP(J)	;GET CALLER'S PARENT, IF ANY
	JUMPE	J,IPOPJ1	;IF NONE, JUST DO MESSAGE STUFF
	LDB	T1,JBYEXC	;GET INTERRUPT ASSIGNMENT
	JUMPE	T1,HLTTR1	;JUMP IF INT NOT DESIRED AT PRESENT
	PUSHJ	P,TAKTRP	;ELSE GIVE PARENT THE TRAP
	POP	P,J
	POPJ	P,		;AND GIVE CALLER NON-SKIP - JUST STOPS THE FRAME.
HLTTR1:	MOVEI	T1,EXCFLG
	IORM	T1,JBTSTS(J)	;SET THIS FOR THE PARENT
	JRST	IPOPJ1		;GET J OFF STACK AND RETURN

; Routine to print frame exit error code (octal or SIXBIT), followed by
; "at user xxxxxx"

FEXPRT:	MOVE	T2,%UPT+UPTELC	;Pick up error code
	TLNE	T2,-1		;Skip if octal
	  JRST	[PUSHJ	P,PRNAME
		 JRST	FEXPR1]
	MOVEI	T1,(T2)		;Set up for octal type-out
	PUSHJ	P,OCTPNT
FEXPR1:	PJRST	UUOPCP		;Remainder of message


COMMENT ;@@SUBROUTINE ERRTTY
@@PURPOSE FIND AN LDB TO PRINT MESSAGE ON
@@ENTRY J/FRAME NUMBER
@@ACCUM ??
@@EXIT U SETUP
@@;

EXTERNAL TTYERP

ERRTTY:	PUSH	P,F		;DON'T SMASH F
	PUSHJ	P,TTYERP	;GET F AND U SETUP
	  JRST	ERRTT1		;MAYBE HAVE TO GET OPR LDB
	POP	P,F		;RESTORE F
	PJRST	CRLF		;PRINT CRLF AND RETURN.

ERRTT1:	POP	P,F		;GET F BACK
	LDB	T1,PRNTBP(J)	;IF HAS NO PARENT,
	JUMPE	T1,ERROPR	;THEN GET OPR'S LDB OR CTY.
	SETZ	U,		;MAKE SURE NO MESSAGE COMES OUT
	POPJ	P,		;AND RETURN SILENTLY.

ERROPR:	MOVEI	T1,ALRUSR	;TELL NETWORK LOGGER OPR MESSAGE
	IORM	T1,ALR620
ERROP1:	PUSHJ	P,INLMES
	ASCIZ/?
?error in job /
	PUSHJ	P,PJOB		;PRINT JOB NUMBER
	PJRST	PRQM		;PRINT QUESTION MARK FOR HISTORICAL REASONS
				; (BATCH AND SCRIPT) AND RETURN.
COMMENT ;@@SUBROUTINE ERRFNU
@@PURPOSE FOR ERRORS THAT DON'T PRINT MESSAGES ON OPR CONSOLE IF JOB
IS DETACHED.
@@ENTRY J/JOB
@@ACCUM PRESERVES F
@@EXIT RETURNS U EITHER 0 IF DETACHED, OR LDB ADDRESS OF WHERE TO TYPE MESSAGE
@@;

ERRFNU:	PUSH	P,F		;THIS IS ALMOST RIDICULOUS
	PUSHJ	P,TTYFNU
	POP	P,F
	POPJ	P,		;IN CASE F HAS DDB ASSOCIATED WITH ERROR.
COMMENT ;@@SUBROUTINE EXIFNU
@@PURPOSE CALLED TO FIND TTY LDB IF ANY IF CALLER NOT DIRECTLY ENABLED
FOR EXIT TRAPPING.
@@ENTRY	J/JOB NUMBER
@@ACCUM T1-T4,F,U
@@EXIT U CONTAINS 0 OR LDB ADDRESS.
@@FUNCTION FIND LDB FOR TTY, IF ANY, AND IF THERE IS ONE, WAIT
FOR ANY CURRENT OUTPUT TO COMPLETE AND THEN RETURN WITH LDB ADDRES IN U.
IF THERE IS NO LDB, AND A PARENT (OR LATER, A TRAPHANDLER FRAME) EXISTS,
JUST RETURN WITH U/0, ERROR ROUTINE WILL JUST STOP THE JOB.
IF THERE IS NO LDB AND NO PARENT OR TRAPHANDLER, IF DISCONNECT STATUS
IS CONTINUE OR DETACH, JUST WAIT FOR ATTACH TO HAPPEN.
IF DISCONNECT STATUS IS OTHER THAN THE ABOVE, CAUSE THE JOB TO BE
KILLED BY CALLING MONHNG, CLEAR U SO ERROR ROUTINES DON'T ATTEMPT
TO PRINT MESSAGES, AND RETURN.
@@;

EXTERNAL IFDET,PVYHNG,TTYFUW,MONHNG

EXIFNU:	PUSHJ	P,IFDET		;GET DDB, MAYBE LDB ADDRESS
	  POPJ	P,		;IS ATTACHED, RETURN WITH U SETUP.
	LDB	T1,PRNTBP(J)	;DOES IT HAVE A PARENT?
	JUMPN	T1,CPOPJ	;IF SO, DON'T DO ANY KILLING OR WAITING STUFF
;	DOES IT HAVE A TRAPHANDLER FOR EXITS?
	LDB	T1,PVYHNG	;HAS NO PARENT. SEE WHAT DISCONNECT MOE IS
	CAIE	T1,.PVHDT	;IF DETACH OR
	CAIN	T1,.PVHCN	;CONTINUE ON DISCONNECT,
	PJRST	TTYFUW		;WAIT UNTIL SOMEONE ATTACHES.
	MOVE	T1,J		;NO, DO WHAT DISCONNECT WOULD HAVE DONE
	PUSHJ	P,MONHNG
	SETZ	U,		;CLEAR THIS SO NO MESSAGES COME OUT
	POPJ	P,		;AND RETURN.
COMMENT ;@@SUBROUTINES ERRSCP/ERRSCD
@@PURPOSE ERRSCP -  PRINT FOR LOCATION(PAGE ON KI) X, THEN ERRSCD
	ERRSCD - PRINT AT USER X OR UUO AT USER/EXEC X
@@ENTRY	P1/PC OF ERR
	M/LOCATION IF CALLED AT ERRSCP
	U/LDB TO TYPE ON
@@ACCUM ?
@@EXIT ALWAYS NON-SKIP
@@;

ERRSCP:
IFCPU (KI),<
	PUSHJ	P,INLMES
	ASCIZ	/ for page /
	LDB	T1,[POINT 9,M,26] ;GET PAGE FROM M
	PUSHJ	P,OCTPNT
			;AND FALL INTO ERRSCD
>;END IFCPU (KI)
IFNCPU (KI),<
	PUSHJ	P,INLMES
	ASCIZ	/ for location /
	HRRZ	T1,M	;GET FULL LOCATION
	PUSHJ	P,OCTPNT
			;AND FALL INTO ERRSCD
>;END IFCPU (KI)

ERRSCD:	MOVE	T2,P1	;GET PC INTO T2 FOR PCP
	TLNE	T2,PC.USR	;USER MODE
	JRST	ERRSC1		;PRINT PC AND STOP TTY
ERRSCU:	PUSHJ	P,INLMES	;NO, PRINT WHERE UUO IS
	ASCIZ	/; UUO/
	MOVE	T2,%UPT+UPTPDL
	SUBI	T2,1
ERRSC1:	PUSHJ	P,PCP		;PRINT PC
	PJRST	TCLTTY

;PRINT "AT USER <C(P1)-1>" OR ";UUO AT <C(P1)-1>

ERRSCM:	SOJA	P1,ERRSCD
;ROUTINE TO PRINT M PC AND STOP JOB
;IF IN USER MODE PC WILL PRINT AS "AT USER LOC XXX"
;IF IN EXEC MODE "AT EXEC LOC XXX; EXEC CALLED FORM EXEC/USER/ LOC YYY

UUOPCP:	MOVE T2,%UPT+UPTPDL	;M PC STORED IN JOB DATA AREA
				; FIRST LOC ON PD LIST
	SUBI	T2,1		;POINT TO THE ACTUAL UUO
	PUSHJ P,PCP		;PRINT " AT EXEC XXX" OR " AT USER "
	TLNN	T2,PC.USR	;PC IN USER MODE?
	PJRST	ERRSCU		;NO, TELL HIM WHERE UUO IS
;	PJRST	TCLTTY		;CLEAR TTY INPUT BUFFER AND PUT IT IN MONITOR MODE

;ROUTINE TO CLEAR TTY INPUT BUFFER AND PUT IT IN MONITOR MODE.

TCLTTY:	PUSHJ	P,TTYFND	;GET ORIGINAL U AND F FROM C(J)
	JUMPE	U,CPOPJ		;IF NO LINE, FORGET IT.
TCLTT0:	PUSHJ	P,TSETBI	;CLEAR TYPE AHEAD
	PUSHJ	P,PRRSP1	;PRINT WATCH DATA AND CRLF
	PJRST	TTYSTC		;AND PUT TTY IN MONITOR MODE.

;ROUTINE TO RESET U TO JOB'S LDB IF ANY, PRINT WATCH DATA AND PERIOD,
; STOP TERMINAL, BUT DO NOT CLEAR TYPE AHEAD.
; USED BY EXIT AND EXIT 1, IF JOB IS NOT DETACHED. (SO NEVER COME
; IN WITH OPR'S LDB)

TNCTTY:	PUSHJ	P,CRLF
E1STTY:	PUSHJ	P,PRRSP3	;WATCH DATA, CRLF, PERIOD
	PJRST	TTYSTC		;AND PUT TTY IN COMMAND MODE.

;ROUTINE TO HANDLE TTY ON TIME LIMIT EXCEEDED
; IF DETACHED, PUT IT INTO
; TO WAIT. WHEN IT COMES OUT OF WAIT ON ATTACH,
; JOB WILL RESCHEDULE AND PRINT TIME LIMIT EXCEEDED NEXT TIME
; AROUND THRU RSCHED.
;ROUTINE TO STOP TELETYPE FOR TIME LIMIT EXCEEDED.
; ERRFNU MUST BE SET AS THE TTY FINDING ROUTINE.
; MUST ENTER WITH U SETUP TO LINE OR 0, F SETUP TO DDB ADDRESS OF
; TTY OR 0.

EXTERNAL TTYSOW,CIP6,PJBSTS,TTYFNU,TIOWQ,TTYSTC,PRRSP1,PRRSP3

TLETTY:	JUMPN	U,TCLTT0	;IF LDB, DO NORMAL THING.
	JUMPN	F,TLTOW		;NO LDB, IF DDB, PUT FRAME INTO TO WAIT
	POPJ	P,		;NOTHING, JUST RETURN.

;HERE IF NO LINE, PUT INTO IO WAIT IF THERE IS A DDB
TLTOW:	PUSHJ	P,TTYSOW	;SET OUTPUT WAIT IN SCNSER
	MOVSI	S,IOW	;PUT DDB INTO IOW
	IORM	S,DEVIOS(F)
	MOVEI	T1,TIOWQ
	DPB	T1,PJBSTS
	POPJ	P,		;AND RETURN.
;ROUTINE TO STOP JOB, BUT RETURN TO CALLER AND LET HIM GO THRU NORMAL USRXIT
; USED FOR BAD INTERRUPT ADDRESS

EXTERNAL KJSTOP,STOP1,USCHED

BISTOP:	PUSHJ	P,KJSTOP	;STOP THE JOB
	MOVEI	T1,CPOPJ	;RETURN WITH A POPJ FROM CLKTRP
	HRRM	T1,%UPT+UPTMUP	;
	JRST	KTRRET

;ROUTINE TO STOP JOB CONTINUABLY

HISTOP:	PUSHJ	P,STOP1		;STOP JOB CONTINUABLY.
	PJRST	WSCHED		;AND CALL SCHEDULER. POPJ RETURN TO JRST ERR???

;ROUTINE TO STOP FOR EXIT 1,

E1STOP:	PUSHJ	P,STOP1		;STOP THE JOB (DON'T SET JERR, SO IT COMES BACK)
	JRST	USCHED		;AND CALL THE SCHEDULER.

;ROUTINE CALLED WHEN IT IS DESIRED TO STOP A FRAME AND INTERRUPT
; ITS PARENT OR TRAPHANDLER BUT NOT STORE AN EXIT CODE OR
; INCREMENT EXIT COUNT IN THE TARGET FRAME. USED FOR HALT COMMAND,
; HALT FRMOP.

TRHALT::PUSHJ	P,HLTTRP	;INTERRUPT TRAPHANDLER OR PARENT IF ANY
	  PJRST	STOP1		;WAS TRAPHANDLER OR PARENT
	PJRST	STOP1		;WAS NO TRAPHANDLER OR PARENT.

;ROUTINE TO PRINT PC AS:
;1) "EXEC LOC XXX" OR "USER LOC XXX"
;CALL:	MOVE T2,PC TO PRINT(LH=PC FLAGS)
;	PUSHJ P,PCP

XMODE:	ASCIZ / at exec /
UMODE:	ASCIZ / at user /

PCP:	MOVEI T1,XMODE		;ASSUME PC IN EXEC MODE
	TLNE T2,PC.USR	;IS IT?
	MOVEI T1,UMODE		;NO, USER MODE
	PUSHJ P,CONMES	;PRINT ONE OR OTHER
	HRRZ T1,T2		;PRINT RIGHT HALF IN OCTAL
				; FALL INTO OCTPNT

INTERN OCTPNT

;ROUTINE TO PRINT 6 DIGIT OCTAL NUMBER
;CALL:	MOVEI U,U DATA BLOCK ADDRESS FOR TTY
;	HRR T1, OCTAL NUMBER
;	PUSHJ P,OCTPNT
;	RETURN T2,PRESERVED,T1 DESTROYED

OCTPNT:	HRLZ T1,T1		;MOVE TO LH FOR ROTATING
	TRO T1,700000		;SETUP AN END FLAG

OCTP1:	ROT T1,3		;GET NEXT OCTAL DIGIT
	TLNN T1,777777		;WAS THAT FLAG?
	POPJ P,		;YES, DO NOT PRINT IT
	PUSH P,T1		;SAVE T1 OVER I/O ROUTINE
	PUSHJ P,PRTNUM	;NO, PRINT OCTAL DIGIT
	POP P,T1		;RESTORE T1
	HRRI T1,0		;CLEAR RH
	JRST OCTP1		;GET NEXT OCTAL DIGIT
;ROUTINE TO ADD 1 TO T1 AND PRINT DECIMAL
;SAME CALL AS OCTPNT

	INTERN DECP1

DECP1:	AOJA T1,RADX10		;ADD 1 AND GO PRINT

;ROUTINE TO PRINT DECIMAL
;CALL:	SAME AS OCTPNT
;T2:	PRESERVED

INTERN RADX10

RADX10:	PUSH P,T2		;SAVE T2
	PUSHJ P,PRTDIG	;PRINT DECIMAL DIGITS
	POP P,T2		;RESTORE T2
	POPJ P,		;AND RETURN

;RECURSIVE DECIMAL PRINT ROUTINE
;CALL:	MOVE T1,DECIMAL NO.
;	PUSHJ P,PRTDIG

EXTERNAL COMTYO		;TELETYPE OUTPUT CHARACTER ROUTINE

PRTDIG:	IDIVI T1,12		;DIVIDE BY 10
	HRLM T2,(P)		;RT ON PD LIST
	JUMPE T1,.+2		;FINISHED?
	PUSHJ P,PRTDIG	;NO, CALL S OR F 
	HLRZ T1,(P)		;YES, GET LAST NUMBER
PRTNUM:	ADDI T1,"0"		;CONVERT TO ASCIZ
	MOVE T3,T1		;PUT CHARACTER IN SCNSER'S AC
	JRST COMTYO		;AND TYPE IT OUT

;ROUTINE TO PRINT "DEVICE XXX"
;	MOVEI F,<ADDRESS OF DEVICE NAME TO PRINT>
;	PUSHJ P,ERNAM

INTERNAL ERNAM

ERNAM:	PUSHJ P,INLMES
	ASCIZ /device /
	SKIPN	F	;IF NO F SETUP,
	SKIPA	T2,[SIXBIT/??????/] ;THEN SAY DON'T KNOW
	MOVE T2,DEVNAM(F)	;NO, GET DEVICE NAME

;ROUTINE TO PRINT SIXBIT NAME
;CALL	MOVE U,ASCII OUTPUT BYTE POINTER
;	MOVE T2,NAME
;	PUSHJ P,PRNAME

INTERNAL PRNAME
EXTERNAL CPOPJ

PRNAME:	MOVEI T1,0
	LSHC T1,6		;SHIFT IN NEXT CHAR.
	JUMPE T1,CPOPJ
	MOVEI	T3,40(T1)	;ASCII VERSION INTO CHREC FOR OUTCHS
	PUSHJ P,COMTYO	;OUTPUT CHARACTER
	JRST PRNAME

;ROUTINE TO PRINT FILE NAME AND EXTENSION IF NONZERO.
; P3/ FILE NAME
; P4/ ZERO OR EXTENSTION TO PRINT

EXTERNAL RELPR

ERFNAM:	MOVE	T2,P3		;FIRST PRINT FILE NAME
	PUSHJ	P,PRNAME
	JUMPE	P4,CPOPJ	;IF NO EXTENSTION, JUST RETURN
	PUSHJ	P,RELPR		;PRINT A DOT
	MOVE	T2,P4		;GET EXTENSTION
	PJRST	PRNAME		;PRINT EXTENSTION AND RETURN.

;ROUTINE TO PRINT OUT CRLF AND A QUESTION MARK FOR SEGCON ERRORS.

CRLFQ:	PJSP	T1,CONMES	;PRINT ? AND CRLF
	ASCIZ/
?/
	LIT
	END
 |k