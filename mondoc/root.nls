
Title: ROOT; Summary of available monitor documentation                   page 1

























            Published:   DECEMBER 30,1980
            System:      930
            Directory:   [3,123054]
            Data base:   INFO
            Path:        ROOT
            Node:        ROOT



























                                       1
Contents: ROOT; Summary of available monitor documentation                page 1

ROOT: Summary of available monitor documentation    6     
   EXTERNAL: External monitor documentation    7     
      CLUBS: The CLUB subsystem    8     
      COMMANDS: Monitor commands in COMCON    8     
         ADRBRK: The ADRBRK command    9     
         SET: The SET commands    10    
      FILESPEC: Standard system file spec definition    11    
      INITIALIZATION: System initialization    12    
      IOIMPM: Events that set IOIMPM    14    
      ONCE: ONCE DIALOG DOCUMENTATION    15    
         ENTER: Entering the ONCE dialog    16    
         ERRORS: Error messages from ONCE    19    
         COMMAN: ONCE dialog commands    27    
         EXAMPL: Example of ONCE dialog    50    
         OTHER: Undocumented commands    51    
      PID: The Processor ID subsystem    52    
      PTYS: Pseudo terminal mechanism    61    
      RIBVAL: Using spare words in LOOKUP blocks    65    
      SEGMENTS: VM-System segment-handling    66    
      SYSNO: System number (name) format    72    
      TIPS: Tips for monitor people    73    
         SATDEBUG: Notes on writing out SATS while debugging    74    
         RIBERR: Deleting Files with RIB Errors    75    
         PACKID: Inconsistent Pack Set ID handling    76    
         BADFOR: Recovery from disk packs with bad format    77    
      TRUFRM: TRU computation formula    79    
      UUO: New UUO documentation    81    
      PROJECTS: Monitor Projects currently conceived    81    
         ENVIRONMENT: Adaptations to Environment    82    
         CAPACITY: Increased Monitor Capacity    83    
         RELIABILITY: Projects to increase reliability    85    
         POLICY: Projects to enhance policy making decisions    87    
         PERFORMANCE: Performance Enhancements    88    
         STRUCTURE: Projects to improve internal structure of monitor    94    
         FUNCTION: Projects to extend functionality of monitor    97    
         SECURITY: Projects to increase security    100   
         MISCELLANEOUS: Projects that don't fit clearly into above categories    101   
   IDEAS: Ideas for Program Enhancements    102   
      CRASH: Idea to speed up crash recovery    103   
      CUSPS: Ideas for Cusp Enhancements    104   
         EDIT10: EDIT10 Enhancements    105   
      MONITOR: Ideas for Monitor Enhancements    106   
   INFO: Using the INFO program    108   
      FILES: The format of the text files    109   
      PUB: Using PUB to prepare formated files    110   
      SPCHAR: Special INFO command characters    112   
      PUBLISH: The PUBLISH command    113   
   INTERNAL: Internal monitor documentation    114   
      P033: Modification history for P033    115   
      P034: Modification history for P034    115   
      SCHEDULER: The Scheduler    176   
         DESCRIPTION: General Scheduler Description    177   
         QUEUE: Queue transitions    185   
      MONINF: Notes on monitor internals    186   
         GENERAL: General information    187   


                                       2
Contents: ROOT; Summary of available monitor documentation                page 2

         PAGING: Paging    188   
         TAPE: Magnetic tape    191   
         SCHEDULER: Scheduler notes    192   
         SCNSER: Tymshare network interface    193   
         ONCE: System initialization code    194   
         ACCOUNTING: Accounting system    195   
         DSKCLN: The DSKCLN Program    198   
         KL10: KL10 information    204   
         FILES: File system    204   
         PI: Software Interrupt System    237   
         UUOCON: Notes on UUOCON Programming    239   
         AC: General AC conventions    241   
      CRSNOT: Notes on Crash Analysis Techniques    242   
      XFRRAT: Disk transfer rate Calculations    253   
      STREAM: Stream Accounting System Record Formats    256   
      ARCHIV: Old memos    269   
         PROJEC: Project code user guide    270   
         CHANEL: Obsolete >16 channel proposal    274   
         FILSPC: New RIB format spec    275   
         FILES: File system structure (incomp)    277   
         PAGE: Old paging memo    279   
         USE: USE    282   
         FILMEM: HOME-BAT blocks (oct 4,75)    292   
         FILNAM: Experimental monitor names    294   
         INTR: Pseudo interrupt system    296   
         UNHAP: Explanation of ALR620 bits    298   
         INDIR: Spec for indirect files    300   
         PDLANL: LISP program to guess PDL space    303   
         ASSLOA: Assembler/Loader wish list    306   
         SUDS: Spec for wonderful SUDS mode    308   
         SLEEP: Clock queue efficiency proposal    310   
         BIO10: Functional spec for block I/O    312   
         BITS: P033 swapper bit descriptions    315   
      PHILOSOPY: Architectural Notes for Tymcom-X    344   
         GENERAL: General Notes about this node    345   
         NETWORK: Network Design philosophy    346   
         INTERRUPT: Interrupts and Sleeping philosophy    347   
         UUOFORMAT: Monitor Call Format Design philosophy    348   
         FRAMECTL: Frame Control philosopy    348   
         PAGING: Paging philosopy    351   
         FILESYSTEM: File System philosophy    353   
         DEVICES: Adding New Devices and Device drivers    355   
         ACCONVENTIONS: AC conventions    356   
         CODING: Coding Guidelines    357   
         CONDITIONALS: Guidelines for conditional assemblies, etc    359   
   PEOPLE: Monitor people    361   
      PHONES: Home and office telephone numbers    362   
      TERMINV: Terminal inventory    363   
   PROCEDURES: Monitor Group Procedures    364   
      XMIT: Monitor transmittal Instructions    365   
      MONREL: Major monitor release instructions    368   
      NEWSYS: Adding or deleting a system    371   
      UPGRADE: Upgrading a KI to a KL    374   
      PATCH: Monitor Patch Procedures    375   
      CRASH: Notes on looking at monitor crashes    378   


                                       3
Contents: ROOT; Summary of available monitor documentation                page 3

      CRALOG: Procedures for logging crashes    389   
      UUOFORMAT: Design considerations for UUO formats    391   
      TAPE-BACKUP: Procedures for backup of monitor files to tape    392   
      BADRIB: Procedure for zapping file with rib error    402   
      MODIFY: Procedures for modifying monitor sources    403   
      MONITOR-NAME: Conventions regarding monitor names    404   
      INTERNAL-RELEASE: Making an experimental monitor    405   
      MEMFILE: Pxxx'MEM file format    408   
      LICENSE: Policy on programs that grant license    409   
   STANDALONE: Stand alone programs    410   
      FTALOD: Magnetic Tape Bootstrap Program    411   
      PAKCOP: Stand Alone Disk Pack Copy Program    414   
   TYMNET: Tymnet documentation    424   
      ECHOING: The deffered echo algorithm    425   
      BASE: The Base-Host communication interface    426   
      BALLS: The character ball protocol    430   
      MUD: Master User Directory information    434   
         FORMAT: Mud file format    435   
         CHARACTERS: MUD character set    435   
         CPARW: CPARW bit definitions    436   
      BLKIO: Base-Host block I/O protocol    437   
   USER: User mode software    439   
      CUSPS: Commonly Used System Programs    440   
         DEFINITION: Definition of a CUSP    441   
         DDT: DDT program    442   
         GFD: GFD program    452   
         LOGINN: LOGINN program    459   
         LOGOUT: LOGOUT program    465   
         MAIL: The MAIL program    480   
         RPG: RPG program    484   
         PROJEC: The project-code verifying program    487   
         VALID: Project-code validator for Acct    491   
      EDITORS: Editor documentation    501   
         EDIT10: The stopgap editor    502   
      LANGUAGES: Language documentation    507   
         XEXEC: Preliminary XEXEC user manual    508   
         MACRO: MACRO bugs    515   
      ROYALTY: Information on Royalty Accounting    517   
      UTILITY: Utility programs    518   
         ASP: Absolute Structuresaving Program    519   
         ASSHOL: Lists AssHoles (SCHPRV)    525   
         ATSIGN: Program to make cref listings    526   
         AUXDDT: AUX circuit Dynamic Debugging Tool    548   
         AUXIO: Aux Circuit and dialout utility    549   
         CACHE: Program to change cache strategy    552   
         COPY: Copy N files to N systems detached    553   
         CRASUM: Extract data from CRALOG    554   
         CRSHID: Program to analize crashes    556   
         DDT: DDT program    559   
         DIRED: Directory editor for ADM3's    569   
         ERRCHK: Disk Error Reporting Program    571   
         FRMDDT: Frame DDT special features    579   
         FSHSPL: Microfiche Generation System    580   
         ICP: Program to monitor system use    612   
         INFRED: Program to display PDP-10 system status    619   


                                       4
Contents: ROOT; Summary of available monitor documentation                page 4

         KAFIX: Patches Fortran-IV SAV files to run on F3    620   
         MASQUE: Masquerade as another user    621   
         MDDT: Monitor DDT    622   
         MONED: Runs MONED1 for all monitors    623   
         MONED1: Generate an experimental monitor    624   
         MHX: Do commands on many systems    628   
         PATLOG: Logs monitor patches easily    629   
         RUB: Set/Clear Restricted User Bit in LUD    630   
         SCAN: Scan stream accounting files    631   
         SCRIPT: Print U W SCRIPT files    633   
         SNARF: Snarfs job from another terminal    634   
         SPELL: Checks and corrects spelling    635   
         SPOOL: A better way to spool files    651   
         SWEET: Master Cref Program    654   
         SYMLOK: Microfiche Location Program    656   
         TAPE: Scan TITO tape directories    660   
         X1200: Xerox 1200 tape writer    662   
         PIP: DEC Peripheral Interchange Program    663   
   FORMAT: System file formats    664   
      LUD: Format of LUD    665   
      DUL: Format of DUL    668   
      STREAM: Format of stream accounting files    669   
      STFILE: Format of system statistics files    682   
      SYMTAB: Format of macro/fail/loader symbol tables    684   

































                                       5
Menu: ROOT; Summary of available monitor documentation                    page 1

7     :EXTERNAL        External monitor documentation
102   :IDEAS           Ideas for Program Enhancements
108   :INFO            Using the INFO program
114   :INTERNAL        Internal monitor documentation
361   :PEOPLE          Monitor people
364   :PROCEDURES      Monitor Group Procedures
410   :STANDALONE      Stand alone programs
424   :TYMNET          Tymnet documentation
439   :USER            User mode software
664   :FORMAT          System file formats















































                                       6
Menu: EXTERNAL; External monitor documentation                            page 1

8      CLUBS           The CLUB subsystem
8     :COMMANDS        Monitor commands in COMCON
11     FILESPEC        Standard system file spec definition
12     INITIALIZATION  System initialization
14     IOIMPM          Events that set IOIMPM
15    :ONCE            ONCE DIALOG DOCUMENTATION
52     PID             The Processor ID subsystem
61     PTYS            Pseudo terminal mechanism
65     RIBVAL          Using spare words in LOOKUP blocks
66     SEGMENTS        VM-System segment-handling
72     SYSNO           System number (name) format
73    :TIPS            Tips for monitor people
79     TRUFRM          TRU computation formula
81     UUO             New UUO documentation
81    :PROJECTS        Monitor Projects currently conceived










































                                       7
Menu: COMMANDS; Monitor commands in COMCON                                page 1

9      ADRBRK          The ADRBRK command
10     SET             The SET commands























































                                       8
Text: ADRBRK; The ADRBRK command                                          page 1

NEW FEATURE: ADDRESS BREAK COMMAND. FORMAT IS:
.ADRBRK <ADDRESS> <ARGS>
-
WHERE ARGS IS A LIST OF ZERO OR MORE OF THE FOLLOWING:
READ - BREAK ON READ WHICH IS NOT AN INSTRUCTION FETCH
WRITE - BREAK ON WRITE
FETCH - BREAK ON INSTRUCTION FETCH
ALL - READ WRITE AND FETCH
NONE - USED TO CLEAR ADDRESS BREAK
MONITOR - USED TO SET AN ADDRESS BREAK FOR MONITOR'S VIRTUAL ADDRESS
	SPACE. NEEDS WC. BREAK ONLY SETUP WHILE THIS JOB IS RUNNING.
	MESSAGE "EXEC ADDRESS BREAK FOR LOC X AT EXEC Y" PRINTED
	IF NO PI IN PROGRESS.
	BE CAREFUL WITH THIS - IT IS POSSIBLE TO CRASH THE SYSTEM
	IN MANY WAYS BY SETTING A MONITOR ADDRESS BREAK AT CLEVER
	PLACES (AT ADDRESS BREAK ROUTINE, FOR INSTANCE).
<NULL> - SAME AS ALL

IF ALL ARGS ARE LEFT OUT, CURRENT ADDRESS BREAK STATUS IS PRINTED.
ALL ARGS CAN BE ABBRIEVIATED TO THEIR SHORTEST UNIQUE FORM.
LOCATION ABKSET IN CLOCK1 CAN BE PATCHED TO JFCL TO STOP ADDRESS
BREAK FROM BEING USED BY COMMAND SO IT CAN BE USED FOR
GENERAL MONITOR DEBUGGING.  THIS IS A KL ONLY FEATURE. NOT PUT
INTO KI BECAUSE MI PROG DISABLE NORMALLY SET, DISABLING ADDRESS
BREAK. /EVS 31-AUG-78
































                                       9
Text: SET; The SET commands                                               page 1

set ATTACH		- bit 1 of JBTPRV is cleared, LOGINN will ask
			  user to attach to this job if it's detached
set NOATTACH		- bit 1 of JBTPRV is set, LOGINN will not ask
			  user to attach to this job if it's detached
set WSMAX <pages>	- set user working set maximum to argument
set CONTINUE		- set bits 19-20 of JBTPRV to 2, detach
			  and continue running on TTY: zapped
set DETACH		- set bits 19-20 of JBTPRV to 1, detach
			  and force ^C on job on TTY: zapped
set LOGOUT		- clear bits 19-20 of JBTPRV, logout
			  job on TTY: zapped
set TIMOUT		- set bits 19-20 of JBTPRV to 3, detach
			  job and force ^C and logout after 15
			  minutes on TTY: disconnect
set SCHPRV		- set bit 23 of JBTSTS - schedule in Q0
set CLRSPR	JL	- clear bit 23 of JBTSTS - normal scheduling
set LIMIT <integer>	- abort job after # trus have elapsed since
			  login, 0 turns off limit.
set HAPPY	OP	- clear the alarm bits
set OPR		OP	- make this TTY: be OPR:
set NOTOPR	JL	- make this TTY: not be OPR:
set DATE <date>	OP	- set the system date
set TIME <time> OP	- set the system time of day


































                                       10
Text: FILESPEC; Standard system file spec definition                      page 1

filespec	::= [<device>] [<username>] <filename> [<extension>]
		::= [<device>] <filename> [<extension>] [<ppn>]

device		::= <6-sixbit-chars> ":"

username	::= "(" <12-sixbit-chars> ")"

filename	::= <6-sixbit-chars>

extension	::= "." <3-sixbit-chars>

ppn		::= "[" <gan> "," <uun> "]"

gan		::= <6-octal-digits>	; global account #

uun		::= <6-octal-digits>	; universal user #









































                                       11
Text: INITIALIZATION; System initialization                               page 1

	System Initialization..General Flow and Obscure Facts
18 April 79 /AAA

LINTAB is assembled in COMMON with special bits set in the LH
of entries for lines 0,1,2,3 and 4.  These bits trigger action
at run-time.

Line 0 has TTVINI (=200) set.  This triggers ONCE code.
Lines 1-4 have TTVIN2 (=400) set, triggering action by a
special SETUUO executed  by DSKCLN.

1.  ONCE code calls TTYINI, which forces an INITIA command
(TTFCXI) on all lines having TTVINI set.

2.  COMCON sees the forced INITIA command, performs .R INITIA
for that line (0)

3.  Soon after SCNSER begins running, it sends a type 42 message
(request for supervisor to send back date/time).

4.  INITIA knows to do different things depending on what line
it has been run from.  From line 0 it knows to do .R DSKCLN;
It does so, effectively turning into DSKCLN.  Now the
system is supershut running DSKCLN as the only job.

5.  When it finishes successfully, DSKCLN issues the special
"finish auto-restart" SETUUO; this code (in SCNSER)
forces an INITIA command (TTFCXI again) on any lines having
TTVIN2 set in LINTAB.  

6.  This results in INITIA jobs firing up on lines 1,2,3 and 4.
The job on 1 does a .R CHKPNT;
The job on 2 does a .R COPYCR;
The job on 3 waits around, remaining as INITIA, watching
to see that CHKPNT gets started OK.
(The job on 4 goes away immediately.  COMMON could be changed
to eliminate the TTVIN2 on line 4).

7.  When INITIA sees CHKPNT get started OK, it begins a 3-minute
wait for CHKPNT to init the ACT device.

8.  Meanwhile CHKPNT starts waiting forever for the date &
time to get set before it inits the ACT device (we don't want
bad date-stamps to get into the accounting stream).

9.  Whenever SCNSER receives a type 43 supervisor time info
message, it sets the date & time.  This frees CHKPNT to 
ACT.

10.  When INITIA times out the 3-minute wait, or whenever it sees
CHKPNT init ACT, it looks to see if the network ever sent
date & time.  If not, INITIA un-supershuts the system.  If date
and time were received, INITIA un-shuts the system completely,
types the "...INITIALIZATION COMPLETE <GMT DATE-TIME> "
message, and logs off.


                                       12
Text: INITIALIZATION; System initialization                               page 2


Therefore
---------
If the network NEVER sends date & time, the system comes up
SHUT, and the first person in (hopefully OPER) is asked by
LOGINN to set it.

If the network is just a bit slower than 3 minutes in sending
date & time, the system will come up SHUT and nobody will be
asked to set date.

If the network is prompt in returning date & time (usually is)
then the system comes up un-shut, normally.












































                                       13
Text: IOIMPM; Events that set IOIMPM                                      page 1

Causes for IOIMPM to be set:

Attempt to do super USETI and doesn't have RA
Attempt to do super USETO and doesn't have WA
Attempt to do USETO on lookup only file
OUTPUT or OUT UUO and no ENTER done.
Attempt to write on an append only file.

Bad MTAPE UUO function.
Attempt to set even parity and tape isn't IBM mode 7 track.

RIB error for file.

The following conditions also set IOIMPM, and are considered
monitor problems:

SIMIO got unexpected error return from VMAP CHANIO - 
file page <= 0, current protection illegal, MAP of lookup only file,
bad super map name, no file open on channel

Unexpected fatal error from tape transfer - command reject in
channel status (bad channel command list) or "not capable" error
from tape drive.


































                                       14
Menu: ONCE; ONCE DIALOG DOCUMENTATION                                     page 1

16     ENTER           Entering the ONCE dialog
19     ERRORS          Error messages from ONCE
27    :COMMAN          ONCE dialog commands
50     EXAMPL          Example of ONCE dialog
51     OTHER           Undocumented commands




















































                                       15
Text: ENTER; Entering the ONCE dialog                                     page 1

The "once" dialogue is used to examine and change parameters
of the disk system. There are two ways in which the once
dialogue is entered. The first way is for the operator to set
sense switch 4 and give the command "FILES" when the prompt
is typed. (The prompt is ">").
The other method in which the "once" dialogue is
entered is as a result of errors detected in the "home" blocks
on the disk as the system is brought up. The home blocks store
information about the configuration of the disk system.
















































                                       16
Text: ENTER; Entering the ONCE dialog                                     page 2

There are three classes of errors which may be detected on
bringing up the system. The first class is extremely minor
(i.e. a unit off-line) and the system will just print a
message telling of the condition. The second class contains
those errors which may need fixing, but which the system
can "live with". These are errors such as the drum being off-line
so that its swapping space can not be used. This class
of errors results in the question

MINOR ERRORS - BRING SYSTEM UP ANYWAY? 

A positive answer will result in the system being started.
A negative answer will cause the message

ENTERING ONCE DIALOGUE

and the once dialogue will be started.








































                                       17
Text: ENTER; Entering the ONCE dialog                                     page 3

The third class of errors are those which the system can not
accept (i.e. part of
a file structure missing). This results in the message

ERRORS WHICH PREVENT BRINGING SYSTEM UP
ENTERING ONCE DIALOGUE



















































                                       18
Text: ERRORS; Error messages from ONCE                                    page 1

The following is a list of the errors which may be output:

BPA IS OFF-LINE
DO YOU WANT IT TO BE 1)ON-LINE, OR 2)DOWN? (TYPE #)

(the message may say BPB instead of BPA) this message
indicates that the controler is off-line (turned off, in local
etc.) if it should be off-line (for example if the
drum is sick and the controler turned off) the operator
should type 2<return>. If the controler should be on-line, turn
it on-line and type 1<return>. The controler will then be checked
again to make sure it is really on-line.













































                                       19
Text: ERRORS; Error messages from ONCE                                    page 2

BPA3 IS OFF-LINE

one of the units is off-line, this may be an expected condition
and the system will try to come up anyway. (the unit might be a
spare drive which is turned off)




















































                                       20
Text: ERRORS; Error messages from ONCE                                    page 3

BPA3 IS WRITE PROTECTED
DO YOU WANT IT TO BE 1)WRITE-ENABLED, OR 2)WRITE-PROTECTED? (TYPE #)

This is much like the controler off-line message. It is never
normal for a unit to be on-line and write-protected.




















































                                       21
Text: ERRORS; Error messages from ONCE                                    page 4

BPA1 FIRST HOM BLOCK HARDWARE READ ERROR
BPA1 SECOND HOM BLOCK HARDWARE READ ERROR
BPA1 FIRST HOM BLOCK CONSISTENCY ERROR
BPA2 SECOND HOM BLOCK CONSISTENCY ERROR

These are all errors detected while trying to read the home blocks.
Each unit has two copies of its home blocks. Unless both blocks
are bad, the good block will be used. In this case simply report
the problem to operating systems. If both blocks are bad, the
system will assume that the unit is not in a file structure,
has no swapping space, etc. this may lead to other error messages
which will cause you to need the once dialogue but in itself is
considered a minor error.












































                                       22
Text: ERRORS; Error messages from ONCE                                    page 5

MORE THAN ONE LAST UNIT IN ACTIVE SWAPPING LIST

More than one unit was found which indicated it was the end of the
list of units to swap on. This error forces the once dialogue.





















































                                       23
Text: ERRORS; Error messages from ONCE                                    page 6

MORE THAN ONE LAST UNIT IN STR DSKB

Similar to above but for a file structure, this error
forces the once dialogue.





















































                                       24
Text: ERRORS; Error messages from ONCE                                    page 7

NO UNITS IN ACTIVE SWAPPING LIST

The are no units which indicate they are to be used for swapping.
This error forces the once dialogue.

LAST UNIT IN ACTIVE SWAPPING LIST NOT FOUND

This error gives the option of using the once dialogue but does
not force it.

TWO LOGICAL UNIT 2'S FOUND IN ACTIVE SWAPPING LIST

This error gives the option of entering the once dialogue.

LOGICAL UNIT 3 MISSING FROM ACTIVE SWAPPING LIST

Again an error which gives the option of entering the once dialogue.








































                                       25
Text: ERRORS; Error messages from ONCE                                    page 8

LAST UNIT WASN'T FOUND IN STR DSKB
TWO LOGICAL UNIT 4'S FOUND IN STR DSKB
LOGICAL UNIT 1 MISSING FROM STR DSKB

All of the above errors force the once dialogue.

?NO STR'S IN "SYS" SEARCH LIST

The "SYS" search list indicates which STR's to use when trying
to access SYS (i.e. the R command or when logging in).
This error forces the once dialogue.

TWO LOGICAL STR 2'S FOUND IN "SYS" SEARCH LIST
LOGICAL STR # 1 MISSING FROM "SYS" SEARCH LIST

These errors force the once dialogue.









































                                       26
Menu: COMMAN; ONCE dialog commands                                        page 1

28    :TYPE            Typeout commands
42    :CHANGE          Arguments to the CHANGE command
45     REFRES          Refresh a file structure
46     DEFINE          Define a structure
47     ADD             Add a pack to a structure
48     GO              Exit ONCE dialog
49     HELP            Help information


















































                                       27
Menu: TYPE; Typeout commands                                              page 1

29     UNITS           Type Unit parameters
30     STRS            Type Structure parameters
31     SWAP            Type Active swapping list
32     ALL             Type All
33    :UNITNM          Typeout items for units
36    :STRNM           Typeout items for structures
39     BAT             Type Bat block information
40     TSPCB           
41     TRPCB           
















































                                       28
Text: UNITS; Type Unit parameters                                         page 1

TYPE UNITS

This command will type the names of all the units not in a file
structure with their unit id's. Examples:

UNITS NOT IN A FILE STRUCTURE:
BPA0(TYD033),BPA3()

In this case, BPA3 does not yet have a unit id.
















































                                       29
Text: STRS; Type Structure parameters                                     page 1

TYPE STRS

This command will type the names of all structures in the system
and the names of the units in them. It will also give the
unit id's for the units and indicate if the structure needs to
be refreshed. Examples:

DSKB:BPA0(330100),BPA1(330101)

NEEDS REFRESHING DSKB:BPA0(330100),BPA2(330101)

The unit id is enclosed in ().













































                                       30
Text: SWAP; Type Active swapping list                                     page 1

TYPE SWAP

This command will give information about the active swapping
list along with the swapping class and swapping space for each
unit in that list, and the units which have swapping space but
are not in the active swapping list. Examples:

NO UNITS IN ACTIVE SWAPPING LIST

UNITS WITH SWAPPINNG SPACE BUT NOT IN SWAP LIST
BPA0(334),BPA2(200),BPA1(200)

The numbers in () are the number of K allocated for swapping

UNITS IN ACTIVE SWAPPING LIST
BPA0(0:334),BPA1(1:200)
UNITS WITH SWAPPING SPACE BUT NOT IN SWAP LIST
BPA0(200)

BPA0 is swapping class 0 with 334K and BPA1 is
class 1 with 200K.




































                                       31
Text: ALL; Type All                                                       page 1

TYPE ALL

This command is equivalent to
TYPE STRS
TYPE UNITS
TYPE SWAP
TYPE SYS


















































                                       32
Menu: UNITNM; Typeout items for units                                     page 1

34     ID              Type unit ID
35     SWAP            Swapping space on unit























































                                       33
Text: ID; Type unit ID                                                    page 1

TYPE BPA0 ID

This prints the unit id as:

UNIT ID IS TYD033

If no unit id currently exists, the command will type

ZERO UNIT ID - NEW ID NEEDED
















































                                       34
Text: SWAP; Swapping space on unit                                        page 1

TYPE SWAP

This command will give information about the active swapping
list along with the swapping class and swapping space for each
unit in that list, and the units which have swapping space but
are not in the active swapping list. Examples:

NO UNITS IN ACTIVE SWAPPING LIST

UNITS WITH SWAPPINNG SPACE BUT NOT IN SWAP LIST
BPA0(334),BPA2(200),BPA1(200)

The numbers in () are the number of K allocated for swapping

UNITS IN ACTIVE SWAPPING LIST
BPA0(0:334),BPA1(1:200)
UNITS WITH SWAPPING SPACE BUT NOT IN SWAP LIST
BPA0(200)

BPA0 is swapping class 0 with 334K and BPA1 is
class 1 with 200K.




































                                       35
Menu: STRNM; Typeout items for structures                                 page 1

37     OVERDR          Number of blocks for overdraw
38     CRASH           Space for CRASH























































                                       36
Text: OVERDR; Number of blocks for overdraw                               page 1

TYPE DSKB OVERDRAW

This types the number of blocks by which a user is allowed to
exceed his quota when doing output

# OF BLOCKS ALLOWED FOR OVERDRAW PER USER = 500



















































                                       37
Text: CRASH; Space for CRASH                                              page 1

TYPE DSKB CRASH

This types out the amount of space reserved for saving a crash.

K FOR CRASH.SAV = 256




















































                                       38
Text: BAT; Type Bat block information                                     page 1

TYPE BAT

This command is used to list the number of bad blocks and regions
recorded in the BAT blocks on a unit. It responds with

TYPE UNIT NAME

After the unit name is typed, the number of bad blocks and
regions will be printed. Example:

# BAD BLOCKS = 21
# BAD REGIONS = 5













































                                       39
Text: TSPCB;                                                              page 1

$text trpcb;Type number of RIB PCBs.
























































                                       40
Text: TRPCB;                                                              page 1

$menu unitnm;Typeout items for units.
*(mondoc)once.nfo:ID;Type unit ID.
*(mondoc)once.nfo:SWAP;Swapping space on unit.






















































                                       41
Menu: CHANGE; Arguments to the CHANGE command                             page 1

43     GENRAL          General notes
44     SWAP            Change active swapping list























































                                       42
Text: GENRAL; General notes                                               page 1

CHANGING PARAMETERS

The once dialogue is set up with a number of standard options.
In general, the standard options should be used at all times.
The information below should be sufficient for all but very
special cases.

When it is necessary for the once dialogue to ask for a parameter
to be specified, it will print the current value, the minimum
value the parameter may have, and the maximum value the paramter
may have. It will then wait for the new value of the paramter to be
yiped in. If <RETURN> is typed, the value of the paramter remains
unchanged. If certain parameters are changed for an existing
structure or a unit in that structure, it may require that the
structure be refreshed. If this is true, a message will be printed

CHANGE WILL CAUSE STR TO NEED REFRESHING

This is almost always a bad change to make. The best way out is
to type <RETURN> when the paramter is requested.





































                                       43
Text: SWAP; Change active swapping list                                   page 1

TYPE SWAP

This command will give information about the active swapping
list along with the swapping class and swapping space for each
unit in that list, and the units which have swapping space but
are not in the active swapping list. Examples:

NO UNITS IN ACTIVE SWAPPING LIST

UNITS WITH SWAPPINNG SPACE BUT NOT IN SWAP LIST
BPA0(334),BPA2(200),BPA1(200)

The numbers in () are the number of K allocated for swapping

UNITS IN ACTIVE SWAPPING LIST
BPA0(0:334),BPA1(1:200)
UNITS WITH SWAPPING SPACE BUT NOT IN SWAP LIST
BPA0(200)

BPA0 is swapping class 0 with 334K and BPA1 is
class 1 with 200K.




































                                       44
Text: REFRES; Refresh a file structure                                    page 1

REFRESH

This command is used to refresh a file structure. It is normally
only used when a file structure is being built on a fresh set
of packs. The once dialogue will respond with

TYPE STR NAME TO BE REFRESHED

The user then types the name and that structure is refreshed.
















































                                       45
Text: DEFINE; Define a structure                                          page 1

DEFINE

This command is used when first bringing up a system with a
blank set of packs. It asks which packs belong in the
structure being defined. It will set the parameters for that
structure and for all the units put into that structure to
standard values. If the packs are really blank, it may ask for
unit id's for some of the units, If thhis is necessary, the
name of the unit will be printed before the question is asked.

DEFINE
TYPE STR NAME TO BE DEFINED
DSKB (typed by user)
TYPE NAMES OF PHYSICAL UNITS IN STR, EXTRA CR WHEN DONE
BPA0 (these are typed by user)
BPA1
BPA2

At this point, you may be asked for some unit id's as noted above.






































                                       46
Text: ADD; Add a pack to a structure                                      page 1

ADD

This command is used to add a unit to an already existing structure.
The parameters for the unit to be added will automatically be set
to standard values. You may be asked for a new id as above.

ADD
TYPE STR NAME TO ADD A UNIT
DSKB (typed by user)
TYPE UNIT NAME TO ADD
BPA0 (typed by user)

In either of the above cases (DEFINE or ADD), the message

UNIT HAS SWAPPING SPACE, SUGGEST CHANGING SWAPPING LIST

may be printed. This indicates that some swapping space has been
assigned on that unit and the CHANGE SWAP command should be
used to put the unit in the active swapping list.






































                                       47
Text: GO; Exit ONCE dialog                                                page 1

GO

This command indicates that the once dialogue is to be terminated
and the system brought up. It will always be the last command
given to the once dialogue.

When the system is brought up with the once dialogue and a unit
has bad "BAT" blocks, the following will be asked:

DO YOU WANT TO INITIALIZE THE BAT BLOCKS ON THIS UNIT?

A positive answer will result in

NOT NORMALLY DONE, ARE YOU SURE?

A positive answer to this question also will result in the BAT
blocks being rewritten to indicate that there are no bad spots
on the unit.







































                                       48
Text: HELP; Help information                                              page 1

The once dialogue will print a * and wait for a command to be
yiped. You can always type HELP to get a brief description
of the commands that can be typed. The once dialogue is used
both to find the current state of the structure information
and to change things.




















































                                       49
Text: EXAMPL; Example of ONCE dialog                                      page 1

Below is an example of bringing the system up after diagnostics
have been run on the drum.

BPA0 FIRST HOM BLOCK CONSISTENCY ERROR
BPA0 SECOND HOM BLOCK CONSISTENCY ERROR

LOGICAL UNIT 0 MISSING FROM ACTIVE SWAPPING LIST

MINOR ERRORS - BRING SYSTEM UP ANYWAY? 
(The return is typed by the user)
ENTERING ONCE DIALOGUE

BPA0 FIRST HOM BLOCK CONSISTENCY ERROR
BPA0 SECOND HOM BLOCK CONSISTENCY ERROR

LOGICAL UNIT 0 MISSING FROM ACTIVE SWAPPING LIST

BPA0 FIRST BAT BLOCK CONSISTENCY ERROR
BPA0 SECOND BAT BLOCK CONSISTENCY ERROR
DO YOU WANT TO INITIALIZE THE BAT BLOCKS ON THIS UNIT?
YES
NOT NORMALLY DONE, ARE YOU SURE?
YES

*CHANGE BPA0
STANDARD VALUES?
YES
ZERO UNIT ID - NEW ID NEEDED
TYD033 (typed by user)
*CHANGE SWAP
STANDARD ACTIVE SWAPPING LIST?
YES
*GO

(the system will now come up)






















                                       50
Text: OTHER; Undocumented commands                                        page 1

There are a number of other commands which may be used to change
paramters of the file system. These commands are not detailed here
since they should be used only on specific instructions from
the operating systems group.





















































                                       51
Text: PID; The Processor ID subsystem                                     page 1




     1.0  PID - PROCESSOR ID MECHANISM

     1.1  Purpose Of PIDs

     PIDs serve two purposes.  First,  they  provide  a  mechanism  by
     which  to charge file storage to a user other than the one owning
     the file's directory.   Second,  PIDs  extend  the  current  file
     protection  scheme  by  allowing a program to place files in disk
     areas other  than  the  one  it  came  from  which  that  program
     (processor)  always  has  access  to  regardless  of who runs the
     program.  The access to all such files is  completely  under  the
     control  of  the processor, since a file with a PID can only have
     its protection changed by  a  program  running  under  that  PID.
     (Normally,  the  owner  of  a  file  can always change the file's
     protection).  Once a file has a PID placed on it, the  protection
     can  be  set  to NO NO NO and the processor can implement its own
     protection mechanism.

     The PID of a file can also be used  as  an  authorization  stamp.
     The  processor can check the PID, and if any unauthorized program
     has attempted to modify the file, the PID will not be the PID  of
     the authorized processor.



     1.2  Definition Of A PID

     A PID is a 36 bit quantity whose left half is  the  UUN  of  some
     valid user and whose right half is an index number.  Under normal
     circumstances, a given user can only manipulate  PIDs  that  have
     his  UUN  in  the leftmost 18 bits and can arbitrarily select the
     index in the right half.  This allows the user  to  allocate  his
     own  PIDs  rather  than  have  some  central  Tymshare  authority
     allocate them serially.

     The value 0, when specified in a PID argument or  returned  as  a
     PID in a UUO, represents the absence of a PID.

     PID values 1-777777 are not settable by  a  program  unless  that
     program  has  WF  or  WA  license.   These  PIDs are reserved for
     systems use.



     1.3  How PIDs Are Obtained

     1.3.1  Files - A file  can  be  given  a  PID  by  having  a  job
     authorized  to give the PID out do an ENTER or RENAME on the file
     with the new PID in .RBPID.  A PID setting of zero specifies  and
     indicates  no  PID.  A job is authorized to give out a PID if any
     of the following are true:



                                       52
Text: PID; The Processor ID subsystem                                     page 2

     1.  The job has WF license.  The PID can be any value.
























































                                       53
Text: PID; The Processor ID subsystem                                     page 3

                                                                Page 2


     2.  The UUN of the PID is the UUN of  the  executing  job's  AUN.
         This  authorization  is  used  mostly when installing PIDs on
         executable files (the processors).

     3.  The PID to be put onto the file is the same as  that  of  the
         executing  program  (see  section  on  how  programs get PIDs
         associated with their execution.) This authorization is  used
         when  a  processor  wishes to create a data file belonging to
         that processor.

     4.  The PID is zero.  (Any job can clear a PID on a  file  if  it
         has at least append access to the file.)

     A job can put a valid PID onto a file if it has WF license or the
     following are all true:

     1.  The job has ENTER or RENAME access to the file

     2.  The job is authorized to give out the new PID

     The  following  is  the  algorithm  for   PID   handling   during
     ENTER/RENAME:


     For all RENAMEs and ENTERs, the old PID is always cleared.   This
     forces a processor to always specify the PID directly, preventing
     the inadvertant spread of the PID.  Clearing the PID  on  RENAMEs
     and  supercedes also prevents programs from renaming files with a
     processor's PID to another name or another directory, which would
     then cause the processor to lose track of the file.  (A processor
     can have files with its PID and not be able to read the UFD  that
     the files are in.)

     The new PID for the  file,  if  any,  is  checked.   If  the  PID
     specified  in .RBPID is zero or -1, the file's PID is set to zero
     (no PID).  This is allowed because the user can force the  file's
     PID to zero anyway by doing an updating ENTER.  If the PID is not
     zero or -1, an authorization check is done to see if the job  can
     give  the  PID  out.  If not, the file's PID will be set to zero.
     If the job is authorized the file's PID is set to  the  requested
     value.

     If .RBPID is unspecified (i.e.  count in  an  extended  ENTER  or
     RENAME  is less than .RBPID or short ENTER or RENAME is done) the
     PID argument will be taken to be zero.  This means that any ENTER
     or RENAME on a file will result in that file's PID getting set to
     zero unless .RBPID is specifically set to a non-zero value.


     It would not make sense to make the ENTER or RENAME fail if a job
     was  not authorized to give out a file's PID, since the processor
     could make this happen by protecting the  file  RD  RD  RD.   The


                                       54
Text: PID; The Processor ID subsystem                                     page 4

     owner  cannot  change  the protection of a file with a PID unless
     the owner is authorized to give out the file's PID himself.























































                                       55
Text: PID; The Processor ID subsystem                                     page 5

                                                                Page 3


     1.3.2  Programs - A  PID  becomes  associated  with  a  program's
     execution  if  the file from which the program was run has a PID.
     As with license, the PID associated with the program's  execution
     disappears  if  the  user  meddles  with the program (provides an
     argument to the START command, etc.)



     1.4  Program PID Manipulation

     A new UUO, PIDSET, will be implemented.   Its  argument  will  be
     either  0  to  clear  the program's current PID or a non-zero PID
     value which will be  interpreted  as  a  request  to  change  the
     program's  current  PID to the specified value.  When a processor
     changes its PID with this UUO, the old PID is  saved  if  it  was
     non-zero.  A program can set its PID to be either 0, the original
     PID of the processor running from the current program, or any PID
     that  the  username  that  the  processor  is  running  under  is
     authorized to give out (that is, those PIDs whose UUN matches the
     user's  AUN UUN).  The original motivation for providing this UUO
     is to allow processors to turn off their PID during RUN,  RUNSEG,
     and  GETSEG  UUOs,  which do not provide any extra argument space
     for a PID access/no PID access argument.



     1.5  Effect Of PIDs

     1.5.1  On Storage Accounting - Bit 6 in .RBLIC will be set if and
     only  if  the  PID for the file is non-zero.  This bit appears in
     the UFD entry for the file, so it will be easy for the accounting
     group  to  limit their LOOKUPs to only those files that are known
     to have PIDs.  Since UFDs do not have PIDs, this bit is also used
     in  .RBLIC  of  the  UFD to indicate that the UFD has special PID
     storage accounting.  (It could also be used to flag other special
     accounting  processing,  since  the monitor does not use this bit
     for PIDs specifically.



     1.5.2  On File Access - 

     1.  If a file has a PID, only a job authorized to give  out  that
         PID can change the protection of that file.

     2.  A program running with a given PID can always gain any  level
         of access to a file which has that exact PID, even if the UFD
         is protected against LOOKUPs.  It does this by setting bit 20
         in  the count word of the extended LOOKUP/ENTER/RENAME block.
         If bit 20 is zero, the processor will be given the access  to
         the  file  as if the processor did not have a PID.  Thus, the
         processor  can  selectively  control   its   special   access


                                       56
Text: PID; The Processor ID subsystem                                     page 6

         privilege.

     Note that it is not enough for the job's UUN to match that of the






















































                                       57
Text: PID; The Processor ID subsystem                                     page 7

                                                                Page 4


     file's  PID in order to gain access to the file, even though such
     a job is authorized to put the PID on files.



     1.6  PIDs And Other UUOs

     1.6.1  RUN And RUNSEG - The program's old PID remains  until  the
     new  file  is successfully setup, at which time the program's PID
     is set to the PID of the new file.  In RUN UUOs, if the  PID  for
     the low file is different than that of the high segment file, the
     new PID will be set to zero.  A UUO to set/clear a program's  PID
     will  be  implemented  so  that  a  processor can perform RUN and
     RUNSEG UUOs as if it had normal access to the file in question.



     1.6.2  GETSEG - A program's PID would be unaffected by the GETSEG
     UUO.



     1.7  PIDs And Commands

     1.7.1  Old PID Policy - The RUN, GET, SAVE,  and  SSAVE  commands
     will clear out the program's current PID and saved PID before any
     file accesses are done.   The  CLOSE,  FINISH,  CORE,  and  START
     command  with argument specified are considered meddling and will
     clear out current  and  saved  PIDs.   In  general,  any  command
     operation  that  would  reset the process license will also clear
     out the current and saved PIDs.



     1.7.2  New PID Policy - The program's PID is a  function  of  the
     PID  of  the high segment file, if any, and the low segment file,
     if any.  If the core image is setup from one file  (high  or  low
     segment)  the PID will be set to the PID of that file just before
     completion of the command.  If there  is  both  a  high  and  low
     segment  file  involved,  both files must contain the same PID in
     order for the new program to get a non-zero PID.  This is done so
     that replacing one of two files (high and low seg) will not allow
     the code in the new PID-less file to operate under the old file's
     PID.



     1.8  Unsolved Issues And Questions

     1.  The fact that file access and storage charging are both  tied
         through  .RBPID  means  that  you  can't  do  normal  storage
         charging and have a file belong to a processor, and you can't


                                       58
Text: PID; The Processor ID subsystem                                     page 8

         do  funny  storage  charging  without taking away the owner's
         right to change the protection.























































                                       59
Text: PID; The Processor ID subsystem                                     page 9

                                                                Page 5


     2.  The PID mechanism is setup to only  allow  one  PID  to  gain
         access  to  a  file.   If  two processors with different PIDs
         wanted to access common files  implementing  their  own  file
         protection   schemes,  it  could  not  be  done  unless  both
         processors had the same PID.

     3.  Should a zero UUN with non-zero index be allowed if  the  job
         has WF?

     4.  Are there any problems with TITO with  respect  to  restoring
         files that have PIDs?  TITO must run with WF when it restores
         such files.

     5.  No algorithm used by processors can include searching the UFD
         for  a  user's file with the processor's PID on it, since the
         processor cannot be guaranteed the ability to read the user's
         UFD.   It  can only be guaranteed the ability to lookup files
         with the processor's PID on them.

     6.  Should  TELECOPY  retain  PIDs  during  a  copy?   This   was
         requested  by  the  APL  group so they could backup specially
         protected APL files on some  other  system,  and  if  a  file
         became  damaged  somewhere, TELECOPY could be used to replace
         it.   If  TELECOPY  is  changed  to  do  this,   under   what
         circumstances should it retain the PID?

     7.  A question was brought up concerning billing.  If a processor
         is being billed for a file, what happens if it loses track of
         the file?  (The processor can't necessarily search the UFD)

     8.  Vicious jobs can find usernames that allow new files in their
         UFDs  and  create large files that the owner of the UFD can't
         delete.  The only solutions to this is to 1) allow  owner  to
         delete  files  with  PIDs,  which would defeat the purpose of
         PIDs;  2) Have user call Tymshare, who will  reverse  charges
         and delete the file.  Note that the problem still exists even
         without PIDs to some degree;  although the  owner  can  cause
         the file to be deleted more easily.
















                                       60
Text: PTYS; Pseudo terminal mechanism                                     page 1




                        An Introduction to PTYs




PTYs (pseudo teletypes) are something like internal aux circuits. PTYs
come in pairs. To get a pair of PTYs, you execute

        SETZ    ac,
        CREPTY  ac,     ;(CALLI ac, -'141)
          error return  ;ac/ error code
        normal return   ;ac/ one port #,,the other port #

where <error code> is one of:

        CPNPT%  1       out of PTYs
        CPNRM%  2       no DDB space for another PTY

When the call returns, the two PTYs will be attached to your job as
slave ports; you will normally attach one of the two to some other job
(using the RETACH UUO) as its command port.

Unlike aux circuits, where the "near" end (the one you got from CREAUX
as opposed to the one that's logged-in at the specified host) is always
in image state and is initialized to not echo, PTYs are symmetrical: in
order to get the effect of an aux circuit, you should set the data mode
of "your" end to '214 (no echo, binary).

Doing a circuit zap on either PTY of the pair will free up both PTYs
(the opposite end will get a circuit-zapped interrupt).

Yellow balls and character gobblers and such pass between PTYs exactly
as they would between ends of an aux circuit.

PTYs always apply backpressure when they are overloaded, regardless of
the data mode set. They will never send XONs or XOFFs or bells on their
own. The TYMNET reverse-XON parameter is not simulated -- there is no
state in which sending an XOFF to a PTY will backpressure it. It is
conceivable, though unlikely, that a PTY pair could lose characters; in
such a case, the sender would receive an "output characters lost"
interrupt and the intended recipient an "input characters lost"
interrupt.

Block i/o between PTYs will be extremely fast if both ends are doing
block i/o and using the same buffer sizes.

If you are writing a program that runs some job in a separate frame
attached to a PTY and records its output in a file, you typically do not
want the monitor to do things like expanding HTs into spaces or
inserting rubouts after formfeeds, regardless of what the controlled job
is trying to do to its terminal characteristics. There is a "suppress-
output-translation" bit for this purpose, which can be read, set or


                                       61
Text: PTYS; Pseudo terminal mechanism                                     page 2

cleared (in the usual way) with the  .AXSOX AUXCAL function (fn '71).
























































                                       62
Text: PTYS; Pseudo terminal mechanism                                     page 3




You specify your end's port number to control translation of the other
end's output.  (What to do if the job then begins to output image
characters is still a loose end. The most acceptable alternative
currently apparent is to insert escape characters into the character
stream to indicate the changes of mode).

The terminal characteristics of a PTY (including all of the TYMNET
characteristics, however inappropriate) are always reflected by the
monitor: if you set parameter A to 6, you will then read it back as 6.

There is a new TINASS interrupt, .IATCC (terminal characteristics
changed, cause 10.) which goes off whenever the "other end" changes one
or more of its terminal characteristics (the corresponding POLPRT bit is
LXRTCC, mask = '400).  The recipient of an .IATCC interrupt can use the
.AXTCP (terminal characteristics for PTY) AUXCAL (fn '74) to read the
"next" unread changed terminal characteristic:

        MOVE    ac, [port,,.AXTCP]
        AUXCAL  ac, arg
          error return  ;usual AUXCAL reasons, or not a PTY
        normal return   ;arg/(tc#,,new value) or -1 if none

You specify your end's port number to read the other end's
characteristics.  The "changed" bits are only set when a frame actually
changes a terminal characteristic; they are initially clear, and are not
set by RETACH.

If you are writing a transparent program (like AUXIO) which stands
between a controlled job and a real TTY, you will want to set the
"suppress-output-translation" bit for the PTY you are controlling the
job through, then use the .IATCC/.AXTCP mechanism to pass on the
controlled job's terminal characteristics settings to the real TTY.

To make it easier to live with the characteristics numbers, there is a
new AUXCAL function, .AXTCN (fn '73), which reads and/or sets (in the
usual way) terminal characteristics by number:

        MOVE    ac, [port,,.AXTCN]
        MOVE    arg, [tc#,,new val (or -1 to just read)]
        AUXCAL  ac, arg
          error return  ;bad tc# or new value is illegal
        normal return   ;arg/ tc#,,old value












                                       63
Text: PTYS; Pseudo terminal mechanism                                     page 4





The terminal characteristics, and their numbers, are:

        .TCCRD  0       delay after CR not after LF
        .TCIR   1       input baud rate
        .TCOR   2       output baud rate
        .TCPAR  3       set output parity
        .TCHDX  4       half-duplex
        .TCPA   5       parameter A
        .TCPB   6       parameter B
        .TCPC   7       parameter C
        .TCXON  8       remote XON
        .TCECH  9       remote backspace echo
        .TCRXE  10      reverse XON enable
        .TCTYP  11      terminal type
        .TCNXO  12      never send XON/XOFF
        .TCWID  13      terminal line width
        .TCFC1  14      filler class 1
        .TCFC2  15      filler class 2
        .TCBSP  16      backspace for character delete
        .TCERA  17      backspace/space/backspace for delete
        .TCDEF  18      stay in deferred echo mode
        .TCLCO  19      lower case output only
        .TCTAB  20      hardware HT
        .TCFRM  21      hardware VT/FF
        .TCLCT  22      map lower-case input to upper
        .TCNFC  23      no free CR/LFs on long lines
        .TCPTP  24      paper tape mode


























                                       64
Text: RIBVAL; Using spare words in LOOKUP blocks                          page 1

In general, users should only use .RBVER for version number
of the file. .RBFUT and .RBFT1 are both reserved for future use
by the monitor.

For non-UFDs, users can use .RBMXA, .RBUSD, .RBUNM, and .RBUN1
(words 24,25,27,30) and .RBXT2 (word 32) for storing values
into the RIB for later use.


















































                                       65
Text: SEGMENTS; VM-System segment-handling                                page 1

IDIOSYNCRACIES OF VM-SYSTEM SEGMENT-HANDLING
____________________________________________

1) NEW SYSTEM BELIEVES A "HIGH SEGMENT" EXISTS IF THE
USER HAS SUCCESSFULLY EXECUTED ANY OF THE FOLLOWING:
	REMAP UUO
	RUN UUO/RUN CMD/GET CMD ON FILE WITH EXT=SWR,SHR,HGH
	RUNSEG UUO
	GETSEG UUO

OTHERWISE, ANY PAGES HE MAY CREATE OR MAP BETWEEN PAGE
400 AND PAGE 777 WILL NOT BE CONSIDERED PART OF ANY 
HIGH SEGMENT.

1.1) ALL GETTABS FOR DATA CONCERNING "HIGH SEGMENTS" WILL
FAIL-RETURN, SINCE IN REALITY THERE IS NO HIGH SEGMENT.

2) NEW SYSTEM BELIEVES A "LOW SEGMENT" EXISTS IF THE
USER HAS SUCCESSFULLY EXECUTED ANY OF THE FOLLOWING:
	RUN UUO / RUN CMD / GET CMD     ON A FILE
		WHOSE EXTENSION IS NOT SHR,SWR OR HGH
	CORE COMMAND WITH NON-ZERO ARGUMENT

3) THE NEW SYSTEM DOES NOT PREVENT THE USER PROGRAM
FROM CREATING PAGES "ABOVE" JOBREL OR JOBHRL, OR
FROM VREMOVING PAGES "BELOW" JOBREL/JOBHRL. YOU MUST
KNOW WHAT YOU ARE DOING OF COURSE, BECAUSE MIXING "OLD STYLE"
CORE ALLOCATION UUO'S (CORE,REMAP,SETUWP) WITH 
NEW "VIRTUAL PAGE" UUO'S IS NOT RECOMMENDED.

4) THE NEW SYSTEM WILL GET AN ILL MEM REF IF THE USER
HAS VREMOVED A PAGE "BELOW" JOBHRL/JOBREL AND THEN
ISSUES THE SAVE OR SSAVE XEXEC COMMAND.

5) THE NEW SYSTEM RUN UUO/RUN CMD/GET CMD WILL VREMOVE
THE ENTIRE ADDRESS SPACE OF THE CALLER EXCEPT FOR PAGE 0,
FOLLOWING SUCCESSFUL LOOKUP OF THE FIRST FILE IN THE
FILE SEARCH SEQUENCE (.SHR,.HGH,.SAV,.SWR).

THIS IS IN CONTRAST TO THE FUNCTION UNDER THE PRE-VM
MONITORS, WHERE THE SYSTEM DID NOT ELIMINATE A LOW SEGMENT
UNTIL AFTER CONNECTING SUCCESSFULLY TO THE HIGH SEGMENT.
THIS ALLOWED CERTAIN ERROR CODES TO BE RETURNED TO PROGRAMS
WHOSE RUN UUO WAS IN THE LOW SEGMENT.

THUS THE NEW SYSTEM WILL RETURN ONLY THE "FILE NOT
FOUND" ERROR CODE TO PROGRAMS, REGARDLESS OF THE LOCATION
OF THE RUN UUO CALL IN THE USER PROGRAM. ALL OTHER
ERROR CONDITIONS WILL CAUSE A MONITOR ERROR MESSAGE
AND STOP THE JOB.

6) THE NEW RUNSEG AND GETSEG UUOS VREMOVE
ANY HISEGMENT BEFORE CREATING THE NEW HISEGMENT
MUCH AS THE RUN UUO DOES. HOWEVER IF THE RUNSEG OR GETSEG
IS ISSUED FROM THE LOW SEGMENT, THE "TRANSMISSION ERRORS",


                                       66
Text: SEGMENTS; VM-System segment-handling                                page 2

"NOT ENOUGH CORE", AND "FILE NOT FOUND" ERRORS CAN ALL
BE RETURNED TO THE PROGRAM.

7) THE NEW REMAP UUO CAN FAIL-RETURN WITH PART OF THE
OLD LOWSEGMENT VREMOVED. IF THE USER'S REMAP UUO WAS
ISSUED FROM A POINT IN THE OLD LOWSEGMENT ABOVE THE
REQUESTED NEW JOBREL VALUE, OR ISSUED FROM THE OLD HISEGMENT,
THEN IF REMAP ENCOUNTERS AN ERROR WHEN THE
VM SPACE IS ONLY PARTIALLY CHANGED, IT WILL STOP
THE JOB AND ISSUE THE MONITOR MESSAGE "REMAP UUO
FAILURE, VM SPACE MANGLED."

8) THE CORE UUO WILL NOW ALLOW A LOWSEG OF 256K. (WAS
255K BEFORE).  PERMISSION TO EXPAND/CONTRACT A HISEGMENT
IS DENIED IF THE HISEG WAS MAPPED FROM A .SWR FILE.
THUS OLD PROGRAMS REQUIRING EXPANDABLE/CONTRACTABLE
SHARED HISEGMENTS WILL NOW GET A FAIL-RETURN FROM
CORE UUO, SINCE CORE UUO CANNOT PROVIDE THE PROGRAM
WITH SHAREABLE MEMORY.

PERMISSION TO EXPAND/CONTRACT A HISEGMENT MAPPED
FROM .SHR OR .HGH FILES IS ALWAYS GRANTED.

THE CORE UUO CREATES PRIVATE READ-WRITE PAGES. IT CANNOT
CREATE A CHANGE TO THE CALLER'S "SEGMENT" WHICH IS VISIBLE
TO ANY OTHER CALLER SINCE THE "SEGMENT" IS MERELY A
COLLECTION OF PAGES MAPPED FROM A FILE.  THE CORE UUO
CANNOT CREATE OR DELETE FILE PAGES.

THE CORE UUO WILL CREATE PRIVATE PAGES OR REMOVE THEM.
THIS AFFECTS ONLY THE CALLERS LOGICAL ADDRESS SPACE.
IT WILL KEEP JOBHRL AND JOBREL UP TO DATE.

IF THE USER HAS VCREATED A PAGE "ABOVE" JOBREL/JOBHRL
AND THEN ASKS THE CORE UUO TO EXPAND THE
LOW/HI SEGMENT TO INCLUDE THIS PAGE, HE WILL GET THE
ERROR RETURN BECAUSE CORE UUO WILL "RUN INTO" THIS PAGE
WHICH IT DOES NOT EXPECT TO BE THERE.

9) HOW "SEGMENTS" ARE LOADED:
.SHR AND .HGH FILES
___________________
THESE EXTENSIONS ARE NOW FUNCTIONALLY IDENTICAL. PAGES
FROM THESE FILES ARE MAPPED INTO THE LOGICAL ADDRESS SPACE
BEGINNING AT VIRTUAL PAGE 400 WITH PROTECTION READ-ONLY.
.SWR FILES
__________
THIS EXTENSION IMPLEMENTS SHAREABLE-WRITEABLE HISEGMENTS
SUCH AS THE OLD SYSTEM SUPPORTED.  PAGES FROM .SWR FILES ARE
MAPPED INTO VM SPACE AT 400 WITH PROTECTION
READ-ONLY. HOWEVER THEY ARE MAXIMALLY-WRITEABLE AND MAY
BE MADE READ-WRITE BY A SETUWP CALL. SEE SETUWP.

SWR FILES WILL BE MADE RUN-ONLY IF THE USER IS NOT PRIV-
ILEDGED TO UPDATE THE SWR FILE HIMSELF,EVEN IF


                                       67
Text: SEGMENTS; VM-System segment-handling                                page 3

THE FILE IS NOT DECLARED RUN-ONLY.  THIS PREVENTS
ARBITRARY USERS FROM MEDDLING WITH THE PROGRAM.

SWR FILES WILL ALSO BE MADE RUN-ONLY IF THEY ARE LICENSED,
WHETHER OR NOT THE USER HAS UPDATE PRIVILEDGE ON THE FILE.


.SAV AND OTHER LOWSEG EXTENSIONS
___________________________
THESE FILES ARE ZERO-COMPRESSED. THEY ARE LOADED BY COPYING
THE FILE CONTENTS INTO PRIVATE READ-WRITE PAGES. LOWSEG
PAGES ARE NOT MAPPED FROM THEIR FILES WHEN THE USER IS
IN CONTROL.

10) HOW HISEGMENTS ARE PROTECTED:  THE SETUWP UUO.

ALL PAGES OF HISEGMENTS ARE PROTECTED READ-ONLY AT THE FINISH
OF THE UUO OR COMMAND WHICH ESTABLISHED THE SEGMENT.
PAGES OF .SWR FILES ARE MAXIMALLY-WRITEABLE, WHEREAS
PAGES MAPPED FROM .SHR AND .HGH FILES ARE NOT.
THE SETUWP UUO CAN BE USED BY ANY HISEG PROGRAM
TO WRITE-ENABLE ITSELF, BUT THE FUNCTIONAL RESULT DEPENDS
ON THE EXTENSION.

  THE SIMPLEST CASE IS THAT OF THE .SWR FILE HISEG. WHEN 
THE PROGRAM ISSUES A SETUWP TO WRITE-ENABLE ITSELF, 
THE PAGES ARE MADE READ-WRITE. 
AS A RESULT, IF THE .SWR FILE HISEG WRITES IN ITSELF, THE
FILE PAGES ARE DIRECTLY MODIFIED, AND WILL NATURALLY
REMAIN MODIFIED EVEN IF THE SYSTEM IS SHUT DOWN. WHILE
A .SWR FILE HISEG IS RUNNING AND MODIFYING ITSELF, OTHER
USERS CAN ASYNCHRONOUSLY "CONNECT" TO THE .SWR FILE
AND BEGIN RUNNING.  HOWEVER, THE SAME SITUATION PREVAILED
UNDER THE PRE-VM SYSTEM IN THAT USERS COULD "CONNECT"
AT ANY TIME TO A RUNNING COPY OF THE SEGMENT .

THE NEW FACTOR INTRODUCED IS THAT THE .SWR FILE MODIFIES
ITSELF, NOT A COPY OF ITSELF; SYSTEM CRASHES WILL NOT
ERASE THE CHANGES.

WHEN THE .SHR OR .HGH FILE HISEG ISSUES SETUWP TO
WRITE-ENABLE ITSELF, ALL PAGES IN THE SEGMENT
ARE MADE COPY-ON-WRITE.  WHATEVER PAGES
ARE WRITTEN ON WHILE THE SEGMENT IS WRITE-ENABLED
WILL BECOME PRIVATE READ-WRITE PAGES. WHEN
THE PROGRAM ISSUES ANOTHER SETUWP TO WRITE-PROTECT
THE SEGMENT, ALL PAGES ARE AGAIN MADE READ-ONLY.

THIS SCHEME MAKES .SHR AND .HGH FILES WRITEABLE
BUT MAKES THE CHANGES COMPLETELY PRIVATE. A RUNNING
.SHR OR .HGH FILE CANNOT CHANGE THE FILE FROM WHICH IT
IS MAPPED.  SINCE THE CHANGED PAGES ARE PRIVATE,
NO ONE ELSE CAN EVER SEE THE CHANGES.

OLD PROGRAMS WHICH WRITE IN THEMSELVES BUT WHICH DO


                                       68
Text: SEGMENTS; VM-System segment-handling                                page 4

NOT REQUIRE THE CHANGES TO BE SHAREABLE CAN REMAIN AS
.SHR OR .HGH FILES.  ONLY THOSE PROGRAMS WHICH REQUIRE
SHAREABLE CHANGES NEED TO BE RENAMED AS .SWR FILES.

11) SPECFYING HISEG EXTENSION ON SAVE COMMAND:

THE XEXEC SAVE AND SSAVE COMMANDS STILL WORK AS BEFORE.
HOWEVER IN ORDER TO PRODUCE A .SWR FILE ONE MUST
RENAME THE .SHR FILE OR .HGH FILE AFTER IT IS CREATED.

12) NEW SYSTEM ERROR MESSAGES AND RETURNS

THE RUN/GET COMMANDS AND RUN/RUNSEG/GETSEG UUO'S RETURN
FEWER ERROR CONDITIONS TO THE PROGRAM, AS DESCRIBED ABOVE.
WHEN THEY STOP THE JOB WITH A MONITOR ERROR MESSAGE,
PORTIONS OF THE ADDRESS SPACE ARE VREMOVED:
RUN UUO: ALL PAGES EXCEPT PAGE 0
RUNSEG/GETSEG: ALL PAGES ABOVE 400

THIS ENSURES THAT THE USER CANNOT TAKE ADVANTAGE OF
PARTIALLY-LOADED PROGRAMS.

13) RESET UUO:

THE VM SYSTEM RESET UUO WILL NOT CHANGE THE PROTECTIONS
OF ANY HISEG TO READ-ONLY, AS DID THE OLD RESET UUO.

14) LICENSED PROGRAMS:

A NEW POLICY EXISTS CONCERNING 2-SEGMENT PROGRAMS WITH
LICENSE.  IF A HIGH FILE (SHR,SWR OR HGH) REQUIRES A LOW
FILE TO ALSO BE LOADED, THEN BOTH FILES MUST HAVE THE
SAME LICENSE PUT ON THEM. IF LICENSES ARE DIFFERENT ON
THE TWO FILES, ONLY THOSE LICENSES COMMON TO BOTH WILL BE
CONSIDERED IN SETTING PROCESS LICENSE.

15) WORKING-SETS:

A NEW XEXEC COMMAND "SET WSMAX" IS IMPLEMENTED. THE USER
CAN SET THE "WORKING-SET LIMIT MAXIMUM" VALUE TO ANY
VALUE BETWEEN 3 AND 512 PAGES WITH THIS COMMAND. THIS
MAXIMUM FUNCTIONS AS A CEILING ON THE PROGRAM-SETTABLE
"WORKING-SET LIMIT" SETTABLE BY THE WSCTL UUO.

DURING ANY PROGRAM EXECUTION THE THE WSCTL UUO
CAN SET THE WORKING-SET LIMIT TO ANY VALUE BETWEEN 3 AND
THE WORKING-SET LIMIT MAXIMUM.

A RESET UUO WILL SET THE WORKING-SET LIMIT BACK TO THE
WORKING-SET LIMIT MAXIMUM VALUE.  THUS EVERY RUN UUO OR
RUN/GET COMMAND WILL RE-ESTABLISH THE MAXIMUM.

THE MAXIMUM IS INITIALIZED TO 512 PAGES ON LOGIN.

16) VIRTUAL-MEMORY UTILIZATION INFORMATION:


                                       69
Text: SEGMENTS; VM-System segment-handling                                page 5


A NEW XEXEC COMAND "VMINFO" PRINTS ON THE TERMINAL INFORMATION
ABOUT EXISTENT PAGES, WORKING-SET SIZES AND MAXIMA, AND
ULTIMATELY, (FUTURE ADDITION)  PAGE-FAULT RATE.





















































                                       70
Text: SEGMENTS; VM-System segment-handling                                page 6

IDIOSYNCRACIES OF VM-SYSTEM INPUT-OUTPUT
________________________________________

THE SYSTEM DOES NOT DETECT ILLEGAL ADDRESSES IN
USER I/O REQUESTS UNTIL AFTER I/O HAS BEGUN.  THE
OLD SYSTEM CHECKED ALL USER ADDRESSES BEFORE STARTING
ANY I/O, BECAUSE PHYSICAL I/O WAS DONE DIRECTLY TO
USER MEMORY.

THE NEW SYSTEM DOES PAGE MAPS AND BLT'S. NO PHYSICAL I/O
IS DONE TO USER MEMORY.  THE MONITOR KEEPS A PAGE BUFFER
WHICH IT FILLS BY A MAP UUO, AND THEN DOES A BLT INSTRUCTION
TO INPUT DATA TO THE USER.

IF THE I/O REQUEST BEGINS IN LEGAL MEMORY BUT CROSSES A
PAGE BOUNDARY INTO AN ILLEGAL ADDRESS, THE BLT INSTRUCTION
WILL PAGE FAULT AT THE ILLEGAL ADDRESS AND THE USER
WILL GET THE "UUO SPECIFIES ILLEGAL ADDRESS" ERROR MESSAGE.
HOWEVER SOME DATA WILL ALREADY HAVE BEEN TRANSFERRED TO/FROM
USER SPACE.

VERIFICATION OF DATA TRANSFER
_____________________________

DURING BUFFERED OUTPUT, THE USER IS NOT GUARANTEED THAT DATA
IS ON DISK UNTIL THE CHANNEL IS CLOSED OR RELEASED.

DURING DUMP OUTPUT, DATA IS GUARANTEED TO BE ON DISK WHEN
THE UUO SUCCESSFULLY RETURNS TO THE USER.

BUFFER ALLOCATION
-----------------

THE SYSTEM ALLOCATES BUFFERS IN USER SPACE ACCORDING TO JOBFF.
THEREFORE IF THE PROGRAM VCREATE'S OR VMAP'S ANY
PAGE "ABOVE" JOBFF, HE SHOULD BE CAREFUL TO ADJUST JOBFF
SO THAT SUBSEQUENT BUFFER ALLOCATION WILL NOT FAIL DUE
TO "RUNNING INTO" THE CREATED/MAPPED PAGE.



















                                       71
Text: SYSNO; System number (name) format                                  page 1

Note: the following is subject to change without warning, if there
	is a need to extract any field there is (will be) a gettab
	to provide the necessary field which should be used rather
	than scanning the system-name string.

<system-name>	::= <site><host-no>"-"<mon-version>
<site> 		::= alphabetic site code (any length)
<host-no> 	::= decimal host number within network (any length)
<mon-version> 	::= "P"<major>"/"<minor>[<exp#>]["-"<patch#>]
<major> 	::= numeric version number (decimal)
<minor> 	::= alphabetic version number
<exp#> 		::= experimental release number (decimal)
<patch#> 	::= patch count (decimal)












































                                       72
Menu: TIPS; Tips for monitor people                                       page 1

74     SATDEBUG        Notes on writing out SATS while debugging
75     RIBERR          Deleting Files with RIB Errors
76     PACKID          Inconsistent Pack Set ID handling
77     BADFOR          Recovery from disk packs with bad format





















































                                       73
Text: SATDEBUG; Notes on writing out SATS while debugging                 page 1


While debugging, it is important not to bring the system up
without running DSKCLN in fix mode if the last monitor crash
happened after file pages were allocated in the SATS but before
the SATS get written out. A way to avoid having to run DSKCLN
after many crashes is to PUSHJ to SATONC (should only do this at
UUO level) until SATWRT becomes -1.


















































                                       74
Text: RIBERR; Deleting Files with RIB Errors                              page 1

A file with a RIB error can only be deleted by deleting
its UFD entry. The lost pages will be recovered by DSKCLN.
However, you can only risk writing the UFD entry back out
if no one is using the directory. Another approach is
to read in the bad RIB, make sure there are no I/O errors
reading it, look at the data to make sure no one else is
using the page for another RIB or data page for another file,
and set its contents to a RIB with no pointers, RIBALP zero,
make sure PPN, NAM, and EXT match that of the UFD entry,
clear RIBSTS bits that say RIB error, make sure RIBCOD and
RIBSLF are setup properly. If all this is not done, the
system can crash when it consistency checks the RIB.
Also be aware that the core pages used by the regular paging
system and the PCB system are different, and even if you map
the RIB in and change it and write it back out, a copy of the
old data may still exist in the RIB PCBs. Usually, if the
system has a load on it the offending RIB will leave the PCB
when someone else needs that PCB.







































                                       75
Text: PACKID; Inconsistent Pack Set ID handling                           page 1

If the system crashes while in the middle of the once only code,
the new value of HOMRAN may have been written out to some units
and not to others. The next time the monitor checks the HOM blocks,
it will complain about "MISSING OR INCONSISTENT PACK SET ID" and
refuse to come up. The way to handle this situation is to nullify
the instruction that checks HOMRAN in ONCDSK, after making sure
the operator doesn't have one or more packs that don't belong
to the real pack set mounted. This will result in the monitor
writing out a new random number to all the units, and the system
will be able to come up again.















































                                       76
Text: BADFOR; Recovery from disk packs with bad format                    page 1

Occasionally, the format information on a disk pack can become unreadable
for one or more tracks on the pack. This shows up as various errors - 
the "no record found" bit in sense byte 1, uncorrectable data check
with "no sync byte found" or "no address mark detection on retry".
Sometimes a disk drive equipment check is generated because of bad
format information on a pack, although this is theoretically not
supposed to happen.

An address mark consists of 3 bytes of no flux change, and is found
exclusively in G3 (gap 3), which is the gap that precedes all
record headers for all records except R0, which is preceded by a G2.
G3 is used by the storage control to identify the beginning of
records without having to wait for the index marks to come back around.

A sync byte consists of a series of 12 "9F" bytes in a gap.

Neither an address mark or a sync byte can be read directly by the
channel program. They are part of the inter-record gap on the disk.
Failure to detect these marks will cause the errors discussed above.

The normal procedure to recover a pack whose format information is
damaged is to run PAKCOP with the sense switch that says to procede
on read errors. The data in the bad blocks is lost, since it cannot be read,
but if any blocks on the same track are good they will be copied.
However, if the channel does not present unit check on the bad transfer
ending status, or if it does and both data check and no record found
are off (happens when get equipment checks), the copy will abort
regardless of sense switch settings, since PAKCOP believes the hardware is broken.
Since bad format can cause equipment checks, this can prevent the pack
from being copied.

PAKCOP can be used to reformat individual tracks in this situation.
First, all good data from the tracks should be copied out to a file
somewhere. Then, PAKCOP should be run. Using the ASSIGN command
(it will say "type help . . .", and you need to say "DOIT" to get it
to run) assign an alternate track for the tracks that are bad.
Then using the DEASSIGN command, deallocate the alternate tracks.
PAKCOP will automatically reformat the tracks specified when
deassigning the alternate tracks. Now, bring up the system and read
all the tracks that have just been reformatted. Hopefully, this will
result in no errors. If there are still errors, the pack itself
is probably damaged. Notify field service. If they believe it is still
safe to run the pack, use PAKCOP to assign alternate tracks for the
damaged tracks. Next, bring up the system and copy all the saved good
data from the bad tracks back to the same place it came from.

This procedure will cause the blocks of the files which formerly
got the errors to come up with zeroes and no errors. Make sure DSKCLN
runs so that it will detect if this zeroing has happened to a RIB,
because if the monitor sees a zeroed rib and doesn't see
any I/O errors, it will crash.

Don't use this procedure unless 1) the pack cannot be copied to a good pack;
2) there are few enough tracks bad such that not too many users
will get their data zeroed.


                                       77
Text: BADFOR; Recovery from disk packs with bad format                    page 2


An extra step in the above procedure would be to get a copy of DSKCLN
with DDT loaded, and search for the files whose pages got zeroed
by the procedure. Then notify operations that those files have
had data lossage.




















































                                       78
Text: TRUFRM; TRU computation formula                                     page 1

The following is the current TRU formula as of 25-Apr-79:

TRU = KCT * .0000003371
	 + MCY * .000009004
	 + PWL * .000000154
	 + SOK * .001
	 + ELP * .00016
	 + BCS * .00535
	 + CHR * .000856
	 + BET * .004
	 + BIO * .0004
	 + MPC * .000168
	 + PWS * .02696
	 + ((4 * ERS + LKS) * 3 + DRS + DWS) * .00077
	 + ((4 * ERN + LKP) * 3 + DRD + DWR) * .00674

where

KCT is working set size in K times microcycles
MCY is microcycles
PWL is (WSK * PADD * (CHGF + 1) * 10000)/(PADD + CHGF)
	where
	WSK is 2 * size of working set in pages after PADD
		pages have been added to working set.
	PADD is number of pages just added to working set
	     via WSCTL or page fault.
	CHGF is charge factor, currently = 100.
	  Only WSCTL and page fault increment the PWL counts
	  (no charge for CORE UUO, RUN UUO, etc. adding pages)
SOK is number of units added to premium cell by TYMCHG UUOs * 1000.
ELP is elapsed time  *  working set size
BCS is break characters  *  working set size
CHR is non-block I/O terminal characters in  +  out
BET is elapsed seconds that ports for a job were in block I/O mode
BIO is block I/O characters input and output.
	(There is a minimum charge of 80. characters for block output)
MPC is VCR + 4 * MAP + HS
	where
	VCR is number of VCREATs done to user address space, including
		CORE UUO
	MAP is number of MAP operations done by user
	HS is number of pages mapped by monitor while creating high
		segments EXCEPT those mapped while job had XC license.
PWS is pages added to UWS by user via WSCTL or page fault
	(doesn't include those added by CORE UUO, RUN, etc.)
	(Also doesn't include virgin private pages.)
ERS is ENTERs and RENAMES  *  working set size in K
LKS is LOOKUPs times working set size in K
DRS is disk blocks (128 words) read times working set size in K
	The UFD reading CHANIO charges 1 block per UFD page read.
DWS is disk blocks (128 words) written times working set size in K
	VALPAG, FCREAT charge 4 blocks for each page.
ERN is ENTERs and RENAMEs done
LKP is LOOKUPs done
DRD is disk blocks (128 words) read


                                       79
Text: TRUFRM; TRU computation formula                                     page 2

	The UFD reading CHANIO charges 1 block per UFD page read.
DWR is disk blocks (128 words) written
	VALPAG, FCREAT charge 4 blocks for each page.

1K = 1024 words = 2 pages.




















































                                       80
Menu: PROJECTS; Monitor Projects currently conceived                      page 1

82     ENVIRONMENT     Adaptations to Environment
83     CAPACITY        Increased Monitor Capacity
85     RELIABILITY     Projects to increase reliability
87     POLICY          Projects to enhance policy making decisions
88     PERFORMANCE     Performance Enhancements
94     STRUCTURE       Projects to improve internal structure of monitor
97     FUNCTION        Projects to extend functionality of monitor
100    SECURITY        Projects to increase security
101    MISCELLANEOUS   Projects that don't fit clearly into above categories
















































                                       81
Text: ENVIRONMENT; Adaptations to Environment                             page 1

FOONLY project: convert TYMCOM-X to use new FOONLY PDP10 architecture.
Must do this to free up KI10 currently in use. Project involves
converting monitor and stand-alone utilites, new operator procedures,
setting up internal operating environment. Possible writing of microcode
for various things - maybe paging if Poole doesn't get to it.
Priority:10000
Time: 3 being months.


















































                                       82
Text: CAPACITY; Increased Monitor Capacity                                page 1


Greater than 255 frames: To make framing more useful (so software
authors can use frames more liberally to seperate out functions, etc)
and to prepare for more powerful hardware.
Priority:9000
Time: 2 being months



















































                                       83
Text: CAPACITY; Increased Monitor Capacity                                page 2

Mountable Structures: (also can be classified as functional
improvement, reliability improvement) To allow file system storage
to be effectively increased by not requiring all storage associated
with a system to be on line at once. For systems like the accounting
system, this could make backup procedures faster and more economical.
Also a security increase, since sensitive data can be physically
protected. Also allows more function, since one can take advantage
of different file structures to have different versions of software, etc.
Also helps operators since backups can be done in smaller pieces.
Also helps reliability since a single head crash or media crash
cannot wipe out more than a single file structure.
Priority: 8000
Time: 6 being months












































                                       84
Text: RELIABILITY; Projects to increase reliability                       page 1

Improved Memory Error Recovery: Make monitor more resistant
to memory parity errors in exec mode - possibly on KL10 restart
the system at the trap PC by allocating another page and reading
pure monitor code into it. Necessitates seperating pure monitor
code from data. Possible evaluation of parity errors during fetches
from data structures to determine if just a single frame can be
aborted as opposed to whole system.


















































                                       85
Text: RELIABILITY; Projects to increase reliability                       page 2

Job STOPCD: to make stopcodes kill a frame rather than the whole
system if the programmer decides that the error is not likely
to corrupt the system.






















































                                       86
Text: POLICY; Projects to enhance policy making decisions                 page 1

New class scheduler: (also possible performance improvement) To rewrite
the scheduler to allow more specific control over scheduling policy
and strategy. To allow easier tuning of the scheduler to accommodate
different loads and environments. To allow seperations of groups
of users into classes of service, which are charged according to
their class.
Priority: 7000
Time: 8 being months

















































                                       87
Text: PERFORMANCE; Performance Enhancements                               page 1

Re-introduce record style Disk I/O: Implement algorithm which
either does what SIMIO currently does now, or if page is not
in core to construct channel program to read into private memory
for "old-style" disk I/O. Could possibly get back some of
the performance decrease suffered as a result of going to paging
core allocation scheme.
Time: 2 being months.


















































                                       88
Text: PERFORMANCE; Performance Enhancements                               page 2

Reformat Disk into Pages: Storage allocation increase of approximately
10 percent, slightly reduced latency and transfer time (more pages
will rotate under heads in same period of time). Involves both monitor
and PAKCOP changes.
Time: 2 being weeks.




















































                                       89
Text: PERFORMANCE; Performance Enhancements                               page 3

REMOVE without VALIDATE: Currently all REMOVEs for file pages
force a VALIDATE and WAIT function to be performed to assure
the user that the data is on the disk after it is removed
from this address space. For specific applications where this
is not necessary, have REMOVE call which doesn't validate.
Part of project is to see if there really was dependence in REMOVE
code on VALIDATE having been done (for I/O error detection?)
Time: 1 being week.

















































                                       90
Text: PERFORMANCE; Performance Enhancements                               page 4

Make VCREAT, MAP, REMOVE faster: While working on ASP development,
it was discovered that VCREAT was a limiting factor in speed of
the program in verify mode. Also, the SIMKL simulator seems
limited by the speed of MAP. It takes 4 seconds to do a map
of 512 pages. Reduction in this area could improve monitor
performance accross the board.



















































                                       91
Text: PERFORMANCE; Performance Enhancements                               page 5

Page Fail Code Restructure: We now know more about how many times
we go through the page fail code and why. Making the path that
sets the W bit on faster seems to be worthwhile.






















































                                       92
Text: PERFORMANCE; Performance Enhancements                               page 6

SCHED1 might improve performance to have LMAP swap-in scan performed
	only when a job was actually selected to run by scheduler;
	As the code now stands, the swapper selects jobs for
	swap-in which are likely to be selected by the scheduler
	for running.  For each such job, the swapper goes thru
	four scans or phases:  Context-Page Creation (usually null)
	Context-page Swap-in, LMAP Activate, and LMAP Swap-in.
	It then marks the job as ready to go, and the scheduler
	MAY subsequently run it.  Or it may not, in which case
	the work is wasted.  Most of the work is in the LMAP
	activate and swap-in scans.  The idea is to avoid this
	work until the scheduler actually selects the job and
	runs it.

	This will require that swapper state byte be initialized
	at login, used as code to dispatch upon entry to swapper
	each cycle (not re-initialized each cycle);  reserved pages
	need to be handled differently:  if job is selected
	for swap-in and his state is lmap-swap-in, add USYRES
	pages to siptot. when done with Lmap-activate-scan,
	set usylsp to 0 and usyres to his reserved pages.
	[If kilupt run on job w/usyres non-zero, it must release
	the reserved pgs]  CLBJBT needs to setzm jbtpgo(j).
	When job selected for outjob, DECRES any pgs in usyres,
	set usyres and swapper-state to 0.  [should reset swapper
	state to 0 (create ctx pgs) after lmap-swap-in scan?].

	I tried this idea a bit but have no firm data on its
	effect.  It is possible to patch in the changes because
	they are limited to the handling of the JBYSWS byte.
	I never completed the testing/evaluating due to time 
	restriction 	/AA 8-1-79

























                                       93
Text: STRUCTURE; Projects to improve internal structure of monitor        page 1

$TEXT FUNCTION;Projects to extend functionality of monitor
Search Lists, Libraries: Extend file system functionality by
providing user with a list of structures and directories to search
if lookup fails in primary disk device.





















































                                       94
Text: STRUCTURE; Projects to improve internal structure of monitor        page 2

Soft Devices: Allow a frame to be able to simulate the appearance
of any device (tapes, disks, etc).
Time: 3 being months






















































                                       95
Text: STRUCTURE; Projects to improve internal structure of monitor        page 3

Long File Names: Allow approximately 40 characters for file names.
Possibly introduce new file attributes such as type of file, etc.
Time: 8 being months

File Index Pages: Allow an orthogonal space in files, making them
two dimensional. This enables pure data to exist in the existing
dimension, and some structuring information to exist in the new
dimension. This is useful for editors, data base systems, etc.
Possibly implement this by having different files linked together
somehow and teaching system programs how to identify the files, or
allowing a mode where all dimensions in the file can be accessed by
serial reads.
Another idea is simply to introduce the capability for multiple
"end of file" markers, and to allow each level of subrib to be
another dimension, and provide monitor calls to specify which
subrib to start on, and all pages are relative to that subrib.

Passing between Frames: Allow passing access to limited address space areas
(passing arguments), passing channels, handles to be done. Descriptor
block of what is available appears in user address space.

Self Rights: Allow another frame to trap subsets of possible
operations in a target frame, such as file access, port access, etc.
Subsets of this full functionality (trapping UUOs in general for another
frame, etc.) are possible projects.

Access rights adjustment as a result of XEXEC project: Various
issues about grafting, license, passing ports, run only programs, etc.

TTY trees and "strainers": To provide smoother operation of XEXEC.
Design and partial implementation already done, needs to be completed
and design problems and enhancements worked out.

XEXEC development: Project is currently in progress. To develop
better command language for TYMCOM-X.
Time: 12 being months





















                                       96
Text: FUNCTION; Projects to extend functionality of monitor               page 1

Search Lists, Libraries: Extend file system functionality by
providing user with a list of structures and directories to search
if lookup fails in primary disk device.






















































                                       97
Text: FUNCTION; Projects to extend functionality of monitor               page 2

Soft Devices: Allow a frame to be able to simulate the appearance
of any device (tapes, disks, etc).
Time: 3 being months






















































                                       98
Text: FUNCTION; Projects to extend functionality of monitor               page 3

Long File Names: Allow approximately 40 characters for file names.
Possibly introduce new file attributes such as type of file, etc.
Time: 8 being months

File Index Pages: Allow an orthogonal space in files, making them
two dimensional. This enables pure data to exist in the existing
dimension, and some structuring information to exist in the new
dimension. This is useful for editors, data base systems, etc.
Possibly implement this by having different files linked together
somehow and teaching system programs how to identify the files, or
allowing a mode where all dimensions in the file can be accessed by
serial reads.
Another idea is simply to introduce the capability for multiple
"end of file" markers, and to allow each level of subrib to be
another dimension, and provide monitor calls to specify which
subrib to start on, and all pages are relative to that subrib.

Passing between Frames: Allow passing access to limited address space areas
(passing arguments), passing channels, handles to be done. Descriptor
block of what is available appears in user address space.

Self Rights: Allow another frame to trap subsets of possible
operations in a target frame, such as file access, port access, etc.
Subsets of this full functionality (trapping UUOs in general for another
frame, etc.) are possible projects.

Access rights adjustment as a result of XEXEC project: Various
issues about grafting, license, passing ports, run only programs, etc.

TTY trees and "strainers": To provide smoother operation of XEXEC.
Design and partial implementation already done, needs to be completed
and design problems and enhancements worked out.

XEXEC development: Project is currently in progress. To develop
better command language for TYMCOM-X.
Time: 12 being months





















                                       99
Text: SECURITY; Projects to increase security                             page 1

$TEXT MISCELLANEOUS;Projects that don't fit clearly into above categories.
Convert to LINK10 and DEC MACRO-10: To increase supportability
of assembler and loader used to generate the monitor.
Time: 1 being week





















































                                       100
Text: MISCELLANEOUS; Projects that don't fit clearly into above categoriespage 1

Convert to LINK10 and DEC MACRO-10: To increase supportability
of assembler and loader used to generate the monitor.
Time: 1 being week






















































                                       101
Menu: IDEAS; Ideas for Program Enhancements                               page 1

103    CRASH           Idea to speed up crash recovery
104   :CUSPS           Ideas for Cusp Enhancements
106    MONITOR         Ideas for Monitor Enhancements






















































                                       102
Text: CRASH; Idea to speed up crash recovery                              page 1

1 SEP 78 AA
FEEL FREE TO ADD NOTES TO THIS.

CURRENTLY ALL EVENTS LEADING TO BOOTS-LOADED (WHETHER STOPCD,
HANG ALL, POWERFAIL, ETC.) CAUSE US TO HAVE TO RUN DSKCLN BEFORE
COMING UP.

ON LARGE-DISK CUSTOMER SYSTEMS, THIS MEANS 30-45 MINUTES OF
TIME DURING WHICH CUSTOMERS HAVE NO MACHINE.  LOST REVENUE,
CUSTOMER DISSATISFACTION.

OF ALL THE REASONS WHY THE SYSTEM MUST BE SHUT DOWN, ONLY A
FEW ARE ONES WHICH DESTROY THE INTEGRITY OF THE FILE
SYSTEM.  WHEN THE INTEGRITY OF THE RIB STRUCTURES,SATS,
MFD ETC. IS NOT IN QUESTION, DSKCLN'S LONG RUN SHOULD BE
AVOIDABLE.

THIS CAN BE DONE IN STAGES.  THE FIRST STAGE IS TO
SIGNAL DSKCLN THAT AN ORDERLY SHUTDOWN WAS DONE,ELIMINATING
THE NEED TO RE-BUILD SATS, ETC.  THE SECOND STAGE WOULD BE
TO BEGIN CLASSIFYING STOPCD'S IN THE MONITOR ACCORDING TO
WHETHER OR NOT THEY RELATE TO THE FILE SYSTEM, AND FOR THOSE
HAVING NO BEARING ON IT, DO AN "ORDERLY SHUTDOWN" CRASH WHICH
PRESERVES SATS,RIBS,ETC.

THE TRICKY QUESTION IS, HOW TO SIGNAL DSKCLN.  I PROPOSE
THAT WE USE A FIXED AREA OF THE DISK, POSSIBLY SOMEWHERE IN A 
HOME BLOCK (BUT DEFINITELY A PAGE/AREA NOT AVAILABLE FOR
THE FILE SYSTEM TO ALLOCATE--THUS NOT AVAILABLE FOR UN-
LICENSED USERS TO WRITE UPON).  IN THIS AREA WE WRITE A
BUNCH OF UNLIKELY DATA;  PERHAPS 512 WORDS OF SIXBIT /DSK OK/ (?).
WE WRITE THIS DATA ONLY DURING "ORDERLY SHUTDOWN".

DSKCLN READS THIS FIXED AREA AS ITS FIRST TASK, AND IF IT
FINDS 512 WORDS OF SIXBIT /DSK OK/, ZEROES THE AREA AND
FINISHES IMMEDIATELY.  OTHERWISE IT ZEROES THE AREA AND PROCEEDS
TO DO A COMPLETE REBUILD.

THE FIXED AREA SHOULD ALWAYS SAY "DSK IS BAD" DURING SYSTEM
OPERATION. ONLY BETWEEN AN "ORDERLY SHUTDOWN" AND
THE BEGINNING OF A DSKCLN RUN SHOULD THE AREA SAY "DSK IS GOOD".


WHEN DSKCLN RUNS IN "CHECKING ONLY" MODE, IT SHOULD IGNORE
THE FIXED SIGNALLING AREA EXCEPT TO REPORT WHETHER IT IS SAYING
"GOOD" OR "BAD".

DSKCLN SHOULD HAVE AN OVERRIDE SO THAT WE CAN FORCE IT TO RUN
FULLY EVEN THOUGH THE SIGNALLING AREA SAYS NOT TO.








                                       103
Menu: CUSPS; Ideas for Cusp Enhancements                                  page 1

105    EDIT10          EDIT10 Enhancements
























































                                       104
Text: EDIT10; EDIT10 Enhancements                                         page 1


Make sure creation date on file being edited is the same when
it is about to be replaced with the new copy as it was when it was
first looked up. This would prevent accidental loss of edits
when two or more people are trying to edit the file at the same time.
(From WRS). /EVS



















































                                       105
Text: MONITOR; Ideas for Monitor Enhancements                             page 1

Have a list of usernames for each (job? structure?) which
are used in LOOKUP after a LOOKUP fails and the PPN/username
argument supplied was zero. This would implement libraries,
so the development sources could be kept in separate areas
from the main sources until they are debugged.
The list would not automatically include the owner's ppn-
it would have to be specified directly. ENTER
would enter its file on the first PPN in the list if the
list is non-empty. /EVS

(From Scott) UUO to return date and time at the same time
so there is no problem about getting one before midnite
and one after. /EVS

(From Scott) NUL device - infinite sink on output, EOF
on input, settable DEVCHR word (via command?).

UUO to change default file protection for a job to other than
system standard. /EVS

New AUXCAL to provide string input on a port basis, to avoid
overhead of having to do one monitor call per character input.

Current MAP and REMOV code gets the SAT completely locked
in order to interlock creation and destruction of SPTs.
If this ever becoms a bottleneck, we could do the following:

Allocation and Deallocation:
Allocation needs to have the SAT write locked to check it against
bit count, and then turn on either an F or M bit.
Deallocation needs to clear an F bit. Have SAT write locked
for this, as we do currently.
This depends on the fact that MAP cannot turn on an M bit
for a DP which has F bit off, since it gets the DP from a rib,
and if everything is working properly the DP cannot become deallocated
while turning M bit on because rib is write locked.

MAP:
MAP needs to check the M bit in order to create an SPT if it is on.
Then it turns on M bit if it wasn't already.
Have to guard against someone else turning M bit on or off
from under MAP code. Thus, instead of getting SAT completely
locked, get the DP completely locked in a RIB PCB without referencing
the data. All routines that change M bit for that DP will do the same.

REMOVE:
REMOVE needs to check the M bit, and if its on decrement SPT count
and if count goes to zero get rid of SPT and clear M bit, else, if
no SPT, just clears M bit. To interlock, get DP in question in
a RIB PCB completely locked. Make sure everything is ready for
page to be re-allocated after turn off M bit.

MAP and REMOVE will access the SAT write unlocked.

The above scheme essentially uses write lock of SAT to interlock


                                       106
Text: MONITOR; Ideas for Monitor Enhancements                             page 2

allocation and deallocation, and uses a write lock on DP involved
to inerlock SPT creation and deletion.
(Note: this may not be a problem right now, as there are not many
opportunities to reschedule while having the SAT)





















































                                       107
Menu: INFO; Using the INFO program                                        page 1

109    FILES           The format of the text files
110    PUB             Using PUB to prepare formated files
112    SPCHAR          Special INFO command characters
113    PUBLISH         The PUBLISH command





















































                                       108
Text: FILES; The format of the text files                                 page 1


INFO will read ASCII text files created with any editor.  If the files
contain line numbers, they are stripped before printing.  There are
basically two types of files which INFO will recognize: 1) Unformatted
files, containing text only; 2) Formatted files, containing menus or more
than one node.

Unformatted files are useful only as terminal nodes since a file must be
formatted in order to point to other nodes (have a menu) . The advantage is
that documentation often already exists in this state and it can therefor
be used merely by creating a pointer to it in some menu.

Formatted files must follow the following rules:

1) All TEXT associated with a node must begin with a new page of which the
     first line is of the form
     $TEXT <nodename>;<title>.
2) All MENU's must be wholly contained on one page which must begin with
     a line of the form
     $MENU <nodename>;<title>.
3) If there are both a menu and text for any node, the text must begin on
     the first page after the menu for that node.
4) All lines in a menu other than the first must be of the form
     *<filename>:<nodename>;<title>.

































                                       109
Text: PUB; Using PUB to prepare formated files                            page 1


There is a PUB source file "INFO.DFS" on the same directory as INFO.  The
file contains definitions, etc., to allow the user to very simply prepare
a document for INFO using PUB.  The file generated may have any number of
menus, but the menus may only point to terminal nodes in the file or to
nodes outside the file.  The file begins with the require statement
     .require "INFO.DFS" source!file;

PUB will assume that the file being generated is in the same directory as
INFO unless you tell it otherwise with
     .username(<username>);

PUB also assumes that the generated file will not be renamed from ???.DOC
unless you tell it otherwise with
     .filename(<filename>);

These statements should imediately follow the require statement if they
are included.

If the file is going to have aany text nodes which do not appear within a
menu that will be defined in this file, they should come next.  Each text
node should begin with
     .node(<nodename>,<title>);

Afterwards, the menus should be defined with
     .menu(<nodename>,<title>);

No text is allowed after a MENU statement.  The menu is built with
combinations of the statements .node and .pointer.  The format of the
.node statement is described above.  The format of the .pointer statement
is
     .pointer(<filename>,<nodename>,<title>);

This is to allow menus to point to other menus in the same file or other
files.

When everything has been defined, the statement
     .last
must be given to allow pub to close up properly.

Below is an example of a simple PUB generated file:
     .require "INFO.DFS" source!file;
     .filename(SAMPLE.NFO);
     .node(LONELY,A lonely node not in a menu);
     <text for LONELY>
     .menu(SAMPLE,A sample PUB generated file);
     .node(PART1,First node in menu SAMPLE);
     <text for PART1>
     .node(PART2,Second node in menu SAMPLE);
     <text for PART2>
     .pointer(SAMPL3.DOC,PART3,Third node in menu SAMPLE);
     .menu(ELPMAS,Another sample);
     .node(PART1A,Another PART1);
     <text for PART1A>
     .node(PART2A,Another PART2);


                                       110
Text: PUB; Using PUB to prepare formated files                            page 2

     <text for PART2A>
     .last

This would compile as

     .COM SAMPLE
     PUB: SAMPLE.PUB 1
       INFO.DFS 1.
     3MENU.PUG 1.
     $text LONELY
     $menu SAMPLE
       $text PART1
       $text PART2
       *SAMPL3.DOC:PART3
     $menu ELPMAS
       $text PART1A
       $text PART2A
     PASS TWO  SAMPLE.DOC 1 2 3 4 5 6 7.







































                                       111
Text: SPCHAR; Special INFO command characters                             page 1

The following single character commands are available in INFO:

.	GOTO to current node
>	NEXT
^	UP




















































                                       112
Text: PUBLISH; The PUBLISH command                                        page 1

The publish command may be used to produce a very nice looking
document from a subtree of info nodes.  The command is given followed
by the name (or path) to the node which is the root of the subtree
which is to be documented.  The path may be eliminated if the
current node is the root of the subtree.  The result will be a file
on the current directory with the name of the root of the subtree
and the extension .LST.  The fill will have a table of contents
and a two level alphabetical index in the back.  All of the nodes
below the node named will be in the document.  Warning, listing the
entire data base produces about a 1000 page listing!  Make sure you
specify the proper subtree.














































                                       113
Menu: INTERNAL; Internal monitor documentation                            page 1

115    P033            Modification history for P033
115    P034            Modification history for P034
176   :SCHEDULER       The Scheduler
186   :MONINF          Notes on monitor internals
242    CRSNOT          Notes on Crash Analysis Techniques
253    XFRRAT          Disk transfer rate Calculations
256    STREAM          Stream Accounting System Record Formats
269   :ARCHIV          Old memos
344   :PHILOSOPY       Architectural Notes for Tymcom-X
















































                                       114
Text: P034; Modification history for P034                                 page 1

/GA

/F01
----

SCNSER
1) CHANGES TO PREPARE FOR TTY PASSING: ALL INTERRUPT ASSIGNMENTS
   STORED IN DDB, NONE IN LDB, TABS-AS-BREAKS AND NO HT/VT/FF ECHO
   BITS, AND IMAGE BREAK CHARACTER STORED IN DDB AND COPIED TO
   LDB ON ATTACH
2) POSSIBLE PERFORMANCE IMPROVEMENT (WE'LL SEE): TTY OUTPUT
   HIGH AND LOW-WATER MARKS ARE NOW CHANGABLE AT RUN TIME, AND
   THERE ARE DIFFERENT VALUES FOR SLOW (<1200) AND FAST (>1200)
   LINES. CELLS ARE
	OMX30	LIKE OLD TOCMAX -- # UNOUTPUT CHARACTERS PERMITTED
		BEFORE MONITOR PUTS YOU TO SLEEP
	OMX120	SAME BUT FOR FAST LINES
	OWK30	# UNOUTPUT CHARACTERS AT WHICH MONITOR WAKES YOU
		UP AGAIN (WAS THE CONSTANT 0)
	OWK120	SAME BUT FOR FAST LINES
	TOEMAX	LIKE OLD TOEMAX BUT A CELL NOT A CONSTANT
   THIS WAS ALL DONE BECAUSE OF THE OBSERVATION THAT ON 33 BLOCK
   OUTPUT SEEMED TO BE RIDICULOUSLY FASTER THAN ORDINARY OUTPUT
   AND THE HYPOTHESIS THAT THIS WAS DUE TO INADEQUATE BUFFERING.
   (ONE WOULD THINK TYMNET'S BUFFERING WOULD BE ENOUGH, AND THAT
   IS INDEED THE CASE IN EXPERIMENTS ON 37, SO MAYBE THE PROBLEM'S
   ELSEWHERE).
3) TTY RXE AND TTY NO RXE SET AND CLEAR THE REVERSE X-ENABLE
   PARAMETER
MCB 1/25/79

SCNSER
BUG FIX TO CHARACTERS-LOST CODE (FOUND BY EVS, FIXED BY MCB 1/25/79)

PICON
Fixed bug in code to check for AC stack about to overflow in
STKAC (KL). Ernie found this when looking at an unrelated crash. 
/WRS 1-26-79

/F02
----

SCNSER BUGFIX AT SCNOUT TO TAKE INTO ACCOUNT THE FACT THAT
SNDBIO CAN SKIP-RETURN. /MCB 1-26-79

/f03
____

scnser bugfix at tinas1 to make HIBERs work better. /MCB

/F04
----

SCNSER
TTY DEF COMMAND (AND AUXCAL FUNCTION '63) KEEP PORT IN DEFERRED


                                       115
Text: P034; Modification history for P034                                 page 2

ECHO FOREVER, THUS MAKING TYPEAHEAD WORK FOR THOSE WHO CARE.
/MCB 1-29-79

COMCON
Fixed bug where "E" and "VERSION" commands don't wait for IO
to complete.  This involved setting NOTIC in the flaggs for
these commands.  /WRS 1-29-79

UUOCON

UUOCON$: added the SETALP uuo, and a call for the RUNALP uuo.
	Changed SETJAL to do KJP for JL'd processes.  /WRS 2-24-79

CLOCK1$: changed KSTOP to clear JBTSTS[kjp] and also made things
	a little neeter.  /WRS 2-24-79










































                                       116
Text: P034; Modification history for P034                                 page 3

/03
---

CLOCK1$: ignore tru limit exceeded if KJP set in JBTSTS /WRS 2-26-79

SEGCON$: changed RUNALP uuo to be LOGOFF uuo.  If not called by
	logout program (indicated by JBTSTS[kjp]=0), then it
	will run the real logout program.  Otherwise, same funct
	as before.  /WRS 2-26-79

COMMON$: CLOCK1$: SEGCON$: UUOCON$: removed UPSALP bit from UPTSTS
	in lieu of it being implied by UPTALN neq 0.  /WRS 2-26-79













































                                       117
Text: P034; Modification history for P034                                 page 4

/04
---

SCNSER$: changed code in GETLCH so it will return bit 100000
	(GTLECS) eat command synch - when a command is available
	for rescan.  /WRS 2-28-79

Added new FRMSER module - will contain code that handles frame trees,
creating and destroying frames, etc. /EVS 3-9-79

SCNSER
New AUXCAL function, .AXSFS, function '64, like function '32, it
sets the port's file status bits from the (immediate) argument.
It then sets/clears the port's image state according to the data
mode set (previously, this didn't occur until the next i/o
operation). /MB 3-12-79









































                                       118
Text: P034; Modification history for P034                                 page 5

/05
---

Created new symbol HPGONC in ONCE, which is the symbol
used when moving the ONCE code and data to the highest
possible place away from the rest of the monitor.
Formerly, it was the magic number 337, but now the monitor won't
fit below 340000 if loaded with EDDT and symbols - the dynamically
allocated free core overwrites the physical pages that ONCE lives in.
More has to be done to remedy this situation.
/EVS 3-15-79

Changed ONCE code not to reference the ONCE PCBs by physical
location. This is necessary so that the ONCE PCBs can live
at addresses over 337777. In the future, must map the ONCE only
DDB (DDSTAR has the address of this) so that it too can be over
337777. /EVS 3-15-79

Installed new monitor user mode simulator in module DEBUG.
Documentation of some sort will be provided at a later date.
To use, get monitor file, say MONDEB$G, then 2 control b (as usual
for debugging) and 140$g.
Currently, you must be the only user running the simulator
who is GFDed to the directory you are GFDed to. This will
be fixed in the future. /EVS 3-18-79

Put missing CLRPTA into OPCBST. ONCE code was setting up
PGY tables in exec page map, then using them without making
sure the mapping took effect. /EVS 3-19-79

Re-arranged OPCBST/OPCBCL code to clear out stuff before invalidating
the page map pointers needed instead of after. Worked in present
system since the CLRPTA installed in this code (see above)
wasn't there, so mappings were still in effect, but simulator
dies right away. /EVS 3-21-79

Fixed bug in MPSUPS originally found by Lee - test on loop
is backwards, resulting in page table not getting cleared.
/EVS 3-21-79

Fixed bug in MAPUPS, test on loop is backwards, just like MPSUPS.
/EVS 3-21-79

Preserve location 66 in ONCE init code to keep out of simulators
way until a new uuo is written to replace location 66
(illegal instruction is stored there). /EVS 3-22-79

CLOCK1 STTIOD AND SETIOD NOW CHECK THAT TARGET JOB IS NOT
	IN SW STATE; IF SO,CRASH. THIS MAY HELP TO TRACK THE
	CAUSE OF CRASHES SEEN WHERE JOB WAKES UP BEFORE I/O
	COMPLETES (OR EVEN STARTS) ON PCB PAGE. ON H31 THIS
	HAPPENED DURING MAP OF A UFD PAGE SEARCHING DURING ENTER. /AA
	/AA 3-28-79

Got rid of HPGONC. ONCE code and ONCE PCBs, PGY tables, and DDB are


                                       119
Text: P034; Modification history for P034                                 page 6

now physically relocated to just below the first hole in memory.
(Virtual addresses remain the same). See the new comment in the ONCE
module for a description of where everthing lives. /EVS 4-2-79

Monitor now will use the exec virtual address space (400-???)
to access free core, pgy tables, etc. See comment in ONCE.
New macros and symbols in S.MAC determine where the start
of exec address space is for this purpose and where the
ONCE code lives in virtual address space. This was done
to allow larger configurations to be generated without
running into the 340000 limit. /EVS 4-2-79

Bug in error messages for KL version of the monitor at
PTSML - would never print out the message. Fixed the bug.
/EVS 4-2-79

Took the exec mode simulator out of DEBUG module, created new
module SIMKL. This way, can use the simulator to debug other
exec mode programs. /EVS 4-2-79






































                                       120
Text: P034; Modification history for P034                                 page 7

/06
---

SCNSER
Block i/o fix. (SCNSER smerged to agree with P033/G02). /MCB 4-3-79

CORE1
MWS fixes and parameter tweaks. (CORE1 smerged to agree with
P033/G02). /MCB 4-3-79
















































                                       121
Text: P034; Modification history for P034                                 page 8

/07
---

SCNSER smerged to agree with P033/G03. /MCB 4-6-79

Installed frame descriptor code into all VUUOs that take
"other frame bit" argument. Changed SETOTF to take a frame
descriptor rather than a job number. /EVS 4-6-79

Changed CREFRM UUO to return a 2 word universal frame descriptor in
AC and AC+1. /EVS 4-5-79

Put access rights and frame handle tables into the context pages.
Put frame descriptor, frame handle, and access rights code
definitions into S.MAC. /EVS 4-5-79

Changed SETLIC uuo so it will only write a stream accounting record
in the event that the job half of JBTLIC is affected.  /WRS 4-9-79

Changed STOLM?, SETLM? routines to clear page table after page
map slot is stored, rather than before to guard against
hardware dragging old slot contents back into paging memory
before new slot contents are stored. /EVS 4-13-79

Reference bit trapping is implemented. /EVS 4-13-79

Two new page fault information UUOs - PGRSTS, and PGISTS.
These UUOs return up to two words, like PGFSTS and PERSTS do,
first a user word then an exec word. In PGRSTS, the
left half contains 1b0 if the data is valid, and the right
half contains the address of the fault location which had
the reference bit off. If the monitor turns a ref bit on
or the user program can't take the trap, the exec word
is set. In PGISTS, the right half contains the software page
fail bits (SPFW.?) and the left half contains the address
of the ILL MEM REF, write violation or address break.
SPFW.U is always set, and reading the words with PGISTS always
sets them to zero, so check for existence is SPFW.U.
/EVS 4-13-79

UUO SPECIFIES ILLEGAL ADDRESS message has been changed to
ILL MEM REF IN UUO FOR LOCATION xxxxxx (PAGE xxxxxx on KI)
ILL MEM REF message now prints location instead of page on
KL processors. ADDRESS CHECK for DEVICE xxx changed to
print failing location. /EVS 4-13-79

PICON$: fixed the WAKE uuo to not write anywhere in exec space.
/wrs 4-18-79

UUOCON$: changed SETE password /wrs 4-19-79

Fixed CTYTYO in SCNSER to do filler characters, and to not
loop forever if the -11 is down. /EVS 4-20-79

New FRMOP functions to start and stop frames. /EVS 4-20-79


                                       122
Text: P034; Modification history for P034                                 page 9


Replaced CLRPTA with CLRPTO %UPS in ONCE at PGSLP+??. /EVS 4-20-79

Changed message for per job exec address space address breaks
not to try to type error message out. Now sets UTRP and
UPSABK so that the correct message comes out at USRXIT.
/EVS 4-20-79

Implemented new set address break uuo. Format is same as KL
DATAO APR format. Zero argument means clear.
Can only set to exec address space if
process has WC license. /EVS 4-20-79

Exec address space per job address breaks now save all the ACs
in global table ABKACS. CAUTION: Do not set exec address space
breaks at interrupt level routines or in the context switching
code. The STKAC and KTRRET routines will not operate
correctly in this case. /EVS 4-20-79
/09
---

SCNSER smerged to agree with P033/J04. /MCB 5-16-79
(This included the following change. /EVS)
SCNSER:
Fixed code at BIOZAP (zap of circuit in block mode) to NOT
force the job out of BF wait, since this confuses the extra-
buffer allocator. This bug may have caused some crashes on 29.
/MCB 5-15-79

ACTSER: Fixed bug where AC owner had pending software interrupt
(JBTAWQ sign bit on) and exited GETABS routine thru ABTUUO,
but didn't give back AC. Fix is just to call RELACB. /EVS
5-18-79.

ERRCON$: updated to reflect P033/J12 changes regarding error in
detached jobs putting OPR: in monitor mode.  /WRS 31-May-79
(This included the following change. /EVS)
ERRCON$: Fixed problem causing a message from an error on a detached
job to force OPR: into monitor mode.  U was getting setup to OPR: by
TTYERP and was left that way when HOLD was called.  New JHOLD and JHOLD0
which setup U before calling HOLD and HOLD0 respectively. /WRS 31-May-79

ERRCON$: Cosmetic changes to output from ERRCON. /WRS 5-31-79


SEGCON: updated to reflect P033/J11 changes in MAPHS
to close security gap with GETSEG of SWR file. /aa 1-Jun-79










                                       123
Text: P034; Modification history for P034                                page 10


























































                                       124
Text: P034; Modification history for P034                                page 11

/10
---

SMERGE bring P034 completely in line with changes made
from monitors P033/HA to P033/K03 that hadn't been edited into
P034. The following changes were SMERGEd in: (/EVS)
SCNSER:
Added code to do upper to lower case conversion on output at
user's option.  Involved adding a new output mode (3) to the
character table, another flag to LDBDCX (LXLLCO), code to 
perform conversion if LXLLCO set, new AUXCAL (65) and TTY 
command option (UCO) to set/clear LXLLCO.  This [hack] is 
needed by APL 2741s which don't like upper case. /TLC 5-18-79

S CLOCK1 SCHED1 SCNSER
Rewrote block i/o buffer-reservation and base-port allocation logic.
There is now one queue, BPQ, for waiting for a base port, and one
queue, BBQ, for waiting for a monitor block i/o buffer. A base port
is what the TYPNEG message negotiates for: it is a slot in the base
which holds a port number, an input buffer address, and an output
buffer address. Whenever a port goes from doing neither block
input or output to doing one or both, it gets a base port. There
can be more PDP10 ports doing block i/o than there are base slots;
in such cases, the BPQ gets used to multiplex the base slots among
the jobs. BIOCNT.rh is the number of PDP10 ports, BIOPRT the
number of base ports. BIOBUF is the number of monitor buffers,
which is determined by the routine BLKADJ, which now makes
BIOBUF = BIOPRT+2 if it can (this lets 2 people do full-duplex
block i/o with no contention for monitor buffers).
/MCB 5-21-79

SCNSER
No longer sends a bell at RECHT1 if port is in image state,
per request from TYMNET.
/MCB 5-21-79

S CLOCK1 SCHED1 SCNSER
No more BBQ and no more BLKADJ. Buffers are allocated on demand
(with the jobs possibly going into FC wait). When released, they
go into a block buffer pool if noone's in FC wait; otherwise, they
get returned to freecore. SCNSEC will move a buffer from the
block pool to freecore if it finds FCREQ >= 0 (and, of course,
if there is a free buffer). BIOBUF is the number of block buffers
and BBFREE the number of free buffers in the block i/o pool.
.AXEBM never fail-returns due to a lack of freecore.
/MCB 5-23-79

SCNSER
Removed crash-causing BLKICK at BLKIHR (it's ok to get an
input-terminated-by-host-request when there're no block
buffers). Also made BLKIO (.AXEBM) error-return if the base
gave us zero block ports.
/MCB 5-24-79

SCNSER:


                                       125
Text: P034; Modification history for P034                                page 12

SCNSER, COMCON:  Modified TALK command so that lower case is not
upshifted.  COMTYI made to inhibit upshifting when TRNCOM is
not equal to zero. /TLC 5-30-79

COMCON$: Added APL and TERMIN commands which run program of same name
on SYS:   /WRS 1-Jun-79

SCHED1:  IMPLEMENTED "OUTJOB" AND "BIGFIT" IN SWAPPER. ELIMINATED
SIPQTA LIMITATION ON JOBS ENTERING SWAPPER.  OUTJOB IS THE JOB
WHICH SWOSCN EATS AWAY AT FROM CYCLE TO CYCLE.  BIGFIT IS THE
JOB WITH SEVERAL PAGES NEEDING TO COME IN WHICH THE SWAPPER IS
CURRENTLY TRYING TO GET IN.  ONE BIGFIT JOB AND ANY NUMBER OF
OTHER MRQ'D JOBS WITH FEWER PAGES NEEDED CAN GET SWAPPER
SERVICE ANY CYCLE. /AA 6-1-79

FIXED MODS TO /J13 - BIGFIT MODIFICATION. /EVS 6-1-79

TVEDIT command runs RPG - for future.  /WRS 2-Jun-79

Changed SETICP to be set with MRQ as soon as OUTJOB is set.
No more page quota for OUTJOB which delays setting SETICP for now.
/EVS 6-5-79

Put special TRACE macro into SCHED1, puts information into trace buffer.
Feature enabled by defining SCDTRC symbol. /EVS 6-5-79

Added another TRACE macro. /EVS 6-5-79
SCNSER,COMCON: CHANGED IMPLEMENTATION OF TRANSPARENT TALK.
NOW DOES NOT USE FLAG, INSTEAD COMTYI GIVEN TWO ENTRY POINTS:
COMTYI WHICH UPSHIFTS INPUT; COMTYT WHICH DOES NOT.  ALSO
LEADING BLANK DELETION (ETC) WAS REMOVED FROM TALK. /TLC 6-8-79

Changed TRACE macros to have a type number instead of storing
the traced instruction in the ring. Changed the macros always
to store 2 data items in the buffer so the records are always
fixed length. Took out TRACE macros that traced FIT getting
set up. These changes were made for the new TRACES program
that reads the buffer and prints a diagram representing
the state of the scheduler and swapper. /EVS 6-8-79

SCHED1:  Added counters SSTC0 thru SSTC9 which can be hooked up
to any code of interest by patching running monitor.  Also modified
ICP to look at these and print them out as SSTCn  xx counts/second
if they are found changing.  /aa 6-8-79













                                       126
Text: P034; Modification history for P034                                page 13

/11
---

SMERGE fixes to TALK command in from P033, and POSAVL fix
into scheduler. Also, new counters into scheduler.
Following are the changes from P033.MEM. /EVS 6-12-79

SCHED1:  Added counters BIGCNT,OUTCNT,EATCNT.  These count
jobs chosen for BIGFIT, chosen as OUTJOB and totally eaten in
SWOCTX,respectively.  /AA 6-8-79

SCHED1:  Fixed SWOSCN logic re POSAVL.  Code will now
compute POSAVL the first time it is forced to do a scan.
(This may not happen for many ticks if OUTJOB lasts). /AA 6-8-79
---------(end of text from P033.MEM)

Fix simulator bug that caused JEN and JRSTF not to restore
first part done in PC. /EVS 6-12-79







































                                       127
Text: P034; Modification history for P034                                page 14

/12
---

SEGCON:  Fixed bug in save code and readls which would compute
length of saved area to be <0 if JOBFF>400000+JOBSV-1
(ie, greater than 400076).  Problem lay with several HLRE instrs
which are now HLRO instrs so that -length is always
<0 even if bit 18 of -length is 0 (which happens whenever
length=(jobff)-1-jobsv-1>400000. /AA 6-13-79

SCNSER: fixed comment at HNGELS about last job on quque for
spare ldb having 0 lh in ttytab.  He has -1 in lh. code was right.
Fixed TTYATT to return F/0 if no tty ddb found (happens if target
job is on spare ldb queue).
COMCON:  ATT2A types "CANT ATT TO JOB" if ttyatt returns f/0
instead of using garbage in F /AA 6-13-79

Changed macros to define access rights bit tables and
access rights definitions ".AR???" in preparation
for translation from monitor to user access right bit map
functions. /EVS 6-13-79

COMMOD: Added LKBSIZ to LEVEL-D disk parameter table so user can
gettab the length of the longest meaningful lookup block...
GETTAB [20,,16].  /WRS 14-JUN-79

COMMOD: Fixed some problems where someone added two number 14 entries
in the LEVELD gettab table.  I changed all the comments and made a note
to change the documentation to reflect the way anyone who's using it
thinks it really is.  /WRS 15-JUN-79

COMCON: added TE to run RPG for TECO so TE still works in spite of
TERMIN command (especially for Mike Rude).  /WRS 21-Jun-79


MAPIO:  fixed VFSTAT uuo kernel KFILCK to call RELSAT if
GETSAT fail-returns;  old code assumed that no SAT mapped if
fail-return, but can have sat mapped if had to read it in
and SATCHK found it bad.  Call RELSAT unconditionally if
GETSAT fails; RELSAT does nothing if no sat there. /AA 6-22-79

Changed NUMCHN to 48. /EVS 6-27-79















                                       128
Text: P034; Modification history for P034                                page 15

/13
----

Simio: Fixed bug which left microcycle clock on if doing 
dump output. Now clock off during execution of dump
input or output. /AA 7-9-79

COMMON:  Revised method by which MINCOR = amount of freecore
is calculated.  A bug existed which I discovered in process
of trying to increase P90's freecore alloc by about 1K.
MINCOR and MINCLN are eliminated.  New calculation produces a
symbol FCWDS which includes a factor to account for
SPT usage.  Symbol SHRFPG can be defined in CONFIG as number
of expected shared file pages. New symbol FRECOR contains
value FCWDS used by once-time code to allocate freecore.  This
can be patched directly to increase the amount. /AA 7-9-79

CONFIG:  brought from OSCURRENT config changes for
C38 and P90.  38 gets 2 dsk controllers. P90 more jobs, etc. /AA 7-9-79

FRMSER,SEGCON,UUOCON,COMCON,COMMON:
Put new FRMOP function .FOSVA in - start a frame at one of its
start vector addresses. E points to -ve job data area offset
or +ve target process specified start vector address.

































                                       129
Text: P034; Modification history for P034                                page 16

/14
---

SCNSER: Fixed bug in CTYCHR that didn't do the waiting count
correctly. /EVS 7-11-79




















































                                       130
Text: P034; Modification history for P034                                page 17

/15
----

SCNSER: FIXED HORRIBLE BUG WHICH WAS INTRODUCED WHEN FREECORE
VIRTUAL ADDRESSES BECAME DIFFERENT THAN PHYSICAL ADDRESSES.
MUST NOW DO MAP INSTRUCTIONS AT GOBIO2. /EVS 7-11-79



















































                                       131
Text: P034; Modification history for P034                                page 18

/16
----
UUOCON: ACTSER:  IMPLEMENT TRU COMPONENT CHECKPOINT RECORD
[TYPE 21 LENGTH 41] XC req'd Generated by [new] XCHARG fn 6 /AA 7-12-79

ADDED CAPABILITY TO ACTSER TO WRITE LOGIN RECORDS FOR FRAME CREATION
FRMOP. CHANGED .FOCFM TO WRITE THE LOGIN RECORD. /EVS 7-13-79

Fixed TTYNFR to set TTYATC (so code for forced commands won't think
it's an aux port) and PJOBN (for neatness) and clear rh(DDBLDB)
(superstition). /MB 7-16-79














































                                       132
Text: P034; Modification history for P034                                page 19

/17
---

ACTSER: fixed bug in frame create FRMOP - routine in ACTSER was
using wrong size for login record. /EVS 7-16-79

UUOCON: removed requirement for JL from CONT uuo.  Can only protect
user so much from himself.  /WRS 7-16-79

ACTSER: Fixed confustion about symbol ACUTAB in WRTACR. /EVS 7-17-79

UUOCON: Added SETE password with all licenses for self. /TLC 7-18-79

S: Changed IO, MB, and WS state codes from SJ to DJ.
This fixes a bug - a job in IO wait could control C out,
and do a COMCON command that started a monitor job if JBTIOA
was zero - which zapped the state code. Meanwhile, there is still
a DDB with IOW set on it, which will cause SETIOD to get called
when the interrupt for the device comes in, or the device
becomes hung. Changed WS from SJ to DJ because there still might
be some code that calls WSYNC that assumes that either the
code will be continued or DHNG will be called. Since we have
changed IO and MB to DJ and RN is DJ, this is no great loss.
Put comment in S just before QUEUES and CODES macro definitions
to explain the rules for selecting SJ/DJ for a new or existing state
code. /EVS 7-19-79

ERRCON: Clear IOW in the DDB as well as IOACT so SETIOD won't
wake the job up in case we get an interrupt from the hung device
some time after hung code is called. Some drivers clear IOW themselves
and call SETIOD, and some don't, so this code is for safety.
/EVS 7-19-79

CONF90:  Increased P90's ports to ^D127 (avoiding 128 out of
 fear that a bug may exist at this boundary.) /AA 7-19-79

UUOCON:  replace mask 777700 with extern name JBRIRD
 from COMMOD in TRU calc in case byteptr ever changes. /AA 7-19-79



















                                       133
Text: P034; Modification history for P034                                page 20

/B

/A01
---

SCNSER: Added capability to selectively place backspace in either
the BREAK or BREAK2 set. Default is BREAK (the reverse of tab).
New AUXCAL mode 66 selects break set: param LSB 1 gives BREAK2,
0 BREAK. Backspace break state is recorded in L2LBBP in LDB
and DCLBBP in DDB. L2LNXO moved to LDRNXO to make room for
L2LBBP. BS assigned SPAI code 17 and SPAR code 6. changes
made to input, echo, rubout, and output routines to recognize
new property of bs. Of special note: deleted bs with L2LBSP set
echos as SP; without L2LBSP set, echos nothing. SETTBK,
TTYRES (RESET UUO), and ATTLDB modified to accept new BS.
Minor bugs/typos detected and corrected in related
parts of SCNSER: previously no entry for BS in remote echo 
code; wrong reg and flag tested in ATTLDB in instruction in code
to restore TABS-AS-BREAK condition. /TLC 7-20-79

/A02
---

UUOCON: Fixed VREPLC bug involving pickup of UPTOFD
"other frame" descriptor.  This bug was causing REMAP
to fail for MAGNUM people first day 034 was up on C33.
Actually, any remap would fail. /AA

SEGCON,SIMIO,SCHED1,S,UUOCON,CLOCK1,ONCE,COMMON,PICON,COMCON,ERRCON
NEW MODULE: ERRMSG.MAC

ALSO EFFECTED (DEVICE DEPENDENT BITS MOVED TO MAKE ROOM FOR NEW
DEVICE INDEPENDENT BIT IOHNG) PTPSER,FTASER,CDRSER,
ACTSER,LPTSER

Rewrote ERRCON to allow a parent frame to HIBER or interrupt
on child halting. Implemented new FRMOP which reads a halt
status block for a frame which contains halt class and type,
halt count, PC, last UUO PC, and halt type dependent data.
New module ERRMSG contains a macro definition which
should define all system error messages, except those
that come from commands. .FOHLT and .FOCLR will also
generate unique halt class-type numbers.
/EVS 8-1-79

ERRCON,SEGCON:
Changed some error messages - instead of JOB SETUP and JOB SAVED,
SEGCON now calls ERRCON which will print <filename> SETUP and
<filename> SAVED.
Instead of BETTER SPECIFY A CORE ARGUMENT it now prints
CORE ARGUMENT MUST BE SPECIFIED. Instead of REMAP UUO FAILURE
VM SPACE MANGLED it now prints REMAP UUO FAILURE DURING RUN OR
GET - the user can draw his own conclusions about what the address
space is worth after this error.



                                       134
Text: P034; Modification history for P034                                page 21

COMMON: Extensive cosmetic edit removing misleading and obsolete
comments, regrouping definitions, etc.  Introduced symbol
OPNFPF (Open Files Per Frame) INFDEF'd to 4, used to calculate
freecore requirements.  Fixed JSR LODBTS stuff in crash code.
COMMOD:  Introduced OPNFPF and new filser freecore requirement
calculations.  Deleted FIL4WD and SYS4WD calcs and replaced
with new symbol FFCBLK (Filser Free Core Blocks) which is
set to JOBN*<2+<2*OPNFPF>>; this allows average of 2 DRB's
(one each for logged-in and gfd'd ufd) and an ATB and FNB pair
for each of the OPNFPF files expected, per job.  /AA 8-1-79

UUOCON:
NEW HIBER enable bit for child frame exits enabled - bit 9.
/EVS 8-1-79


/A03
----

ERRMSG: Made a mistake and left TTY finishing routine arg blank
in the macros defining SETUP and SAVED exits - they were clearing
type ahead and they are not supposed to. /EVS 8-2-79

SCNSER/UUOCON: .STTLK SETUUO function ('10) to talk kludgily to
other people's terminals; RETACH UUO (calli -'135) to move
terminals around (generalized ATTACH). /MCB 8-2-79

Temporarily stopped HALT command from trying to
store into UPX even though its not always there.
Need to replace cal to STOP1 with call to something
that interrupts parent if he's enabled. /EVS 8-2-79

/A04
----

HALT FRMOPs and HALT commands no longer store termination status
in UPT, but do cause an interrupt in parent or traphandler.
When parent gets an interrupt and wants to see if frame has stopped,
it should keep track of whether it was running or not in its per-frame
database, and compare that against JBTSTS. /EVS 8-2-79

/A05
----


SCNSER: RETACH BUGFIXES /MCB 8-3-79

FIXED TRHALT NOT TO SKIP. /EVS 8-3-79

Put a primitive EBOX and MBOX simulation into SIMKL to chase
down a bug in WATCH statistics and microcycles.
Every time meter for a UPT is read, 20000 EBOX cycles
are simulated and 10000 MBOX cycles. /EVS 8-3-79

UUOCON: new sete password for me. /AA 8-3-79


                                       135
Text: P034; Modification history for P034                                page 22


UUOCON: Fixed bug in CLKTRU which incorrectly masked the
number of disk reads and writes obtained from JBTRCT and
JBTWCT. /EVS 8-3-79

/A06
----

SCNSER: Block i/o formerly kept every buffer it got from freecore
in a pool of its own unless it saw people in FC wait. Since some
people freak when there's no freecore instead of going into FC
wait, this might have been bad. Now, when a port stops being a
block port (BIODEC), it releases any block buffers in excess
of 2 * #block ports to freecore. The SCNSEC code to check FCREQ
and free a buffer has been removed. /MB 8-6-79


FRMSER: Fixed bug that left newly created frame in NU state,
which made subsequent start operations fail, since state code was
NU so SETRUN didn't cause frame to go into run queue. /EVS 8-6-79

SCNSER: CTYCHR routine - changed SPCTRY timeout from 40000
to 100000 - when cache was on, took more than 40000 counts for
KLDCP to finish with the character. /EVS 8-6-79

/A07
----

Fixed bug uncovered by fixing NU queue bug - was doing XORM assuming
JERR was off, but for previously used job slots, it was on, so XORM
was turning it off, allowing FRMOP that starts frame to call SETRUN
which started up job with no pc or exec acs. /EVS 8-6-79

/A08
----

Fixed sign error in BIODEC buffer-freeing code. /MB 8-7-79

ERRMSG:
Corrected erroneous error message REMAP UUO FAILURE DURING RUN OR GET
to be FATAL REMAP UUO FAILURE. /EVS 8-7-79

Changed HALT error message in SIMKL to be the authentic KLDCP
message. /EVS 8-7-79

FRMSER: SY license now allows some access through absolute
frame descriptors. /EVS 8-7-79

S: Unscrambled user access right numbers - they were scrabled for
test purposes. /EVS 8-7-79

Fixed bug in MAP instruction simulation in SIMKL.
Allowed simulated user IOT bit to allow simulated user to
execute simulated I/O instructions. /EVS 8-7-79



                                       136
Text: P034; Modification history for P034                                page 23

UUOCON: Added virtual PEEK, POKE, BITPOK capability to routines
of same name. Created new CALLI -125, NPEEK, which is now the heart
of PEEK that nonskip returns for error and skip returns if no error.
Sign bit of address to read or write if set indicates address is
virtural; if clear, physical. /TLC 8-8-79

MAPIO: Fixed bug in VFSTAT UUO - was returning VM page does not exist
because W was not setup to new call to REDLMA. /EVS 8-8-79

UUOCON: Chaged KERUUO to assume 1b0 is set already in T1 according
to caller's PC rather than setting it up. Changed VFSTAT to always
set 1b0 in T1 (would have crashed if it was clear). Changed
VCLEAR and VREMOV to get caller's PC from proper place
(PDNMUP(P)) and set or clear 1B0 in T1 accordingly before falling
into KERUUO. /EVS 8-9-79

UUOCON: Took extraneous MOVE T2,JOB out of GETTAB code - was left
over from HISEG days. /EVS 8-9-79

/A09
----

UUOCON: Fixed CONT uuo to error return if detached job.  /WRS 8-14-79

COMCON: Fixed ADRBRK command not to crash monitor when type
ADRBRK xxxxxx MONITOR <anything else> - call to CKSLC was returning
to main code after going thru COMERR, TTCMCA was zeroed,
and next call to COMERR looped. /EVS 8-14-79

SCNSER: Fixed code at TYICC to check for attachedness after job
continues from a ^C. /MCB 8-14-79

SCNSER: Added new flag, 1B14, to HANG UUO to facilitate elimination
of phantom circuits. When 1B14 is set and the specified port
has LDBLOG of zero, that port is hung; if LDBLOG <>0, error
return. /TLC 8-14-79

/A10
----

UUOCON$: SETE "broken" so will work over aux circuits.
	SETLIC "broken" so it will work over aux circuits provided
that the calling process has a MAXLIC with LICWCR.  /WRS 8-15-79

SCNSER: Fixed block i/o bug introduced in /A06 -- BIODEC thought
BIOCNT was really a count, and forgot that its left half could
contain a -1 flag. /MCB 8-16-79

SCNSER: New spare LDB code. Uses lh(TTYTAB) differently (see
comment at page 3 of HANG UUO) so it can remember for jobs on the
spare LDB waiting list whether the HANG that put them there
was forcing KJOB (bit 16) or not -- formerly it always assumed
it was. New code for circuit zap -- it is now guaranteed that
after returning from RCVZAP, the LDB is really detached.
/MCB 8-23-79


                                       137
Text: P034; Modification history for P034                                page 24


/A11
----

SCNSER: Fixes to new spare LDB code. /MCB 8-27-79

/A12
----

SCNSER: FIXES O NEW SPARE LDB CODE. /MCB 8-29-79

/A13
----

Backed up version of SCNSER to SCNSER.A95 (A09.5) which has
block I/O bug fixed but has old spare LDB code. /EVS 8-31-79

UUOCON: Split UUOCON into two modules, UUOCON and IOCSS.
UUOCON contains for the most part general UUO stuff,
and IOCSS has the I/O channel stuff. (IOCSS stands for IO common
subroutine service). /evs 8-31-79

Redefined frame descriptors. For new definitions, see FRMOP.DOC
in (MONDOC). Important change - GETTAB for job things will
return the values that SY license was required for if the caller
process has RC or WC. Non-job data still requires SY explicitly.
/EVS 8-31-79

Fixed horrendous bug that was causing two part instructions
(such as ILDB, IDPB, DMOVE, DMOVEM) not to execute first part
in software interrupt routines - monitor failed to clear
first part done (PC.FPD) in new PC if it was on in old PC.
PC.FPD will remain on until the first two part instruction is encountered.
Hardware PI system correctly preserves all flags except for turning
PC.FPD off, so CLKTRP now does just that. Also clear PC.ADR while
we were at it so that interrupt routine will not miss address break
if it gets one at the first instruction of the interrupt routine. /EVS 8-31-79

Change TIMINT in SIMKL to 70 octal so that simulator works better on
2020s. /EVS 8-31-79

/A14
----

SCNSER: Fixed misunderstandings at TTYKIL -- basically, when TTYKIL
is called from COMCON with F/ 0 and U/ "spare" LDB, it must NOT
call NXTFRC because there is no appropriate TTYTAB entry. The old
code "solved" this by not clearing lh(U) before comparing U with
LINTBE, which just happened to make it think it wasn't the spare
LDB after all in all the right cases. When I made the code clear
lh(U) in /A12, this broke down. Now things are a bit clearer.
/MCB 9-1-79

/A15
----


                                       138
Text: P034; Modification history for P034                                page 25


SIMKL: If SETABK fails (it will on KI) no longer a fatal error, just
informative message is printed out. /EVS 9-4-79

UUOCON: Fixed DONUMT to return address of NUMTAB if user asks for it.
/EVS 9-4-79

/A16
----

UUOCON: GETTAB CHANGE INCLUDED REMOVING TABLE 1
, BUT CHKPNT COUNTS ON GETTING A ZERO FOR ALL VALID JOB NUMBERS.
PUT TABLE 1 BACK IN. /EVS 9-4-79

/A17
----

PICON: WAKE and EVICT now take frame descriptors instead of job
numbers. /EVS 9-5-79

New CALLI - SETSTV (CALLI -137), takes count,,addr of start vector table
and stores into UPT, returns old setting in AC.
Start vector setting is cleared out after core image is setup, at same
time license is set. /EVS 9-5-79

/A18
----

Fix bug in create frame FRMOP error return, decremented pushdown
pointer one too many times. /EVS 9-6-79

/A19
----

S,FRMSER: Rewrote ABSACC and changed ARMAC arguments so that
each license can have its own table of access bits that it gives
the user of an absolute frame descriptor with that license.
The old scheme involved a ring of protection (WC,RC,SY,TP).
This change makes GETTAB work like it used to, i.e. RC and WC
no longer give SY kinds of access to frames. In fact, WC no longer
gives the ability to read another frame's ACs - they can only be written
unless the caller has RC as well. /EVS 9-10-79

/A20
----

SCNSER: Repair to code which processes HANGs on jobs already on
the spare LDB queue -- it formerly ORd the job # into the TTYTAB
entry. /MCB 9-21-79

SCNSER: RETACH recoded to check access rights, to have different
error codes, and to take more argument bits -- see the page before
the RETACH:: label for documentation. /MCB 9-21-79

SCNSER: New routine COMATT to perform certain functions common to


                                       139
Text: P034; Modification history for P034                                page 26

all attaching operations. Probably more such routines forthcoming.
/MCB 9-21-79

/A21

CONFIG: give V25 16 drives instead of 8 as per V. Hunter request.
	/AA 9-27-79

CONFIG: give C26,C29,C36 ^D30 SAT PCB's as per results of testing
	C36 and finding that overlaying out of COEES' 1ESORD.OVL
	was needing more SAT's than standard 15. This change was
	patched on C36, found good, and requested for 26,29.
	CONFIG for all systems changed to have parameters
	SPCBN ; number of SAT pcb's
	RPCBN ; number of RIB pcb's
	defined.  /AA 9-27-79 and 9-28-79

SCNSER: New TTY DDB bit, DCLCOM, reflects the setting of
LDLCOM at the time of the last detach. It is set to command
mode (1) by HANGs and command-port circuit zaps if the
job is not continue-on-disconnect, and by the detach
function of the ATTACH UUO. It is set to the current
LDLCOM setting by HANGs and zaps of continue-on-disconnect-job
command ports, and by RETACH. RETACH has a mode where it
will restore the state appropriately. RETACH has also been
changed to return the port number at the source end of the
TTY being moved. (In keeping with the future, it gets this
from rh(DEVNAM) rather than returning the actual host
port number).
/MCB 9-28-79

/A22

SCNSER: bugfix at NAMSCN. 200000 <= nam <= 270000 should be
200000 <= nam <= 272727. (PATCHED IN /A21-1)
/MCB 10-1-79

CONF90:  for SLIGOS, set BPAUN=^D16 (up from 14) and SHRFPG=1000
	(up from 500 as per Bernard). /AA 10-3-79

SCHED1: Changed
		CKJB0:	SKIPN	TIMEF
			JRST	...
			PUSHJ	p, ...
	to
		CKJB0:	PUSHJ	P, ...
so rescheduling always happend when the current job is unrunnable,
not just at clock ticks. This increases scheduler overhead slightly,
but reduces unnecessary null time.
/MCB 10-3-79


KS10 support added. New modules RMXKON (KS style disk driver),
DZKON (support for DZ11 driver, used when no network is connected
to the 20), DR11C (network base ring simulator), CIOPR


                                       140
Text: P034; Modification history for P034                                page 27

(communications interface handling module).
/ELB (/EVS) 10-3-79

Fixed bug in CMPLOG routine in FILUUO that caused unit within
structure name to get set to DKKB? instead of DSKB? when adding
a pack to an unrefreshed structure. /EVS/ELB 10-3-79

Fixed bug in VREPLC FRMOP that did not allow monitor to replicate
pages into per process area because PDNMUP(P) should have been
PDNMUP-1(P), so was checking user bit in wrong stack word. /EVS
/ELB 10-3-79

Fixed bug in examine/deposit into frame FRMOP (.FORVA and .FOWVA)
which did not handle negative args correctly - address is in right half
and left half is now ignored. /EVS 10-3-79

Added .FOGFT FRMOP, graft frames. See (MONDOC:37)FRMOP.DOC for
grafting description. /EVS 10-3-79

Fixed bug where read frame virtual address would fail on a page
with MAX WRITE off because monitor always tried to replicate the page
writably. /EVS 10-3-79.

SEGCON: Fixed bug so that MFR is not set up to all rights in the case
where HF is present on file, or file has a PID, since that would allow
anyone who ran a program with HF or PID in an inferior frame to
completely take advantage of the capability. /EVS 10-3-79

UUOCON: NEW SETE PASSWORD FOR /AAA 10-5-79

/A23
----

Added .FOCON FRMOP, continue a frame.
More efficient than reading PC and starting frame up with .FOSAA.
/EVS 10-8-79

S, KISYM, KLSYM: Fixed headers and deleted trailing RCREFs so that
now these modules will cref when compiled with COMMON. /TLC 10-8-79

/A24
----

.FOCON not sufficient for restarting frames - if halt a frame,
do an $X (deposits, starts), want to be able to restart the frame,
and continue will not work properly. Solution: change .FORPC
(read PC) to return c(UPTPDL)-1 if UPTPC is an exec mode PC.
So if frame is in the middle of a UUO when it was stopped,
PC will point to UUO and get PC and restart will work properly,
since if frame was stopped, code was arranged to UUO could be
restarted. /EVS 10-8-79

/A25
----



                                       141
Text: P034; Modification history for P034                                page 28

CONF35.MAC: NUMPRT==0  number of remote ports
MON35.CMD:  RMTSER/NOLOAD as per K. Carta; C35 no longer
has a remote base. /AA 10-9-79

CONF26
CONF29
CONF36	Withdrew the increase to 30 SAT pcb's until pcb lock
code can be fixed to allow more than 15. /aa 10-9-79

PICON: SNOOP code fixed at SNNMI stopping snoop interrupts.
This change is designed to eliminate the crash on timer overflow
which was crashing P90 when they used it.  Now we stop SNOOPI
by setting a flag which causes SNOOPI to restart regular
interval-timer interrupts at the end of the current "tick".
In SNNMI we just sleep for a second to let this happen. /aa 10-9-79

/A26
----

CORE1: Fixed bug that happened when frame went into CW. When it came out,
it put frame #,,frame# into UPTLKJ which screwed things up.
/EVS 10-10-79

PICON:	Fixed bug in EVICT uuo to prevent T1 from getting clobbered.
/WRS 10-11-79


ERRCON: If detached frame has a parent, no message is printed out
for monitor error messages. It is assumed that the parent will
print out the message. Messages will still be printed out for detached
orphan frames. Original intent of this is in case system jobs like
PJ and CHKPNT bomb out. /EVS 10-12-79

CORE1: Fixed bug where context page lock was given to two frames - the
code that woke up the next waiter left UPTLKJ zero, so if after waking
up the next frame to get the lock the frame tried to get the lock,
it got it because UPTLKJ was zero, and the waiting frame assumed
that it had the lock because it was awakened. Fix is to set UPTLKJ
at the time of assigning the interlock to the next waiter, and increment
UPTLKC. /EVS 10-12-79

/A27
----

COMCON, FRMSER: Fixed bug that caused frame tree to get screwed up.
When frame was killed, it orphaned all its children, but did not
take the killed frame away from its parent. /EVS 10-12-79

ERRCON: Fixed mis-SMERGE which had IFCPU(KI) instead of IFNCPU(KI)
around code at ERRSCP, causing KL and KS monitors not to print out
"FOR LOCATION ??". /EVS 10-12-79

FRMSER: Previous fix for .FORPC which decremented PC on stack was
not correct - if a job has a PC in the monitor and its state code
is not TI or SL, any attempt to start it will first run through


                                       142
Text: P034; Modification history for P034                                page 29

the rest of the monitor code it was in, and then USRXIT will
start the program at the new PC, which should be the location after
the UUO. If in TI or SL, however, the proper place to restart would
be at the UUO itself. Therefore, .FORPC has been changed to
return the actual PC on UPTPDL if not in TI or SL, and c(UPTPDL)-1
if is TI or SL. /EVS 10-12-79

/A28
----

FRMSER: Changed some erroneous comments in CREFRM, PSHARG. No source
code changed. /EVS 10-17-79

COMMOD: Fixed bad UNYOS and UNYRCO byte pointers - used UNS???
to address unit data block locations instead of UNI???. /EVS 10-17-79

COMMOD, FILIO, BPXKON, RMXKON: Took device dependent code that was checking
at runtime for TYPRM in FILIO away.
To add insult to injury, this code was also under IFCPU(KS) conditional,
when actually it is possible that in the future KS will have different
disks other than RM03 disks. Added new device dependent routines
called thru KONSFT and KONHRD, which calls the device service routine
on soft and hard errors respectively. For BP units, just a noop, but
for RM units, copies the RH11 registers into the proper unit data block
locations. /EVS 10-17-79

DR11C:  Fixed bug which caused block mode output header message to be dropped
when block mode output requests were adjacent and interrupt activity was high.
Also added comments to most of the code. JRG/18-oct-79

SCNSER: Removed STOPCD in NXTFRC when it finds a job on the spare
LDB queue which has no TTYTAB entry -- it is indeed possible for
the job to have killed itself while on the spare list. The new code
just goes on to the next job, if any.
/MCB 10-22-79


PCBIO: INSTALL PPCBWC AND SPCBWC PRIM AND SEC PCB WAIT COUNTERS
 FOR ICP TO WATCH. /AA 10-19-79

/A29
----

CLOCK1:  install OLDJOB cell gets set just after MOVTST to
 job we last ran, in hopes that crash analysis can sometimes be
simplified. /AA 10-23-79

SCNSER: Changed F to T2 in NXTFRC "fix" -- DDB addresses are not
job numbers (see, if the monitor were written in PASCAL...).
/MCB 10-26-79

CORE1: Fixed bug that crashed system when tried to add
super mapped page into working set. /EVS 10-31-79

/A30


                                       143
Text: P034; Modification history for P034                                page 30


SCNSER: NXTFRC made to save/restore J in case this is the cause of
the mangled-J crashes.
/MCB 11-2-79

MON26.CMD: Make C26 a KL processor, was a KI. /AA

/A31
----

Fixed bug in UUOCON - If got address check in IOWD list, MAPLSE
which decrements DIO counts would call ADRCLS, but JBTABT was stil
setup, so it did UMOVE F,F which got contents of user F, used it as
DDB address, crashed. Fix is to SETZM JBTABT(J) in ADRCLS.
/EVS 11-9-79

/A32
----

MON37.KI,MON37.KL
CONF37.KI,CONF37.KL
Make command files for 37 to be a KI.  Both are available;
MON37.CMD and CONF37.MAC are whatever was most recently copied
from the KI or KL file. /AA

































                                       144
Text: P034; Modification history for P034                                page 31

/C

/B01
----

COMCON - Changed the REASSIGN calli to perform a deassign if the 
destination job number = 0.  This is for CHKPNT.  /WRS 15-NOV-79

PICON, FILIO, KLSYM, IOCSS:
FIXED CACHE BUG THAT INVOLVED KL10 CACHE VALIDATES.
BUG WAS THAT A CACHE SWEEP COULD BE LEFT RUNNING AFTER DISMISSING
BACK TO USER - INTERRUPT COULD COME IN FOR CACHE SWEEP DONE RIGHT AFTER
CACHE VALIDATE CODE PICKED UP SERIAL NUMBER AND BEFORE VALIDATE
WAS STARTED, CODE WOULD BELIEVE THE VALIDATE WAS COMPLETE, BUT
THE VALIDATE WAS STILL RUNNING. IF THE VALIDATE THAT CAUSED THE 
INTERRUPT WAS RUNNING DURING USER MODE EXECUTION, THE CODE THAT DID 
THE SECOND VALIDATE COULD START I/O BEFORE MEMORY WAS COMPLETELY 
UPDATED. FIXED BUG BY DOING FOR VALIDATE WHAT WAS ALREADY DONE FOR 
UNLOAD -TURN OFF PI SYSTEM, START THE VALIDATE, AND CLEAR CACHE 
SWEEP DONE, AND RETURN SWEEP SERIAL NUMBER IN T1. THUS, CAN NEVER
LEAVE CACHE SWEEP RUNNING WHEN USER IS. /EVS 11-19-79

DDT: EXEC DDT NOW HAS ^Y COMMAND FILES. FIRST
VERSION OF FRMDDT IN THIS SOURCE. /EVS 11-19-79

/B02
---

COMMON: fixed erroneous comment about SHRFPG symbol and moved
some text which had gotten orphaned on page 2 back to page 3 where
it belongs. (Probably a SMERGE effect). /AA

COMMON: Inserted new channel routine macro UNASS on p. 53. Macro
is called to generate code for unassigned channels that turns off
the channel and logs the occurence of the faulty interrupt by
setting a bit in the flag word BADINT in crash code.  New symbols
UNASS'CH are initially set to 1 and cleared to 0 by macros MULASG,
ASGSAV, and ASGINT as particular channels are assigned.  UNASS'CH are
then used to help determine which channel macros to invoke.
CTYSIM: MOVE T1,CH6+1 changed to MOVE T1,[JEN @CH6] on p. 9 to 
support above. /TLC 11-28-79

Changed erroneous comment in FRMSER about not being able to halt
a frame, read PC, and start it at the PC in order to continue it.
Actually, if the frame was in IO wait in an INIT UUO, it is
not restartable. Therefore, OPEN should be used instead.
(This is because PC points to data in the INIT. Could be fixed by
adjusting the PC inside INIT) /EVS 11-28-79

SCNSER: Fixed XOFF bug introduced by tabs break code. L2LNXO moved
to LDRNXO but GOXOFF: MOVSI LDRNXO instead of MOVEI LDRNXO and
BYTPD pointed to left instead of right of LDBDCH. /TLC 11-28-79.

CLUBS: fixed bad code in KCBKER which called GETLMA then
sosge uptldc before existence check. Now call REDLMA and


                                       145
Text: P034; Modification history for P034                                page 32

no SOSGE.  P3/P4 carry slot info around in CLUBS; but as far
as I can see its only use is to test LMPMXW in order
to set first-class membership properly. /AA 11-28-79

SCNSER: GOBPF+5 MOVSI to MOVEI (more of 11/28 fix). /TLC 11-29-79

SIMKL: Made simulator work on a KI by adding code to simulate
the DADD instruction. Took out message SETABK UUO FAILED.
/EVS 11-29-79

SCNSER: GOSBL made to not send bell if either (1) port is in
image state or (2) host-no-xon is set for it.
TTYKIL made to re-route the spare-LDB queue around the job
being TTYKILled if the job is detached -- this should
solve the recent crashes -- and to STOPCD if the job is
attached and on the spare queue. The STOPCDs at HNGWT2 and NXTFRC
which had been patched out have been put back in (since
null DDBs should no longer be found in the queue, since
TTYKDB should have taken them out). TTYNFR made to error-return
if the "new" frame already has a command port DDB (this is what
TTYATI, COMCON's analogue to TTYNFR, already does).
Per AAA, AUXSTA states given names, and state tables commented.
Also, CREAUX error-code names changed to agree with those in
the YAMM.
/MCB 11-30-79

/B03
----

LPTSER: Reassigned LPT??? LH(S) bits again. All other modules
had their bits moved to make room for device independent bit
IOHNG, but somehow change never made it to LPTSER. This caused
hung device problem whenever LPT tried to run. /EVS 12-6-79

PICON,COMMON,DR11C,DZKON,CTYSIM: KS change. Now a second "SH"
command at the 2020 console will act the same way a deposit in 30 acts
on the KL/KI's and will crash the system./ELB 12-6-79

/B04
----

SCNSER aux circuit timeout back to 150 sec (incorrect edit in /B02
made it 15 sec).
/MCB 12-7-79

SCNSER AUXCAL fn '67, .AXOPC, output pointer with count. Like
.AXOPT but (1) stops at specified count INSTEAD OF when a null
is reached, and (2) always updates the count and pointer,
not just when it can't complete the output. The count is in
the rh of the word at the effective address; the byte pointer
is at the effective address+1.
/MCB 12-7-79





                                       146
Text: P034; Modification history for P034                                page 33

/B05
-----

SCHED1	MAKE OLDJOB CELL REALLY WORK RIGHT. CODE MOVED HERE FROM
	CLOCK1. /AA 12-10-79

CONF90 increase SHRFPG to 1300., define OPNFPF to 10.
	/AA 12-12-79

/B06
----

SCNSER Fixed misassembling masks. /MCB 12-13-79

/B07
----

SCNSER Typos in spare LDB cleanup code. /MCB 12-14-79

/B08
----

Changed SAA and SVA to be fast rights in preparation for gate jumping
code. /EVS 12-14-79

COMMON: CRSCNT MOVED TO END OF CNFTBL. IFCPU(KS)< MAKE FORM-
SIZE AND LINES PER PAGE INTO PARAMETERS TAKEN FROM CONF##.MAC
/ELB 12-14-79

FRMSER: New FRMOPs .FOCAR,.FOCER,.FOVCH,.FOJMP, which are
read child to parent rights, read child to parent effective rights,
validate child's handle, and gate jump. /EVS 12-14-79.

/B09
----

COMMON:
CORE1:
ONCE:
MAPIO:
PCBIO: CHANGE DATA STRUCTURE ACCESSED THRU %CTSTS,%CTADR SO
THAT FIELDS ARE 6 BITS WIDE; NEW JBTPCB REPLACES JBPADR &
JBPSTS.  FOR ANY GIVEN JOB, JBTPCB(J) HOLDS ALL STATUS & ADR
BYTES FOR THE JOB.  HEAVY PCBIO EDIT, MINOR MODS TO OTHER
MODULES LISTED.  ALSO CHANGED PAGIN/PAGOUT/PAGIMD TO
STORE REAL PCB ADDR IN PGYLMA, AND FINPCB TO PICK IT UP FROM
THERE. PGYLOG FIELD NOW NOT USED. /AA 12-18-79

/B10
----

UUOCON:
SETE##: NEW MODULE SETE## CONTAINS SETE PASSWORD AND
LICENSE TABLES ONLY. FOR TYMSHARE HOSTS, SETETY.MAC IS
STANDARD. FOR TYMCARE, SETETC.MAC; TRW: SETETW.MAC;


                                       147
Text: P034; Modification history for P034                                page 34

OTHERS WILL BE ADDED AS NEEDED. 

MON##.CMD MODIFIED TO LOAD NEW MODULE FOLLOWING COMMOD.
GUY BLOOD'S SETE PASSWORD ASSIGNED 0 LICENSE. /AA 12-18-79

/B11
----

SCNSER: Fixed CREAUX to use 0 as the "originating" port
when the command port of the job building the circuit is
in fact the spare LDB (the spare LDB has an unacceptable
port number).
/MCB 12-19-79

/B12
----

SCNSER: DDBLDB(U) => DDBLDB(F) /MCB 12-19-79


/B13
----

SETETY: NEW PASSWORD FOR ME /AAA 12-28-79

COMMON: FIX TAKDWN JSR LODBTS BUG INTRUDUCED LONG AGO BY ME
	/AAA 12-28-79
/B14
----

COMMON: PUT IN IFNDEF'S FOR LPTLPP AND LPTFS FOR THE KS LINE PRINTER VFU
	DEFINTION./ELB 12-31-79

COMCON: FIX BAD COMMENT FOR JOBKL /AA 1/2/80
	FIX NEWTER: "PORT CAPACITY EXCEEDED" MSG TO CHECK F/0
	AND STOPCD IF F/NON-ZERO (MEANS TTYTAB(J) HAS A DDB BUT
	JBTSTS(J) HAS JNA OFF--SOMETHING SCREWED UP). /AA 1-3-80

SCNSER:	ADD COMMENTS TO ROUTINE TTYATI /AA 1-3-80


















                                       148
Text: P034; Modification history for P034                                page 35

/D

/C01
----

PCBIO: FIX TYPO IN MAPXCH..LEFT IN @-BITS IN INSTRUCTIONS
REFERENCING %CTADR,%CTSTS. /AAA 1-7-80

UUOCON: FIX NAMES OF CALLI'S (UNUSED 1ST ARGUMENT TO
'X' MACRO, PAGE 7) TO STANDARD NAMES RECOGNIZED BY MACRO.
FROM NOW ON, THIS LIST OF NAMES WILL BE THE FINAL AUTHORITY
ON UUO NAMES.  WHEN YOU INVENT A NEW UUO, THE FIRST ARG
TO "X" SHOULD BE THE AUTHORIZED PUBLIC NAME OF THE UUO;
THE SECOND ARG CAN BE ANY CONVENIENT LABEL WHERE THE UUO CODE
BEGINS; THIS INTERNAL MONITOR SYMBOL MAY OR MAY NOT
BE THE SAME AS THE EXTERNAL PUBLIC NAME. /AA 1-8-80

LPTSER: (IN THE KS10 SECTION) FIXED THE OFFLINE-ONLINE & POWERDOWN-UP
PROBLEMS.  STILL MAY LOSE A COUPLE LINES OF DATA IN THE OFFLINE-ONLINE
CASE BUT NOW IT WON'T HANG THINGS UP FOREVER. /GL 1-11-80

COMCON: FIX JOBKL TO SET UP F (VIA A CALL ON TTYFND) WHEN IT
DOESN'T CALL JOB1. THIS MAKES TTYKIL WORK. /MB 1-18-80

SEGCON: Changed error in comments for LOGOFF uuo.  /WRS 1-18-80

/C02
----

COMCON: RESCINDED NEWTER CHECK ON F=0; F<>0 HAPPENS WHEN
LOGIN CMD IS PROCESSED 2ND TIME. /AA 1-22-80

CONF25: DEFINE 2ND STRING DISK BPB WITH 8 DRIVES /AAA 1-24-80

/C03
----

COMMON: Fixed MXPROT which had been inserted in the middle of GETTAB
table 15 (GTODP).  Also various cosmetic changes to same page.

FRMSER: Fixed typo in comment -- said error codes were returned
in T3 when they are returned in P3. /MB 1-29-80

SCNSER: Fixed off-by-one error in symbol MAXTMC. Also made SCNSER
accept TMC subcodes up to TMCSLP greater than MAXTMC so that
TYMNET can get ahead of us (this "solves" some crashes).
/MB 1-30-80

/C04
----

SCNSER: Fixed typo in CREAUX timeout, 15 sec should have been
150 sec. Also made KSs use port 1 instead of port 0 for CREAUXes
from detached jobs, and merged in Lee's change to let KS's
use any host #.


                                       149
Text: P034; Modification history for P034                                page 36

/MB 1-31-80

/C05
----

SCNSER: Fixed SETTBK typo (actually, rewrote the whole thing so's
it can be read.
/MB 2-7-80

SCNSER: Made ACTMC (which sets terminal characteristics) fake the
effect of the node's reflecting the terminal type. This is, of
course, temporary. /MB 2-8-80

/C06
----

FRMSER: changed read halt status block operation to only require
.ARRUN access rights.  /WRS 2-11-80

S: changed the access right .ARDET to X rather than W access required
to allow EXEC to simulate TTY trees until they are here.  /WRS 2-11-80

SCNSER: Changed HNGUUO to take a frame descriptor rather than just
a job number. If bit 15 (hang system) or bit 17 (hang port) is
set, it requires WC license like before; otherwise, the rh of
the argument is taken to be a frame descriptor and it requires
hang-frame access to the specified frame. /MCB 2-12-80

FRMSER,SEGCON: Added the following FRMOPs:
  fn 32 .FOGET setup frame core image from file
  fn 33 .FORUN setup and start frame from file
  fn 34 .FOSAV save frame core image on file
  fn 35 .FOSSA sharably save frame core image on file 
These features are required for the EXEC.  /WRS 2-12-80
[these featues don't seem to work in C06]

/C07
----

SCNSER: .ARHNG is a slow access right! changed FARCHK call to
FDRUPX. /MB 2-13-80

SCNSER: Made aux circuit timeout values (AUXTMR, AUXTMP)
variables so they can be patched in cases of slow TYMNETs.
/MB 2-13-80

SCNSER: Added two counts: NRPCNT is the number of times
CREAUX has given the "supervisor didn't supply a port"
error-return, ZRPCNT is the number of times the received port
was zapped. Thus, the difference between the two counts is
the number of times the supervisor REALLY failed to supply
a port. /MB 2-13-80

SEGCON: Fixed some typeo's in FRMOPs added to C06.  /WRS 2-13-80



                                       150
Text: P034; Modification history for P034                                page 37

/C08
----

SCNSER: New TINASS causes, .IAYEL (9.: yellow ball received),
and .IAGOB (10.: character gobbler received). Enabling .IAYEL
prevents the monitor from reflecting the yellow ball. If such
an unreflected yellow ball has been received, the user may (should)
use the new .AXSOB (70: send orange ball) AUXCAL function to
reflect it (.AXSOB does a LEVDEF so the ball will be sent
immediately). There are two new POLPRT bits,
LXRYBS (1B7: yellow ball seen) and LXRCGS (1B8: character gobbler seen)
to go with the new interrupts.
/MB 2-14-80

/C09
----

SCNSER: Fixed bug in HNGUUO -- wrong sense for "job, not port" bit.
/MB 2-14-80

/C10
----

FRMSER: Save name of new process in JBTNAM on GET/RUN FRMOP's.
/WRS 2-24-80

SCNSER: New bit, LNLZIN in LDBLIN (the safest word in the LDB), set
when a real zapper is received from TYMNET, cleared when that
zapper is responded-to. Three counters added: NZAPIN, the number of
zappers received, NZAPN2, the number received on a port which
had already received one but not yet echoed one back, and
NZAPOT, the number echoed.
/MCB 2-27-80

/C11
----

SCNSER: More zapper-anomaly stuff. New counter, NZAPLG, # times
we've gotten a login on a port with an unechoed zapper. Also,
for it and the other detected anomaly, NZAPN2 (see above), it
now calls ZAPBUG, which stores a bunch of data about the LDB into
locations starting at ZBGBUG (which will contain the address of
the counter, either NZAPLG or NZAPN2 currently).
/MCB 3-3-80

/C12
----

SCNSER: Fixed above stuff related to calling ZAPBUG.  /WRS 3/3/80

/C13
----

UUOCON: Changed JOBLIC routine to allow job license to be increased
only if the current process has WC license.  The restriction about


                                       151
Text: P034; Modification history for P034                                page 38

aux-circuits has been removed.  /WRS 3/5/80
*****								   *****
*    Note: if this monitor is released before 4/1/80, it should be     *
*    patched so that the test for WC license in JOBLIC always skips.   *
*****								   *****

SCNSER: Fixed a bug where zappers directed at detached aux
circuits don't get echoed -- this caused us to lose a zapper
whenever a zapper arrived after a type 7 but before the job
could wake up, get a DDB, and attach it to the aux port.
/MCB 3-6-80

MAGSER: Fixed bug in 2020 tape service which caused hung tape
units never to give back control, since HASCTL was turned off
in S but never stored back in DEVIOS at TMXHNG. /EVS 3-10-80

MAGSER: Fixed bug in SGTDEV (gets tape control) which never gave
the skip (unit unavailable) return, therefore never getting
the DEVICE MTA? OPERATOR ACTION REQESTED message. Instead,
it was incrementing location on stack above return address,
having God knows what effect. /EVS 3-10-80 (These bugs
found and fixed at TRW)

PICON: made APRFAT global for FILDDT's sake.

FILIO: Fixed cache bug which reared its ugly head whenever SWPSTR
tried to include a disk transfer when the disk address was contiguous
with the last address but core was not contiguous, forcing a new
section of channel command list to be written. bug was just failure
to notice in this condition if the sweep number of the request
was greater than greatest seen so far, which caused sweep
not to happen in this case. bug didn't manifest on busy or partly
busy system because if another job runs it tends to flush out
the cache. This is definitely the cache bug found in Paris - the
tests they had to reproduce the failure on a stand alone system
now succeed. /EVS 3-19-80.

SCNSER: Removed POPJ P, P1 at start of ZAPDFR, since ZAPDFR
now PJRSTs to SIMRZP instead of redispatching.
/MCB 3-21-80.

SETETY: Put myself in the SETE table at position 3. /GL 3-25-80

COMMON: Changed the initialization of the LP20 buffer space.  The
changes are all within an IFCPU(KS).  I'm using more space.  If it
now takes more than one page LPTSER probably won't work on the 2020.
See comments near LPVLPT:.  /GL 3-25-80
Corrected a typo from 3-25-80.  /GL 3-26-80

FRMSER: Bug fixes to .FOGET,RUN,SAV,SSA.  /WRS 3-27-80
SEGCON: Optomized SG3.  Changed how .FOGET,RUN,SAV call things.  
/WRS 3-27-80

C13
---


                                       152
Text: P034; Modification history for P034                                page 39


COMMON: added some new entries to GETTAB tables for CRSHID's sake:
	NSW(40) = SYSUID; last allocated universal frame id number
	NSW(41) = THSTIM; UPTIME when SCNSER last ran
	NSW(42) = MXTIM; all time max of (THSTIM-UPTIME)
	CNF(36) = XWD SAV30,NUMTAB; addresses for CRSHID
SCNSER: removed definitions of THSTIM,MXTIM as per above
/WRS 3-27-80

FRMSER: "patched" FRMOP dispatch table for .FOGET,RUN,SAV,SSA to
	CPOPJ so as not to provide a potentially buggy service in 
	version D.  /WRS 3-27-80


CONF26:
CONF29:
CONF36: XP SPCBN,^D30 in all 3, so we won't need to patch this
in any more on these systems.  Backup CONF##s not made. /AAA 3-27-80

CONF33: MON33.CMD make 33 a KI again
CONF39: MON39.CMD make 39 a KL again /AAA 3-27-80




































                                       153
Text: P034; Modification history for P034                                page 40

P034/E
------

/D01
----

CON23.MAC changed JOBN to ^D80, PORTN to ^D96 as per
	Saltyron and Spinale /AA 4/8/80

COMMON UUOCON SCNSER Initial PTY implementation. New CALLI,
CREPTY (-141) returns a pair of PTY port #s in the left and
right halves of the ac. The idea is that you set image mode and
turn off echo on the one (data mode 24 or 214) and keep it
for yourself, then attach the other one to the job you're
controlling. They work more or less like aux circuits: to
get rid of one you (either end) zap it. Two new symbols,
RPORTN (# of real ports) and PPORTN (# of PTYs). They add
up to PORTN. COMMON sets PPORTN to 4 if it is undefined,
and this is subtracted from PORTN to get RPORTN, so if a
system's configuration file is unchanged it will wind up
with 4 fewer real ports than it used to have (and 4 more
PTYs). /MCB 4-9-80

/D02
----

SCNSER Dynamic quota-setting for PTYs, dependent on TIHLTN and
LDBTIC/ECC at the other end. Also, PGSBL code, though now
(paradoxically) it should never get executed.
/MCB 4-11-80

CONF37 64 real ports, 64 pseudo ports for system 37. /MCB 4-11-80

SCNSER Fixed yellow and orange ball PTY dispatch routines
to manage timeout bits and wait for input wait (!),
respectively. /MCB 4-14-80

/D03
----

SCNSER Fix at FRCCGB to load F (!). /MCB 4-15-80

SCNSER New AUXCAL function '71, .AXSOX to set/clear/read the
suppress-output-translation bit for the OTHER SIDE of a PTY.
Also, fixed LDPDEM to point to the new position of the bit
(which moved from LDLDEM to LDRDEM). /MCB 4-15-80

/D04
----

It is now possible to delete files with RIB errors normally.
The sequence is: LOOKUP (gives error 6), then just rename to 0
as in normal deletes. Most programs will not be able to delete
the RIB error files because they don't continue past the lookup error.
/EVS 4-17-80


                                       154
Text: P034; Modification history for P034                                page 41


Fixed race condition in file deletion code that could potentially
cause a file that is superceding an existing file to get deleted
instead of the existing file in the case where someone is
deleting the existing file. Also, this bug could cause in very rare
conditions multiple UFD entries. (No interlock was gotten while
deleting UFD name out of directory, and it looked by name, not by
retrieval pointer. Fix was to set ATPUPD as an interlock). /EVS
4-17-80

Fixed bug in CLOSE code that would die if doing CLOSE reset
on a channel open for update and the file had a RIB error.
/EVS 4-17-80

Performance improvement: In prior monitors, CLOSE output always
made the RIB and UFD page dirty by filling in the stuff from
the ATB (and FNB). Save IO sometimes by doing compare before stuffing
the data to see if its actually changing. Probably will save
writing out the RIB again on CLOSE for update mode where nothing
about the file has changed.
/EVS 4-17-80

Installed mechanism to cause a new bit in RIBLIC and the corresponding
field in the UFD, ATPALC in ATBLCW, UFPALC in UFYUF2, RIPALC in RIBLCW,
to get set before any allocation change is about to occur and to
get cleared on close input under the proper circumstances. New RIB
location used called RIBALT which is used to determine when
a file's RIBs, SATs, and UFDs have all been written out to the disk.
This bit is looked at by DSKCLN in "fast" mode in the UFD. In "fast"
mode, only those files with RIPALC are looked at, and the resulting
pages are cross checked for multiple use and ORed into the SATs.
Lost pages can easily result, but the theory is that the file
structure will still be intact. The operator can override the
monitor's decision as to which mode to run DSKCLN in in case there
is some file system corruption that results in a "fast" STOPCD
which doesn't fix the damage. /EVS 4-17-80

An attempt was made to abolish UPTREL. It would be nice if
a program could mess with .JBREL and cause the CORE UUO
to do allocations past a holey part of the address space
that was brought into being by doing MAPs or VCREATes or something.
But LOADER sets JOBREL to what it thinks it should be after
one of its CORE UUOs, resulting in a mess, so I had to take
the part that looks at .JBREL out in the CORE UUO and make it
look at UPTREL again. However, allocation of buffers looks
at .JBREL, and so does REMAP, so beware of dumb programs that
set .JBREL by themselves to something. /EVS 4-17-80.

Part of the "fast" DSKCLN change - STOPCD now has an argument.
SLO means that the crashing monitor will attempt to tell the
newly reloaded monitor that slow DSKCLN must run. A blank
argument means the new monitor will run "fast" DSKCLN.
An argument of NO means things are so bad that a warning message
should be printed out and auto reload defeated. This is intended
to get the operators to make maintainence fix the hardware.


                                       155
Text: P034; Modification history for P034                                page 42

The criterion for setting a SLO as opposed to fast DSKCLN is
as follows: STOPCDs that are intended to check non-file system
related interfaces should all be normal ("fast"). STOPCDs
that indicate trouble with the file system data base (ATBs, FNBs, STTs,
etc.) should be slow, since they don't happen that often and
they indicate possible trouble with the data base on disk.
STOPCDs that imply that the IO or PCB data bases are bad can be
fast, since chances are that the disk is still OK. (This may prove
to be wrong by experience, in which case we will change the STOPCD
to SLO.) STOPCDs that deal with SAT counts, bits not being on in the
SAT when they should and vice versa, should be SLO, since it is very
likely that there are multiply used pages hanging around somewhere.
When writing a new STOPCD, bear in mind that the availability
increase we hope for is based on running "fast" DSKCLN in most
cases, so be thoughtful before deciding that SLO is the proper
STOPCD. Also remember the effect that the system comes down in 
fast DSKCLN, and crashes again with a SLO DSKCLN - if it is likely
that this will happen for a certain STOPCD, then the first one is ok
to be fast, since chances are a slow STOPCD will result if the
first decision was wrong.

RIB errors with no IO error on the transfer no longer crash the system
immediately. This is because the system can crash in the middle of
a RENAME, and ATPALC isn't set on the old UFD entry for efficiency
sake. Instead, we will expect to see a RIB error when the system
comes up again, and the file can be deleted using the new RIB error
deletion feature. However, if ^D60 rib errors with no IO error
are seen for two or more RIBs, the system will go down and run
slow DSKCLN. This number can be changed as we have experience
with it, and it might be possible to also introduce more than
one memory cell to remember RIB error retrieval pointers so
that we can crash after seeing X different errors on Y different
RIBs. This eventual crash is designed to protect the system
against flakey disk hardware. /EVS 4-17-80

COMMON,COMMOD,FILUUO,UUOCON,ONCE,ONCDSK: Installed Restart mechanism
to allow flexible system bring up.  Currently three Restart types
exist:
	Type	Mnemonic	Meaning
	ONCE	ON		manual ONCE
	BOOTS	BT		manual BOOTS
	DSKCLN	DC		DSKCLN type: 0=None, 1=Fast, 7=Full

ONCE and BOOTS state can be selected by three entities: user via .REST
SETUUO, oper with SS4, monitor.  The effective state is determined by:
  user if defined else SS4 if set else monitor.
DSKCLN type can be specified by oper in ONCDSK, user prog with .REST,
monitor in crash code, HOM blocks, default (type Full), in that
order of priority.

COMMON: CRASH code: Replaced old SAX BOOTS readin code with a
generalized primitive driver; entry points: SAXRED, SAXWRI.  Added
routines to setup for (PMDRD, PMDWT) and dispatch to (PMDDSP)
primitive drivers.  Changed dispatch addr to BOOTS to always be
startadr+5: new BOOTS entry point that accepts a command string


                                       156
Text: P034; Modification history for P034                                page 43

addr passed in reg 1.  Added new routine ISBOOT to verify that
BOOTS has indeed been loaded; BTPREP to do SAX area save and find
highest possible BOOTS starting addr.  Save SAX area at bootsend+100
even for systems without SAXs because BOOTS requires this to preserve
SAX area in crash dumps.
        Inserted Restart code: Macro RESYM to generate Restart
symbols, byte pointers, RESTRT validator, user Restart save word.
Determination of monitor Restart conditions based upon take-down
type, hardware status, and file system integrity.  Transfer of
user hang or crash Restart bits to RESTRT word.  Validation of
RESTRT.  Transfer of pack ID from STR DDB to REPSID.  Writing of  
DSKCLN type to HOM blocks if required, desired.  Prepartion of
BOOTS command string, BTSTR.  Routine RECOMP to compute Restart
condition based upon user, monitor Restart and SS4 setting.
Location TDERR to be JSRed to if Restart error occurs (e.g.
inconsistent HOM blocks).  Inserted inter-monitor block to facilitate
communication between two consecutive monitors:  REPSID=26: pack
set identifier used to insure that otherwise valid RESTRT will
be ignored if new STR is mounted between monitor incarnations;
RESTRT=27: lh/ validator, rh/ user, monitor Restart state.
New GTODP GETTAB table item 5 (.ODDCT) holds DCN which contains
DSKCLN type desired for DSKCLN after sys initialized.  During ONCE
DCN is used to store DSKCLN types supplied by various sources.

Changes in other modules to support Restart:

COMMOD: Added HOMDCT (=30), HOMDCV--HOM block DSKCLN type and
validator; STRPID, STR pack set id in lh of STRBTS; UNYSCN, byte
pointer to UDB chan #.

FILUUO: Changed DSKCLR UUO.  Accepts 3 modes specified by ac field
value: DC.CLR (=0), clear in-core disk info; DC.FPC (=1), set
STTFPC for all SATs on all units and clear SRPNDS; DC.NDS (=2),
clear SRPNDS only. DC.NDS is needed to support DSKCLN mode 0 (None)
since it is DSKCLN that decides it does not have to analyze a
particular STR.

UUOCON: New SETUUO function 12 (.REST) to read/write crash/hang
Restart bits and designate whether Restart is to be written to
disk.  New SETUUO function 11 (.BTSTR) to read/write BOOTS command
string and ascertain max string length.

ONCE: Copy Restart from RESTRT to DCN, clear RESTRT--done to insure
that RESTRT is only good for the life of one crash/hang.  Check 
RESTRT validity, compute once action and act accordingly.

ONCDSK: Macro DCNDEF to define ONCE Restart symbols and pointers
and select DSKCLN type priorities.  Setting DCN to highest priority
DSKCLN type to allow GETTABing by DSKCLN.  Oper prompt for DSKCLN
type if not defined in core or disk and SRPNDS set.  Last two items
accomplished with SPCDKN.  Routine SPCDKP used to compute highest
priority DSKCLN type.  Parsing done with SCAN macro.  New command,
DSKCLN, to allow oper query and selection of DSKCLN type.
					/TLC 4-29-80
/D05


                                       157
Text: P034; Modification history for P034                                page 44

----

SCNSER Fix at FRCCGB to load J (!). /MCB 4-17-80

SCNSER Make PTY send-bell code simulate a black ball to either
end instead of sending a bell. It shouldn't happen anyway. The
count TTYLOS is still the # of TYMNET black balls; there is a
new count, PTYLOS, for the simulated ones (# balls/2).
/MCB 4-17-80

UUOCON:  corrected name of Calli -136 VPEEK (was NPEEK)
/AAA 4-17-80

PICON: changed EVICT uuo to require job to be running 
/WRS 4-17-80

/D06
----

LPTSER: Added form size control for the LP20 using the MTAPE UUO
to pass a list of commands to change the DAVFU buffer and reload
reload the LP20s vertical format unit.  All changes are within
the IFCPU(KS) section. /GL 4-23-80

File system bug in the new truncate CHANIO. DLTTR0 call to FLUSHA
assumed that callers were RENAME or ENTER and that DDB pointers
were already dumped out if they were changed. This is not true
of the truncate CHANIO, so for safety sake put in call to PTROUT
at DLTTR0. Symptom of this was file with RIB errors, since after
truncation the deallocted pointers still left in DDB would be written
back to RIB at CLOSE time, thus generating free pages and making
RIBALP and RIBSIZ wrong. If RIB validate CHANIO was performed
before truncate, nothing went wrong because pointers were dumped out
then. /EVS 4-24-80

SEGCON: skip over UXCTBU doesn't work, caused SAVE not to save
enough (supposed to use JOBREL if JOBDDT setup.). /EVS 4-24-80

PICON: fixed EVICT uuo fix.  /WRS 4-25-80

SCNSER: Fixed CREAUX code that decides whether to use the
command port's port# or port 0 to deal correctly with PTYs
(i.e., to use port 0). /MCB 4-28-80

COMMON: A crash during DSKCLN (i.e. when SRPNDS=1) will now cause
monitor DSKCLN type to be set to FULL. /TLC 4-29-80

COMMON: Changed the initialization of the LP20 buffer space again.
The changes are all within an IFCPU(KS).  /GL 4-30-80

COMMON: Fixed bug causing CRASH once command to hang in crash code.
/TLC 5-2-80

/D07
----


                                       158
Text: P034; Modification history for P034                                page 45


COMMON SCNSER: Block i/o for PTYs. (COMMON has new block i/o buffer
size). /MCB 4-30-80

SCNSER: New AUXCAL function, .AXFRS (function 72), Force Rescan String:
	MOVE	ac, [port,,.AXFRS]
	AUXCAL	ac, [
		count
		ildb pointer
	]
	  error return	;for the normal AUXCAL reasons
	normal return	;ac/ return code
where <return code> is one of
	0  .FROK   no error
	1  .FRAUX  can't do it on an aux circuit
	2  .FRBIG  string too long (must be < TIHLTN)
It clears the input buffer, forces the string in, adjusts the LDB
so the string won't be echoed, and sets the rescan bit.
/MCB 5-2-80

/D08
----

SCNSER:  PTY block output fix /MCB 5-5-80

/D09
----

SCNSER: PTY block input fix /MCB 5-5-80

ONCDSK:  SWPDEF ROUTINE NOW ASSIGNS DEFAULT SWAP SPACE
 OF 1 PAGE PER UNIT RATHER THAN ^D700 FOR 3330-TYPE PACKS.
/AAA 5-5-80

COMMOD: FIX LIMP4S TO EQUAL UNSP4S.  BOTH WERE INDEPENDENTLY
 SET = ^D13.  LIMP4S IS USED BY ONCDSK TO LIMIT SIZE OF
 OPERATOR ENTRY WHICH IS STUFFED INTO FIELD UNYP4S WHOSE
 WIDTH IS UNSP4S. /AA 5-5-80

SCNSER: Block input-message-handler fixes at FREBUF and BLKIHR.
/MCB 5-7-80

SEGCON: MAGTAPE GET/RUN FIXES; ELIMINATE REQUIREMENT
 THAT OPERATOR SPECIFY CORE ARG TO THE GET/RUN.  USE
 JOBHCR (VESTIGIAL JOBCOR) IF HE GIVES NO CORE ARG. /AA 5-9-80

/D10
----

SCNSER: .AXFRS now causes the i/o-would-block interrupt
rather than blocking, if the interrupt is enabled and there
is no bufferlet space for the string. An output-space-available
interrupt will be signalled at the next second there is ANY
bufferlet space. /MCB 5-9-80



                                       159
Text: P034; Modification history for P034                                page 46

SCNSER: New POLPRT bit, LXRIOS ('400), set when an output-
space-available interrupt has been signalled for the port.
/MCB 5-9-80

/D11
----
SEGCON: FIX SAVJOB TO INITIALIZE VESTIGIAL JOBDAT EVEN
IN THOSE CASES WHERE PG 400 CANNOT BE MADE
RDW. TRY TO MAKE IT COW (.SHR AND .HGH CASE) AND DO
THE INIT'ZN. /AA 5-12-80

/D12
----

FRMSER: turned on FRMGET FRMRUN FRMSAV FRMSSA, but only for doing them
to another frame...until I get time to fix the rest of the code, user
will get "frame already running" error if does them on himself.  
/WRS 5-13-80

/D13
----

SCNSER: Another attempt at a working .AXFRS. New error codes
(see SCNSER at FRSRSC:). /MCB 5-14-80

/D14
----

SCNSER: Made .AXFRS nonskip-return on errors. You can tell its
error-returns from the AUXCAL dispatch's because .AXFRS has no
error code 72 (and presumably never will).
/MCB 5-14-80

/D15
----

SCNSER: Experimental fix to backpressure code. Message types
TRO CGB BIN TRI and BPN can now be sent even if the port is
being backpressured (the point was to allow BPN to be sent;
the rest were promoted because their ordering seemed possibly
significant). New pseudo-message type BOP (block output in progress)
for PTYs. /MCB 5-16-80

/D16
----

SCNSER: bugfix at PGBOP. /MCB 6-16-80

/D17
----

MAPIO, FILRIB: KFTRN was comparing new file size with current
to see if new size was still within last page without the atomic
file lock, and then getting the lock if same and storing ATBSIZ,
but this left window where file size could change while waiting


                                       160
Text: P034; Modification history for P034                                page 47

for the lock, and ATBSIZ could wind up wrong. Fix: create new
entry point in DLTTRC for truncate for the case where the
file lock has already been obtained and call there with the lock.
/EVS 5-20-80

COMCON: Fixed DETACH <device> command to print all of its
error messages instead of just some and to print a prompt
when it succeeds (U was getting clobbered). /MCB 5-21-80

SCNSER: Made CHKROM check JBTAWQ and go to ABTUUO if an interrupt
is pending, when it's thinking about going into output wait. This
appears to solve APL's problem of CLRBFOs being less effective
on AUXCAL characters than on TTCALL characters. /MCB 5-21-80












































                                       161
Text: P034; Modification history for P034                                page 48

P034/F
------

/E01
----

SCNSER: Fix terminate-block-output call to cancel a pending block
output request to TYMNET (otherwise it gets sent anyway, AFTER
the terminate request is sent). /MCB 5-21-80

SCNSER: Small fix in RETACH (remember to call SETLMD when attaching
in user mode). /MCB 5-21-80

UUOCON: Change .BTSTR, .RESTRT to require WC instead of OP 
for changes. /TLC 5-21-80

CONF90.MAC:  as per B. Mathieu request, reduced freecore
 alloc's to allow them to load monitor in 1500K or less:
 OPNFPF xp ^D9  (was 10)  causes one less DDB (32 wds) per
 frame, or more than 4 pages less freecore (FCWDS)
 M.SBSZ xp 1000 (was 4000) saves 3 pages SNOOP buffer
 (if they need to use it, just reduces resolution) /AA 6/2/80

SCNSER: New AUXCAL function '73, .AXTCN, read/set Terminal
Characteristics by Number. Call is:
	MOVE	ac, [port#,,.AXTCN]
	MOVE	arg, [tc#,,new value (-1 to just read)]
	AUXCAL	ac, arg
	  error return	;normal reasons, or tc# or new value bad
	normal return	;rh(arg) := old tc value
The terminal characteristics are defined on page 2 of SCNSER.
Note that they do NOT contain program-related characteristics
(such as tabs-as-breaks), only real terminal characteristics.
/MCB 6-2-80

SCNSER: New AUXCAL function '74, .AXTCP, read changed Terminal
Characteristics from (the other side of) a PTY. The call is
	MOVE	ac, [your side's port#,,.AXTCP]
	AUXCAL	ac, arg
	  error return	;normal reasons, or not a PTY
	normal return	;arc := tc#,,new value or -1 if
			;nothing has changed since the last call
New TINASS cause, .IATCC (^D10), and matching POLPRT bit,
LXRTCC ('200): the event happens whenever the other side of
the PTY sets its terminal characteristics.
/MCB 6-2-80

SCNSER: New AUXCAL function '75, .AXNZP, read/set No-ZaP bit,
useful if you change your mind about an aux circuit, and useful
for slaved command ports, where there is no parameter to control
the setting of the bit.
/MCB 6-2-80

SCNSER: Fast block i/o for PTYs: if PGBOT finds the other end
in block input wait with its block input buffer empty and


                                       162
Text: P034; Modification history for P034                                page 49

its request size the same as the output block's size, it
will (almost) simply swap the two block buffers.
/MCB 6-2-80

/E02
----

SCNSER: Bugfix at ACPTPC (failed to note that TYMTC1 skips).
/MCB 6-3-80

NOTE!!! Setting the backspace-for-delete bit (via .AXBS) is
now equivalent to the TTY BACKSPACE command: it clears the
erase-for-delete bit. Clearing the backspace(erase)-for-delete
bit is now equivalent to the TTY NO BACKSPACE(ERASE) command:
it clears both backspace and erase. If your INIT file
formerly set first the erase then the backspace bit
(in order to get the TTY ERASE effect), it will now give
you the effect of TTY BACKSPACE instead.
/MCB 6-3-80

/E03
----

SCNSER: Bugfix: LDPTBK ("trap breaks") is now LDPTLN ("trap line").
LDPTBK is now a byte pointer to the tabs-as-breaks bit.
Also a bugfix in ACERAC.
/MCB 6-4-80

/E04
----

SCNSER: GETLCH, per request from JP, now returns the backpressure
bit (as bit 0 -- it is one of the LDBDCH bits that's returned
in its "correct" position).
/MCB 6-11-80


/E05
----

CONF38:
CONF39:  increase JOBN to ^D80, up from 60 as per SRA request. 
	increase PORTN to ^D96, up from 64, in keeping with
	similar values for C36,C29.
	/AA 6-12-80.

RMXKON:	Changed the JRST CPOPJ1 at RMXRCL+4 to POPJ P,0 to fix a bug
that EVS found today. /GL 6-12-80

COMMON: Changed RM/RP code to read BOOTS into a general purpose
primitive driver. Interfaced driver to soft crashing mechanism.
Added code to read KS BOOTS via prim. driver.  Made minor changes
to SAX prim. driver and BOOTS load caller to save a little space.
/TLC 6-13-80



                                       163
Text: P034; Modification history for P034                                page 50

/E06
----

SCNSER: Made incoming aux circuits (terminal id code = 0) always
apply backpressure, rather than only in image mode. This helps
programs that are talking to aux circuits, but may hurt
"transparent" programs like AUXIO, since, once backpressured,
you can't ^C a program that you've discovered is not
listening to you.
/MCB 6-16-80

/E07
----

(KS2020): P034/E07 Represents no changes to source in (m33).  I'm making
this note as a record of the initial test monitor for 37 of the KMC
source.  The source of the merged modules (~P034/e03) is in (ks2020).
/GL 6-16-80

/E08
----

SCNSER: SMERGEd KS version (/E) with non-KS version (/E06).
/MCB 6-16-80

COMMON: FIXED SOME KS RM/RP PRIMITIVE DRIVER BUGS. MOVED CODE TO
DEFAULT TO READ/WRITE ONE PAGE OUT OF SAX DRIVER SO IT COULD BE
SHARED BY RM/RP DRIVER. /TLC 6-17-80

KSSYM:,KISYM:,KLSYM: Added definitions for IFKMC & IFNKMC. KI & KL are
			defined to have no KMC.  KS is defined with KMC.
NOKMC:,KMCDDT:,KMCSER: New modules for KMC support.  NOKMC is used to
			build a KS monitor with out a KMC.
CIOPR:,DR11C:,DZKON:,KSIORG:,MAGSER: These are KS specific modules which
have been changed to support the KMC.
DDT:	DDT has a new command to look at KMC style 8 bit bytes.  It is
like the normal display byte command except you type $88o instead of
$8o.  The 88 is interpreted to mean KMC style bytes.
These changes should have no effect on KI or KL monitors except forcing
a recompile because of the new dates on KISYM & KLSYM.  /GL 6-17-80

COMCON:	Merged in KMC support.
CTYSIM:	Merged in KMC support.
ONCE:	Merged in KMC support.
PICON:	Merged in KMC support.
COMMON:	Merged in KMC support.
SCNSER:	Merged in KMC support.
	See KMC.DOC for details of KMC "support". /GL 6-17-80

/E09
----

Changed USETST+20 STOPCD to STOPCD SLO so DSKCLN can fixup the
probable cause: RIBSIZ too big.  /WRS 6-18-80



                                       164
Text: P034; Modification history for P034                                page 51

Added debuging aid (temporary) to REQUE in CLOCK1: job table JBTWRS
which contains the 6 most recent job state codes (right to left).
This should be instructive when looking at JBTPGO(j)=j crashes.
Also to SCHED1 and COMMON.
/WRS 6-20-80

/E10
----

Made improvements and fixes to above mentioned debugging aid.  New
table (temporary) MAPQUE (really should be MAPSTS) is used as
follows:  MAPQUE[i*20+j] = <number of times state changed from i
to j>.  If this value is found negative, such a state transition
will SYSCRS.  R(WRS)MAPQUE to get a picture of this array.
/WRS 6-23-80

/E11
----

Changed all STOPCDs in FILRIB to SLO that weren't already.
/EVS 6-23-80

SIMIO:
	fix INBLT bug which appears when error on superio read
	is followed by a super write..page still mapped RDO.
	Solution is to remove the page after any super
	read error.  /AA 6-25-80
SIMIO:
COMMON:
	Eliminate UPTPCN array (SIMIO debugging aid..
	has never turned up any bugs. /AA 6-25-80

FILUUO: Fixed bug that let close code be executed for a file
already closed when file that was marked for deletion was deleted
and then closed.
	Changed RENAME to turn off file dumped bit when user does
not pass .RBLIC and have WF or JL. (Discovered that some of ATMUFP
may behave strangely--get cleared if user's arg block has .RBLIC
entry and user does not have WF or JL but be preserved if block
does not contain .RBLIC.)  /TLC 6-25-80

/E12
----

CLOCK1: minor insignifigant change to fix MAPQUE statistics at REQUE.
/WRS 6-25-80

MAPIO: Fixed bug in KFTRN that allowed caller to set RIBSIZ past
the HPW.  Changed DLTTCI error code to FALRBE (was FALPHP)
when caller is KFTRN. /TLC 6-27-80


CLUBS:  Rearranged CMC database to make a CMC 4 words
 long instead of 5...saves freecore on any system which
 uses lots of clubs.  Two bytes were substituted for


                                       165
Text: P034; Modification history for P034                                page 52

 two halfwords, and the CID became a 27-bit byte instead
 of a whole word.  Only 1 of the bytes is accessed inside
 any loop.  It is doubtful that the club ID ever gets
 up to 2^27-1, much less 2^35-1, so this limitation is
 probably never going to be of consequence. /AA 6-29-80

/E13
-----

MAPIO: Forgot to take out two instructions in DELXCH that make
it ignore bounds checking for file size if called by KFTRN.
Did it now. /TLC 7-1-80

SCNSER: PTY block-output fix (ILDB => UUILDB at PGBOP1:) for KS with
KMC. /GL 7-1-80

CIOPR: Added DRPROT:: to be called from KMCSER to protect us from
unexpected DR interrupts (flakey hwd). /GL 7-1-80
KMCSER: Added call to DRPROT. /GL 7-1-80

MAPIO: Moved around code in KFTRN to make it a little more efficient.
Didn't cost any space. /TLC 7-1-80

COMMON, ERRCON: changed around some crash related things in order to
provide hooks for CRSHID.  New global locations useful for looking at
crashes:
    STOPPC/ the real PC of the *first* STOPCD we hit
	- this differes from SYSCRS in four ways: 1) if we crash twice,
	STOPPC is the address of the first one, SYSCRS is that of last.
	2) if we hit a STOPCD (SLO) or JSR SLOCRS, STOPPC has the adr
	of the STOPCD while SYSCRS has SLOCRS+n.  3) SYSCRS has the 
	would be return address, while STOPPC is the actual STOPCD adr.
	4) if there is a 147 restart, STOPPC/ 147.
    STOPCN/ the number of times we tried to crash (if this is non-zero,
	the crash code HALTs)
Fixed a bug where on nested crashes, AC17 gets trashed.
/WRS 7-1-80

SCNSER: Added code in CREAUX to try building circuits to the next DR 
when we get a 'host not available' message on multi DR KS Systems.
/GL 7-1-80

/E14
-----

SEGCON: Attempted to fix GET for a file over 1/2 adr space big.  I found
many problems, but apearently not all.  Still doesn't work for real big
ones, but some work that didn't before.  At READLS and RDLSUU.
/WRS 7-2-80

CONF38: Define OPNFPF to ^D12, system running out of freecore
 alot, this will allocate more for DDBs. /AA 7-3-80

LPTSER: Changed the LP20 character translation to a simpler scheme, and
changed a STOPCD for the "impossible" condition of seeing the done bit


                                       166
Text: P034; Modification history for P034                                page 53

along with error bits, to a JRST LPTERR since this condition does happen
and is recoverable.
/GL 7-4-80

CIOPR: Added code to set the node manually down when preparing the DR
to down line loaded and to clear the manual down flag when the node
has been successfullly loaded
/ELB 7-7-80

/E15
----
CLUBS: Changed state that jobs get put into from RNQ to ISQ when they get a club
inerlock after having waited. Really, ISQ is just defined as TSQ inside
SCHED1, but didn't want to see TSQ appear in CLUBS. Orignially
this was supposed to go into source for P90 so job with inerlock
wasn't so low a priority as to keep other jobs from running
and slow response up for many subsystem users, but didn't get
into the sources. Could possibly allow two or more jobs which
fight for the interlock to take over the system. /EVS 7-9-80

SCHED1: Put ILWQ into ISCAN and OSCAN. Note that there are many
potential interlocks involved among all jobs in IL wait, but
I have done the standard QBAK1 and QFOR1 anyway. This is under the
assumption that although the scheduler doesn't scan the club data base
to decide who the next owner of the interlock will be, the first
one on the IL queue is probably the first one for one of the interlocks.
Perhaps we should arrange not to give the interlock to someone who
is swapped out - but this might infringe on fairness. This change
made after seeing a problem on Tymcare 2020 system with a bunch
of MAGNUM jobs locked in core in IL state and two other jobs
fighting for memory while running. /EVS 7-9-80

CIOPR: Defined calls to KMCSMN & KMCCMN as macros defined outside
the IFCPU (KS) and defined as JFCLs when IFNKMC.  IFKMC & IFNKMC
seem to confuse MACRO when used inside an IFCPU(KS).  All this
was nessisary because KMCSMN & KMCCMN don't exist in NON-KMC systems
like TRW. /GL 7-10-80

/E16
----

PICON:  IFCPU(KS) SNOOP CODE WAS WRONG. FIXED SNSTI AND SNOOPI
	 TO SPLICE SNOOPI CODE INTO APRINT ROUTINE PROPERLY
	USING JRST;  NO JSR'S. /AA 7-11-80

SCNSER: Added code to CREAUX to call WRTACR to write a CREAUX
stream record.  Normally this is only done when CREAUX succeeds; 
however, if AXELOG is JFCLed, a record will be written for non-local
CREAUX errors.

UUOCON: Added code to LOGINN to call WRTACR to write a LOGINN
stream record.  WRTACR is called only if user supplies proj. code
(in arg block words 5-7) else LOGINN works as it did before.

ACTSER: Added routine W22ACR to write CREAUX stream record.


                                       167
Text: P034; Modification history for P034                                page 54

Contents: standard header plus word containing in left half error
code with bit 0 set if monitor supplied error and in right half
aux port number.  Inserted appropriate table entries for TATTLE
and CREAUX records.
						/TLC 7-15-80
/E17
____

PICON: Fixed APRPR1 to jump back to APRP1R after counting a soft error
on KS.  /GL 7-15-80

/E18
----

ACTSER: Write standard header for CREAUX record. /TLC 7-16-80

/E19
----

SETETY: Added sete password #2 for Sherman Gavette.  /WRS 7-17-80

/E20
----

SCNSER: Added BBPAGE table to reflect operationns to UBA page table.
/GL 7-21-80

/E21
----

SCNSER: Added "IFKMC" code to CREAUX to look at the high 3 bits passed
in the AC to determine to which node (TYMBASE) to build the circuit.
If the node is not up at the time the UUO is processed a new CREAUX
Error code will be returned (^D8 in the left half of the error word).
This replaces the 'cycle thru the nodes' code of E13.
/GL 7-22-80

/E22
----

Removed AAA sete password.  /WRS 7-24-80

SCNSER: Doubled the number of unread input characters allowed before
throwing chars away for KS with KMC (this is for TYMCARE).
TIHLTN is still ^D500 without KMC but contains ^D1000 for KMC systems.
/GL 7-24-80

SEGCON: Save code fixed to break IOWD in half before doing OUTPUT uuo
if necessary, should fix saving huge files.
/WRS 7-24-80

/E23
----

COMMON: made SAV30 global again.  /WRS 7-29-80


                                       168
Text: P034; Modification history for P034                                page 55


COMMON: added 5th line for INITIA (good to keep a spare)  /WRS 7-30-80

SEGCON: fixed get run save uuo's to not fetch username from AC0,1 if
ppn field is zero.  /WRS 7-30-80

CLOCK1: at STOP1 added call to TYCIOS to clear IO status for ALL ports
belonging to job.  This should fix the problem of people being
woken out of some state (ie SW) and put in TS after being halted
and restarted.  /WRS 7-30-80

SCHED1: added cell MAPQSW which may be patched to
  POPJ P,	to turn off MAPQUE stuff
  JFCL		to turn on MAPQUE stuff
/WRS 7-30-80

/E24
----

CORE1 - changed number of ticks running between page aging calls
from 10 to 120 due to excessive overhead in AGEPAG. /EVS 8-3-80

CLOCK1: SCNSER: changed STOP1 fix to go at MSTART and MXSTRT.  This 
seems to be a much better approach since the UUO doesn't really get
restarted on a continue, rather it is continued!  /WRS 8-4-80

/E25
----

ACTSER: Fixed CREAUX stream record writer to correctly indicate
port number. /TLC 8-4-80

/E26
----

SCNSER, ACTSER: More of 8-4-80. /TLC 8-6-80

/E27
----

SCNSER: fixed .AXSYB, .AXSOB, .AXHNG auxcal's to not skip as they are
documented (and have always been).  /WRS 8-8-80

Added CNFN22, CONF22, MON22 for C22, a system which looks like C36.
	/TLC 8-15-80

CONF23: Changed JOBN to 108 and PORTN to 127. /TLC 8-15-80










                                       169
Text: P034; Modification history for P034                                page 56


P034/G
------

/F01
----

SCNSER: Fixed KS Block I/O bug.  Added some BIO debug code to make it
easier to see what's going on during BIO or after a crash. /GL 8-20-80

/F02
----

CORE1: Added call to PAGWAK in BLTULP to wake jobs waiting for
DIO on a pg to go to zero. /TLC 8-21-80

/F03
----

FILRIB: Inserted call to RELRIB before doing SETACH in DLTTCI
routine to insure that RIB is released. /TLC 8-21-80

/F04
----

CLRPT instructions on 2020 are very slow, because they sweep
the whole cache. To minimize the number of these done, if a frame's
own context pages appear in %UPX, they are always write enabled,
rather than switching between write enable and write protect.
If another frame's context pages appear in %UPX, they are handled
as they were previous to this change, i.e. when not in use for writing,
they are write protected. /EVS 8-26-80

/F05
----

SCNSER: Added test in GOZAP to STOPCD if port being zapped is > RPORTN.
/GL 9-4-80

/F06
----

Conditioned out code for MAPSTS.  /WRS 9-5-80

/F07
----

Increased value of OPNFPF for C22 to 10 files per frame.
Increase value of SHRFPG to ^D1300, taken from P90's value.
/EVS 9-15-80

Increased default value of OPNFPF (open files per frame) to ^D10.
Increased OPNFPF for C38 to ^D16.
/WRS 9-16-80



                                       170
Text: P034; Modification history for P034                                page 57

/F08
----

Fixed crash code in COMMON to write down more accurate STOPPC 
information.  /WRS 9-19-80

SCHED1: Fixed possible problem with wait states getting overwritten
at SWOSJ0 - if interrupt changed JBTSTS, MOVEM T1,JBTSTS(J) would
write old value back, causing various problems possibly having
symptoms like the JBTPGO loops. /EVS 9-22-80

CORE1: Add log(base 2) freecore request failure table plus
GETLNK("NOCORE") GETTAB to get at it. /Darren 22-SEP-80

UUOCON: new UUO RLSLDB - release spare LDB, to be used by LOGOUT
to release the SLDB so that alt log progs don't tie things up and
to speed killing jobs in general.	/WRS 9-25-80

ACTSER: FILUUO: UUOCON: changed places who got date and time together
to do check for midnight to avoid off by 24 hour errors.  Anyone who
wants date AND time should PUSHJ P,GETGMT to avoid more problems.
/WRS 9-25-80

UUOCON: new DAYTIM uuo returns secs past 1/1/64 - good for computing
elapsed time, etc.  Also added 1 word format to the DATUUO uuo.
/WRS 9-25-80

/F09
----

UUOCON: fixed DAYTIM uuo - wasn't accounting for DATCOM skip return.
/WRS 9-25-80

SCNSER: Fixed CREAUX to always use 1 for it's dummy port number in
KMC monitors.  Using the CMD PORT number as it sometimes did caused
the wrong 11BASE to get the AUX request sometimes. /GL 9-26-80

FILIO: Add routine to type "Unit XXXX Hung" to operator whenever
a hung disk condition is detected. /Darren 26-SEP-80

SCNSER: Fixed SNDBIO to send BLKNEG to first "UP" DR in a KMC MONITOR
instead of the first node (up or not).  Won't affect KI or KL.
/GL 9-26-80

/F10
----

SCNSER: New .AXOSF (Output String to Fit) to output a string and
non-skip return with updated arguments when no more characters
fit.  Skip returns if string all output.   /WRS 9-26-80

/F11
----

UUOCON: minor change of strategy in DAYTIM, etc.  /WRS 9-26-80


                                       171
Text: P034; Modification history for P034                                page 58


FILFND: MAPIO: folded in Ernie's CB free core interlock problem 
patch.  /WRS 9-29-80

/F12
----

MAPIO: (nothing is ever right the first time) fixed my misteak in above
fix for free core interlock problem.   /WRS 9-29-80

/F13
----

FILIO: Be picky - set alarm & pretty up hung msg - Darren 9/30/80











































                                       172
Text: P034; Modification history for P034                                page 59


P034/H
------

/G01
----
Smerged F3 stuff into /G monitor. New modules APXKON, F3TSER.
/EVS 11-11-80

/G02
----
UUOCON: added U.FIXR and U.FLTR to simulate FIXR and FLTR instructions
on the F3 until the microcode is fixed.  /WRS 11-13-80

/G03
----
UUOCON: Make U.FIXR work for negative numbers in the same wrong way
the hardware does.
SCNSER: Make HANG UUO check against RPORTN rather than PORTN to
prevent zappers being sent for PTYs. /Darren 13-Nov-80

/G04
----
COMMON: Allow CONFIG to define RPORTN and PPORTN and have PORTN 
computed. /WRS 11-25-80

/G05
----

Fix comment at head of SETALP UUO to reflect reality. /TLC 12-2-80

Added Darren SETE password #4.
Removed Lee Blton's SETE password #4.
/WRS 12/03/80

/G06
----

CTYSIM: Fix ^ZL loginn sequence to accept lower case L.  Pull CTYDO out
and declare it external.
ONCE:	Add CONSOLE command to those accessible when sense switch 4 is
set.  It sets CTYDO etc. to come up manually in CTYSIM standalone mode.
COMMON:	Added NXTLPT:: EXP LPRUN for LPTSER to test to find out how many
LP20s the monitor was configured for.  0==> non-existant device.
LPTSER:	Fixed bug by adding PXCT 4,[] arround HLRZ T3,(M) in VFU code.
ONCDSK:	Took out the RMA# IS OFF-LINE/NO RESPONSE messages IFKMC<>.
CIOPR:	Fix for NODLOD. Don't set DRDO just because KMCDO was off when
deselecting a DR.  This causes crashes when running from the CONSOLE.
/GL 12-6-80


/G07
----
Fixed bug which had symptom of causing crashes at MAPF34+4, USEOUT+3.
RIBs would get areas where there were 0 pointers when there should


                                       173
Text: P034; Modification history for P034                                page 60

have been a real pointers. Problem was that code changed DEVRIB
prior to reading in prime rib for file, and DDB pointers were
still valid and from the spare rib. If another job was sharing file
and went looking thru DDBs for pointers, it would find these pointers
and copy them, DEVFLO, and DEVRIB from the DDB which was in process
of reading in the prime rib. Therefore, the copied pointers were
from another rib other than the DEVRIB one. If these poiners were
written back out, prime rib could get smashed with pointers
that didn't belong there. This bug could also cause GIVPGK crashes,
since it could cause same pointer to appear in two places in the file.
Fix is to invalidate DDB pointers before changing DEVRIB. In NXTPT0
this meant just turning on sign bit, since need the value of DEVFLO
throughout the routine.
Rib validate CHANIO, USETST, NXTPT0 changed to fix this condition.
/EVS 12-8-80

Changed ENTER and RENAME so that it requires WA to set or clear
ATPPID and ATPALC. Previously to this any program could clear
either of those bits, and JL and WF programs could set them. /EVS
12-8-80

Fixed bug where 1)Lookup file 2) Do some input on it so ATB stays
around after close 3) Do truncating RENAME 4)Lookup file sometime
later while FNB still around 5) Close file caused
crash due to FNBALT being set to -1. This was because truncating
RENAME code didn't set FNBALT and RIBALT after finishing
the allocation change. (Slight oversight in doing fast DSKCLN
file system change.) /EVS 12-8-80

Fixed potential bug where doing CLBMEM UUO could screw up
by not giving all club members if job doing CLBMEM UUO
got rescheduled in middle of returning club IDs (could happen
if page fault for user's page) and someone left the club.
Was not likely to happen, but it could if the club membership
card got reused before CLBMEM job started up again.
Fix is to check to see if any jobs on system have left a club
and start UUO over if they have. /EVS 12-8-80

Attempted to solve IL club interlock problem for general case:
Don't give club interlock to job with MRQ set unless RNDBIT
is set in the system uptime (RNDBIT is an attempt to be fair
every once in a while on a "random" basis) unless that job is
the only one who needs the interlock.
/EVS 12-8-80

SCNSER: Fixed cache bug in block output that was discovered
by inspection (cache bug was suspected, but turned out to be
some other problem). BIOCSH set too early, before copying
data from user space to the block I/O buffer. Move this
to after data is BLTed to the block I/O buffer. /EVS 12-9-80

/G08
----

S: Added macro MAPONC to define symbols for once module sizes;


                                       174
Text: P034; Modification history for P034                                page 61

ONSZCK to check if enough pages have been allocated to a particular
once module and print an error message if not.  Changed once module
page allocations to 3 for REFSTR, 6 for ONCDSK, and 3 for ONCE (the
minimum sizes). Commented out the RES page allocation.  It is not
yet clear if this is valid.
REFSTR,ONCDSK,ONCE: Call ONCSZCK to check if module is larger than
number of pages allocated to it.  /TLC 12-11-80

FILUUO: put in Ernie's patch to fix GIVPGK crashes (WRTOK2+n) 
/WRS 12-20-80

/G09
----

CORE1: Introduced new routine REPOK to check to see if a page selected
by the uws or mws alg is bumpable (i.e. doesn't have DIO up or isn't
locked).  Call REPOK from uws and mws code when a page is selected
to be replaced.  Previously these checks were only done in the mws
alg so it was possible, for example, for the destination of a BLTPAG
to be the page selected for replacement if uws full and a fault occured
on the source page.  /TLC 12-29-80

/G10
----

COMMON: new gettab stuff for sake of patching, 
CONFIG+37/ -len,,patch		; this is for static patch area
CONFIG+40/ -len,,ttyini		; this is for dynamic patch area
and a few for the sake of CRSHID, and real users,
CONFIG+41/ cputype index...of (KI,KL,KS,F3)

/G11
----
























                                       175
Menu: SCHEDULER; The Scheduler                                            page 1

177   :DESCRIPTION     General Scheduler Description
185    QUEUE           Queue transitions























































                                       176
Menu: DESCRIPTION; General Scheduler Description                          page 1

178    STRUCTURE       General Scheduler Structure
179    CPU             CPU scheduling
180    CORE            Core scheduling
181    RESOURCE        Resource scheduling
182    JOBS            Characteristics of typical jobs
183    PERFORMANCE     Software performance packages
184    TUNING          System tuning


















































                                       177
Text: STRUCTURE; General Scheduler Structure                              page 1


A job in the TYMCOM-X operating system has a state associated with it.
This state corresponds to its current activity as the monitor sees it.
Examples of states are: running, waiting for teletype input, waiting for
teletype output to complete, waiting for disk i/o to complete, waiting for
a system interlock.  The disk system has its own scheduling of disk I/O
requests based on the position of the heads on the serving unit in
relation to the desired position of the heads for each request.  The job
is often seen to be in disk wait state while this disk transfer scheduling
takes place, but not always, as the monitor allows overlap of CPU usage
and disk usage.

Each job state has one queue associated with it, except for the run state,
which has four queues.  When a job enters a new state, the scheduler takes
the job out of the queue for the old state and enters the job into the
queue for the new state.  Certain states are transitory states that inform
the scheduler where in the queue structure to put the job. These states
are called "satisfied" states, since a job is put into them when a certain
event that it has been waiting for has occurred.  These "satisfied" states
allow the scheduler to select a new queue for the job based on the wait
state it has just come from.  (If the job's state went directly to run
state, the scheduler would not know what the job's prievious state was.)
Examples of these "satisfied" states are disk I/O satisfied, teletype I/O
satisfied, CB satisfied (CB is an internal operating system interlock).
The scheduler makes use of these satisfied states by looking up the
required queue transition in a table and putting the job in a new queue.
In fact, all queue transitions that occur except those that the job
specifically causes (e.g. sleep, disk I/O) are handled by table driven
code. This makes it easy to change the scheduling algorithm; one needs
only to patch a table to effect a change in the scheduler's behavior.



























                                       178
Text: CPU; CPU scheduling                                                 page 1

The scheduler has four run queues, called PQ0, PQ1, PQ2, and PQ3. PQ0 is
the highest priority run queue, and PQ3 is the lowest.  Each time a job
voluntarily blocks (for I/O or some other event) or at each 1/60th of a
second, whichever comes first, the scheduler is called. If the current job
is still runnable, the scheduler decrements its run queue quantum, which
is first assigned when the job entered the run state.  If the run queue
quantum has not expired, the job remains in its current position in the
run queue. If the quantum has expired, the scheduler puts the job in a new
run queue and assigns a new run quantum using a table which is indexed by
the job's old run queue. Currently, a job will go from PQ0 to the back of
PQ1, PQ1 to the back of PQ2, PQ2 to the back of PQ3, and then from PQ3
back to the back of PQ2 again.  PQ0 is used only for jobs that have just
been given system interlocks or resources. PQ1 is used for jobs coming out
of long term wait states, such as teletype I/O wait, so that they get good
response. Moderately compute bound jobs are usually found in PQ2, and
heavily compute bound jobs are found in PQ3.

After a job has come out of a wait state (one in which it is not using the
CPU) it is placed in the run queues as a function of the wait state it was
in and possibly its size.  Jobs coming out of teletype I/O wait are always
put in the front of PQ1. Jobs which have just become runnable after being
stopped (totally inactive) are put into the back of PQ1 if they are less
than 5K, the back of PQ2 if they are less than 16K, and the back of PQ3
otherwise.  Jobs coming out of disk I/O wait go into the front of PQ1 if
their in-core protect time has not expired (see section on core
scheduling), and if their in-core protect time has expired, disk I/O wait
jobs go into the back of PQ1 if they are less than 6K, and the back of PQ2
if they are not less than 6K.  Jobs coming out of SLEEP or HIBER are
treated the same as jobs that have just become runnable after being
totally dormant.  Jobs coming out of a sharable resource wait (the job
then has the resource or interlock that it was waiting for) are put at the
end of PQ0 to facilitate the release of the resource.

 After the quantum run time check for the current job, the scheduler
checks all jobs in the system to see if their state has changed, and
places them in their new queues if so. Next, the scheduler sees if any
system resources have been freed, and if so, wakes the next job in the
queue for the now available resource.

 The scheduler then scans the run queues in priority order beginning with
PQ0 for a new job to run. This scan is independent of the state of the
currently running job; if a job of higher priority than the currently
running job is found, the scheduler will pick that job to run even if the
current job's time slice has not expired.  That is to say, the scheduler
is preemptive.












                                       179
Text: CORE; Core scheduling                                               page 1

Core scheduling is done by a routine called the swapper.  The swapper
attempts to keep those jobs that have the highest CPU scheduler priority
in core. It actually scans the queues that the CPU scheduler uses to do
this. The run queues appear first in the swapper's list of queues for swap
in, then the first job in each sharable resource wait queue. The list that
the swapper uses to scan for jobs to swap out begins with the states that
imply the job is totally dormant (sleep, stop), has has the sharable
resource queues (except for the first job waiting for the resource) next,
then teletype I/O wait jobs, then the first job on each sharable resource
wait queue, and finally the run queues. All these queues are scanned
backward by the swapper (except for teletype I/O) when scanning to swap
out, and forward when scanning for jobs to swap in.  When a job is brought
into core, it is given an in-core protect time.  This time is decremented
periodically, and as long as it has not expired, the swapper will not
consider the job for swap out.










































                                       180
Text: RESOURCE; Resource scheduling                                       page 1

The resource allocation code is designed so that the scheduler need not
become involved unless the resource is not free when the requester asks
for it. If a job asks for a resource (system interlock or real resource,
such as dynamic core space, file system bufferu or file system buffer) and
it is not available, its state code is changed to the wait state for the
particular resource.  When the job owning the resource relinquishes it,
the scheduler will notice and scan the wait queue for the resource for the
next waiter who is in core. It will then change the waiters state to run
and put him in the back of PQ0. This minimized contention for the
resources by allowing the job with a resource to run at highest CPU
priority, thus relinquishing the resource at the earliest possible time.
Deadly embrace is avoided in the monitor by always allocating resources in
a certain order.












































                                       181
Text: JOBS; Characteristics of typical jobs                               page 1

Each program run under the TYMCOM-X operating system is treated
identically by the scheduling algorithms.  The program that does login is
moderately compute bound, and probably does not go beyond PQ2 often.
Editing is seen as a teletype I/O bound task, and is given fairly high
priority by the scheduler because of going into and out of teletype I/O
wait often. Compilation is generally heavily compute bound, and a job
doing compiling is almost certain to occupy PQ3 often. The execution of a
program that is disk I/O bound will proceed at a fairly high priority due
to the scheduler's policy of putting disk I/O satisfied jobs into PQ1.
















































                                       182
Text: PERFORMANCE; Software performance packages                          page 1

The following packages are currently in use by the operating systems
group:
SYSTAT - prints out various system statistics related to system usage.
SNOOPY - tool used by operating systems group to obtain historgrams of
     monitor execution and other variables
ICP - program used by operating systems group to gather detailed
     information related to paging algorithms.
READST - gathers long term system usage statistics

The above programs, aside from SYSTAT, are not generally provided to users
outside the PDP-10 operating systems group.  The appearance of the above
list of programs does not imply any intent to provide these programs to
any outside agency.












































                                       183
Text: TUNING; System tuning                                               page 1

Aside from the aformentioned performance analysis programs, there are
facilities to statically and dynamically change internal operating system
performance parameters. Changing these parameters and noting the resultant
change with the performance monitoring programs is the method by which
Tymshare tunes PDP-10 systems.




















































                                       184
Text: QUEUE; Queue transitions                                            page 1

The following is a summary of the scheduler queue transitions:

Source	Condition	Dest		Quantum
-------------------------------------------------------------

PQ0	Quantum exc.	end PQ1		5
PQ1	Quantum exc.	end PQ2		5
PQ2	Quantum exc.	end PQ3		60
PQ3	Quantum exc.	end PQ2		60

STOP	RUN, <=4K	end PQ1		5
	RUN, <=16K	end PQ2		60
	RUN, <=256k	end PQ3		60

IOW
TIOW	Wait done	beg PQ1		6

SRW	Get resource	end PQ0		1

SW	Disk I/O done
	  ICPT expired:
	    <=5k	end PQ1		5
	    <=256K	end PQ2		5
	  ICPT >0:	beg PQ1		6

SRW is Sharable Resource Wait.

ICPT is In core protect time.

ICPT is zeroed whenever a job goes into TI wait, or does a HIBER
or SLEEP for more than its current value of ICPT time.


























                                       185
Menu: MONINF; Notes on monitor internals                                  page 1

187    GENERAL         General information
188    PAGING          Paging
191    TAPE            Magnetic tape
192    SCHEDULER       Scheduler notes
193    SCNSER          Tymshare network interface
194    ONCE            System initialization code
195    ACCOUNTING      Accounting system
198   :DSKCLN          The DSKCLN Program
204    KL10            KL10 information
204   :FILES           File system
237   :PI              Software Interrupt System
239   :UUOCON          Notes on UUOCON Programming
241    AC              General AC conventions












































                                       186
Text: GENERAL; General information                                        page 1

Customers have been told that the sequence "-p0" at chars
4,5, and 6 of CONFIG is a method of recognizing tymshare
systems.






















































                                       187
Text: PAGING; Paging                                                      page 1


When writing UUOs that do executive XCTs to reference
user space, make sure code does the right thing if an ill mem ref
or page I/O error or disk full during copy on write occurs.
Under no circumstances write into user space when UUO code
owns a disk resource (PCB, CB, etc.) unless it is certain
that the page is not a copy on write page. Copy on
write code does UUOs that try to get those resources.

Do not reschedule if an lmap slot is contained in p3 and p4
unless the slot is inactive. Special procedure must be
followed if rescheduling is done with lmap slot in p3 and
P4 in any case; see references to UPTLDC.
Beware - if code is holding a sat PCB, and gets a RIB PCB,
the sat PCB will be released.

There is a safety factor which is subtracted from the actual number
of free pages in a structure which results in the STRTAL that
the system finally stores. The routines to allocate disk space
never check STRTAL - the callers of the routines do. Therefore,
it is still possible to create private pages and context pages
when STRTAL is zero, but file page creates will not occur since
the file page creation routines do not check STRTAL. It is also
rumored that certain routines in the monitor count on getting
free space all the time, but it is not known which routines these
are. /EVS 12-12-78

I/O error theory: in monitors after and including p033/n,
page I/O errors on pages other than the context pages
are identical to other page failures (ill mem ref, etc)
except for one important feature - an I/O
error can occur even after the page has been referenced
once, whereas the other failures always occur
under the same conditions. Therefore, the only code that
has to worry specifically about I/O errors is code
that "pre-references" the user page and assumes that
no failures will occur later. Do not do pre-referencing
to checkout user space unless its absolutely necessary.
Lookup/enter/rename is one place that has to pre-reference.
For this case there is a special mechanism in I/O error code
that temporarily ignores the error and sets a bit in UPTSTS
(upsswe) that causes the error to get handled
after the UUO completes. This can present a problem
in that it looks just as if the user program passed the
monitor garbage. This could be bad if the program had license,
because the system could be threatened. (Maybe take
away license when this happens would be
a godd solution.)

more I/O error theory: this applies to ill mem refs and the
like too. JBTABT is a job table that has an address setup
which is called if any page related error is detected,
(memory violations, etc, including address checks)
and for context page swap errors. If the address is zero,
no routine is called (normal case). Usually, the recovery


                                       188
Text: PAGING; Paging                                                      page 2

routine just releases the resource and cleans up.
See ERRCON for places that call JBTABT routines, and the end
of SCHED1. Also, DSKCHR UUO is an example of use of JBTABT.
Another example is in actser.





















































                                       189
Text: PAGING; Paging                                                      page 3


Note on paging memory: It is not permissible to assume that
a map slot will not be dragged back into the paging memory
after a clear page table operation (one or all pages).
That is, it is not ok to clear the page memory and then
store a page map pointer into a map and assume that
the old contents didn't get dragged back into the paging
memory before the new pointer was stored. This is because
the machines are free to fetch as many page map pointers as
they want to, and instruction and data fetches occurring
after the clear page table operation may drag the
target page map slot back into the paging memory
before the routine stores the new slot into the map.












































                                       190
Text: TAPE; Magnetic tape                                                 page 1


Magtape I/O for dump mode and dump records mode is done one
IOWD at a time. WAIT1 is called after starting each IOWD.
The maximum count that can be used in an IOWD for
magtape is 37777 octal. Each IOWD is broken up into pieces,
one piece for each virtual page the IOWD covers.
(This is done by routine BLDLST in UUOCON). In the case of
dump records mode the monitor forces record size to 200 words,
so on input BLDLST is allowed to break an IOWD up into 200 word
pieces if it has to.  This does not happen on output, ftaser
breaks up the IOWDs itself. In dump records mode,
ftaser is allowed to stop building the channel command
at 200 word intervals and continue at the end of
the preceding channel command.

The devcls list for buffered mode is different than that for
dump mode in that more than one request (for more than one buffer)
can appear in the list. Each request is separated by a zero, and
two zeroes ends the list.

Dio counts must be decremented at interrupt level. Two reasons:
devcls list gets overwritten by ftaser to return info to UUOCON,
so UUOCON couldn't know which pages to decrement dio for, and
the fact that a job can control-c out of io wait would allow
the job to tie up core pages indefinitely if dio were decremented
at UUO level.































                                       191
Text: SCHEDULER; Scheduler notes                                          page 1


What SWT is for: (MRKSWT, CHKSWT, CBSWT, etc) if a resource
is given away to someone who later gets swapped out
or is already swapped out (resources givers try not to
give resource to swapped out jobs) and that someone
has not run with the resource yet, the SWT flag is set.
If that someone then gets a swap error, the scheduler
knows that its ok to give the resource to someone else,
since the someone hasn't had a chance to do anything bad
with it yet.

Note - if job goes into swap wait, can get into situations
where incore protect is setup non-zero again by swaper,
then job immediately goes into sw, and when it comes out of
sw into ss, scheduler puts job into beginning of pq1 since
incore time is still non-zero (at ckjb10). /Evs (6/1/78).









































                                       192
Text: SCNSER; Tymshare network interface                                  page 1

------
























































                                       193
Text: ONCE; System initialization code                                    page 1


When a paging monitor first comes up, unless it has been
brought up manually, a special flag in the str data block
is set saying that DSKCLN has not run yet. When this flag is
set, vcreat will not attempt to allocate disk pages
for the virtual pages it creates. Rather, it sets the disk
address to a special code (777,,777776). When the page is activated,
a core page is given to the vp, but there is still not disk page.
When the vp is removed, the core page in this strange state
will have its pgyadr set back to 777,,-1. Even context ages
will not have disk pages allocated when the system is in
this pre-DSKCLN mode.
 The reason for all this is so that when initia and DSKCLN
run, the pages that get allocated for them will not
correspond to disk pages that DSKCLN will cause to be
mapped into core, thinking that the page is a RIB or sat.
The "readonly" option to ONCE will bring the system up
manually with this pre-DSKCLN mode bit set. It is not
possible to create files, or remove pages from the working
set, or have program size exceed physical memory space when
in this mode, since a "disconnected page" can never be
deactivated and activated again. Reason it can't: there
is no way to find the core page once it is deactivated,
since it is not in the cht. Its not in the cht because
the disk address for all cp s is 777,,777776.

Restrictions on vps without dps (777,,777776):
1) cannot deactivate and reactivate (lose core page)
   (can't have job larger than mws limit run during init).
2) Can't call remcht, remcht can't deal with funny address
3) remove can't try to get sat
4) no "m" bit - always unshared.
5) Can't be cow
6) replicate won't work
7) can't do UUO to check "f" bit
8) parity error code can't insert into oht





















                                       194
Text: ACCOUNTING; Accounting system                                       page 1

The accounting system on the 10 consists of the monitor updating
individual per process cells which correspond to TRU components
(Tymshare Resource Unit). At CLKTRU in UUOCON, there are a series
of macro calls that determine the weighting factors
which determine how the components combine to make the TRU unit.

In addition, certain events cause the monitor to store records
of fixed format into an accounting buffer. The program CHKPNT
reads the buffer via the ACT device, which has its own device
service routine, ACTSER. If CHKPNT does not read the buffer
often enough to keep free space, jobs will go into wait for
the buffer space, and the system will soon grind to a halt.
For this reason, CHKPNT empties the buffer on a high
software PI level and processes it and writes it on a lower level.
The data from the ACT device is written into files, one for each
GMT day, in (UN1) into a file of the format MMDDYY.SAT, where MMDDYY
is the current month, day and year with leading zeroes.

The microcycle clock (accounting meters on the KL10) is used to
compute the CPU usage component. The monitor code is responsible
for turning this clock off in UUO code that has a wide enough
variation in CPU usage soas to endanger the reproducibility of
the TRU, which is one of the main goals for a TRU. In these
cases, one must charge via a seperate component. An example
of this is the LOOKUP UUO, which takes greatly different amounts
of CPU time depending on whether the RIB is in core, the file
already has an ATB in core, etc.






























                                       195
Text: ACCOUNTING; Accounting system                                       page 2

              
$Text KL10;KL10 information.

Sometimes one has occasion to reference user space
in code that is running as a result of nested UUOs/page faults.
On the KI10, all one had to do to have executive XCTs
refer to user space was to turn on PC.UIO. On the KL10,
it is not as easy as that, since turning on PC.UIO
does not give you the correct ac block for the user.
It does not give the correct block because the hardware
does not keep track of which block is the user ac block
like the KI10 did. It is totally a function of
the software. There is a previous context ac block field
in datai and datao pag which unconditionally specifies
which ac block to use when referencing the acs
under an executive XCT (PXCT on the KL). Therefore, for
one instruction references to user space where efficiency
is not important (macros call a subroutine).
The macros to use for this purpose are
UXCTFU, UXCTTU, and UXCTBU.
It is permissible just to turn on user iot if and only
if no executive XCTs will refer to the acs. However,
this will screw up the previous context ac block setting
if a reschedule occurs.

Note that cache bit in map slot only controls whether or not
to load data if its not in the cache if the data is already
there, the bit has no effect. In particular, one must be
very careful that if a certain physical page is not to be
cached (because of some dma device using it), no map slot
that points to that page should have the cache bit on.
For example, the peek UUO does not turn the cache bit on in
the map slot it uses for looking at core in case the looker
is looking at an uncached page. Another interesting effect,
which should be watched for - the KL10 microcode used to
drag stuff into the cache when it updated its meters, fetched
ept and/or UPT relative instructions, etc. This could
mask out data deposited in the same 4 word block by a dma
device.

Aaa 11 aug 78
note about looking at KL crashes:  when the KL gets a page-
fault, it does not "execute a trap instruction" as does the KI.
04300	Instead, the kl deposits a pagefault word in %upt+uptpfw,
a pagefault PC in %UPT+UPTOPP, and takes a new PC word from
%UPT+UPTNPP. This means %UPT+UPTMUU and MUP are irrelevant
on KL EXCMPE crashes whereas on KI EXCMPE's MUU and MUP
tell you where the monitor was when it faulted. /Aa

note that the trick of refering to four other cached pages
to force a four word chunk out of the cache will not work
if the cache refill algorithm ram is not loaded correctly or
is bad. There is no parity on the refill algorithm ram.
This is because the trick assumes the refill algorithm ram
will replace the oldest cache chunks. /Evs 9/13/78


                                       196
Text: ACCOUNTING; Accounting system                                       page 3


in KL10 NXM crashes, ERASTS shows physical address that caused
the NXM, making it easier to pin it on hardware or software.
/Evs 9/13/78





















































                                       197
Menu: DSKCLN; The DSKCLN Program                                          page 1

199    DSKCLNBUGS      DSKCLN known bugs and deficiencies
200    DSKCLNSTRUCTURESDSKCLN Data Structures























































                                       198
Text: DSKCLNBUGS; DSKCLN known bugs and deficiencies                      page 1

Bad things can happen if for some reason a sat gets into
the PCB mechanism while DSKCLN is running.

DSKCLN does not report it if it deletes a UFD entry
because of a RIB error.

DSKCLN does not put entry into RECOV.SYS or
report or set "data lost" bit in file's RIBsts (does
set bit in UFD's RIBsts) if it finds bad retrieval pointer
in the file's RIB. Just sticks a "1" in RIB slot
(hole).














































                                       199
Text: DSKCLNSTRUCTURES; DSKCLN Data Structures                            page 1

DSKCLN WILL RUN IN EITHER OF TWO MODES. THE FIRST JUST REPORTS
PROBLEMS, THE SECOND FIXES THEM. THE CURRENT MODE IS DETERMINED BY
FIXFLG (0=REPORT, NON-0=FIX).

AS A REMNANT OF PREVIOUS USAGE, DSKCLN PERFORMS IT OPERATIONS FOR
EITHER A PARTICULAR STRUCTURE, OR FOR EACH STRUCTURE ON THE SYSTEM.
THIS COULD BE IMPORTANT FOR MOUNTABLE STRUCTURES IN THE FUTURE.
THE ROUTINE FOR A GIVEN STRUCTURE IS CHKSTR.

DSKCLN BUILDS SOME TABLES FOR THE STRUCTURE IT IS PROCESSING. SEVERAL
OF THESE TABLES HAVE A LENGTH OF THE NUMBER OF UNITS IN THE STRUCTURE.
THESE ARE BUILT IN FREE CORE (AFTER JOBFF) AND POINTED TO BY A WORD WITH
U IN THE LEFT HALF. THIS IS SO THAT ENTRIES CAN BE REFERENCED AS
@<TABLE NAME> AFTER U IS LOADED WITH THE UNIT NUMBER. DSKCLN CHECKS THE
UNITS BY CONSTRUCTING THE LOGICAL NAMES (I.E. DSKB0, DSKB1, ...) AND
DOING A DSKCHR UUO. IT GENERATES STRPPU THE NUMBER OF BLOCKS IN THE
LARGEST UNIT ON THE BASIS OF THE DSKCHR INFORMATION.

THE TABLES BUILT ARE:

PTRPPU	BLOCKS ON THIS UNIT
PTRDST	DISK SATS (SEE BELOW)
PTRTST	TROUBLE SATS (SEE BELOW)
PTROST	OUT SATS (SEE BELOW)
PTRRST	RIB SATS (SEE BELOW)
PTRSAD	SAT ADDRESSES (SEE BELOW)
PTRUNU	UNIT IN USE (FOR OVERLAPPED SEEKS ON UFD PROCESSING)
PTRSWP	PAGES FOR SWAPPING ON UNIT
PTRSWB	FIRST BLOCK FOR SWAPPING ON UNIT

DSKCLN THEN READS THE HOME BLOCKS ON THE FIRST UNIT AND STORES DATA.
IT READS THE HOME BLOCKS ON THE OTHER UNITS AND CHECKS DATA FOR
CONSISTANCY. IT CHECKS HOMOVR, HOMSAT, HOMHMS, HOMSWP, HOMSUF,
HOMMFD, AND HOMHSH FOR CONSISTANCY. IT BUILDS PER-UNIT DATA IN 
PTRSWP AND PTRSWB AND THE LEFT HALF OF PTRDST (NUMBER OF SATS ON THIS
UNIT).


THERE ARE 5 TABLES FOR SAT INFORMATION. LET NSAT BE THE NUMBER OF
SATS ON UNIT U (AC U IS LOADED WITH UNIT NUMBER) AND NWORD BE THE
NUMBER OF WORDS PER SAT. THE FOLLOWING IS THE INFORMATION OBTAINED
WITH HRR AC,@,<TABLE ADDRESS>:

PTRSAD	THE ADDRESS OF AN NSAT LENGTH TABLE. THE NTH ENTRY OF
	THE TABLE POINTED TO HAS THE DISK ADDRESS OF THE NTH SAT
	PAGE ON THIS UNIT.
PTRDST	THE ADDRESS OF AN NSAT*NWORD LENGTH TABLE. THE SATS FROM THIS
	UNIT ARE READ INTO THIS TABLE AS IF THEY WERE ONE CONTIGUOUS
	BLOCK ON THE DISK.
PTROST	A POINTER TO AN NSAT*NWORD LENGTH TABLE
PTRTST
PTRRST

IN THE CURRENT IMPLIMENTATION, NWORD IS FORCED TO 1000(OCTAL) OR 1 PAGE.



                                       200
Text: DSKCLNSTRUCTURES; DSKCLN Data Structures                            page 2

WHEN DISK SATS ARE READ IN AND THEIR ADDRESSES RECORDED, THE RIB FOR
SAT.SYS IS SEARCHED (ADDRESS OF RIB FROM HOME BLOCK) FOR THE CORRECT
NUMBER OF POINTERS. THE POINTERS ARE NOT REQUIRED TO BE CONTIGUOUS
BUT IT IS ASSUMED THAT THE NTH POINTER FOUND FOR THAT UNIT WILL BE
THE ADDRESS OF THE SAT CONTAINING THE BITS FOR THE NTH "SAT WORTH"
OF DISK. (I.E. THE PAGE ADDRESS OF A BIT IN A SAT IS DEPENDENT ON
THE ORDER OF THE POINTERS FOR THAT UNIT IN SAT.SYS RIB AND NOT THE
ADDRESS AT WHICH THAT SAT IS FOUND). 
AN ERROR WILL BE INDICATED IF MORE POINTERS ARE FOUND FOR A GIVEN UNIT
THAN SHOULD BE THERE. THIS ERROR IS FATAL (THE SAME ERROR OCCURS IF
THERE ARE TOO FEW POINTERS.

THE USES OF THE SAT IMAGES ARE AS FOLLOWES:

PTRDST	AN IMAGE OF THE SATS ON THE DISK. THIS IS USED ONLY IN THE
	REPORTING MODE TO INDICATE FREE AND LOST PAGES.
PTROST	AN IMAGE CREATED AS DSKCLN RUNS (IN FIX MODE). THIS IS THE
	DATA WHICH WILL BE WRITTEN INTO THE SAT PAGES WHEN DSKCLN
	FINISHES.
PTRRST	THE APPROPRIATE BIT IS SET (ACTUALLY RESET) IN THIS TABLE
	FOR EACH PRIME RIB. THIS IS DESIGNED TO FIND TWO UFD ENTRIES
	WITH EXACTLY THE SAME NAME, WHICH POINT TO THE SAME PRIME RIB.
	(INSTEAD OF GENERATING MULTIPLE USE ERRORS).
PTRTST	THIS IS THE TABLE USED FOR MULTIPLE USE ERRORS. WHENEVER AN
	ATTEMPT IS MADE TO RESET A BIT IN PTROST WHICH IS ALREADY
	RESET, THIS PAGE MUST BE MULTIPLY USED. THIS FINDS THE SECOND
	AND ALL SUBSIQUENT REFERENCES TO THIS PAGE BUT NOT THE FIRST.
	IN THIS CASE A BIT IS RESET IN PTRTST FOR THIS PAGE, AND A FLAG
	TRBFLG IS SET NON-0. A SECOND PASS IS THEN MADE AND FOR EACH
	PAGE, PTRTST IS CHECKED TO FIND ALL REFERENCES TO MULTIPLY USED
	PAGES.


























                                       201
Text: DSKCLNSTRUCTURES; DSKCLN Data Structures                            page 3

WHEN DSKCLN IS IN FIX MODE, IT MAKES A PASS (OR 2 PASSES IF ANY
MULTIPLE USE PAGES) THROUGH THE DISK AND GENERATES A LIST OF ALL
THINGS WHICH NEED FIXING. THIS IS A LINKED LIST POINTED TO BY
FIXPTR. EACH BLOCK OF THIS LIST HAS THE FORMAT:

WORD 0	L.H. POINTER TO NEXT ELEMENT OF THE LIST
	R.H. THE ADDRESS-1 OF THE FIXUP ROUTINE FOR THIS ERROR. TO BE
		CALLED WITH A PUSHJ P,

WORD 1	DISK ADDRESS OF THE PAGE NEEDING FIXING

WORD 2	A VALUE TO BE LOADED INTO AC T2 FOR THE FIXUP ROUTINE FOR THIS
	ERROR

WORD 3	A VALUE TO BE LOADED INTO AC T3 FOR THE FIXUP ROUTINE FOR THIS
	ERROR

THIS IS DONE SO THAT MULTIPLE USE PAGES CAN BE CHECKED FOR BEFORE
ANYTHING IS DONE TO THE DISK (FIXUP ROUTINES MAY PERFORM DIFFERENT
FUNCTIONS IF MULTIPLE USE PAGES ARE PRESENT).





































                                       202
Text: DSKCLNSTRUCTURES; DSKCLN Data Structures                            page 4

ACTUAL PROCESSING INVOLVES READING THE MFD AND FOR EACH UFD IN
THE MFD, READING THE UFD AND FOR EACH FILE IN THE UFD, EXAMINING
THAT FILE. CONTROL IS ACOMPLISED BY HAVING A CONTROL TABLE FOR
EACH LEVEL (MFD, UFD, FILE). EACH OF THESE CONTROL TABLES IS THE
SAME.

RIBLBN	DISK ADDRESS OF THE RIB (PRIME) FOR MFD UFD OR FILE
NXTPTR	DISK ADDRESS OF THE BLOCK BEING PROCESSES (USED ONLY FOR
	SETTING SAT BITS FOR FILES, FOR READING DATA IN UFD AND MFD)
UFDPTR	A POINTER TO THE ENTRY FOR THIS ELEMENT IN THE NEXT LEVEL UP
	(UFD ENTRY FOR FILE, MFD ENTRY FOR UFD, UNUSED FOR MFD).
UFDOGP	A POINTER TO THE START OF THE CORE IMAGE OF THE UFD PAGE
	WHICH UFDPTR POINTS TO (USED IF ENTRY NEEDS DELETING (RIB
	ERROR ETC)).
ROUTIN	THE ADDRESS OF THE ROUTINE TO CALL TO PROCESS THE NEXT LEVEL
	OF ENTRY (UFD ROUTINE IN MFD BLOCK, FILE ROUTINE IN UFD BLOCK.
	FOR THE FILE CONTROL BLOCK, THIS IS A SPECIAL ROUTINE FOR EACH
	PAGE OF THE FILE PROCESSED TO ALLOW CHECKING OF SPECIAL FILES
	SUCH AS HOME.SYS, SAT.SYS, ETC)
SAVRIB	1000(OCTAL) WORDS, A COPY OF THE RIB IS SAVED HERE
DEVRSU	A POINTER INTO THE SAVRIB BLOCK POINTING TO THE DISK POINTER
	FOR THE DATA CURRENTLY BEING PROCESSED.
DEVREL	LOGICAL PAGE NUMBER OF PAGE POINTED TO BY DEVRSU
SAVBLK	POINTER TO A 1 PAGE BUFFER TO SAVE THE BLOCK CURRENTLY BEING
	PROCESSED (FOR MFD AND UFD, 0 FOR FILE)
UFDBKF	A 2 WORD BLOCK FOR A FIXING LIST FOR CHANGES NEEDED TO THE
	UFD (MFD) ENTRY FOR THIS FILE (UFD). WILL BE MERGED INTO
	FIXPTR LATER
UFDUSD	A WORD TO KEEP TRACK OF THE USED PGE COUNT FOR A UFD (MFD)
FIXRBP	A 2 WORD BLOCK FOR A FIXING LIST FOR CHANGES TO THE RIB
UFDLSD	A FLAG THAT THIS UFD HAS LOST DATA (RIB ERRORS)
ERRNAM	A NAME FOR ERROR PRINTING
ERREXT	EXTENSION
ERRPPN	A PPN (THESE HAVE THE NAME EXTENSION AND PPN OF THE CRRENT
	FILE, MFD, OR UFD).
UFDHSP	A POINTER INTO THE HASH TABLE FOR THE UFD
	L.H. IS THE HASH NUMBER FOR THIS BLOCK
	R.H. POINTS TO A HASH TABLE FOR THE UFD WHICH KEEPS TRACK OF
		THE CORRECTNESS OF THE UFD LINKS
SIZRIB	COUNTS PAGES IN FILE (INCLUDING HOLES) FOR CHECKING RIBSIZ
ALCRIB	COUNTS PAGES IN FILE (EXCLUDING HOLES) FOR CHECKING RIBALP
















                                       203
Menu: FILES; File system                                                  page 1

205    DEVRIB          DEVRIB facts
206    DEVFLO          DEVFLO facts
209    FBITS           Bits in LH of AC F
210    DISKIO          Notes on physical disk I/O
211   :PCBS            PCB information
229    SAFETY          Safety factor used in UNITAL computation
230    SIMUPD          Simultaneous Update Internal Notes
233    FASTDSKCLN      Notes on addition to file system for fast DSKCLN

















































                                       204
Text: DEVRIB; DEVRIB facts                                                page 1

DEVRIB facts:

DEVRIB is a location in the disk DDB that contains the retrieval
pointer to the RIB from which the current group of DDB pointers
came.
It is also used to as a convenient place to remember pointers
when it is known that there are no DDB pointers (in SRCFIL).

It is used in SRCFIL to save the pointer for the UFD RIB.
It is used in RIB checking routines to check RIBSLF.
It is used in NXTPTR to get RIB again to get next set of pointers.
It is used in PTROUT to get RIB to write pointers out
it is set to the current RIB being used in USETST (so that RIB
 checking routines will work)
it is set to the current RIB being used in DIRBLK (reads pages
 of UFDs)
set to current RIB by DIRFST, RIBDR2 (called by DIRBLK) takes
 argument in DEVRIB.
CRBRWL takes RIBDIR as arg, gets that RIB in %RIB.
RIBRDL,RIBWTL,RBBRWL save current DEVRIB, set it up to contents
 of T1 (which is from ATBRIB in RIBRDL and RIBWTL) and restore
 after calling PRMCHK. (This ok? Maybe someone can change DEVRIB?)
RIBCK1 turns off the RBSPAR bit in pointer in DEVRIB. This would
 imply that when a spare RIB pointer is in DEVRIB, RBSPAR is off.
DEVRIB must be setup to be desired RIB in all RIB checking
 routines. It is checked against RIBSLF, and unit
 number is used from DEVRIB to increment RIB error count
 for proper unit in case there is an error.
ZERDDB and INVDDB initialize DEVRIB to prime RIB pointer from ATB.
DELRIB and friends use DEVRIB and then call CRBRWR.
DLTTRC uses DEVRIB to call CRBRWR (release %RIB and map in RIB
 whose pointer is in DEVRIB)
GETPRM (special RIB getter for DLTTRC, does checks against
 DEVPPN,DEVFIL,DEVEXT) sets DEVRIB from ATBRIB.
Output close sets DEVRIB and cals CRBRWL
update (updating enter routine) sets DEVRIB to ATBRIB and
 setom devflo in case file is to be truncated.
Rename also sets DEVRIB to prime RIB address. Looks like
 if get protection failure from deleting rename, leaves
 wrong DEVRIB setup if original DEVRIB was a spare RIB
 pointer, since does not setom devflo.
















                                       205
Text: DEVFLO; DEVFLO facts                                                page 1

These notes were compiled while trying to formulate a solution
to the problem of one process reading a UFD while another process
is changing the allocation to that UFD. The problem is that
the DDB pointer areas are not handled correctly in this case.





















































                                       206
Text: DEVFLO; DEVFLO facts                                                page 2

DEVFLO contains the relative block number in the file represented
by the first retrieval pointer in the DDB retrieval pointer
buffer.
If it is less than zero, it indicates that no pointers live
in the DDB pointer area.
DEVSZS, DEVRIB, and DEVFLO together describe the DDB pointer
area completely.
The PTRCHG bit in lh of DEVIAD says that the pointers need to
be written out.
DEVFUF is used in UFD stuff instead of DEVFLO, while DEVFLO
is set to -1, so that if DDB is being used to read UFD or MFD
(happens in SRCFIL if don't have DRB or FNB info for file)
other real users of the file (how can that happen?) will
not use the same pointers (DEVFLO will be -1 while SRCFIL
uses DEVFUF).
If DEVFLO is setup it does not necessarily follow that the
actual pointers for the page are in the DDB area - only
pointers that eventually lead to the data, i.e. there can
be spare rib pointers in the area. DEVSZS tells what level
rib the pointers come from.
In USETST, the FNBDBL chain is searched using FNDADB for a DDB with matching
ATB, DEVRIB, and DEVFLO positive. The pointers are believed
if this condition occurs. The file is locked under the atomic
file locking queue (modified or unmodified) while this search
is going on.
Question - why can't DEVFLO be set to page instead of block?

Question - is it ok to push DEVRIB and DEVFLO, set DEVFLO to
-1, and reschedule, and then pop back DEVRIB and DEVFLO
Want to do this in Rib validate code, but have to make sure
that no one could sneak in and invalidate all pointers in all
DDBs before we pop DEVFLO back, or else there will be pointers
existent that we didn't know about. 
Routines that mess with other DDB pointer areas are
ONESLT, FLUSH, FLUSHA, KILFIL, UPDDDB, USETST, FEXCH, SWEEP, DELCRE

Question: What is difference between calling FNDDDB, which
looks for DDBs with same DEVRIB, and FNDADB, which looks
for DDBs with same ATB Answer: FNDATB finds all DDBs for file,
while FNDDDB only finds those with the RIB in question.
Only need FNDADB when searching for a pointer to a page
we want and we don't know that RIB its in (in USETST).

Question: Would it be ok to get a file locked, then get the rib
locked, then release the file lock if you were sure you were only
going to modify stuff in that particular rib In other words,
it would be ok to modify DDB pointers if 1)had file lock modified;
2) Had rib write locked. Answer: no, because there are places
in the code that get pointers lock unmodified expecting no one
to modify them, and if we allowed modification of pointers
while only rib was write locked, during that period people
could successfully get the file lock unmodified or even
lock modified. Atomic file locking mechanism must always
be used when referencing DDB pointers, so that in the cases
where the PCB locking mechanism is not sufficient to interlock


                                       207
Text: DEVFLO; DEVFLO facts                                                page 3

the pointers (multiple ribs), anyone trying to use DDB pointers
will wait until multiple rib mucking has settled down.

Question: Could we have done without the atomic file locking
queue Maybe there was a way to code SWEEP et al soas
to always present reasonable pointer areas to other users
of the file. What was the original bug that caused the
atomic file locking queue's conception?

















































                                       208
Text: FBITS; Bits in LH of AC F                                           page 1

Many times it helps in analyzing crashes to know the meanings
of LOOKB, ENTRB, RENMB, ICLOSB, and OCLOSB.
The following is a list of where they get set and cleared:

LOOKB - set by UUOCON after a successful lookup.
	Cleared by close input (called from release) before
	going thru the code.

ENTRB - set by UUOCON after successful enter
	cleared by close output after going thru output close code.

RENMB - never set!
	Cleared in close input if file marked for deletion if
	  atpren is off.
	If on in close input and file not marked for deletion and not suppressing
	  output close, defer stuff till output close.
	Cleared at end of close reset code.

ICLOSB - cleared by UUOCON after successful lookup.
	Set by close input in UUOCON before calling device
	  dependent close routine
	set by init.

OCLOSB - cleared in UUOCON after successful enter.
	Set in UUOCON before successful output close.
	Set by init.

OUTPB - Cleared in UUOCON after calling device dependent ENTER
	routine and the routine succeeds.
	Set in UUOCON at very start of OUT and OUTPUT UUO code.

INPB - 	Cleared in UUOCON after successful call to device dependent
	LOOKUP routine.
	Set in UUOCON at the very start of INPUT and IN UUO.























                                       209
Text: DISKIO; Notes on physical disk I/O                                  page 1

The reason the channel command list is only added to
for page requests that represent contiguous disk addresses
is so that a request for disk address x+1 doesn't sneak
in between disk page x and disk page x+n, since done
processing takes as args first request and number of requests.

The reason the channel command list is only added to for
requests on the same cylinder is so that
we don't mess up the "elevator algorithm".

The reason we don't mix up input and output when building
channel command lists is historical - dec's specification
for the "ideal kontroller", and the actual controller hardware,
could only transfer one direction at a time, so there
would have to be special code in dpxkon if it were ever
to be supported again (or any other device service routine
for a disk that could only do one direction at a time)
if the ideal kontroller specification were to be changed
to allow both input and output.






































                                       210
Menu: PCBS; PCB information                                               page 1

212    ORDER           Order in which to ask for PCBs
214   :DDBPTR          DDB pointer information
228    STDBIT          PCB interrupt level bits






















































                                       211
Text: ORDER; Order in which to ask for PCBs                               page 1

Order in which PCBs must be gotten is RIBs, then sats.
























































                                       212
Text: ORDER; Order in which to ask for PCBs                               page 2

          
























































                                       213
Menu: DDBPTR; DDB pointer information                                     page 1

215   :RULES           DDB Pointer rules
222   :FLOCK           Atomic File Lock Queue























































                                       214
Menu: RULES; DDB Pointer rules                                            page 1

216    NOTES           The generalized rules
217   :DEMO            Demonstrations of DDB pointer rules























































                                       215
Text: NOTES; The generalized rules                                        page 1

Reading the pointers:

Once the DDB pointer area is setup, as long as the job has
the atomic file lock on the file (unmod or mod) its ok
to keep looking at the next pointer in the DDB (MAP does this),
even if the job reschedules,
since anyone who invalidates the pointers in someone elses's
DDB must have the lock modified, and simple creations/deletions
done by other jobs will update all DDBs with that pointer slot
in their pointer area.

If have to get a rib to refill DDB pointers, must make sure
that no one else got the pointers into his DDB before changing
the RIB (validate all pointers for the DDB).


Writing pointers out:

In order to write out DDB pointer area, must have RIB write locked.

If a pointer in a RIB or DDB is changed, all other DDBs must
be searched to see if they contain a slot for that pointer
at the moment. If they do, their pointer slot must be updated.

It is not always necessary to write a changed pointer for a file out - 
allocating a file page sometimes involves only
the DDB. The PTRCHG flag gets set, which causes the pointer
area to be dumped out to the RIB eventually.
However, deallocations from a file are always careful to update
both the DDB pointers and the RIB. This way, as long as the RIBs are
written out, there will be no pages used in RIBs which are not
allocated in the SAT.

If for some reason things are too hairy to update DDB pointers
(when RIB structure changes) and want to invalidate the pointers
instead, have to get atomic file lock
modified (LOKMOD). Only if have modified atomic file lock
is it permissible to invalidate DDB pointers for another
DDB not belonging to this job.

Must be careful if changing the size of the file to update
ATBSIZ at the right time. Updating it too early (before new pointers
are written out) will cause a crash if the updater reschedules.














                                       216
Menu: DEMO; Demonstrations of DDB pointer rules                           page 1

218    READ            Read pointers into DDB
219    CREATE          Create 1 file page
220    DELETE          Delete 1 file page
221    TRUNCA          Truncate a file





















































                                       217
Text: READ; Read pointers into DDB                                        page 1

	Get file locked unmodified
	If pointer is in own DDB, its valid
	If pointer not in own DDB, OK to look at other DDBs
	(pointers will be valid).
	If pointer is not in core in DDB area anywhere, have to
	search the RIB write locked (why?)



















































                                       218
Text: CREATE; Create 1 file page                                          page 1


If page to be created is greater than highest page existent
	Get file lock modified
	Read pointers for current page to be added into current DDB poiner area.
	(SWEEP)Get RIB write locked
	If new page will fit into current set of DDB pointers,
		Set PTRCHG
		Allocate page if necessary
		Store pointer into DDB slot
		Call UPDDDB to update other DDB slots
		Change size and return.

	If all new pointers won't fit into DDB, but will fit
	into one RIB
		Validate all DDB pointers for the RIB including current DDB
		Allocate page if not creating hole
		Store into RIB
		Update all DDBs for this RIB, including current DDB
		Change size and return.
	If need to store pointers into more than one RIB,
		Unload all DDB pointers for this RIB
		For all pages to be created,
			Get next pointer from DDB or write locked RIB
			in DEVRIB (write out current pointers if have to change)
			Store pointer into DDB
			Set pointer change flag PTRCHG
		Store new size and return.

If page to be created is within existent pages of file,
	Get desired page slot into DDB pointer area
	Get RIB for that page write locked
	Validate all DDBs for this RIB including current DDB
	Allocate a disk page if necessary
	Store into current DDB and RIB
	Update all other DDB relevant DDB areas
	Change file size if necessary





















                                       219
Text: DELETE; Delete 1 file page                                          page 1

	Get file locked unmodified
	Read pointers into DDB area for desired delete page
	Get RIB write locked
	Validate DDB pointers, including current.
	Change desired slot in RIB and DDB
	Update all other DDBs with that slot position in them
	Release file lock and RIB
	Give away deleted disk page.

















































                                       220
Text: TRUNCA; Truncate a file                                             page 1


	Get file lock modified.
	Unload all DDBs' pointer area for entire file
	Do truncation, does not use DDB pointer area at all.





















































                                       221
Menu: FLOCK; Atomic File Lock Queue                                       page 1

223    GENERAL         General description
224    DESIGN          Original design memo























































                                       222
Text: GENERAL; General description                                        page 1

The atomic file locking queue prevents DDB pointers from changing
or being believed erroneously when the RIB structure is changing,
since PCB locking is not sufficient when the allocation code
is juggling more than two RIBs. All routines that access
the DDB pointer area are required to get the file lock
unmodified. All routines that change things in such a way
that PCB locking is not sufficient get the file lock modified.
It is not permissible to just get a RIB locked down and then read or mess
with the DDB pointers - it is absolutely required that the file
be locked.
[From MAPIO.MAC, 12-12-78.]














































                                       223
Text: DESIGN; Original design memo                                        page 1

QUEUEING MECHANISM:
-------------------

1. THINGS WHICH CHANGE THE RIB STRUCTURE (ALLOCATE > EOF,
   AND TRUNCATE):

	IS THE FILE LOCKED?
		NO: INC LOCK COUNT AND START UP.
		YES: QUEUE UP.

2. READERS ONLY:

	IS THE FILE LOCKED??
		NO: INC LOCK COUNT AND START UP.
		YES: BY A UNMER AND QUEUE EMPTY?
			YES: START US TOO.
			NO: QUEUE US UP.

3. ON RELEASING THE FILE:

	ARE WE THE LAST USER?
		NO: DONE.
		YES: ANY IN QUEUE?
			NO: DONE.
			YES: FIRST IS MODIFIER?
			    YES: START ONLY FIRST.
			    NO: START UNMERS AT HEAD OF QUEUE.

4. PLACE(S) WHERE BILL'S CODE TOUCHES RIBS AND DDBS?





PLAIN AND SIMPLE READERS:
-------------------------

LOCK (WAIT IF NECESSARY) FOR UNMING AND THEN DO YOUR THING.
WORRY ABOUT INVALID AREA.
UNLOCK AND RESTART OTHERS AT END.


PTRIN:
-----

FIRST LOOK AT IN CORE DDBS TO SEE IF WE CAN GET PNTRS FROM BEST
ONE OF THEM.  CALLER HAS LOCKED US, WE DO NOT LOCK.
THERE IS AN INVALID FLAG FOR DDB PNTR AREAS.

PTROUT:
------
CALLER HAS LOCKED US, WE DO NOT LOCK.  WORRY ABOUT AN
INVALID FLAG AND (A) STOPCD IF IT AND PTRCHG ARE SET (B)
DON'T WRITE IF INVALID.



                                       224
Text: DESIGN; Original design memo                                        page 2

ALLOCATE > EOF
--------------

LOCK
GET DISK PAGE
IF NEED TO EXPAND RIB STR: FIND ALL DDB PNTR AREAS WITH SAME
	DEVRIB: 1. WRITE OUT THE VALID ONES THAT HAVE PTRCHG
	ON, CLEARING PTRCHG AS WE GO.  2. MARK ALL THE VALID
	ONES INVALID.  THEN PUT THE NEW
	DISK PNTR IN OUR DDB (NOBODY ELSE POINTS TO THAT PLACE.).
IF DON'T NEED TO EXPAND RIB STR: UPDATE OUR DDB AND ANY OTHERS
	THAT HAVE A PLACE FOR THIS.
UNLOCK.

NOTE: IF NO NEED TO EXPAND RIB STR, PROBABLY CAN LOCK AS UNMER
AND TREAT LIKE ALLOCING INTO A HOLE(BEWARE OF SETTING ATYBSZ IN
THE RIGHT PLACE IF YOU DO THIS.).

TRUNCATE:
--------

LOCK.
LOOK AT INCORE DDBS:
	IN ENTIRE DDB PNTR AREA IS >NEW EOF, MARK DDB INVALID.
	IF ENTIRE DDB PNTR AREA IS < NEW EOF, NO NEED TO DO
		ANYTHING.
	IF DDB PNTR AREA OVERLAPS NEW EOF, IF PTRCHG IS ON
		WRITE IT OUT AND TURN OFF PTRCHG. WHETHER OR
		NOT PTRCHG WAS ON, MARK INVALID.
TRUNCATE THE FILE.
UPDATE OUR DDB AREA.
UNLOCK.

ALLOCATER INTO A HOLE
---------------------

LOCK IT AS A UNMER.
GET A DISK PAGE.
GET THE RIB CMPL LOCKED.
NEW PAGE INTO OUR DDB AND THEN PTROUT.
UPDATE ANY VALID DDB AREAS.
RELEASE RIB.
UNLOCK.



DELETE A FILE PAGE (TURN IT INTO A HOLE)
---------------------------------------

LOCK IT AS A UNMER.
GET THE RIB CMPL LOCKED.
HOLE INTO OUR DDB AND THEN PTROUT.
UPDATE ANY VALID DDB PNTR AREAS.
RELEASE RIB.
UNLOCK.


                                       225
Text: DESIGN; Original design memo                                        page 3



USETI
-----

THIS IS A READER.


USETO
-----

THIS IS AN ALLOCATOR PAST THE EOF, IN THE MAIN ROUTINE, THAT IS.


USETGT
------

THIS IS LOCKED BY CALLERS. I THINK NO INTERNAL
CHANGES ARE NECESSARY?


OTHERS:
-------

1. SWAP IN ERROR CODE TO HANDLE THIS NEW QUEUE.

2. WORLD HANDLES INVALID FLAG (POSSIBLY DEVFLO OR DEVRIB=0).

3. WORRY ABOUT DEADLOCKS, EX: USER 1 HAS RIB, WAITS FOR FILE
   LOCKING WHILE USER 2 HAS FILE LOCKING, WAITS FOR RIB.
   POSTULATE: FILE LOCK REQ ONLY WHEN DO NOT HAVE ANY RIB IN
   %RIB OR %RB2.


ROUTINES:
---------

1. LOKUNM
	LOCKS, WAITING IF NECESSARY, FILE FOR USE WITHOUT
	MODIFYING RIB STRUCTURE.
	EXPECTS F/DDB.  DESTROYS NO ACS.
	CHECKS IF CALLER HAS A RIB OR SAT AND STOPCDS IF DOES.
	THIS ROUTINE SHOULD BE CALLED WHEN YOU DO NOT! HAVE
	THE FILE LOCKED ALREADY.

2. LOKMOD
	LIKE LOKUNM, ONLY FOR USE WITH MODIFYING RIB STRUCTURE.
	EXPECTS F/DDB.  DESTROYS NO ACS.
	CHECKS IF CALLER HAS A RIB OR SAT AND STOPCDS IF DOES.
	CALLER MAY ALREADY BE MOD LOCKED, IN WHICH CASE THIS
	ROUTINE JUST SUCCESS RETURNS.  IF, HOWEVER, CALLER IS
	UNM LOCKED, THIS ROUTINE STOPCDS.

3. UNLFIL
	EXPECTS F/DDB.  DESTROYS NO ACS.


                                       226
Text: DESIGN; Original design memo                                        page 4

	UNLOCKS US FROM THE FILE AND BOOTS WAITERS IF IT SHOULD.
	DOES NOT COMPLAIN IF WE ARE NOT LOCKED ON THE FILE.























































                                       227
Text: STDBIT; PCB interrupt level bits                                    page 1


This text describes STDREA,STDWRT,STDWAG,STDPRE.

STDREA		Read request in progress.
		Set by PCBFLT just before page is started in
		Cleared by FINPCB after data is present.
		(Code allows STDREA to be set while STDWRT is
		on and a write is in progress. Don't know why -
		perhaps because old PCB code used to let
		new owner of pcb put in a read request while
		write was left over from last owner.)

STDWRT		Write request in progress.
		Set by MAPRLS for dirty RIB PCBs.
		Set by GETLRS for dirty SAT PCBs.
		Clear by FINPCB at end of write if STDWAG is not on.
		Set by SATONC when writing out dirty SATS (every 3 secs if no activity)

STDWAG		Write again bit.
		Set by MAPRLS if find dirty RIB PCB and write is already
		in progress (may be from another user, before current
		caler of MAPRLS wrote into PCB)
		Cleared by FINPCB if found on - starts up the write
		again, leaves STDWRT on.

STDPRE		Data present bit.
		Set by FINPCB after a read finishes.
		Set by PCBFLG for write lock new pages.
		Cleared when the PCB is taken off the free list.




























                                       228
Text: SAFETY; Safety factor used in UNITAL computation                    page 1

The formula for computing UNITAL for each unit is
	UNITAL = FPC - ((PPU - P4S) / UNVRSF) * NSATS

where FPC is the number of pages marked free in all the unit's SATs,
PPU is the capacity of the unit in pages,
P4S is the amount of swapping space allocated on the unit in pages,
UNVRSF is the universal safety factor (currently equal to ^D500),
NSATS is the number of SAT pages on the unit.

The extra pages are reserved so that private pages can still be
created even when the system appears to have run out of disk space
for creating file pages. Folk lore has it that there are
certain places in the monitor that call the disk page allocator
that would die if they could not get a page, and that reserving
this extra space solves this problem.










































                                       229
Text: SIMUPD; Simultaneous Update Internal Notes                          page 1

ATB HANDLING
------------

IMPORTANT BITS AND FIELDS:
--------------------------

ATPUPD - SET IF A CHANNEL HAS THE FILE OPEN FOR SINGLE UPDATE MODE.

ATBMWC - COUNT OF NUMBER OF LMAP SLOTS THAT HAVE MAX WRITE BIT
	ON FOR A PAGE OF THE FILE, AND COUNT OF NUMBER OF
	CHANNELS THAT HAVE THE FILE OPEN FOR UPDATE.

ATBMWU - "MAX WRITE COUNT UP" - SET IF ATBMWC IS NON-ZERO.
	USED FOR CHECKING TO SEE IF ATB IS UNUSED. NEEDED SINCE
	SIMULTANEOUS UPDATERS COULD ALL CLOSE THE INPUT SIDE
	OF THEIR CHANNELS, LEAVING ONLY THE MWC COUNT
	TO INDICATE THAT THE ATB IS STILL IN USE. SINCE
	MWS IS NOT IN THE ATBSTS WORD, ATBMWU IS IN ATBSTS
	SO THAT CHECK FOR WHETHER OR NOT ATB IS UNUSED ONLY
	INVOLVES ONE WORD.

ATBUMC - "UNSHARED MAP COUNT" - COUNT OF NUMBER OF LMAP SLOTS
	THAT HAVE A PAGE IN THE FILE WHICH IS NOT IN
	THE SPT MAPPED. UNSHARED LMAP SLOTS THAT
	HAVE A PAGE MAPPED THAT GOT INTO THE SPT ARE NOT
	REPRESENTED IN THIS COUNT. SHARED LMAP SLOTS ARE
	NOT REPRESENTED IN THIS COUNT. THE COUNT IS INCREMENTED
	WHENEVER AN SPT COMES INTO EXISTENCE AND IS DECREMENTED
	WHENEVER AN SPT IS DELETED, SO THAT ONLY ONE WORD
	(ATBSTS, WHERE ATBUMC IS) NEED BE CHECKED TO SEE IF
	ATB IS STILL IN USE (AVOIDS HAVING TO CHECK ATBSPT
	WHICH IS IN ANOTHER WORD).

DRBCNT - COUNT OF NUMBER OF USERS OF THE DRB. CURRENTLY
	IS INCREMENTED ONCE FOR EACH SIDE OF AN I/O CHANNEL
	THAT IS OPENED - INPUT AND OUTPUT. THIS WILL REMAIN
	TRUE WITH THE ADDITION THAT IT WILL BE INCREMENTED
	EVERY TIME THE ATMUMC COUNT GOES FROM 0 TO NON-ZERO,
	AND WILL BE DECREMENTED EVERY TIME ATMUMC GOES FROM
	NON-ZERO TO 0 (I.E. DRBCNT IS INCREMENTED ONCE FOR
	EACH ATB WHOSE FILE HAS PAGES CURRENTLY MAPPED FROM
	IT.)















                                       230
Text: SIMUPD; Simultaneous Update Internal Notes                          page 2

SINGLE UPDATE MODE (LOOKUP ENTER SEQUENCE)
----------------------------------------------

IF ATPMWU ON, GIVE FILE BEING MODIFIED ERROR (AN UPDATER
OF UNSPECIFIED KIND EXISTS ALREADY.)
ELSE TURN ATPUPD ON, INCREMENT ATBMWC AND SET ATPMWU.

SIMULTANEOUS UPDATE MODE (A CHANIO FUNCTION)
--------------------------------------------

IF ATPUPD IS ON, ERROR (A SINGLE UPDATER EXISTS ALREADY)
ELSE INCREMENT ATBMWC, SET ATPMWU.

MAP
---

IF MAP IS GOING TO SET THE MAX WRITE BIT (FILE OPEN FOR WRITE,
EITHER ENTER OR UPDATE) INCREMENT ATBMWC AND SET ATPMWU.
NOTE THAT THIS MUST BE DONE EVEN IF CHANNEL IS IN ENTER MODE SINCE JOB CAN
MAP PAGES OF THE FILE, CLOSE THE CHANNEL, AND THE PAGES ARE
STILL MAPPED FOR WRITE.  INCREMENT ATBUMC IF THE PAGE IS NOT
SHARED AND IT HAS NO SPT ENTRY. IF THE COUNT WENT FROM ZERO
TO NON-ZERO, INCREMENT THE DRB COUNT AS WELL.


CLOSE OUTPUT
------------

IF CHANNEL WAS IN SINGLE UPDATE MODE, TURN OFF UATPUPD.
IF CHANNEL WAS IN ANY UPDATE MODE, DECREMENT ATBMWC AND
ZERO ATPMWU IF ATBMWC WENT TO ZERO.

REMOVE
------

IF PAGE HAS MAX WRITE, DECREMENT ATBMWC AND TURN OFF ATPMWU IF
ATBMWC WENT TO 0. DECREMENT UNSHARED MAP COUNT (ATBUMC) IF PAGE
IS UNSHARED AND ITS DISK PAGE HAS NO ENTRY IN THE SPT.
ELSE, DECREMENT THE SPT USE COUNT AND IF IT GOES TO ZERO,
DELETE THE SPT ENTRY. IF THE ENTIRE SPT IS NOW EMPTY, RETURN
IT TO FREE CORE AND DECREMENT ATBUMC.  IF ATBUMC WENT TO ZERO,
DECREMENT THE DRB COUNT.  IF THE ATB IS NOW UNUSED, PUT IT ONTO
THE DORMANT LIST UNLESS THE FILE IS MARKED FOR DELETION, IN WHICH
CASE RETURN THE ATB TO FREE CORE.

LOCKING UP ATBS WHILE CB IS RELINQUISHED
----------------------------------------

THIS HAPPENS WHEN SRCFIL NEEDS TO GIVE UP CB FOR A WHILE
IN ORDER TO DO I/O (UFD READS, RIB READS). ATPUPD IS SET
FOR AN ATB TO BE LOCKED DURING THIS TIME SO THAT NO UPDATER
OR SUPERCEDER CAN GET IN. SINCE ATPUPD STILL WILL PREVENT
ANY OTHER USER TO WRITE IN THE ATB'S FILE OR DO A SUPERCEDE
OR UPDATE ON IT, ATPUPD CAN STILL BE USED FOR THIS PURPOSE.



                                       231
Text: SIMUPD; Simultaneous Update Internal Notes                          page 3

CHECKING FOR UNUSED ATB
---------------------

AS MENTIONED ABOVE, ONLY ONE WORD IN THE ATB NEED BE CHECKED
TO SEE IF THE ATB IS UNUSED.  IF ATBUMC IS ZERO,
ATBCNT (CHANNEL READ COUNT) IS ZERO, AND ATP(UPD,REN,SUP,CRE,MWU)
ARE ALL ZERO, THE ATB MAY BE RETURNED TO THE DORMANT LIST.

UNSOLVED QUESTIONS
------------------

ANY UNFORSEEN INTERACTIONS BETWEEN SIMULTANEOUS UPDATERS
WILL BE A SOURCE OF POTENTIAL TROUBLE. ONCE SUCH PROBLEM MAY
ARISE WHEN SIMULTANEOUS UPDATERS TRY TO CHANGE THE ALLOCATION OF
A FILE, THAT IS, TRY TO ADD OR DELETE PAGES FROM THE FILE.
DDB POINTER INFORMATION MAY BECOME CONFUSED.









































                                       232
Text: FASTDSKCLN; Notes on addition to file system for fast DSKCLN        page 1




       Description of Fast DSKCLN File System Changes








1.0  UFPALC

The fast DSKCLN extension depends primarily on seeing a bit,
UFPALC, set in a file's UFD entry if allocation has happened
to that file and the corresponding SATs in which  the  pages
were  allocated  have not all been written out.  Since it is
difficult to indicate in per-file information exactly  which
SATs  the newly allocated pages lie, an approximation has to
be made to know when the SATs are all out so that UFPALC can
be cleared for the file.



1.1  Setting UFPALC

UFPALC is set whenever new pages (including  the  allocation
of  the  prime RIB for create and supercede) are added to or
old pages are taken from a file.  At first it may seem  like
only new pages added must set the bit, but one must remember
that in the case of deallocation if the cleared SAT bits get
out  before the cleared RIB pointers and the system crashes,
a "free page" will result, and when that page  is  allocated
to  a  new  file,  a "multiply used page" will result.  Fast
DSKCLN algorithm is designed to err in  favor  of  more  and
more  lost  pages - since it is possible for all the SATs to
get out onto the disk, and there is no  guarantee  that  the
corresponding  RIB  has  gone  out when we see the SATs have
gone out and we clear UFPALC.

Before allocation is made, UFPALC is set in the  UFD  entry,
the  corresponding rib bit RIPALC is set in the RIBLCW word,
and a new RIB location RIBALT, which has the PCB dirty clock
value  of  the  latest completed allocation.  The allocation
code then makes sure that the changed UFD entry  is  written
out  (it  doesn't make any difference if the RIB gets out or
not - RIBALT is only used as long as the system is still  up
to  dynamically clear UFPALC - DSKCLN always clears UFPALC -
see the section on DSKCLN).

After the allocation is made, RIBALT is updated  to  be  the
current value of the PCB dirty clock + 1.




                                       233
Text: FASTDSKCLN; Notes on addition to file system for fast DSKCLN        page 2

                                                      Page 2


1.2  Clearing UFPALC

UFPALC is the bit that indicates to DSKCLN  that  allocation
has changed on the corresponding file and the monitor didn't
know whether the SAT and RIB changes involved have  made  it
out to the disk yet.  Therefore, in order to clear UFPALC on
a file, it must be known that both the  SATs  and  the  RIBs
(prime and spare) involved have been written out.  It is not
enough to wait for the SATs - if a deallocation  occurs  and
the  system  crashes  after the cleared SAT bits get out but
the cleared RIB pointer does not  get  out,  a  "free  page"
results.   Therefore,  the  system  keeps a PCB dirty clock,
called PCDTIM, which is incremented every time a set of PCBs
at  a certain point in time is guaranteed to be on the disk.
If the file's RIBALT is  less  than  the  current  value  of
PCDTIM,  and  the  file  has  no  other potential allocation
changers, then UFPALC can be cleared in input CLOSE.

When DSKCLN runs in either fast  or  slow  mode,  it  always
clears UFPALC.

Note that we are hoping  that  files  whose  allocation  has
changed  will  be looked up at least once after all the RIBs
and SATs involved in the change have been  written  out,  in
order to minimize the population of files with UFPALC on.



1.2.1  PCDTIM Algorithm - As mentioned above,  in  order  to
know  when to clear UFPALC, the system needs to know for any
point in past time whether or not the PCBs that  were  dirty
as  of that time are now all out on the disk.  The algorithm
is a cycle.  At certain fixed intervals (long enough to  not
take  up too much overhead, and short enough to maximize the
number of UFPALC bits we turn off) a bit called PCPDRF  (PCB
dirty  flag)  is set for every dirty PCB found at that time.
A counter named PCDCNT is incremented for every bit set.  As
the  PCBs  are marked clean, PCPDRF is cleared and PCDCNT is
decremented.   When  PCDCNT  gets   to   zero,   PCDTIM   is
incremented  and  the  cycle  starts  over again.  With this
setup, C(PCDTIM)+1 can be stored into RIBALT, and  when  the
current  cycle  completes,  plus another one, RIBALT will be
less than the new c(PCDTIM), and we are sure  all  the  PCBs
have  gone  out  since  the  original  value was stored into
RIBALT.



2.0  DSKCLN

As mentioned above, DSKCLN will always clear  UFPALC,  since
whichever  mode  it runs in (see below) it will fix the file


                                       234
Text: FASTDSKCLN; Notes on addition to file system for fast DSKCLN        page 3

structure up soas not to have any free pages.

DSKCLN will run in either of two modes - fast or slow.  Fast






















































                                       235
Text: FASTDSKCLN; Notes on addition to file system for fast DSKCLN        page 4

                                                      Page 3


mode only considers the files whose UFD entry has UFPALC on.
Therefore, fast mode should not  run  much  slower  that  it
would  take  a  stand  alone system to scan all UFD entries.
Slow mode, which is necessary to recover lost pages and  fix
inconsistencies  in the file system due to causes other than
SAT allocation problems, will be run if for any  reason  the
previous incarnation of the monitor is either unable to tell
the new monitor that its ok to run fast mode or if the prior
monitor says specifically to run fast mode.

The  current  behavior  of  the  system   on   RIB   errors,
mismatching  UFDs,  etc.   will  have  to be loosened a bit,
since when the system crashes one can get  things  like  UFD
pointers  pointing to things which are not the RIBs they are
supposed to be.  Instead of crashing in such situations,  we
will just return the RIB error file selection error code.

Certain STOPCDs in the file system will  imply  specifically
that  slow  DSKCLN  should  be  run.  These are STOPCDs that
imply there is something wrong with the file  system's  data
base and/or logic.

DSKCLN will ignore the UFPALC bit on UFDs, and process  them
as normal files, ORing in the pages that belong to them into
the SATs.



3.0  EFFECTS ON PERFORMANCE

An extra disk write will have to happen on allocation , plus
the  time  it  takes to wait for its completion (in order to
make  sure  UFPALC  is  set  before  we  change  the  file's
allocation)  for  files  in UPDATE mode.  Files in create or
supercede mode do not have to wait, since there  is  no  UFD
entry  to  worry  about.   When the UFD entry is about to be
created, the UFPALC is set if RIBALT is still >= PCDTIM.  In
addition,   an  extra  disk  write  (no  need  to  wait  for
completion) will occur in CLOSE input of a file whose UFPALC
was  set  and can now be cleared.  Other than this, no extra
I/O will be incurred.  Because of the use of a new  word  in
the  RIB and the PCDTIM algorithm, many forced writes of the
SAT can be avoided (would have to make sure  that  all  SATS
and  RIBS  went out, then clear UFPALC, which would somewhat
lessen the population of files  with  UFPALC  on  but  would
greatly  increase the amount of I/O done on input close.  By
waiting for the PCBs to go out naturally,  we  increase  the
UFPALC population somewhat and save the I/O.






                                       236
Menu: PI; Software Interrupt System                                       page 1

238    DATABS          Data base for software interrupt system
























































                                       237
Text: DATABS; Data base for software interrupt system                     page 1

UPTENB - Left half: Using new interrupt system, contains interrupt
	table address. Using old (APRENB) system, contains UUO
	trap address.
	Right half:  If using APRENB, contains enable bits.

JBTPIP - PI channels in progress. Bit 0 set means old system (APRENB)
	in use. (Bit 0 and Bit 1 set togehter in old system means trap
	in progress.)
	Bit 0 clear means rest of word says which channels (1-35)
	are in progress.

JBTAWQ - Bit 0 says some other bit in the word is set (attention).
	Other bits = interrupt request on channel (1-35).

JBTENB - Channels enabled. Bit 0 set means system enabled, clear
	means system disabled. Bits 1-35 correspond to channels
	1-35 enabled/disabled.

UPTTPN - Contains 0 (disabled) or interrupt channel numbers
	for a variety of conditions:
	JBYUUO - uuo trap channel
	JBYCLK - Clock ticks
	JBYPGT - page fault traps
	JBYHNG - hung device traps
	JBYERR - device error
	Timer and wake channels are in LH of JBTIOA.































                                       238
Menu: UUOCON; Notes on UUOCON Programming                                 page 1

240    BUFMOD          Notes on buffered mode code
241    AC              Notes on AC conventions in UUOCON























































                                       239
Text: BUFMOD; Notes on buffered mode code                                 page 1

The use bit in the buffers can be thought of as a "data valid" bit.
On output, it means the data hasn't been processed by the output
service routines, so the data is still valid. On input, it means
the data has not been read by the user program, so the data is
still valid.

The first word of the 3 word "buffer header" block
(the one with the byte pointer and count) contains the user's pointer
to the buffer ring. DEVIAD and DEVOAD contain the service routines
pointer to the ring.

The IOADVB bit, which is kept in the LH of the buffer header
(3 word) in the user's space, is set whenever the buffers have
been advanced in case the user gets a software interrupt or
control Cs out and has to re-execute the I/O UUO in question.










































                                       240
Text: AC; General AC conventions                                          page 1


Top level UUO routines (those called by UUO dispatch) are called
with M containing the UUO, W containing AC number from UUO
(channel number), F set to zero if called from user UUO
(so address check/ill mem ref from exec comes out right).
J is not setup for non-CALLI UUOs.

CALLI UUO routines (those dispatched to by CALLI or CALL dispatch)
have T1 containing contents of user's AC, W and RH(M) contain
user AC number for storing return args, J contains
job number, lh(W) has 1b0 set if its a physical only CALLI
(those with 1b18 and 1b19 different).

All top level UUO routines can destroy all ACs except P, including
J.

All device dependent dispatch routines (see dispatch table in UUO
routines) are theoretically allowed to destroy T1-T4 and
P1-P4, but must preserve U,F,S (except to change device status word)






































                                       241
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 1




     1.0  HOW TO START

     1.  Look at SYSCRS.  If it is non-zero, it is the  address  of  a
         system stopcode that was hit.  Get out your monitor fiche and
         figure out why it got there.  Bear in mind a stopcode can  be
         caused by software or hardware.

     2.  The relation between SAV30 and 30 determines how system  came
         down.   If  SAV30  and  30 have same contents, normal case is
         that base took system down - see KEY620  (output  in  16  bit
         format)  and  first  16  bit  byte is reason base took system
         down.  Abnormal case is that base wasn't running  -  this  is
         detected by SAV30 and 30 containing a "1" (operations is told
         to put a 1 in 30 to take system down, but  occasionally  they
         may  put  something else in).  If SAV30 and 30 are different,
         then operator deposited non-zero value in 30.  Remember  that
         SAV30  is  normally  used during system operation as a normal
         instruction location, just as CRSHAC is;  i.e.,  the  monitor
         overwrites  code to save contents of location 30 and the ACs.
         Therefore, if SAV30 or the ACs look like  instructions,  they
         probably  are.   Check the locations in the monitor to see if
         the data matches the instructions that normally reside there.
         If  it  does,  the  system has not successfully completed the
         crash code.

     3.  If the base took the system down, look at the crash code.  If
         it  is  not  read  bad key from host or input ring processing
         timeout, see if the base has dumped itself into memory.  This
         can  be  determined  by  looking  at  location  FILSER in the
         monitor.  If bits 32-35 are all ones, then it has.  Save  the
         crash for the network people to look at.

     4.  Bad data type or port number from host crashes can be  caused
         by 1)Monitor telling base in initial message that it has more
         ports than base has  (configuration  problem  with  value  of
         PORTN),  2) Monitor sending bad message type to base (look at
         output ring to base (ORING) to see if all messages are  legal
         3)  Monitor  sending  port  number out of range to base (same
         procedure as sending bad message type).

     5.  Input ring processing timeout means the  system  is  probably
         hung, although APR level is refreshing the key.  This usually
         indicates that scheduler level is not running.   See  section
         on hung crashes (look at THSTIM, etc.)

     6.  Read bad key from host normally  appears  when  a  STOPCD  is
         done.   Also  appears if host stops refreshing key or if host
         places bad value for key into KEY620.






                                       242
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 2

Notes for looking at crashes                                    Page 2


     2.0  HUNG CRASHES

     Don't forget - the main drive behind analysis of hung crashes  is
     to  FIND  OUT  WHAT  THE  MACHINE  WAS DOING, i.e., find the most
     recent PC the machine was known to be at.  This  motive  is  very
     easy  to forget as one gets lost in the intricacies of the crash.
     Don't spend too much time on tangents - find out what the machine
     was doing.



     2.1  Hung At PI Level?

     Check pi channels in progress, look at PCs in CHn for all  values
     of   n,  look  at  device  CONIs  to  make  sure  device  is  not
     interrupting continuously on wrong channel or  on  right  channel
     but service routine is not paying attention (line printer service
     turns off its CONSO when it thinks printer is not supposed to  be
     running).




     2.2  Hung At Scheduler Level?

     First see how  long  its  been  since  we  ran  SCNSER  (and  the
     scheduler).   Open SCNSER and compare THSTIM with the contents of
     UPTIME.  If this comparison is not very  close,  problem  was  we
     didn't get to scheduler any more.  Look for loop at PI level (see
     PISTS to see if any PIs were in progress), and if not,  look  for
     loop  in  scheduler  level.   Use  stacks  and contents of ACs to
     pinpoint last known location.  Remember - object is to  find  out
     as  much  as possible about last known location that monitor was.
     Look at all JBTSTS words with RUN bit on if channel 7 is  running
     normally.   See  if they are all stuck in one state (AC wait, for
     example when CHKPNT or stream accounting dies).  Look at PARPC to
     see if machine was processing user prity error, which can take so
     long sometimes that base takes us down for input ring  processing
     timeout (code 7).  Look at UNIHNG for all disk units to make sure
     a disk isn't hung - sometimes certain programs  and/or  jobs  can
     still  run  if  they aren't using files or pages on the hung disk
     unit, while other programs/and or jobs will be hung.Also look for
     large numbers of errors

     Sometimes looking to see what ACs were  at  last  disk  interrupt
     will yield information about a monitor loop.

     If swapper hangs, see if SIPTOT disagrees with the actual  number
     of  pages being swapped in.  If SIPTOT ever gets off by 1 or more
     (which it has been known to do) and SIPQTA is  sufficiently  low,
     swapper  will  stop  doing  anything,  OPERs  will probably crash
     system as being hung.


                                       243
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 3


























































                                       244
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 4

Notes for looking at crashes                                    Page 3


     2.3  Crashes Where Deposit In 30 Or 147 Start Didn't Work

     If dump  indicates  that  OPRs  hit  reset  before  saving  dump,
     sometimes  they  couldn't  get the dump any other way.  Call OPRs
     and see if they filled out a hang sheet.  One thing that  happens
     sometimes  is  that  processor  makes a memory request and memory
     sends ACK but no data - processor will just hang  in  this  case.
     If  PI  system  is  indicated  as  on, PI requests are up, All PI
     channels were indicated on, but no PI in progress were  on,  then
     processor is hung.  




     2.4  CHKPNT Failure

     The system will hang if CHKPNT dies.  There are several  ways  to
     recognize this condition.

     1.  CHKPNT's JBTSTS shows it is not running.

     2.  CHKPNT's interrupt system is not turned on, or  its  channels
         are not turned on

     3.  Almost all jobs on the system are in AC wait (note some  jobs
         will  be  able  to  continue  running  until  they perform an
         operation that requires a stream record to be written)

     Look for many hard disk errors on one or more units  (UNIHCT)  or
     hung units (UNIHNG) if CHKPNT is still running.



     2.5  Hung Disks?

     This is likely if many jobs are stuck in SW wait,  or  many  jobs
     have  MRQ on.  To see for sure, check UNIHNG for hung disk units.
     If there are one or more units with high  hung  counts,  this  is
     probably what was causing system to hang.



     2.6  Parity Error Scan

     Sometimes the parity error scan takes so  long  that  the  system
     looks  hung  and  the  base or the operators take it down.  Check
     PARPC, PARSPR, PARTOT, and the most recent PC that can  be  found
     to see if the system is processing a parity error.






                                       245
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 5

Notes for looking at crashes                                    Page 4


     3.0  NXM CRASHES

     Beware of the fact that on NXM crashes the processor can actually
     execute  a  zero  before  the  NXM interrupt occurs.  This can be
     confusing.  On the KI, there is no hope of knowning exactly  what
     happened, but on the KL, examination of ERASTS shows the physical
     address (not virtual) that caused the NXM.  If this is within the
     range  of  the  memory indicated by MEMSIZ and PGYNXM bits (watch
     out for holes in memory,  don't  assume  all  memory  from  0  to
     c(MEMSIZ)  is  there)  then  it  is  certainly  a hardware crash.
     Otherwise, look for a bad page map pointer in the current UPT  or
     EPT.  On the KI, one has to deduce the location of the NXM by the
     contents of the ACs and the PC at interrupt time .



     4.0  CLUES TO UNSOLVED CRASHES

     Hanging around somewhere is a file CHUNK.CMD.  If used  properly,
     one can sometimes obtain information about why a system went down
     that is otherwise unavailable.  Setup P1 and P2 as start and  end
     byte  pointers (if P2 is zero will type out to end of chunk list)
     and type out TTY chunk free pool.  This  will  sometimes  contain
     messages  from the operator about the system, CTY output that the
     operator lost or forgot to tell operating systems group, etc.  

     Search PCBs for disk address of a RIB if you have a desire to see
     a RIB that was recently dealt with - it may still be in core.

     Look at the accounting buffer  or  the  stream  accounting  files
     (*.SAT  on  UN1  or  BILLING10)  for clues regarding who ran what
     programs.  Bear in mind that not all runs cause stream records to
     be  written,  and  that  it is possible that some stream data got
     lost by being in CHKPNT's data buffers at the time of the crash.

     Don't overlook the locations on the stack higher than the address
     of  the  current  value  of  the stack pointer.  This can be very
     helpful in reconstructing the path  that  was  traversed  by  the
     machine in getting to where it died.

     Sometimes it is possible to deduce the execution path by  careful
     examination of the ACs.  The key is to recognize what the data in
     the AC is (LDB?  clock CONI word?  DDB?  etc.)

     Occasionally there will be a crash where it  looks  like  a  disk
     transfer  brought  in  the  wrong  page.  In these crashes, it is
     important to check to see if the I/O is still  in  progress.   If
     the  job  was awakened too early for some reason, it will see the
     old contents of the page  and  not  the  new  one,  and  disaster
     usually results.




                                       246
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 6

Notes for looking at crashes                                    Page 5


     5.0  GENERAL ADVICE ON CRASH ANALYSIS

     Usually,  processor  executing   instructions   incorrectly   and
     confused crash dump analyst are indistinguishable.

     This doesn't happen frequently in out monitor anymore, but  watch
     out  for PI level smashing lower level ACs.  Always be suspicious
     if the monitor crashes and  the  PC  is  close  to  one  that  is
     contained  in  an  interrupt  JSR cell.  When looking at a crash,
     always make sure you have the correct ACs for the place  you  are
     looking  at.   For  example,  a  page fault for an exec page will
     stack the acs and then die in the page fault code.   Always  look
     at  the  previous  context ACs in this case and similar cases, or
     many hours of confusion can result.  For KI10 crashes, to look at
     previous  ACs one must go into "CODE MODE" and set contents of $I
     ("Altmode I") to zero - LH of $I represents  the  simulated  user
     IOT  bit.   This causes FILDDT to look at the AC stack instead of
     indicated user AC block.  On KL10 crashes, previous  context  ACs
     are fixed by the hardware and are not affected by either the real
     user IOT flag in the actual  machine  or  the  simulated  one  in
     FILDDT.



     6.0  FREECORE ALLOCATION CRASHES

     In crashes where freecore allocation has been messed  up  (giving
     back free core that was already free, two users of same freecore)
     try to recognize what data structure is likely using the core  by
     the  contents  of  the core.  Refer to a chart of uses of monitor
     free core and it may occur to you  what  is  being  used.   (disk
     DDBs,  block  I/O  buffers, secondary PCBs, Club tables, SPTs all
     come out of freecore).  Check to make sure all callers of GETWDS,
     GIVWDS,  GET4WD,  and  GIV4WD are allocating as much free core as
     they try to give back.



     7.0  OVERWRITTEN MONITOR PROBLEM

     7.1  If Monitor Is Suspected Of Being Overwritten

     Sometimes confusing information found in  a  crash  dump  can  be
     attributed  to  the  monitor  being  overwritten.   If  you  find
     yourself  suspecting  that  the   processor   has   executed   an
     instruction  or  instructions incorrectly, check to make sure the
     code in the monitor hasn't been clobbered.  To do this,  use  the
     XPAND  program  to  convert both the source monitor and the crash
     dump into expanded form, and do selective FILCOMs between the two
     to  see  if any instructions have been modified.  The FILCOM must
     be selective, since in general code and data are  interleaved  in
     virtual/physical  memory in the monitor.  It is good to start the


                                       247
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 7

     FILCOM at location FILSER (this skips some actual code in  COMMON
     and  COMMOD,  so  beware),  and end at the end of the patch area,
     location PAT.   It  is  usually  advisable  to  do  two  seperate






















































                                       248
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 8

Notes for looking at crashes                                    Page 6


     FILCOMs,   one   between  FILSER  and  CRSHAC,  and  one  between
     CRSHAC+20*10 and PAT.  This is because there is  code  at  CRSHAC
     that is overwritten in a normal crash dump with AC data.  Specify
     the source monitor file  first,  then  the  crash  monitor  file.
     After doing the FILCOMs into files, edit the files and search for
     the    following    fancy    string:     <beg    of    line>6<any
     char><tab><1,2,3,4,5,6>.       EDIT10     string     for     this
     is:?9?/?/?/?/?/?/<tab>?0123456?0.  This will find  all  words  in
     the  source  monitor file that are likely to have instructions in
     them that have been modified since the system came up.  Note that
     some  of  these  changes  are OK - JEN instructions that have now
     become part of a CONSO chain, etc.  Just take the addresses  with
     the differences and see whether or not it is reasonable that they
     have changed.  Note that this procedure skips some code - it  can
     only  ensure  that  there is an instruction that was changed, not
     that one was not.  Also note that the monitor's data  base  being
     overwritten  is also a source of strange problems, although there
     is no way in many cases of knowing what is supposed to  be  there
     unless  some  other  part  of  the data base suggests some former
     contents.



     7.2  Who Clobbered The Monitor?

     The important thing to use as a clue is the address and  data  of
     the overwritten cell (cells).  Is the data pattern a recognizable
     one?  If so, it might  help  isolate  which  data  structure  the
     monitor  thinks  it  is  writing into.  Was data anded to memory,
     ored to memory, movem ed to memory?   Which  bits  are  involved?
     Does  the  address appear in any ACs?  Don't forget to look in AC
     save areas (the AC stack, UPTXAC for jobs with their UPTs in core
     and  below 256K).  Are there any other crashes with the same data
     or addresses smashed?  If so, is there a pattern to which job  or
     jobs are logged in, which programs are running?  A common monitor
     failure is using AC J without setting it up - and a common  value
     for  J  to  be  if  it  is  not  setup is a controller data block
     address.  Look at SCnnCB+CHNKON for  the  controller  data  block
     addresses,  and  subtract the value from the smashed address.  If
     this turns out to be the exact address of word 0 of a JBT  table,
     you can then look at the references to the JBT table to see which
     one is the culprit.

     When damage occurrs to  core  somewhere,  make  sure  no  channel
     command  lists  point  to damaged area (could be broken channel).
     Also broken base could cause this - look for bits  23-35  all  1.
     If suspect base wrote the data, look at output ring for block I/O
     requests and see if the request address bears any relation to the
     addresses that were overwritten.





                                       249
Text: CRSNOT; Notes on Crash Analysis Techniques                          page 9

Notes for looking at crashes                                    Page 7


     8.0  GENERAL ADVICE

     Always make sure you are looking at an exact listing of code that
     is  suspected of causing a crash, or that you are very very aware
     that what you are looking at is not the exact code running at the
     time  of the crash.  Many times a bug has been overlooked because
     the older or newer version of the code did not have a bug but the
     running version did.

     Don't believe that a PC looking thing on the stack is a PC unless
     the  stack  pointer  and  the  code  indicate  that a PC is there
     (example - UUOCON skips over a word on the  stack,  leaving  what
     could be a word looking like a PC from the last page fault)

     Always think twice before chalking a crash dump up  to  processor
     failure.



     9.0  ANALYSIS OF LIVE BUT SICK SYSTEMS

     Sometimes analyzing a running "dead" system can save  some  time.
     Here  are some techniques to use on a system that is stil running
     but is about to be crashed because it is not getting  any  useful
     work done.



     9.1  If You Can't Login

     Login to system 37 and get a copy of the monitor that is  running
     on  the  sick system into core and into DDT.  Ask the operator to
     examine key locations that you  want  to  see  to  determine  the
     problem.  For example, see what location STRDDB+STRTAL is and ask
     the operator to examine it to see if system's problems are due to
     disk space.



     9.2  Job Capacity Exceeded

     This message comes out when there is not enough disk to  allocate
     context  pages,  when  the  system  is out of job slots, when the
     system doesn't have enough contiguous free core to create  a  new
     TTY  DDB,  or when LOGIN kicks a user off because it is reserving
     job slots for GAN 3.



     9.3  System Very Slow

     This can be caused by a large variety of things, but check to see


                                       250
Text: CRSNOT; Notes on Crash Analysis Techniques                         page 10

     if  any  one  particular  job  is  getting all the runtime in the
     system.  Sometimes (PJ)PAM goes into a loop.  Sometimes it  is  a
     job  that  is  abusing/using SCHPRV.  General strategy is to find






















































                                       251
Text: CRSNOT; Notes on Crash Analysis Techniques                         page 11

Notes for looking at crashes                                    Page 8


     out where the system is spending its time.  Sometimes  the  field
     engineers  are  testing a disk drive off line through the storage
     control, which will slow down disk transfers  somewhat,  although
     they should not be doing this on customer systems.



     9.4  Job Can't Be Hung

     If a job can't be hung, see if it was detached and is  now  using
     the  spare LDB - see if there is a list of waiters waiting to use
     the spare LDB.  See if the job to be hung still has command  bits
     set for it - look at its JBTSTS, see if COMCNT is still non-zero.
     Try to look at the job's context pages and see if its  PC  is  in
     the monitor (will keep control-c from happening).







































                                       252
Text: XFRRAT; Disk transfer rate Calculations                             page 1


The transfer rate available for the disks depends on the hardware
specifications and the nature of the disk queues.
The queue characteristics determine what the actual seek and
latency times will be.

Our disk driver uses the RPS feature. Therefore, the software will
allow rotational position delays to occur without
tying up the channel. Since we use block multiplexing, seeks
also occur without tying up the channel.

Currently, the disks are formatted so that there are 18 blocks
of 128. words on each track. Therefore, there are 4.5 pages
per revolution of the disk, giving a maximum theoretical transfer
rate of 4.5 * 50 = 225 pages per second, assuming no seeks
or latency delays. The above numbers assume 50Hz operation.

What conditions can cause a drop in the theoretical transfer rate?

First, there are the seek and latency delays. For the "average" case,
for one disk unit and therefore no seek or latency overlap,
a transfer would take 4.44ms transfer + 10ms latency (half a rotation)
+ 30ms seek (average seek time taken from IBM reference manual).
= 44.4ms, yielding a rate of 22.5 pages/second.
(Note that these delays are actually a function of how many units
are active on the channel, since in the multi-unit case an ongoing
data transfer on one unit could delay the start of a seek or
cause another transfer that would have been ready to have to
wait for the disk to rotate to the proper spot again, increasing
latency time.)

If more than one unit is active at a time, the transfer rate can
be higher due to overlapping the wait time on one or more units
with transfer time on another unit. Using average seek and latency
times, the percentage of time a transfer can occur is the rate
at which a disk unit can provide data divided by the total time
it takes to access the data and transfer it. Using the above
numbers, this figure is 4.44/44.4 = .1.

The probability that there will be a transfer ready to go
for N disk units is 1 minus the probability of no units
being ready. That is, 1-(1-P)**N, where N = number of
units and P is the probability for at least one unit being ready.

If there is an average of 5 disk units active with average values
on each unit for latency and seek time, the total transfer rate
should be 1-(.9)**5*225 = 92 pages per second.

For 6 disk units active at a time, the total transfer rate should
be 1-(.9)**6*225 = 105 pages/second.


If there is an average of 11 disk units active, the total transfer
rate should be 1-(.9)**11*225 = 154 pages/second.



                                       253
Text: XFRRAT; Disk transfer rate Calculations                             page 2

The above demonstrates how the number of disk units active can
vary the actual transfer rate.  If the
delays are greater or less than the ones used above, the
effective transfer rate will vary accordingly. These delays
are a function of which disk pages are on the transfer queues.
If the requests in the queues are such that the average seek and
latency times differ from those used above, the effective transfer
rate will vary accordingly.

At first, one would think that the number of units active would
tend to be all units on the system.  However, this is a function
of how the operating system tends to allocate pages to files
and jobs' core images.  Currently, the file system
tries to allocate a) On the unit with most free space if it has
a SAT in core; b) On the SAT in core with the most free space
regardless of unit; c) On the unit with the most free space
whether the SAT is in core or not in core.
Therefore, it is possible for the system to allocate many pages
on fewer than the number of units on the system. This is
particularly important for allocation of files which are core
image SHR files, and private pages.  A further tendency to
allocate on fewer than the number of units on the system
exists because the UUOs that allocate private pages try to
allocate them contiguously with the last private pages allocated
for that job on the same unit.

Since most of the I/O on the system when the page rate is 100 pages/second
is swapping, it is likely that less than the full 11 units
are active at once, on the average.

Another effect that will keep the rate below theoretical maximum
is that the swapper code limits the number of pages being
brought in at once.  This will tend to increase the average
seek and latency time, since there are fewer requests on the
queues.  The algorithm accepts requests for
pages input until the number of pages needed to be brought in
exceeds a number called SIPQTA, which is currently set around 8.
Thus, if the algorithm accepts a request to swap in a 100 page job,
SIPQTA will be exceeded and the algorithm will not accept any
more swap ins until the number of pages needed to be swapped in
is below SIPQTA. A further element that will limit the disk transfers
is that SIPTOT, the counter that contains the number of pages
that "need to be input", not only represents pages that
are currently in progress but pages the swapper imagines
will be put in progress. This number is estimated to be the job's
monitor working set size before the context pages are brought in,
and only when the context pages are in does the swapper really
know how many pages are really needed, since some of the pages
in the job's monitor working set may already be in core and don't
need to be brought in.  After the context pages are in, the
swapper adjusts SIPTOT to reflect the actual amount of pages
needed.  However, the swapper can't start a page in until it
is given a clean core page to do so, so that SIPTOT can remain
incremented longer than it would take to bring all the pages
in, because of the extra time needed to wait for a clean core page.


                                       254
Text: XFRRAT; Disk transfer rate Calculations                             page 3

The net result of this is that the page rate can drop if the swapper
has trouble finding core pages to start the transfer into.
The swapper will use a dirty unused page before it uses a clean
page that is in use, even if the job that is using it has a
non-zero in core protect time, so even if there are more
total clean pages than dirty pages, the swapper might still wait
for the dirty ones. (The reason for this is that someone will
have to write the dirty free pages out eventually, and we may
as well write them out now and prevent a zero in core protect
time job from page faulting.)

To summarize, conditions in the software can lower the transfer
rate by 1) changing the nature of the queues by shortening
them, increasing average seek and latency time; 2) causing
the number of units with active queues to be on the average
less than the number of available disk units on the system
to to allocation policies.

Putting another storage control on the existent channel will probably
do nothing significant, since the controller is free during seek
and latency time anyway. Adding another channel without another
storage control will not affect transfer rate, since both the
channel and controller are needed to do anything useful, and
only one channel can be active for the control at a time.
The only combination that would improve disk throughput
would be 2 channels connected to 2 storage controls.
The probability that both channels would be in use
at any time would be (1-(1-.1)**5) * (1-(1-.1)**6)
 = .19, assuming the availability of the new channel would
not change the average seek and latency time. (Actually,
the queues would be somewhat shorter with 2 channels because
of the increased transfer rate, and therefore the average
seek and latency times may increase because of the shorter queues.)
The maximum increase in transfer rate we could then expect would
be 19%. This would increase the observed transfer rate from 100
to 119 pages/second. This increase in available swap rate would
probably not result in a noticeable improvement in system
response.

It is our opinion that adding extra memory to the system
will improve response and total useful disk throughput, since
this will eliminate saturation in the swapper and release
the currently available disk throughput to do more useful
work.













                                       255
Text: STREAM; Stream Accounting System Record Formats                     page 1

STREAM ACCT'G RECORDS P031 & LATER MONITORS
REVISION 24 APRIL 1978 A.ATKINSON

THIS DOCUMENT DESCRIBES DIFFERENCES BETWEEN STREAM ACCOUNTING
RECORD FORMATS UNDER P031 & LATER MONITORS FROM P030 & BEFORE.
APPENDED IS A COPY OF (MONDOC)STREAM.10 WHICH DESCRIBES THE
STREAM PRIOR TO P031, AND A COPY OF (MONDOC)FACT.10, WHICH
DESCRIBES RECORD FORMATS IN THE OLD "FACT" FILES. FURTHER
INFORMATION ON OPERATING PROCEDURES FOR THE STREAM CAN
BE FOUND IN (MONDOC)OPERAT.031, AND IN THE SECTION "THE
CHKPNT WATCHDOG" IN (MONDOC)P031.INF.

MUCH REMAINS THE SAME.  BRIEFLY, THE "FACT" ACCOUNTING INFO
HAS BEEN CONSOLIDATED INTO THE STREAM.  LOGINN,LOGOUT &
CHKPNT NOW WRITE STREAM RECORDS, NOT FACT RECORDS.

THE INFORMATION FOR A GIVEN DAY (GMT) IS IN THE FILE
(UN1)MMDDYY.SAT . RECORDS NEVER CROSS A BLOCK BOUNDARY.
DUMMY RECORDS ARE USED TO FILL TO THE END OF A RECORD.
CHKPNT IS THE ONLY WRITER OF THE MMDDYY.SAT FILES.
IF IT IS UNABLE TO UPDATE A GIVEN MMDDYY.SAT, IT
WILL CREATE A MMDDYY.S01 FILE & CONTINUE USING THAT.
THIS PROCESS OF CREATING ALTERNATIVES TERMINATES WITH
EXTENSION "S77", AT WHICH POINT CHKPNT WILL TERMINATE
WITH A FATAL ERROR.

THE FORMAT FOR A STREAM ACCOUNTING RECORD IS AS FOLLOWS:

WORD 0:	BITS 0-8 RECORDTYPE CODE
	BITS 9-17 JOB NUMBER
	BITS 18-29 TERMINAL TYPE INFO  OR 0
	BITS 30-35 RECORDLENGTH (THIS WORD INCLUDED)
	**FOR TYPE 401, BITS 29-35 ARE RECORDLENGTH **

WORD 1:	BITS 0-17 DATE IN DAYS SINCE JAN 1,1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

WORD 2:	AUN OF JOB

WORD 3:	HI ORDER TRU'S 		(EXCEPT LOGIN RECORD)
WORD 4:	LOW ORDER TRU'S 	(EXCEPT FOR LOGIN RECORD)

WORD 5:
 THRU
RECORDLENGTH-1:    VARIABLE, DEPENDING ON RECORD TYPE. SEE BELOW

(NOTE THAT ALL RECORDS EXCEPT SYSTEM INITIALIZATION--TYPE 11--
AND THE DUMMY RECORD--TYPE 401-- HAVE DATE,,TIME IN WORD 1
OF THE RECORD. CHKPNT DEPENDS ON THIS FACT
TO KNOW WHEN TO CLOSE ONE GMT DATE MMDDYY.SAT FILE AND OPEN
THE NEXT.)

******************************************************




                                       256
Text: STREAM; Stream Accounting System Record Formats                     page 2

THE FOLLOWING RECORD TYPES ARE IMPLEMENTED

0	GET, RUN, R, RUN UUO, RUNSEG UUO

1	EXIT UUO

2	EXIT AC,  UUO

3	SETNAM UUO

4	START COMMAND

5	REENTER COMMAND

6	DDT COMMAND

7	PROJECT CODE CHANGED

10	XCHARG UUO RESET FUNCTION: TRU'S MODIFIED

11	SYSTEM INITIALIZATION

12	DATE OR TIME CHANGE DURING TIMESHARING

13	LOCAL STREAM ACCOUNTING RECORD

14	SETLIC UUO

15 	SETE UUO

16	RUN UUO LICENSE

17	TRANSACTION-CHARGES RECORD

40	LOGINN RECORD

41	CHKPNT RECORD (VERY SIMILAR TO LOGOUT RECORD)

42	LOGOUT RECORD

43	UPTIME RECORD, WRITTEN BY CHKPNT AS IT COMES UP

400	RESTART OF CHKPNT. ONLY WORDS 0 AND 1

402	ERROR. DATA FROM ACT DEV INCONSISTANT. ONLY WORDS 0 & 1
	PRESENT

401	DUMMY RECORD. VARIABLE LENGTH TO GET TO END OF BLOCK
	NO DATA.  1 .LE. RECORDLENGTH .LE. 177


**********************************************************
RECORD LENGTHS:	(OCTAL)

TYPE 0-6 10 WORDS	GET,RUN,START,EXIT,...


                                       257
Text: STREAM; Stream Accounting System Record Formats                     page 3


TYPE 7	11 WORDS	PROJ CODE

TYPE 10	36 WORDS	XCHARG

TYPE 11 2 WORD		SYS INIT'ZN

TYPE 12 6 WORD		DATE/TIME CHANGE

TYPE 13 10 WORDS	LOCAL STREAM ACCTG

TYPE 14 10 WORDS	SETLIC 

TYPE 15 10 WORDS	SETE UUO

TYPE 16 03 WORDS	RUN LICENSE

TYPE 17 36 WORDS	TRANSACTION (LENGTH SUBJECT TO CHANGE)

TYPE 40	7 WORDS		LOGINN

TYPE 41	41 WORDS	CHKPNT

TYPE 42 41 WORDS	LOGOUT

TYPE 43	3 WORDS		UPTIME


********GET,RUN,EXIT,START,&ETC. RECORDS*********************


TYPES 0-6, FORMAT OF WORDS 5,6,7

WORD 5:	NAME OF PROGRAM IN SIXBIT

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	CURRENT CONTENTS OF JBTSOK, PREMIUM CHARGE CELL

***********PROJECT CODE RECORD************************

TYPE 7, WORDS 5,6,7,10

WORD 5:	NEW PROJECT-CODE CHARS 1-5, 

WORD 6:	CHARS 6-10

WORD 7:	BITS 0-13	CHARS 11 & 12
	BITS 14-34	0
	BIT  35		PROJECT CODE VERIFY BIT

WORD 10: SECONDS OF CONNECT TIME, EXCLUDING DETACH TIME.

*******************XCHARG RECORD**********************



                                       258
Text: STREAM; Stream Accounting System Record Formats                     page 4

TYPE 10, WORDS 5 THRU END (OCTAL)

THE VALUES IN WORDS 10-END (OCTAL) ARE THE DIFFERENCE BETWEEN
THE VALUE THAT WAS CURRENT AT THE MOMENT XCHARG WAS EXECUTING,
AND A VALUE SUPPLIED BY THE USER OR PREVIOUSLY SAVED.  SEE
XCHARG DOCUMENTATION (MONDOC)P029.INF AND (MONDOC)P031.INF.
IN EFFECT, AMOUNTS IN THESE POSITIONS WERE "GIVEN AWAY".

WORD 5:	PROGRAM NAME IN SIXBIT   JBTNAM

WORD 6: 	SOURCE UFD OF RUNNING PROGRAM (JBTFPN)

WORD 7: PREMIUM CELL JBTSOK AFTER ANY INCREMENT BY XCHARG

WORD 10: 	HI-ORDER PART OF MICROCYCLES*SIZE
WORD 11:	LOW-ORDER MICROCY*SIZE

WORD 12: HI ORDER MICRO CYCLES JBTCP2
WORD 13: LOW ORDER MICRO CYCLES JBTCMP

WORD 14: JBTELP ELAPSED TIME*SIZE

WORD 15: JBTBCS BREAK CHARS*SIZE

WORD 16: JBTCIN CHARS IN

WORD 17: JBTCOT CHARS OUT

WORD 20: JBTBET BLOCK I/O ELAPSED SECONDS

WORD 21: BLOCK IO CHARS IN/OUT

WORD 22: JBTSER ENTERS & RENAMES*SIZE

WORD 23: JBTSLK LOOKUPS*SIZE

WORD 24: JBTSIN DISK BLOCKS READ*SIZE

WORD 25: JBTSOT BLOCKS WRITTEN*SIZE

WORD 26: JBTERN ENTERS & RENAMES

WORD 27: JBTDLK LOOKUPS

WORD 30: JBTRCT DISK BLOCKS READ

WORD 31: JBTWCT DISK BLOBKS WRITTEN

WORD 32: JBTMPC MAPPED PAGES COUNT (INCLUDES PAGES CREATED)

WORD 33: JBTPWS PAGES PUT INTO USER WORKING-SET

WORD 34: HI ORDER JBTPWS*SIZE
WORD 35: LO ORDER JBTPWS*SIZE



                                       259
Text: STREAM; Stream Accounting System Record Formats                     page 5

*********************TRANSACTION CHARGE ***********************

TYPE 17, WORDS 0 THRU END (OCTAL)

WORD 0		HEADER: TYPE = 17, LENGTH = 36 OCTAL

WORD 1		DATE,,TIME

WORD 2		AUN

WORD 3		HI ORDER TRU
WORD 4		LOW ORDER TRU

WORD 5		PROGRAM NAME IN SIXBIT

WORD 6		JBTFPN PPN OF PROGRAM'S SOURCE UFD

WORD 7		JBTSOK PREMIUM CHARGE CELL CONTENTS

WORD 10
 THRU
WORD 35		DATA WORDS VARIABLE FORMAT

******************* LOCAL STREAM ACCOUNTING *****************

TYPE 13, WORDS 5,6,7

WORD 5:	IF /IDENTIFIER/ =0 THEN CURRENT JBTNAM
	ELSE SIXBIT /IDENTIFIER/ PASSED BY PROGRAM VIA
	LOCAL-STREAM-ACCTG UUO, CALLI AC,-63

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	CURRENT CONTENTS PREMIUM CHARGE CELL JBTSOK

**************** LOGINN ***********************

TYPE 40, WORDS 3,4,5,6

WORD 3:	PROJECT-CODE GIVEN TO LOGIN, CHARS 1-5, (NOT

WORD 4:	CHARS 6-10 				(NECESSAIRILY

WORD 5:	CHARS 11,12 				(VALID)

WORD 6:	SUPERVISOR INFO 32 BITS

******************* UPTIME REC ***********
TYPE 43, WORDS 0,1,2

WORD 0:	HEADER AS USUAL. JOB=0

WORD 1:	DATE,,TIME AS USUAL

WORD 2:	JIFFIES (CLOCK TICKS) SINCE SYSTEM LOADED


                                       260
Text: STREAM; Stream Accounting System Record Formats                     page 6


********** CHKPNT & LOGOUT **********************************

WORDS 5-END OCTAL OF LOGOUT & CHKPNT RECORDS

WORD 5:	BLOCKS OF STORAGE. -1 IF ANOTHER USER LOGGED
	IN UNDER SAME AUN OR IF THIS IS A CHKPNT RECORD

WORD 6:	HI ORDER KILO-CORE-TICKS
WORD 7: LOW ORDER KILO-CORE-TICKS

WORD 10: LOOKUPS

WORD 11: LOOKUPS*SIZE

WORD 12 ENTERS+RENAMES TIMES SIZE

WORD 13: BLOCKS READ * SIZE

WORD 14: BLOCKS WRITTEN * SIZE

WORD 15: CHARS IN

WORD 16: CHARS OUT

WORD 17: SECONDS ELAPSED*SIZE

WORD 20: SECONDS CONNECT (EXCLUDING DETACH TIME)

WORD 21: BREAK CHARS*SIZE

WORD 22: BLOCKS READ

WORD 23: BLOCKS WRITTEN

WROD 24: SUPERVISOR LOGIN INFO. RIGHT 32 BITS ARE THE 4
	8-BIT CHARS SENT BY THE SUPERVISOR. THESE HAVE
	THE INFO ON TERMINAL TYPE,NODE AND PORT OF ORIGIN

WORD 25: ENTERS + RENAMES

WORD 26: SECONDS CONNECT FOR REMOTE PERIPHERALS

WORD 27: CHARS TRANSFERREED TO/FROM REMOTE PERIPHERALS

WORD 30: CONTENTS OF PREMIUM CHARGE CELL

WORD 31: SECONDS ELAPSED IN BLOCK PORT I/O

WORD 32: CHARS TRANSFERRED OVER BLOCK I/O PORT

WORD 33: HI ORDER MICRO CYCLES
WORD 34: LOW ORDER MICROCYCLES

WORD 35: JBTMPC MAPPED PAGE COUNT (INCLUDES VCREATES)


                                       261
Text: STREAM; Stream Accounting System Record Formats                     page 7


WORD 36: JBTPWS PAGES PUT IN WORKING SET

WORD 37: JBTPWH HI ORDER JBTPWS*SIZE
WORD 40: JBTPWL LO ORDER JBTPWS*SIZE

***********RESTART REC******

WORD 0:	HEADER AS USUAL TYPE=400 JOBJ=0 LENG=2

WORD 1:	DATE,,TIME

*****************ERROR RECORD**************
TYPE 402, WORDS 0,1

WORD 0:	HEADER JOB=0 LENG=2 TYPE=402

WORD 1:	DATE,,TIME OF LAST GOOD RECORD

******************SYSTEM INITIALIZATION RECORD TYPE 11********
TYPE 11, JOB=0 , LENGTH = 2 ,WORDS 0,1

WORD 0: HEADER TYPE=11 JOB=0 LENGTH=2

WORD 1: COPY OF HEADER WORD

THIS RECORD APPEARS ONLY WHEN THE SYSTEM HAS BEEN RE-BOOTED

************DATE CHANGE RECORD (IMPLEMENTED AFTER P031/G)***

TYPE 12 LENGTH 6

WORD 0:
 THRU
WORD 4:	USUAL HEADER WITH OLD DATE,,TIME VALUE

WORD 5:	NEW DATE,,TIME IN USUAL FORMAT

THE HEADER CONTAINS IDENTIFICATION OF JOB EXECUTING THE
DATE CHANGE. THE DATE,,TIME IN HEADER IS THAT VALUE
PRESENT WHEN THE UUO (SETUUO SET DATE/TIME FUNCTION) WAS
EXECUTED. THE NEW DATE,,TIME IN WORD 5 IS THAT WHICH
PREVAILS UPON EXIT OF THE UUO.

NOT YET IMPLEMENTED, 20 JAN 77 AAA
*******************

*************************************************
		SETLIC
**************************************************

TYPE 14

WORDS 0-4: USUAL HEADER



                                       262
Text: STREAM; Stream Accounting System Record Formats                     page 8

WORD 5:	NAME OF PROGRAM IN SIXBIT

WORD 6:	PPN (JBTFPN) FROM WHICH PROGRAM CAME

WORD 7: THE LICENSE SET BY SETLIC UUO (JBTLIC)


**************************
	SETE
**************************

TYPE 15

WORDS 0-4: USUAL HEADER

WORD 5:	PROGRAM NAME IN SIXBIT (JBTNAM)

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	LICENSE SET BY THE SETE UUO



*********************************
	RUN LICENSE
********************************

TYPE 16

WORD 0:	USUAL HEADER: RECORDTYPE,JOB NUMBER,LENGTH=3

WORD 1:	DATE,,TIME

WORD 2:	LICENSE SET BY THE LAST RUN/RUNSEG UUO FOR THIS JOB

(NOTE: RUN/RUNSEG UUO'S WHICH DO NOT SET LICENSE DO
NOT GENERATE THIS RECORD. ONLY THOSE SETTING LICENSE DO SO,
AND NO OTHER RECORDS CAN INTERVENE FOR THE JOB BETWEEN
THE RUN RECORD AND RUN LICENSE RECORD EXCEPT FOR
A CHKPNT RECORD FOR THE JOB.)

















                                       263
Text: STREAM; Stream Accounting System Record Formats                     page 9


HERE FOLLOWS (MONDOC)STREAM.10, RELEVANT PRE-P031:

THE FORMAT FOR THE STREAM ACCOUNTING DATA IS AS FOLLOWES:

THE INFORMATION FOR A GIVEN DAY (GMT) IS IN THE FILE
MMDDYY.SAT IN (UN1). RECORDS NEVER CROSS A BLOCK BOUNDARY.
DUMMY RECORDS ARE USED TO FILL TO THE END OF A RECORD.

WORD 0:	BITS 0-8 TYPE CODE
	BITS 9-17 JOB NUMBER
	BITS 18-35 LENGTH OF THIS RECORD (THIS WORD INCLUDED)

WORD 1:	BITS 0-17 DATE IN DAYS SINCE JAN 1,1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

WORD 2:	AUN OF JOB

WORD 3:	TRU'S FOR JOB AT CURRENT TIME

WORD 4:	NAME OF PROGRAM IN SIXBIT

WORD 5:	PPN FROM WHICH PROGRAM CAME

WORD 6:	CURRENT CONTENTS OF SOAKEM (TYMCHG) CELL

THE FOLLOWING CODES ARE USED

0	GET, RUN, R, RUN UUO, RUNSEG UUO

1	EXIT UUO

2	EXIT AC,  UUO

3	SETNAM UUO

4	START COMMAND

5	REENTER COMMAND

6	DDT COMMAND

400	RESTART OF PROGRAM. ONLY WORDS 0 AND 1

402	ERROR. DATA FROM ACT DEV INCONSISTANT. ONLY WORD 2
	PRESENT

401	DUMMY RECORD. VARIABLE LENGTH TO GET TO END OF BLOCK
	NO DATA








                                       264
Text: STREAM; Stream Accounting System Record Formats                    page 10

**********************************************************
HERE FOLLOWS A COPY OF (MONDOC)FACT.10, RELEVANT TO PRE-P031

FACT FILE FORMAT

THE INFORMATION FOR A GIVEN DAY (GMT) CAN ALL BE FOUND IN THE FILE
MMDDYY.DAT IN UN1. IF THIS FILE BECOMES GARBAGED OR IS BUSY
THEN MMDDYY.D01 ... .D77 ARE USED.

EACH ENTRY IN THE FACT FILE HAS THE FOLLOWING FORMAT

WORD 0:	BITS 0-8 CODE IDENTIFYING TYPE OF ENTRY
	BITS 9-17 JOB NUMBER
	BITS 18-29 TERMINAL TYPE 0=DETACHED
		1=A, 2=C, 3=E, 4=G, 5=B, 6=F, 7=J, 10=N
		11=RETURN (2741), 12=D, OTHERS UNDEFINED
	BITS 30-35 LENGTH OF THIS ENTRY (INCLUDING THIS WORD)

    CODES
	100 FOR LOGIN
	140 FOR LOGOUT
	200 FOR CHKPNT
	377 DUMMY, IGNORE, LENGTH USUALLY 1
	777 END OF INFORMATION, LENGTH USUALLY 0

WORD 1:	LEFT HALF, GLOBAL ACCOUNT NUMBER
	RIGHT HALF, UNIVERSAL USER NUMBER

WORD 2:	BITS 0-17 DATE IN DAYS SINCE JAN 1, 1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

	FOR LOGIN ONLY
	WORDS 3-5 CONTAIN 12 ASCII CHARACTER OF PROJECT CODE
	WORD 6 SAME AS NORMAL WORD 24.

WORD 3:	TRU'S AS CALCULATED BY MONITOR (TIMES 10**4)

WORD 4:	LOW ORDER PART OF NUMBER OF MICRO-CYCLES*SIZE

WORD 5:	NUMBER OF BLOCKS OF STORAGE. -1 IF ANOTHER USER LOGGED
	IN UNDER SAME NAME OR FROM CHKPNT

WORD 6:	NUMBER OF LOOKUP'S AND ENTER'S DONE

WORD 7:	NUMBER OF LOOKUP'S AND ENTER'S TIMES SIZE

WORD 10:NUMBER OF USETI'S AND USETO'S TIMES SIZE

WORD 11:NUMBER OF DISK BLOCKS READ TIMES SIZE

WORD 12:NUMBER OF DISK BLOCKS WRITTEN TIMES SIZE

WORD 13:NUMBER OF CHARACTERS INPUT

WORD 14:NUMBER OF CHARACTERS OUTPUT


                                       265
Text: STREAM; Stream Accounting System Record Formats                    page 11


WORD 15:ELAPSED TIME (IN SEC.) TIMES SIZE

WORD 16:CONNECT TIME (IN SEC.) NOT COUNTING DETACHED TIME

WORD 17:NUMBER OF BREAK CHARACTERS TIMES SIZE

WORD 20:HIGH ORDER PART OF  NUMBER OF MICRO-CYCLES*SIZE

WORD 21:NUMBER OF MICRO-CYCLES

WORD 22:NUMBER OF DISK BLOCKS READ

WORD 23:NUMBER OF DISK BLOCKS WRITTEN

WORD 24:LOGIN INFORMATION FROM SUPERVISOR. RIGHT 32 BITS ARE
	THE 4 8-BIT CHARACTERS SENT BY THE SUPERVISOR.
	THESE HAVE INFORMATION ON TERMINAL TYPE, NODE, AND
	PORT OF ORIGIN.

WORD 25: NUMBER OF USETI'S AND USETO'S DONE

WORD 26:NUMBER OF CLOCK TICKS OF CONNECT TIME FOR REMOTE PERIPHERALS

WORD 27:NUMBER OF CHARACTERS TRANSFERED TO AND/OR FROM REMOTE
	PERIPHERALS

WORD 30: NUMBER OF SOAKEM'S (TYMCHG UUO) DONE

WORD 31: ELAPSED TIME (SEC) WITH BLOCK I/O PORT

WORD 32: CHARACTERS TRANSFERED OVER BLOCK I/O PORT

























                                       266
Text: STREAM; Stream Accounting System Record Formats                    page 12

HERE FOLLOWS A COPY OF (MONDOC)STREAM.MEM, WHICH
DESCRIBES THE GENESIS OF STREAM ACCOUNTING AND THE
ALGORITHM BY WHICH THE MONITOR ORIGINALLY DECIDED WHEN
TO WRITE STREAM RECORDS TYPE 0-6:



	The following is a proposal for the new stream
accounting and premium charge systems on the pdp-10.

		PREMIUM CHARGES

	A new cell will be added (1 per job) which will record
the premium charges accumulated by the program. This cell will
be written into the accounting records by LOGOUT and CHKPNT and
into the stream accounting records as outlined below. This
cell will be incremented by a new UUO (SOAKEM) which will specify
the amount to increment. The amount will be restriced to some
small number of bits (say 7). The UUO will require no special
license. The number in this cell will be assigned a multiplier
to convert it to TRU. This cell will be included in the TRU
calculations for the SET LIMIT and TIME commands. It will
not be included in the TRU calculations for the TRU gettab.
LOGOUT will include this number in its TRU calculations when it
prints TRU used at end of session.

		STREAM ACCOUNTING

	The stream accounting data will be passed from the monitor
to a program through a pseudo device (ACT). The program will
INIT this device and do INPUT's from it in a normal manner. At
appropriate times, the monitor will pass buffers of data
to the program. The HANG UUO will cause the last partial buffer
to be dumped when hanging the entire system. The program will
do the apropriate transfer to an accounnting file. If
the program should crash for some reason (swap read error, etc.)
The monitor will start sending messages to the OPR terminal
and start ignoring data which would overflow its buffer space.
The exact amount of buffer space used in the monitor will be
determined after data is gathered on the frequency with which
such records will be written. The following is the proposed format
for the stream accounting records:

word 0:	bits 0-8 code indicating reason for record
	bits 9-17 job number
	bits 18-35 length of record (in case other types eventually
		included)

word 1:	bits 0-17 date in days since Jan 1,1964 GMT
	bits 18-35 time in sec. since midnight GMT

word 2:	AUN of job
word 3:	current TRU's for job
word 4:	name of program in sixbit
word 5:	PPN from which the program came


                                       267
Text: STREAM; Stream Accounting System Record Formats                    page 13

word 6:	current contents of premium charge cell

The following algoritm will be used to determine when to write
records: (the proposed record code is also given).

For each job, a 1 bit data field called recwrt will be used

code 0
	a GET, RUN, R, RUN UUO, RUNSEG UUO
	if JBTFPN (source directory) is not equal to JBTPPN (users
		directory) or recwrt=1 write a record
	if JBTFPN=JBTPPN recwrt_0 else recwrt_1

code 1
	an EXIT UUO
	if recwrt=1 write a record. recwrt_0

code 2
	an EXIT 1, UUO
	if recwrt=1 write a record.

code 3
	SETNAM UUO
	if recwrt=1 write a record. recwrt_0.

code 4
	START command
	if JBTFPN not equal JBTPPN and JBTFPN not 0 and
	recwrt=0 write a record and recwrt_1

code 5
	REENTER command
	same as code 4

code 6
	DDT command
	same as code 4

code 7
	error (such as ill mem ref)
	same as code 1 (this may not be implimented immediately)
















                                       268
Menu: ARCHIV; Old memos                                                   page 1

270    PROJEC          Project code user guide
274    CHANEL          Obsolete >16 channel proposal
275    FILSPC          New RIB format spec
277    FILES           File system structure (incomp)
279    PAGE            Old paging memo
282    USE             USE
292    FILMEM          HOME-BAT blocks (oct 4,75)
294    FILNAM          Experimental monitor names
296    INTR            Pseudo interrupt system
298    UNHAP           Explanation of ALR620 bits
300    INDIR           Spec for indirect files
303    PDLANL          LISP program to guess PDL space
306    ASSLOA          Assembler/Loader wish list
308    SUDS            Spec for wonderful SUDS mode
310    SLEEP           Clock queue efficiency proposal
312    BIO10           Functional spec for block I/O
315    BITS            P033 swapper bit descriptions








































                                       269
Text: PROJEC; Project code user guide                                     page 1

User Guide         Tymcom-X Project Code Facility    December 9, 1976


                            Introduction.

Every user on the Tymcom-X  is assigned by his Account  Supervisor to
one of 3 classes for purposes of Project-Code accounting.  This guide
explains how to use the Project-Code faicilities to change a terminal
session from one Project-Code to another, and how to  change Project-
Codes on files.

All users are Class "0" users until otherwise declared to  the system
by the Account Supervisor, who will notify you in that  event.  Class
"0" users are not required to verify Project-Codes,  and consequently
the facility  will allow  them to set  the Project-Code  however they
wish  as  long  as  the  character-restrictions  described  below are
observed.  For such users, many  of the comments in this  guide about
validity-checking will not  apply.  Otherwise, the facility  works as
described.

A Class  "1" user is  subject to verification  of Project-Codes  by a
program written  by his Account  Supervisor.  Please consult  him for
details of the operation of his program.

Class "2"  users are  subject to  verification by  a Tymshare-written
program whose use will be explained in this Guide.

You do not need to know which  class (1 or 2) you are in;  the system
has  this recorded  and will  run the  appropriate programs  for you.
Simply give  Project-Codes that are  valid according to  the criteria
given you by your Account Supervisor.

A Project-Code  (PJC) is  a 12-character  string of  letters, digits,
spaces, &etc.   It may not  begin with an  asterisk "*" or  contain a
Tab, Semicolon, Carriage Return, or Linefeed character.   Although 12
characters is its maximum length, you need not enter trailing blanks.
The  system  will always  pad  a PJC  with  blanks to  produce  a 12-
character string.

The Tymcom-X Project-Code Facility allows you to associate  any legal
PJC  with a  terminal  session.  During  the session,  any  files you
create  will  also  have  this  PJC  recorded  on  them.   Under some
circumstances you may wish  to have Tymshare break down  your storage
bill according  to PJC's.  Your  Account Supervisor  has instructions
for indicating this option to the system.












                                       270
Text: PROJEC; Project code user guide                                     page 2

User Guide         Tymcom-X Project Code Facility    December 9, 1976


               Setting the Initial PJC for the Session

When you  have received the  "Please Log In:"  message, you  may type
your username, password, and PJC all on one line, separating  them by
semicolons, as in the following example, where user MOORE  enters his
name, a non-printing password, then his Project-Code, K-333:
                PLEASE LOG IN:  MOORE;;K-333

An alternate method of logging in is to type a Carriage  Return after
each entry and let the system request the next entry.  For example,
PLEASE LOG IN:  ANDREWS
PASSWORD:                       (The password does not print)
PROJ CODE: ALPHA-BETA

If the PJC you have given is not correct, you will get this message:
INVALID PROJECT CODE FOR YOU
TYPE "HELP" IF YOU NEED HELP
*

At  this point  you may  type CODES  or LIST,  to find  out  what the
legitimate PJC's are. You may also type HELP.  If you wish to get off
the system, you may QUIT, EXIT, or LOGOUT.

To enter a valid PJC and get on to doing useful work, use the SESSION
command.   Suppose user  MOORE should  have typed  K-330 when  he was
logging in;  his dialog with the system would look like this  once he
corrected his error:
PLEASE LOG IN:  MOORE;;K-333
TYMSHARE 1234 15 OCT 76
INVALID PROJECT CODE FOR YOU
TYPE "HELP" IF YOU NEED HELP
*SESSION K-330
PROJECT CODE: K-330
-                       (useful work can begin here)





                       Login After Disconnect

If you  re-login after  a disconnect,  the PJC  in effect  before the
disconnect will remain in effect.  Any PJC you give when attaching to
a disconnected job will  be ignored.  This holds true  when attaching
to a job for any reason.









                                       271
Text: PROJEC; Project code user guide                                     page 3

User Guide         Tymcom-X Project Code Facility    December 9, 1976







                      What is the Current PJC?

To print the PJC which  is currently in force, use the  XEXEC command
"PROJECT=".





                 Changing PJC for a terminal session

The system will allow you to change the PJC to another legal code via
the command
-PROJECT SESSION XXXX
where XXXX is your new legal PJC.  You will receive the response
CHANGE SESSION PROJECT CODE TO XXXX
FROM: YYYYY    (OLD CODE)
-

There are a variety of  flavors of this command.  If you  simply type
PROJECT to the system, you will enter into a dialog with the system's
PROJECT program, which has the following facilities:
CURRENT         command, to display the current PJC
SESSION         command, to set the terminal session
FILE            command, to change PJC on a file
LIST
CODES           commands, to enumerate your legal PJC's
HELP            command, to get a short summary of commands
QUIT            command, to get out of the program.

The program will tell  you what the current  PJC is as you  enter the
program and after unrecognized commands.





                       Project-Codes on Files

When you create a file, the current PJC will be recorded on the file.
If you  want to see  what PJC's are  on your files,  you may  use the
switch "/PROJ" with FILES or DIRECTORY commands given to  the system.







                                       272
Text: PROJEC; Project code user guide                                     page 4

User Guide         Tymcom-X Project Code Facility    December 9, 1976


For example, if you gave the system command "FILES/PROJ", your output
might look like:

SUM MAC         "K-330" (PJC)
BLOB F4         "K-333" (PJC)
VAR BAS                         (none on this file)

Note that if you put the  blank PJC on VAR.BAS, (12 blanks)  you will
see "             " (PJC).  Blank PJC is not the same as null PJC.

Suppose you are  currently under PJC "ALPHA"  and you want  to change
the PJC  on VAR.BAS to  ALPHA from its  present null value.   You may
enter the following command:
-PROJECT
*FILE VAR.BAS
CHANGE PROJECT CODE ON VAR.BAS TO ALPHA      FROM: [NULL]
*QUIT
-               (here you could continue)
A shorter method is available, and has identical results:
-PROJECT FILE VAR.BAS
CHANGE PROJECT CODE ON VAR.BAS TO ALPHA      FROM: [NULL]
-     (next system command)

Note  in  these examples  that  the system  has  applied  the CURRENT
project-code to the file.  It is also possible for you to put  a non-
current PJC onto a file.  Suppose you are under ALPHA and you want to
put K-375 on file BLOB.F4, because for some reason its  current code,
K-333,  is  wrong. You  may  issue the  "PROJECT  FILE  FILENAME PJC"
command, explicitly naming a PJC to apply to the file.  For example:
-PROJECT FILE BLOB.F4 K-375
CHANGE PROJECT CODE ON BLOB.F4 TO K-375     FROM: K-333
-   (next command)
or, its longer equivalent:
-PROJECT
CURRENT: ALPHA
*FILE BLOB.F4 K-375
CHANGE PROJECT CODE ON BLOB.F4 TO K-375     FROM: K-333
*QUIT
-    (next command)

Note that such a command does not change the current session PJC.

The system will allow you to change the PJC on any files to which you
have write access.  If you try  to change PJC on a file to  which you
do not have  write access, you will  get the message  "CHANGE PROJECT
RENAME FAILED, NO ACTION TAKEN".








                                       273
Text: CHANEL; Obsolete >16 channel proposal                               page 1

THIS IS PRELIMINARY PROPOSAL TO ALLOW THE NUMBER OF CHANNELS
WHICH A PROGRAM MAY HAVE OPEN TO BE INCREASED. THE MOST PROBABLE
INCREASE WILL BE TO 128 CHANNELS OPEN SIMULTANEOUSLY.

THE INCREASE IN NUMBER OF CHANNELS MEANS THAT NEW UUOS MUST BE
SPECIFIED TO ALLOW THESE CHANNELS TO BE ACCESSED. THERE ARE
THREE WAYS IN WHICH THIS MIGHT BE DONE CONVENIENTLY. IT IS
PROBABLE THAT MORE THAN ONE OF THESE WAYS WILL BE PROVIDED.

METHOD 1
	UUO'S WOULD STILL SPECIFY CHANNELS IN THE OLD MANNER. IN
ADDITION, THERE WOULD BE AN INTERCHANGE CHANNEL UUO. THIS
UUO WOULD BE A CALLI OF THE FOLLOWING FORMAT:

	MOVE AC,[CHANNEL NUMBER 1,,CHANNEL NUMBER 2]
	CHNCHG AC,

THE TWO CHANNELS SPECIFED WOULD BE "INTERCHANGED". THUS THE USER
PORGRAM COULD EFFECTIVELY "MAP" THE CHANNEL ON WHICH IT WANTED
TO OPERATE INTO ONE OF THE FIRST 20 (OCTAL) CHANNELS.

METHOD 2
	A NEW UUO WOULD BE PROVIDED WHICH WOULD USE THE AC FIELD
TO SPECIFY AN ACCUMULATOR WHICH WOULD CONTAIN THE CHANNEL NUMBER
AND THE FUNCTION NUMBER. (LIKE AUXCAL) THIS WOULD ALLOW INDEXING
AND INDIRECT ADDRESSING FOR THE DATA ADDRESS BUT WOULD REQUIRE
A CHANGE IN THE AC TO ACCESS A DIFFERENT CHANNEL.

METHOD 3
	A NEW UUO WOULD BE PROVIDED WHICH WOULD USE THE AC FILED
TO SPECIFY AN ACCUMULATOR WHICH WOULD CONTAIN THE FUCNTION
NUMBER AND THE ADA ADDRESS. THE ADDRESS
FILED WOULD SPECIFY THE CHANNEL NUMBER. THIS WOULD ALLOW INDEXING
WHEN PERFORMING SIMILAR FUNCTIONS ON A NUMBER OF CHANNELS. THIS
WOULD BE ESPECIALLY TRUE OF FUCNTIONS WHICH REQUIRED CONSTATNT
DATA ADDRESSES SUCH AS BUFFERED INPUT AND OUTPUT AND STATUS
CHECKING.

EITHER OF METHODS 2 OR 3 ALSO PROVIDE A LARGE FIELD FOR THE FUNCTION
NUMBER THUS ALLOWING NEW I/O FUNCTIONS TO BE EASILY ADDED.

















                                       274
Text: FILSPC; New RIB format spec                                         page 1

	NEW FILE SPECIFICATIONS

	The basic unit of the file structure will be considered to be
a page. In the first implementation, the ability to access
a single block will be retained (3330's formatted for 128 word
records).


	RIB'S

	The size of the RIB will be extended to 1 page and will
be page 0 of the file. The file will be organized as a two level
tree structure with a single RIB on the top level. This RIB
will be pointed to by the UFD entry and will be called the
'prime' RIB. For compatability with previous file systems
the following characteristics will be given to a read after a
USETI to block 0: If a read of 1 page or less is
done, all information will come from the prime RIB. The
USETI pointer will then be set to BLOCK 1 which is the first data
block of the file. If the read is of more than 1 page, the
first page of data will be the prime RIB and the remaining
data will be taken starting at BLOCK 1 (PAGE 1) of the file.
The USETI pointer will be set to the block number of the first
block from which no data has been read.
	The format of the prime RIB is as follows:

The first N words will contain redundant header information as
is the case with the current RIB. The last two words will be
the block number of the RIB and the RIB code word as in the
current RIB. The remaining words will be pointers. The format
of a pointer is:

BIT 0	If this bit is 1, this pointer points to a RIB in the
	second level of the tree structure. This will be called
	a 'spare' RIB.
BIT 1	If this bit is 1, it will indicate that the data page
	refered to has been changed. This is to provide aid
	in dumping partial files. The change bit will not
	be kept for pointers to spare RIB's.
BIT 2	This bit will be a 1 to indicate the address portion of
	the pointer is for an existing page. If this bit is 0,
	the page does not really exist and will be read as
	all 0. If a block in the page is written, the remainder of
	the page will be zeroed. The zeroing of such partial
	pages will be charged at the normal page write rates.
	This bit is designed to make 'sparse' files possible.

The remainder of the pointer word will have a field for the unit
number within the structure and a field for the address
within the unit. As is currently the case, the definition
of these fields will be found in the HOME blocks and kept in
the STR data block. There is sufficient room for indicating
1024 units each more than 10 times the size of a 3330 and still
leaving 6 spare bits for future use.



                                       275
Text: FILSPC; New RIB format spec                                         page 2

In the prime RIB, all pointers to spare RIB's will be at the
start of the pointer list. The exception is that the first pointer
will always be the pointer to the prime RIB and will
never be extended. A word will be added to the header information
indicating the number of spare RIB's to facilitate random access.

The format of the spare RIB will have M words of redundant data
at the end of the RIB. The last two words will be the RIB code
word and the RIB address (for the spare RIB) as in the prime RIB.
The M words will also include the address of the prime RIB. The
first word will be a pointer to the pointer list as in the
prime RIB and the current RIB. The pointers will have the
same format as for the prime RIB but will never point to further
spare RIBS.

	Each spare RIB will either be full of pointers
or will contain the pointer to the last page of the file followed
by a 0 word to indicate end of file. If the later, the pointer
the this spare RIB in the prime RIB will be the last pointer in
the prime RIB.

	UFD'S

	Only two changes will be made to UFD's. The blocking factor
of UFD's will be 1 page instead of 1 block. (i.e. entry compression
within a page, etc.) The CFP (pointer to the rib) will have the
same format as a RIB pointer (but the status bits will always be
0).

	UUO CHANGES

	An argument to extended lookup will be added which
will return the number of spare RIB's. This will be for information
purposes only. All pre-alocation will go away. The UUO's
will be modified so that the use of extended size or allocation
parameters will always indicate success (this will mean simply
returning the argument on an extended enter specifying these
paramters.) The actual allocation will not be done. No attempt
will be made to have files point to contiguous pages.
The monitor will try to keep a single file on the same unit to
minimize drive crash damage.
















                                       276
Text: FILES; File system structure (incomp)                               page 1

The file system consists of a number of elements called structures.
A structure is the smallest self-contained element of the
file system. That is, all pointers contained in a structure
point to places in that structure. Each structure has a name
by which it is known. In general, there is only one structure in
the file system hich is named DSKB. A structure is
composed of one or more physical units such as DPA0, DPB4.
The smallest directly addressable element of a single unit is
the block which contains 200(8) words. Each unit has a set of
HOME blocks and a set of BAT blocks. There are two copies of each
HOME or BAT block. The HOME blocks are located on blocks
1(8) and 12(8). The HOME blocks give information about
the unit number of this unit in the structure, swapping space, etc.
The BAT blocks are located on blocks 2(8) and 13(8). The BAT
blocks contain a list of all blocks on the unit which are known
as bad.

	The basic element in a structure is the file.
A file consists of a RIB (Retrieval Information Block) and some
number of data blocks. The data blocks of a file contain only
data. The RIB block of a file contains various pieces of
information about the file (such as name, size, date created, etc.)
and pointers to all blocks of the file (including the RIB itself).
The system distinguishes between two kinds of files, ordinary
files and directories. Directories are modified only by the
monitor and contain the information necessary to associate
a file name with a pointer to its RIB. The is one directory for
each Project-Programmer number (PPN). There is a 1-1
correspondence between PPN's and user names.

	Each structure contains a Master File DIrectory (MFD).
The HOME blocks on each unit in the structure contain information
on the location of the RIB for the MFD. The MFD has in it
the names of all the directories in the structure (including
itself) and pointers to their RIB's. The name of the MFD is
1,1.UFD[1,1] (the name in octal is actually 000001000001).
The directories pointed to by the MFD are called User File
Directories (UFD's). A UFD always has the extension UFD and
a name which is the PPN. Note that the MFD may also be considered
the UFD for 1,1 since it points to itself.

	Allocation of the blocks on the structure is
recorded in the Storage Allocation Tables (SAT's). The
smallest element of stroage which may be allocated is
the cluster. A cluster consists of a fixed number of blocks.
The number of blocks in a cluster is recorded in the HOME blocks.
The SAT blocks are all contained in the file SAT.SYS[1,4]. In
addition, the HOME blocks contain a pointer to the
RIB for this file.

	The following are more detailed explanations of the
formats of various pieces of a file structure:
(names contained in () are the names used by the monitor to
symbolically reference these locations in the blocks)



                                       277
Text: FILES; File system structure (incomp)                               page 2

	BAT BLOCKS
























































                                       278
Text: PAGE; Old paging memo                                               page 1

THIS A DISCUSSION OF THE CURRENT THINKING AS TO WHAT FUCNTIONS
FOR MANIPULATION OF PAGES WILL BE ALLOWED TO THE USER.

EACH PAGE IN THE USERS MEMORY WILL HAVE TWO ATTRIBUTES.
THE FIRST IS ITS PROTECTION. THERE ARE THREE POSSIBLE PROTECTIONS
FOR A PAGE:
	1. READ (THE PAGE MAY ONLY BE READ, NOT WRITTEN)
	2. WRITE (THE PAGE MAY BE READ OR WRITTEN)
	3. COPY ON WRITE. (THE PAGE MAY BE READ OR WRITTEN. THE
		FIRST ATTEMPT TO WRITE THE PAGE WILL AUTOMATICALLY
		MAKE A COPY OF THAT PAGE, REPLACE THE PAGE WITH
		THE COPY, SET THE PROTECTION TO WRITE, AND FINISH
		THE WRITE OPERATION.)

THE SECOND ATTRIBUTE IS SHARABILITY. A PAGE IS EITHER PRIVATE OR
SHARABLE. A PAGE IS SHARABLE IF AND ONLY IF IT IS ALSO
PART OF SOME FILE.

THE OPERATIONS FOR PAGES FALL INTO THREE CATAGORIES:

1. REQUEST FOR INFORMATION
	THE INFORMATION AVAILABLE ABOUT A PAGE WILL BE THE
PROTECTION (2 BITS) AND THE SHARABLITY (1 BIT). A NUMBER MAY
ALSO BE SUPPLIED WHICH WILL BE UNIQUE FOR EACH PAGE KNOWN TO
THE SYSTEM. THIS COULD BE USED TO DETERMINE IF TWO PAGES
WERE THE SAME. (A PAGE COULD BE MAPPED INTO TWO DIFFERENT SPOTS
IN THE SAME ADDRESS SPACE).

2. CREATION, DELETION AND MOVEMENT OF PAGES IN CORE.
	THE FOLLOWING OPERATIONS WOULD BE ALLOWED:

CREATE PAGE N. A NEW PAGE WOULD BE CREATED. IT WOULD BE NON-SHARABLE
	AND WRITABLE AND WOULD APPEAR IN PAGE N OF THE VIRTUAL
	ADDRESS SPACE.

DELETE PAGE N. PAGE N WOULD BE REMOVED FROM THE USERS ADDRESS SPACE.
	IT WILL NOT BE POSSIBLE TO DELETE PAGE 0.

CHANGE PROTECTION ON PAGE N. WRITE MAY ALWAYS BE CHANGED TO COPY
	ON WRITE OR READ. COPY ON WRITE MAY BE CHANGED TO READ.
	GREATER ACCESS TO A PAGE CAN ONLY BE SET IF THE PAGE IS NOT
	SHARABLE. (THIS MAY BE MODIFIED SLIGHTLY WHEN FORK STRUCTURE
	IS ADDED TO ALLOW ONE FORK TO GIVE ANOTHER A PAGE WHICH
	WOULD NOT BE "SHARABLE" BUT WHICH THE SECOND FORK COULD
	NOT SET TO WRITABLE.)

MAP PAGE M TO PAGE N. PAGE N WOULD NOW BE THE SAME PAGE AS PAGE M.

MOVE PAGE M TO PAGE N. THIS IS THE SAME AS ABOVE EXCEPT THAT
	PAGE M WOULD BE DELETED

INTERCHANGE PAGES M AND N. THIS WOULD BE THE OBVIOUS FUNCTION.

3. MAPPING OF FILE PAGES INTO VIRTUAL SPACE



                                       279
Text: PAGE; Old paging memo                                               page 2

THIS FUNCTION WOULD PROBABLY USE ONE OF THE
NEW FUNCTIONS IN THE EXTENDED CHANNEL UUO'S (SEE CHANNEL MEMO).
THE FOLLOWING FUNCTIONS WOULD BE PROVIDED:

MAP PAGE M OF FILE ON CHANNEL N TO PAGE P
	THE PROTECTION WHICH COULD BE SPECIFIED WOULD DEPEND ON
	THE USERS ACCESS PRIVILEDGES TO THE FILE. COPY ON WRITE
	COULD BE SPECIFIED IF READ COULD. IF READ ACCESS DID NOT
	EXIST, THE MAPPING FUNCTION COULD NOT BE DONE. IF WRITE
	PROTECTION (PAGE COULD BE WRITTEN) WERE SPECIFIED, THAT
	PAGE OF THE FILE WOULD BE MARKED CHANGED AT THAT TIME
	(SEE MEMO ON NEW FILE STRUCTURE) NOT AT THE TIME OF THE
	FIRST WRITE. THE CHANNEL COULD BE CLOSED AFTER THE PAGE
	WAS MAPPED WITHOUT HARM.

MAP PAGE P TO PAGE M OF FILE ON CHANNEL N
	THE USER WOULD NEED WRITE (OR UPDATE, ETC.) ACCESS TO THE
	FILE. PAGE P COULD NOT BE A SHARABLE PAGE.

TRANSFER PAGE M OF FILE ON CHANNEL N TO PAGE P
	THIS OPERATION WOULD BE LIKE THE MAP OPERATION WITH
	THE FOLLOWING EXCEPTIONS:
	1. THERE COULD NOT BE ANY OTHER USERS OF THAT PAGE
	 (OTHER PROGRAMS WITH THAT PAGE MAPPED INTO THEIR ADDRESS
	  SPACE)
	2. THE FILE PAGE WOULD BE REPLACED WITH A "NULL" ENTRY
	 SUCH AS THOSE USED FOR "SPARSE" FILES.
	3. THE PAGE MAPPED INTO THE USERS SPACE WOULD BE NON-SHARABLE.
	4. THE USER WOULD REQUIRE WRITE ACCESS TO THE PAGE.

THE FOLLOWING FUNCTION IS SIMILAR TO ONE NEEDED BY THE MONITOR AND
MIGHT BE PROVIDED TO THE USER IF IT WOULD BE USEFUL.

LOCK PAGE M OF FILE ON CHANNEL N TO PAGE P
	WRITE ACCESS WOULD BE REQUIRED. IF THERE WERE ANY OTHER
	WRITERS OF THE PAGE (OR SOME OTHER USER WITH
	THE PAGE LOCKED EVEN IF HE WERE NOT SET WRITABLE)
	THE JOB WOULD BE PLACED ON A QUE AND WOULD NOT BE RUN
	UNTIL THE PAGE WAS RELEASED. THE QUEING WOULD
	BE ON A FIRST IN-FIRST OUT BASIS. AN ATTEMPT BY ANOTHER
	USER TO MAP THE PAGE WITH WRITE ACCESS WOULD CAUSE HIM TO
	BE QUEUED. THE PAGE WOULD BE RELEASED BY A DELETE PAGE P
	OPERATION

OTHER NOTES ABOUT PAGE OPERATIONS

WHEN A PAGE IS MAPPED INTO CORE OR INTO A FILE, A PAGE WHICH ALREADY
EXISTS IN THAT SPOT WILL BE DELETED.

IT WILL BE POSSIBLE TO DELETE AND INSERT PAGES INTO A FILE.

IT WILL BE POSSIBLE TO "PRE-REFERENCE" A PAGE IN THE USERS
MAP. THIS WILL CAUSE A PAGE FAULT WITHOUT CAUSING THE USER TO BE
BLOCKED UNTIL THE PAGE IS IN CORE.



                                       280
Text: PAGE; Old paging memo                                               page 3

REFERENCES TO NON-EXISTENT PAGES

THERE WILL PROBABLY BE THREE MODES AVAILABLE TO THE USER
TO DETERMINE WHAT HAPPENS WHEN A NON-EXISTANT PAGE IS REFERENCED:
1. THE REFERENCE WILL BE CONSIDERED AN ERROR AND CAUSE A SOFTWARE
	INTERUPT.
2. THE REFERENCE WILL CAUSE A CREATE PAGE IF IT IS A WRITE AND
	OTHERWISE BE CONSIDERED AN ERROR.
3. THE REFERENCE WILL CAUSE A CREATE PAGE.
















































                                       281
Text: USE; USE                                                            page 1

FORMAT OF USE.DAT FILE

THE FILE NAME FOR A GIVEN DAYS DATA IS MMDDYY.DAT AND
IS FOUND IN SYS

THERE ARE 10 OCTAL RECORDS TO A BLOCK

WORD 0:LEFT HALF, DATE, RH SECONDS SINCE MIDNIGHT

WORD 1:IF THIS WORD IS NEGATIVE, THIS IS AN "ERROR" TYPE
	BLOCK (SEE BELOW). OTHERWISE IT IS A STATISTICS BLOCK
	AS FOLLOWES:

WORD 1:NUMBER OF TICKS OF UPTIME SINCE LAST RECORD

WORD 2:NUMBER OF TICKS OF NULTIME SINCE LAST RECORD

WORD 3:NUMBER OF TICS OF LOST TIME SINCE LAST RECORD

WORD 4:NUMBER OF JOBS LOGGED IN AT TIME PROGRAM WAS RUN

WORD 5:TOTAL NUMBER OF K USED (TOTAL OF JOB SIZES)

WORD 6:AVERAGE JOB SIZE AT TIME RECORD WRITTEN

WORD 7:MEDIAN JOB SIZE AT TIME RECORD WRITTEN

WORD 10:NUMBER OF JOBS IN RANGE 0-7K

WORD 11:NUMBER OF JOBS IN RANGE 8-15K

WORD 12:NUMBER OF JOBS IN RANGE 16-23K

WORD 13:NUMBER OF JOBS IN RANGE 24-31K

WORD 14:NUMBER OF JOBS IN RANGE 32-39K

WORD 15:NUMBER OF JOBS IN RANGE 40-47K

WORD 16:NUMBER OF JOBS IN RANGE 48-55K

WORD 17:NUMBER OF JOBS LARGER THAN 55K















                                       282
Text: USE; USE                                                            page 2

ERROR TYPE RECORD

WORD 1:LH -1, RH ERROR TYPE

ERROR TYPE 0 (DISK)

WORD 2:NUMBER OF TRUS FOR JOB SO FAR

WORD 3:UNIT NAME

WORD 4:LOGICAL UNIT ID

WORD 5: UNIHCT (LH HDEV RH HDAT)

WORD 6: UNISCT (LH SDEV RH SDAT)

WORD 7: UNIERR HARD DATA CONI

WORD 10: UNISOF SOFT DATA CONI

WORD 11: UNIHBN BLOCK NUMBER ON UNIT

WORD 12: UNISDI SOFT DATAI

WORD 13: UNIHDI HARD DATAI

WORD 14: UNIECT RH NUMBER OF RETRYS

WORD 15: UNISBN BLOCK NUMBER OF SOFT ERROR

WORD 16-WORD 17 UNUSED


























                                       283
Text: USE; USE                                                            page 3

ERROR TYPE 1 (MTA)

WORD 2: NUMBER OF TRUS FOR JOB SO FAR

WORD 3: UNIT NAME (MTA#)

WORD 4: NUMBER OF ERRORS SINCE STARTUP

WORD 5: LAST ERROR CONI

WORD 6: NUMBER OF WRITE RETRYS (MAY BE MORE THAN 1 FOR A GIVEN
		WRITE RECOVERY PROCEDURE)

WORD 7: NUMBER OF REWRITE FAILURES

WORD 10: NUMBER OF REWRITE SUCCESSES

WORD 11: NUMBER OF READ RETRYS

WORD 12: NUMBER OF READ RETRY FAILURES (ALL RETRYS EXAUSTED)





































                                       284
Text: USE; USE                                                            page 4

ERROR TYPE 2 (RESTART)

WORD 2: NUMBER OF JIFFYS/SECOND (FOR STATISTICS)






















































                                       285
Text: USE; USE                                                            page 5

ERROR TYPE 3 (FTA)

WORD 2: NUMBER OF TRUS FOR JOB SO FAR

WORD 3: UNIT NAME (FTA#)

WORD 4: NUMBER OF READ RETRYS (SOFT+HARD READ ERRORS)

WORD 5: NUMBER OF READ RETRY FAILURES (HARD READ ERRORS)

WORD 6: NUMBER OF WRITE RETRYS (SOFT+HARD WRITE ERRORS)

WORD 7: NUMBER OF WRITE RETRY FAILURS (HARD WRITE ERRORS)

WORD 10: LAST SOFT ERROR CONI

WORD 11: LAST HARD ERROR CONI

WORD 12: HUNG COUNT

WORD 13: FUNCTION IN PROGRESS ON LAST HUNG

WORD 14: CONI ON LAST HUNG


































                                       286
Text: USE; USE                                                            page 6

ERROR TYPE 4 (STATUS BP)

WORD 2: NUMBER OF TRUS FOR JOB SO FAR

WORD 3: UNIT NAME

WORD 4-WORD 11 SENSE BYTE (24 8 BIT BYTES, LEFT ADJUSTED)


















































                                       287
Text: USE; USE                                                            page 7

ERROR TYPE 5 (STATUS FT)

WORD 2: NUMBER OF TRUS FOR JOB SO FAR

WORD 3: UNIT NAME

WORD 4-WORD 11 SENSE BYTE (24 8 BIT BYTES, LEFT ADJUSTED)


















































                                       288
Text: USE; USE                                                            page 8

ERROR TYPE 6 (PARITY ERROR)

WORD 2: TOTAL NUMBER OF PARITY INTERUPTS SO FAR

WORD 3: TOTAL NUMBER OF CORE PARITY ERRORS FOUND ON SCAN

WORD 4: ADDRESS OF LAST PARITY ERROR FOUND

WORD 5: CONTENTS OF LAST WORD FOUND WITH BAD PARITY

WORD 6: PC WHEN LAST PARITY ERROR INTERUPT HAPPENED














































                                       289
Text: USE; USE                                                            page 9

ERROR TYPE 7 (ADITIONAL STATISTICS)

WORD 2: INCREMENTAL UPTIME (TICKS)

WORD 3: INCREMENTAL DISK USAGE (BLOCKS)

WORD 4: INCREMENTAL SWAP USAGE (PAGES)

WORD 5: INCREMENTAL TRU'S FOR WHOLE SYSTEM
















































                                       290
Text: USE; USE                                                           page 10

ERROR TYPE 10 (NEW FILE)

WORD 2: JIFFYS/SECOND

IF FILE BROKEN THIS WILL BE FIRST RECORD IN FILE, ELSE A
RESTART RECORD WILL APPEAR BEFORE DATA



















































                                       291
Text: FILMEM; HOME-BAT blocks (oct 4,75)                                  page 1

OCT 14 1975
HOME-BAT BLOCKS

THESE COULD BE ONE PAGE (AND ONE PAGE FOR REDUNDANT COPY)
KEPT ON PAGES 1 AND 12 FOR EXAMPLE. THE FIRST 200 WORDS OF
THE PAGE WOULD BE THE OLD HOME INFORMATION AND THE SECOND 200
THE BAT INFORMATION. THE BAT INFORMATION MIGHT BE EXTENDED
TO 400 OR 600 WORDS TO ALLOW MORE ENTRIES. 400 WOULD LEAVE ROOM
IF WE WANT TO PUT SOMETHING ELSE THERE LATER.

BLOCKS 2-11 COULD BE FOR BOOTS AND ANY FRIENDS NEEDED LATER.

USETI-USETO

SINCE THE SEQUENCE
USET CHL,N
INPUT CHL,
...
USETO CHL,N
OUTPUT CHL,

IS VERY COMMON, USETI AND USETO SOULD CHECK THAT THE BLOCK
REQUESTED MIGHT BE IN THE CURRENT DDB POINTERS. THIS CAN
BE DETERMINED FROM DEVRBN, DEVRB1, DEVRET, DEVLFT, AND DEVREL
(THE BLOCKS IN THE DDB ARE
	DEVREL+DEVLFT-4-(DEVRET-DEVRB1)*4
TO	DEVREL+DEVLFT-1+(DEVRBN-DEVRET)*4

IF THE FIRST OF THESE IS NEGATIVE OR 0, THERE IS NOTHING IN THE
RIB. WATCH FOR THE CASE OF POINTING TO BLOCK 0

IN ADDITION, IF THE DDB CONTAINS A SET OF POINTERS FROM A SPARE RIB
THE DDB CONTAINS A POINTER TO THE SPARE RIB. A GUESS
CAN BE MADE AS TO THE FIRST POINTER IN THE SPARE RIB
FROM DEVRET, DEVRBN, DEVRB1, DEVREL, DEVLFT, AND DEYRPS (BYTE POINTER)
IF THE DESIRED POINTER IS IN THE SPARE RIB, AT LEAST ONE READ
CAN BE SAVED BY READING THE SPARE RIB INSTEAD OF GOING
BACK TO THE PRIME RIB. IT MIGHT EVEN BE WORTH IT TO CONSIDER 
SAVING DEVREL FOR THE FIRST POINTER IN THE RIB IN THE DDB.


RENAME AND FNBDDB. SO THAT DEVNAM, DEVEXT, AND DEVPPN
CAN BE USED IN A CONSISTANCY CHECK WHEN THE PRIME RIB IS REEAD,
IT IS NECESSARY THAT RENAME CHANGE THESE FIELDS IN ALL DDB'S
REFERENCING THIS FILE. THESE CAN BE FOUND FROM FNBDDB CHAIN.
THE ONES ACTUALLY REFERENCING THIS FILE CAN BE DETERMINED BY
CHECKING DEVATB IN EACH DDB IN THE CHAIN. (THE CHANGE SHOULD
BE DONE WHILE THE PRIME RIB IS IN MAP-WRITE-LOCK STATE.


NXTBLK, ALLOCATION, AND CONSECUTIVE BLOCKS

FOR THE PURPOSES OF READING LARGE DUMP FILES (AS IN RUN) IT WOULD
BE NICE IF SUCCESIVE BLOCKS WERE ALLOCATED WHEN CONVENIENT
AND THAT NXTBLK RECOGNIZED THIS. NXTBLK COULD CHECK POINTERS


                                       292
Text: FILMEM; HOME-BAT blocks (oct 4,75)                                  page 2

IN THE RIB FOR CONSECUTIVE NUMBERS AND SET DEVLFT>4 AND ADVANCE
DEVRET. THE PROBLEM IN THIS IS FOR OUTPUT. IT IS NOT CLEAR
WHCICH POINTER CHANGED BITS NEED TO BE SET. ALSO NOTE THAT THE
FILE MAY BE IN UPDATE MODE IN WHICH CASE DEVLFT MIGHT GET SET
TO A LARGE NUMBER, ONE BLOCK READ, AND THEN A WRITE DONE.

THE ALLOCATION COULD BE HANDLED BY KEEPING AN AOBJN POINTER FOR EACH
SAT. UNISPT COULD POINT TO A TABLE OF 3 WORD ENTRIES (ONE PER
SAT ON THE UNIT). THESE COULD BE THE COUNT OF FREE PAGES, THE
DISK ADDRESS OF THE SAT, AND THE AOBJN POINTER. IF YOU
WANTED A BLOCK IN THE SAME SAT AS THE LAST ONE, YOU
WOULD TRY TO GET IT DIRECTLY. IF THIS FAILED, THE SAT WAS
NOT IN CORE, YOU WERE STARTING A NEW FILE, ETC. YOU WOULD
START AT THE AOBJN POINTER. WHEN A BLOCK WAS FOUND, YOU COULD
INCREMENT THE AOBJN POINTER ONCE OR TWICE BEFORE STORING IT.
THIS WOULD TEND TO LEAVE HOLES IN THE SAT SO THAT YOU COULD
GET THE NEXT CONSECUTIVE BLOCK WHEN YOU WANTED IT.


REFRESH-ONCE-230COP

THERE COULD BE TWO WORDS IN THE HOME BLOCK. AT REFRESH TIME, A
RANDOM NUMBER WOULD BE GENERATED (POSSIBLY BASED ON SYSTEM NAME)
AND STORED IN EACH WORD (SAY HOMUPC AND HOMCPC (UP COUNT AND
COPY COUNT)). EACH TIME THE SYSTEM WAS BROUGH UP, HOMUPC
WOULD BE INCREMENTED AND THE HOME BLOCKS REWRITTEN. IF HOMUPC
ON ALL PACKS IN THE STRUCTURE WERE NOT THE SAME, IT WOULD BE AN
ERROR. ON A COPY, HOMUPC WOULD BE COPIED INTO HOMCPC. WHEN THE
ONCE CODE WAS EXERCISED, NOTHING WHICH MIGHT CAUSE A REFRESH OR
PARITALLY DESTROY A STRUCTURE COULD BE DONE (EXCEPT POSSIBLY
WITH SOME SPECIAL PASSWORD) UNLESS HOMUPC=HOMCPC (A COPY HAS
RECENTLY BEEN DONE).

























                                       293
Text: FILNAM; Experimental monitor names                                  page 1

THE FOLLOWING ARE THE SUGGESTED NAMES FOR EXPERIMENTAL MONITOR
FILES:

<L> IS USED TO REPRESENT THE LETTER ASSIGNED TO THE PERSON OR
	PROJECT

# IS USED TO REPRESENT THE LAST DIGIT OF THE SYSTEM NUMBER
	FOR FILES LIKE CONF31, CONF32, ETC.

THE EXTENSION MAC IS ASSUMED UNLESS OTHERWISE STATED

USUAL NAME	EXPERIMENTAL NAME
S		SSSSS<L>
CONF3#		CONF#<L>
CNFN3#		CNFN#<L>
COMFAK		COMFK<L>
COMTXT		COMTX<L>
COMT3#.REL	COMT#<L>.REL
COMMON		COMON<L>
COMN3#.REL	COMN#<L>.REL
COMMOD		COMOD<L>
COMD3#.REL	COMD#<L>.REL
FILUUO		FILUU<L>
FILIO		FILIO<L>
FILFND		FILFN<L>
DPXKON		DPXKN<L>
FHXKON		FHXKN<L>
DFCKON		DFCKN<L>
BPXKON		BPXKN<L>
CLOCK1		CLOCK<L>
COMCON		COMCN<L>
CORE1		CORE1<L>
ERRCON		ERRCN<L>
JOBDAT		JOBDT<L>
MJBDAT.REL	MJBDT<L>.REL
ACTSER		ACTSR<L>
CDRSER		CDRSR<L>
MTASER		MTASR<L>
LPTSER		LPTSR<L>
PICON		PICON<L>
PLTSER		PLTSR<L>
PTPSER		PTPSR<L>
PTRSER		PTRSR<L>
RMTSER		RMTSR<L>
SCHED1		SCHED<L>
CTYSIM		CTYSM<L>
SCNSER		SCNSR<L>
SEGCON		SEGCN<L>
SWPSER		SWPSR<L>
SYSINI		SYSIN<L>
TMPUUO		TMPUU<L>
UUOCON		UUOCN<L>
PATCH		PATCH<L>
EDDT		EDDTT<L>
DDT		DDTTT<L>


                                       294
Text: FILNAM; Experimental monitor names                                  page 2

ONCDSK		ONCDS<L>
REFSTR		REFST<L>
ONCE		ONCEE<L>






















































                                       295
Text: INTR; Pseudo interrupt system                                       page 1

THE CURRENT PSEUDO INTERUPT SYSTEM USES 3 WORDS PER JOB IN CORE.
IT IS POSSIBLE TO CHANGE THE SYSTEM IMPLIMENTATION SLIGHTLY TO
PLACE TWO OF THESE WORDS IN THE UPT.
THE CURRENT THREE WORDS ARE

JBTENB:	BIT 0 SYSTEM ENABLED
	BITS 1-35 1 PER CHANNEL. ON IF CHANNEL ENABLED

JBTPIP:	BIT 0 ON IF OLD SYTLE INTERUPT SYSTEM (NOT APRENB)
	BITS 1-35 1 PER CHANNEL ON IF CHANNEL IS IN PROGRESS.

JBTAWQ:	BIT 0 ON IF SOME INTERUPT REQUEST TO BE SERVICED
	BITS 1-35 1 PER CHANNEL, CHANNEL IS WAITING FOR A REQUEST

IN THE OLD STYLE SYSTEM

JBTENB:	UNUSED

JBTPIP:	BIT 0 ALWAYS 1
	BIT 1 TRAP IN PROGRESS

JBTAWQ:	BIT 0 SAME AS ABOVE (INTERUPT REQUEST)
	BITS 18-35 INTERUPT REASON

THE NEW SYSTEM DEPENDS ON THE SLEEP CODE CHANGE AND PLACES
JBTENB AND JBTPIP IN THE UPT.

WHEN AN INTERUPT CONDITION OCCURS

SET THE APPROPRIATE BIT IN JBTAWQ AND SET THE SIGN BIT
	(FOR APRENB TYPE TRAPS SET BIT 0 AND BITS 18-35)
IF THE JOB IS IN SLEEP, RESTART IT (LEAVE THE SLEEP CODE
	AND REMAINING TIME IN THE SLEEP ARRAY)
IF THE JOB IS IN TIOW, FORCE A SETIOD FOR THE APPROPRIATE DEVICE.

ON LEAVING A UUO OR RESTARTING THE JOB (NOT IN EXEC MODE)
(CURRENTLY CLKTRP)

	IF JBTAWQ>=0 THEN DONE
	X_JBTAWQ&377777777777&JBTENB
	IF X>JBTPIP&377777777777 THEN TAKE INTERUPT
		SETTING JBTPIP ETC.
	JBTAWQ_JBTAWQ&377777777777
	DONE

WHEN THE JOB WAKES FROM TIOW, IT WILL END UP GOING TO
THE ABORT UUO CODE. IF WE DECIDE NOT TO TAKE THE INTERUPT,
WE END UP BACK IN TIOW. THE TIMES WE HAVE TO TEST TO SEE
IF WE REALLY WANT TO TRAP (TSTKTP FOR GOING INTO IO WAIT)
WE ARE AT UUO LEVEL AND CAN REFERENCE WORDS IN THE UPT.

WHEN WE WAKE UP FROM SLEEP

	IF THE SLEEP REQUEST CELL IS 0, RETURN TO THE USER
	IF JBTAWQ>=0, RETURN TO THE USER


                                       296
Text: INTR; Pseudo interrupt system                                       page 2

	IF JBTAWQ&JBTENB&37777777777<=JBTPIP&377777777777
		THEN RETURN TO THE USER
	JBTAWQ_JBTAWQ&377777777777, REENTER SLEEP

NOTE IF JBTAWQ<0 AND WE RETURN TO THE USER WE WILL TAKE
THE INTERUPT. THE NEW SLEEP CODE IS REQUIRED SO WE CAN
REENTER SLEEP.


















































                                       297
Text: UNHAP; Explanation of ALR620 bits                                   page 1

EXPLANATION OF SYSTEM UNHAPPY MESSAGES FOR PDP-10

UNHAPPY 1
	THERE IS NO OPR TELETYPE (A TELETYPE ON WHICH SET OPR
HAS BEEN DONE) AND THE SYSTEM IS ANSWERED. THIS UNHAPPY MESSAGE
IS SENT CONTINUOUSLY UNTIL THE SITUATION IS NO LONGER
TRUE. IF THE JOB ON WHICH SET OPR HAS BEEN DONE IS LOGGED
OUT OR DETACHED OR THE SYSTEM IS ANSWERED AND NO SET OPR HAS
BEEN DONE, THERE IS A 90 SECOND DELAY BEFORE THE UNHAPPY
MESSAGE IS SENT.

UNHAPPY 2
	A MESSAGE HAS BEEN SENT TO THE OPR TELETYPE (OR BUFFERED
UNTIL A SET OPR IS DONE) WHICH SHOULD GET IMMEDIATE ATTENTION
FROM THE OPERATOR. THERE ARE CURRENTLY TWO CONDITIONS WHICH
CAUSE UNHAPPY 2:
		DISK OFF-LINE
THE MESSAGE PRINTED IS
UNIT XXX WENT OFF-LINE
PLEASE POWER IT DOWN, THEN TURN IT ON AGAIN
	OR
UNIT XXX WENT OFF-LINE (FILE UNSAFE)
PLEASE POWER IT DOWN, THEN TURN IT ON AGAIN
	WHERE XXX IS A UNIT NAME (I.E. DPA3, DPB4).
A NOTATION SHOULD BE MADE IN THE LOG AND THE INSTRUCTIONS
FOLLOWED. THE ENTIRE SYSTEM MAY HANG UNTIL THE PROBLEM IS
CORRECTED. THIS MESSAGE COMES OUT ONCE A MINUTE UNTIL THE
PROBLEM IS CORRECTED.
		SWAP READ ERROR
THE MESSAGE PRINTED IS
ERROR IN JOB N
SWAP READ ERROR
	WHERE N IS A JOB NUMBER. THIS MESSAGE IS ONLY PRINTED
ONCE. THE TOTAL NUMBER OF SWAP ERRORS WILL BE
PRINTED BY PSP. AN ENTRY SHOULD BE MADE IN THE LOG

	THE UNHAPPY 2 MESSAGE MAY BE CLEARED BY DOING A SET HAPPY.

UNHAPPY 4
	AN ERROR MESSAGE FOR SOME JOB HAS BEEN SENT TO THE OPR
TELETYPE BECAUSE THE JOB WAS DETACHED. THE MESSAGE PRINTED IS
SOMETHING OF THE FORM:
ERROR IN JOB N
ILL MEM REF AT USER XXXXX
	A GOOD POLICY MIGHT BE TO SEND MAIL TO THE APPROPRIATE
USER NAME SO THAT HE WILL FIND OUT WHEN HE ATTACHES.
THE UNHAPPY 4 MESSAGE IS CLEARED BY A SET HAPPY.

UNHAPPY 10
	THE REMOTE PERIPHERAL 620 HAS CRASHED.
THIS MESSAGE MAY BE CLEARE WITH SET HAPPY. THE MESSAGE WILL BE
CLEARED AUTOMATICALLY IF THE REMOTE PERIPHERAL 620 COMES BACK UP.

UNHAPPY 20
	A MESSAGE HAS BEEN PRINTED ON THE CONSOLE TELETYPE


                                       298
Text: UNHAP; Explanation of ALR620 bits                                   page 2

BECAUSE THERE WAS NO OPR TERMINAL SET. THIS MESSAGE CAN
BE CLEARED WITH SET HAPPY.

UNHAPPY 40
	THE MONITOR HAS FINISHED AUTO-RESTART PROCEDURES AND IS
NO LONGER SUPER-SHUT. THIS MESSAGE CAN BE CLEARED WITH SET HAPPY.

UNHAPPY 100
	THERE IS A DEVICE PROBLEM.
THE MESSAGE PRINTED IS
PROBLEM ON XXX FOR JOB N
	WHERE XXX IS A DEVICE NAME (I.E. LPT, MTA0) AND N IS
A JOB NUMBER. THE DEVICE IS PROBABLY OFF, OUT OF PAPER, NOT
ON-LINE (I.E. THE START BUTTON ON THE LPT NEEDS TO BE
PRESSED), ETC. THIS MESSAGE COMES OUT ABOUT ONCE A MINUTE UNTIL
THE PROBLEM IS CORRECTED.
THIS MESSAGE CAN BE CLEARED WITH SET HAPPY.








































                                       299
Text: INDIR; Spec for indirect files                                      page 1

THIS IS A PRELIMINARY PROPOSAL FOR A NEW FEATURE CALLED
"INDIRECT FILES". THIS FEATURE ALLOWS A USER TO REFERENCE A FILE
EITHER IN HIS OWN DIRECTORY, OR IN ANOTHER DIRECTORY BY A NAME
OTHER THAN ITS REAL NAME. IT WILL ALSO ALLOW PRIVILEDGED PROGRAMS
TO SET UP SUCH REFERENCE POINTERS WHICH ALLOW GREATER ACCESS
TO THE FILE THAN THE USER WOULD NORMALLY BE ALLOWED.

THE FOLLOWING IS THE CURRENT FORMAT OF A UFD ENTRY:

WORD 0:	NAME

WORD 1:	BITS 0-17:	EXTENSION
	BIT 18:		0
	BIT 19:		BIT INDICATING FILE DUMPED (SET WITH WF LIC.)
	BITS 20-22:	UNUSED BITS, SETABLE WITH WF LIC.
	BITS 23-26:	UNUSED BITS, SETABLE BY USER
	BITS 27-35:	FILE PROTECTION

WORD 2:	BIT 0:		UNUSED, RESERVED
	BITS 1-2:	UNUSED, SETTABLE WITH WF LIC.
	BITS 3-4:	UNUSED, SETTABLE BY USER
	BITS 5-6:	HIGH ORDER 2 BITS OF CREATION DATE
	BITS 7-23:	CREATION TIME IN SEC. SINCE MIDNIGHT
	BITS 24-35:	LOW ORDER 12 BITS OF CREATION DATE

WORD 3:	BITS 0-17:	NUMBER OF BLOCKS ALLOCATED TO THIS FILE
	BITS 18-35:	LICENSE FOR THIS FILE

WORD 4:	POINTER TO RETRIEVAL INFORMATION

THE PROPOSED FORMAT FOR A UFD ENTRY FOR AN INDIRECT FILE IS:

WORD 0:	NAME

WORD 1:	BITS 0-17:	EXTENSION
	BIT 18:		1 (INDICATES INDIRECT FILE)
	BIT 19:		FILE DUMPED BIT
	BITS 20-22:	PROTECTION OVERRIDE BITS (SEE BELOW)
	BITS 23-26:	UNUSED BITS, SETABLE BY USER
	BITS 27-35:	FILE PROTECTION

WORD 2:	NAME OF FILE THIS INDIRECT POINTER POINTS TO

WORD 3:	BITS 0-17:	EXTENSION OF FILE THIS INDIRECT POINTER
			POINTS TO
	BITS 18-35:	LICENSE

WORD 4:	PPN OF FILE THIS INDIRECT POINTER POINTS TO

WHEN A LOOKUP IS DONE ON A NAME WHICH IS THE NAME OF AN INDIRECT
FILE, THE MONITOR WILL RETRIEVE THE NAME, EXTENSION, AND PPN OF
THE FILE POINTED TO FROM WORDS 2, 3, AND 4, AND DO A LOOKUP
ON THAT FILE. THE SAME WILL BE TRUE FOR AN ENTER. AN INDIRECT FILE
MAY POINT TO ANOTHER INDIRECT FILE TO SOME PREDETERMINED DEPTH.



                                       300
Text: INDIR; Spec for indirect files                                      page 2

	PROTECTION FOR INDIRECT FILES

WHEN THE MONITOR FINDS THAT THE ARGUMENT OF A LOOKUP, ENTER, OR
RENAME POINTS TO AN INDIRECT FILE, IT WILL PERFORM THE FOLLOWING
OPERATIONS:
	SET MAXAC=PROTECTION FOR THIS USER FOUND IN BITS 27-35
		OF WORD 1
	SET MINAC=1'S COMPLIMENT OF OVERRIDE PROTECTION FOUND
		IN BITS 20-22 OF WORD 1

THE 1'S COMPLIMENT IS USED SO THAT 0 REPRESENTS NO SPECIAL ACCESS.

EACH TIME ANOTHER INDIRECT FILE IS ENCOUNTERED IN THE LOOKUP OR
ENTER CHAIN, THE FOLLOWING ACTION IS PERFORMED.

	SET MINACC=MIN (OLD MINACC,(MAX (OVERRIDE BITS OF NEW POINTER,
		APPROPRIATE PROTECTION BITS OF NEW POINTER))

REMEMBER, THE SMALLER THE NUMBER IN THE PORTECTION FIELD, THE
GREATER THE ACCESS ALLOWED.

WHEN A NON-INDIRECT POINTER IS FOUND, THE PROTECTION IS

PROTECTION=MAX (MAXAC,MIN (MINACC,FILE'S PROTECTION IF ACCESSED
	DIRECTLY))

THUS THE OVERRIDE PROTECTION BITS ALLOW AN INDIRECT POINTER TO
SPECIFY MORE ACCESS THAN THE USER WOULD BE ALLOWED IF HE
REFERENCE THE FILE POINTED TO DIRECTLY.

AT EACH STAGE OF INDIRECTION, THE LOGICAL OR OF THE LICENSE BITS
IS TAKEN. THIS ALLOWS AN INDIRECT POINTER TO SPECIFY MORE
LICENSE THAN IF THE FILE POINTED TO WERE ACCESSED DIRECTLY.

	UUO USAGE

ON EXTENDED LOOKUPS, ENTERS, AND RENAMES, BIT 19 OF THE FIRST
WORD (NORMALLY THE COUNT) WILL BE USED TO SPECIFY THAT THE
OPERATION IS INTENDED TO AFFECT THE INDIRECT FILE NOT THE
FILE POINTED TO.

	LOOKUP
IF THE LOOKUP IS NOT EXTENDED, OR BIT 19 IS OFF, THE FILE LOOKED
UP WILL BE THE FILE POINTED TO.
IF THE NAME SPECIFIES AN INDIRECT FILE AND THE LOOKUP IS
EXTENDED, BIT 19 OF THE FIRST WORD WILL BE SET ON RETURN.

IF THE LOOKUP IS EXTENDED AND BIT 19 IS ON, THE LOOKUP WILL
REFER TO THE INDIRECT POINTER AND WILL RETURN THE INFORMATION
CONTAINED IN THE UFD BLOCK. (I.E. NAME, EXTENSION, PPN, LICENSE,
PROTECTION, ETC.)  IF THE NAME GIVEN DOES NOT SPECIFY AN INDIRECT
FILE, AN ERROR RETURN WILL BE TAKEN.

	ENTER (CREATE OR SUPERCEDE)
IF THE ENTER IS NOT EXTENDED, OR BIT 19 IS OFF, THE FILE


                                       301
Text: INDIR; Spec for indirect files                                      page 3

ENTERED WILL BE THE ONE POINTED TO. IF THE NAME SPECIFIED BY THE
ENTER IS AN INDIRECT NAME, BIT 19 WILL BE SET AS IN LOOKUP.

IF THE ENTER IS EXTENDED AND BIT 19 IS ON, THE ENTER WILL CREATE
AN INDIRECT POINTER. THE LICENSE AND OVERRIDE BITS MAY BE SET IF
THE PROGRAM HAS SUFFICIENT LICENSE.

	ENTER (UPDATE)
IF THE ENTER IS NOT EXTENDED, OR BIT 19 IS OFF, THE FILE
SPECIFIED WILL BE ASSUMED TO BE THE ONE POINTED TO. BIT 19 WILL
NOT BE SET IF THE NAME IS THE NAME OF AN INDIRECT POINTER. IF
THE LOOKUP WHICH WAS DONE SPECIFIED THE INDIRECT FILE (BIT 19 ON)
THE ENTER WILL GIVE AN ERROR RETURN

IF THE ENTER IS EXTENDED AND BIT 19 IS ON, THE ERROR RETURN WILL
BE TAKEN.

	RENAME
IF THE RENAME IS NOT EXTENDED OR BIT 19 IS OFF AND IF THE NAME,
EXTENSION, PPN, PROTECTION, AND LICENSE ARE NOT BEING CHANGED,
THE RENAME WILL CHANGE THE FILE POINTED TO BY THE INDIRECT POINTER
OTHERWISE THE CHANGE WILL AFFECT THE INDIRECT POINTER (THIS
INCLUDES DELETING).

IF THE RENAME IS EXTENDED AND BIT 19 IS ON, THE RENAME WILL ALWAYS
AFFECT THE INDIRECT POINTER. THIS CAN BE USED TO CHANGE SPECIAL
BITS OR OVERRIDE PROTECTION BITS ON THE INDIRECT POINTER.






























                                       302
Text: PDLANL; LISP program to guess PDL space                             page 1

THERE IS NOW A PROGRAM TO AID IN ANALYSIS OF THE PUSHDOWN
LIST FOR THE MONITOR. THE PROGRAM IS WRITTEN IN LISP AND
ALLOWS DEFINITIONS OF THE VAIOUS ROUTINES IN TERMS OF THE
OTHER ROUTINES THEY CALL AND THE AMOUNT OF PUSHDOWN
LIST THEY USE. THE IDEA OF THIS PROGRAM IS TO MAKE UP A
SET OF FUNCTION DEFINITIONS SUCH THAT THERE IS A TOP LEVEL
FUNCTION CALLED 'UUOLEVEL' FOR EXAMPLE, WHICH WHEN CALLED
RETURNS THE MAXIMUM DEPTH OF THE PUSHDOWN LIST FOR UUO LEVEL.
AS THE MONITOR CHANGED, THE DEFINITIONS COULD BE MODIFIED AND
THE MAX DEPTH RECHECKED TO SEE IF ENOUGH PUSHDOWN SPACE WERE
ALLOCATED.

THE FORMAT OF A DEFINITION IS:

(DEFPDL <ROUTINE NAME>)
<LIST OF CALLS, ETC. (SEE BELOW)>
END

ANY NUMBER OF THESE MAY BE PLACED IN THE INPUT FILE IN ANY ORDER.

THE THINGS WHICH MAY BE PLACED IN THE <LIST OF CALLES, ETC.>
ARE:

CALL <ROUTINE NAME>	(REPERESENTS A PUSHJ)
PUSH <NUMBER>		(REPRESENTS A SEQUENCE OF PUSH'S)
POP <NUMBER>		(REPRESENTS A SERIES OF POPS)
GO <ROUTINE NAME>	(A PJRST I.E. JRST TO SUBROUTINE)
PCALL <ROUTINE NAME>	(A PUSHJ TO ROUTINE WHICH LEAVES THINGS
			ON THE STACK LIKE SAVE4 (MIGHT BE JSP NOT PUSHJ))
EPOP <NUMBER>		(LIKE POP <NUMBER> BUT PUSH-POP COUNT
			IS CHECKED FOR 0 JRST CPOPJ1 IS
			TRANSLATED TO EPOP 1)

SOME EXAMPLES FOLLOW:

IN COMCON THERE IS A ROUTINE CALLED SAVARG CALLED WITH A
JSP. SG1 CALLES IT. THIS WOULD CODE AS

SG1:	JSP T1,MONSTR
	JSP T1,SAVARG
	CALLI 0

	...

	PUSHJ P,SG3
	JRST @-1(PG)

SAVARG:	PUSH P,U
	MOVE PG,P
	PUSH P,W
	PUSH P,T4
	PUSH P,P1
	PUSH P,P2
	PUSH P,T3
	PUSH P,P3


                                       303
Text: PDLANL; LISP program to guess PDL space                             page 2

	PUSH P,P4
	PUSHJ P,(T1)

(DEFPDL SG1)
GO MONSTR	;SINCE THE JSP DOES NOT INCR STACK
PCALL SAVARG	;SINCE SAVARG CHAGES THE STACK AND LEAVES IT
CALL EXECREST	;THE REST UUO FROM EXEC MODE
CALL SG3
END

(DEFPDL SAVARG)
PUSH 9		;THE NUMBER OF THINGS ADDED TO THE STACK
POP 9		;SINCE PUSH'S AND POP'S MUST BALANCE
END

NOTE THAT THERE ARE A FEW KLUDGES THAT MUST BE TAKEN INTO
ACCOUNT. FORTUNATELY MOST THINGS ARE SIMPLER

THE CODING OF SETMAL FROM UUOCON

(DEFPDL SETMAL)
CALL CHKPRJ
GO FNDMAL
GO NOMAL
END

(DEFPDL NOMAL)
END

(DEFPDL FNDMAL)
PUSH 1
POP 1
GO NOMAL
END

OR WITH A LITTLE MORE LOOKING AT IT

(DEFPDL SETMAL)
CALL CHKPRJ
PUSH 1
POP 1
END

THE START OF THE SETUUO IN UUOCON

(DEFPDL SETUUO)
GO OPRSND
GO SCHSET
GO INISET
GO TIMSET
GO DATSET
GO ORPSET
GO SETWTC
END



                                       304
Text: PDLANL; LISP program to guess PDL space                             page 3

THIS ILLUSTRATES A MULTIPLE WAY BRANCH
























































                                       305
Text: ASSLOA; Assembler/Loader wish list                                  page 1

The following are features which the PDP-10 Operating Systems
Group would like to see in a new assembler and loader pair.


There should be several relocation registers instead of the current
two. Sixteen would probably be a lower limit on the number which
should be available. These relocation registers will be referenced
by symbolic names. For example an assembler statement of the
form USE FOO to indicate that the following code should specify
the relocation register called FOO. All code which specifies the
same symbolic relocation register, regardless of the relocatable
module (assembly) in which it is found, will be loaded
into consecutive core locations.
	Each relocation counter will have both a REAL ORIGIN and
a PHASE ORIGIN. The REAL ORIGIN will specify the actual
core location into which the first word assembled under that
relocation counter will load. The PHASE ORIGIN will
specify the value which would be given to a symbol which referenced
the first location loaded under that relocation register.
	For each of the ORIGIN's for a location counter, one or more
of the following may be specified:

PAGED	The origin will be on a page boundary

LOWER LIMIT This is the lowest possible location whichh may be used
	for the origin. This limit may be defined in terms of
	some other relocation counter. In this case, it will be
	assumed to refer to the last location loaded in the
	relocation counter referenced. For example, the lower
	limit might be specified as 100 locations after the last
	location in relocation counter FOO.

UPPER LIMIT	This defines the maximum location used for the origin.

LOCATION	This has the same effect as specifying the upper
	and lower limits as the same number. It is included
	for convenience.

For each relocation counter, the loader will define a symbol
which will be the name or something derived from it to have the
value PHASE ORIGIN,,REAL ORIGIN.

The assembler and loader combination will be able to handle all
expressions involving both relocatable and external symbols.
For example

	EXTERN BAZ
	POINT 13-BAZ,FOO,5

	OTHER FEATURES IT WOULD BE NICE TO SEE

It would be nice to have a 1 pass assembler.
In general, any speedup in the loader, assembler process would
	be welcome.



                                       306
Text: ASSLOA; Assembler/Loader wish list                                  page 2

A FOR statement like that in FAIL. This statement has arithmetic
options (like an ALGOL FOR statement) and IRP and IRPC options. The
advantage is that it does not have to be used inside a macro.

It would be nice to be able to put labels inside literals.

It would be nice if there were a method of pooling all literals
using the same relocation counter even though they were in different
assemblies.
















































                                       307
Text: SUDS; Spec for wonderful SUDS mode                                  page 1

IMPLEMENTATION OF THE SUDS MONITOR MODE FOR CHEVROLET.

COMMENTS ON MEMO:

1. CONTROL W DOES ABSOLUTELY NOTHING ON THE PDP-10 EXCEPT
   GET PASSED TO THE PROGRAM IN PROGRAM MODE.
   THE CONTROL CHARACTERS ARE EFFECTIVE IN COMMAND MODE AND
   IN USER MODE (PROGRAM MODE).

2. NO PROBLEM

3. NO PROBLEM OR WE COULD USE CONTROL \ AS IN 940 MODE

4. NO PROBLEM

5. FINE EXCEPT THAT THE COMMANDS DETACH AND LOGOUT MUST
    BE INCLUDED.

6. THE HELLO PROGRAM IS RUN IN RESPONSE TO THE HELLO COMMAND.
   IT CAN BE REPLACE BY QA OR THE COMMAND DELETED OR WHATEVER.

NO NAME HAS BEEN SUPPLIES TO BE USED FOR THE PROGRAM TO RUN
WHEN THE MONITOR DOES NOT RECOGNIZE A COMMAND. I ASSUME THAT
SUDS  IS OK.

TIMES REQUIRED FOR CHANGES:

A. COMMAND DECODER ABOUT 1/2 TO 1 WEEK

B. CHANGES TO THE PROMPT AND ERROR MESSAGES ABOUT
	ANOTHER DAY (MOSTLY TO MAKE SURE YOU FIND THEM ALL)

C. CHANGES TO SCNSER (FOR EDITING CHRS ETC.) ABOUT 1 WEEK
























                                       308
Text: SUDS; Spec for wonderful SUDS mode                                  page 2

GARY, THE ABOVE TIME ESTIMATES ARE BASED ON SOMEONE ELSE DOING
THE WORK WITH MINIMUM HELP FROM ME. TIME ESTIMATES FOR MY
DOING THE WORK ARE ABOUT AS FOLLOWS:

A. 4 HOURS
B. 1 HOUR
C. 1 DAY

AS I MENTIONED TO YOU BEFORE, THE SCHEDULE IS UNCERTAIN ENOUGH
THAT I CAN NOT SAY WHEN THE TIME WOULD BE AVAILABLE UNTIL
AFTER WE HOLD SOME KIND OF PLANNING MEETING.














































                                       309
Text: SLEEP; Clock queue efficiency proposal                              page 1

THIS IS A DISCUSSION OF HOW THE SLEEP CODE COULD BE REVISED
TO INCREASE ITS EFFICIENCY. THE IMPACT OF THIS CHANGE
IS NOT GREAT IN TERMS OF THE EFFICIENCY GAIN UNLESS THERE ARE
A LARGE NUMBER OF JOBS IN THE SYSTEM AT WHICH TIME IT
MIGHT HELP. IT DOES ALLOW A COUPLE OF JOB TABLES TO BE PUT INTO
THE UPT MORE EASILY. (SEE THE MEMO ON INTERUPTS).

THE CURRENT SLEEP CODE MAINTAINS A VARIABLE LENGTH LIST
OF ALL JOBS WITH SOME KIND OF A SLEEP REQUEST WAITING. JOBN*2
WORDS ARE RESERVED FOR THIS TABLE SINCE EACH JOB MAY HAVE
TWO TYPES OF REQUESTS, A SLEEP REQUEST AND A TIMER INTERUPT
REQUEST. WHEN A REQUEST IS TO BE DELETED, A TABLE SEARCH IS
REQUIRED TO FIND THE REQUEST. EACH REQUEST CONTAINS

JOB NUMBER FIELD
TYPE FIELD (TIME IS IN TICKS, SECONDS, OR MINUTES)
TIME FIELD
ACTION FIELD (WHAT TO DO)
REQUEST TYPE FIELD (GOES WITH JOB TO DISTINGUISH TYPES OF
	REQUESTS FOR THE SAME JOB)

AT EACH CLOCK TICK, THE LIST IS SCANNED AND IF THE CURRENT TIME
MATCHES THE TYPE FIELD, THE TIME FIELD IS DECRMENTED.
IF THE TIME FIELD GOES TO ZERO, AN ACTION IS TAKEN
AS SPECIFIED IN THE ACTION FIELD AND THE ENTRY IS REMOVED.

THE PROPOSED SYSTEM SETS ASIDE THE SAME AMOUNT OF SPACE.
THE ENTRY FOR A GIVEN REQUEST IS ALWAYS IN SLOT
BASE+<JOB NUMBER>+<JOBN>*<REQUEST TYPE>
FOR EACH TYPE (TICKS, SEC., MIN.) THERE ARE THREE CELLS:
REMTIM	REMAINING TIME
ORGTIM	ORIGINAL TIME
LOWJOB	THE FIRST JOB IN THE LIST WHICH WILL TIME OUT

EACH ENTRY HAS 4 FIELDS

JOB FILED (JF)	;HOLDS A JOB NUMBER JOBS ARE IN A LINK LIST
TIME FIELD (TF)	;JUST LIKE BEFORE
ACTION FIELD (AF) ;JUST LIKE BEFORE
TYPE FIELD (YF)	;THE TYPE (TICKS, SEC., MIN.)


THE FOLLOWING DESCRIPTIONS ARE WRITTEN IN NO KNOWN LANGUAGE
BUT ARE REASONABLY SIMPLE TO FOLLOW

AT CLOCK TICK TIME, SECOND TIME, AND MINUTE TIME, A SCAN
IS MADE OF THE REQUEST LIST. LOWJOB, ORGTIM, AND REMTIM
ARE FOR THE TYPE OF INTERUPT BEING PROCESSED (TICK, SEC., MIN.)

	IF LOWJOB=0 THEN DONE
	IF DEC(REMTIM)<>0 THEN DONE
	J_LOWJOB
L1:	IF TF(J)_TF(J)-ORGTIM=0 THEN [
		LOWJOB_JF(J); DO AF(J); ENTRY(J)_0; J_LOWJOB]
	ELSE J_JF(J)


                                       310
Text: SLEEP; Clock queue efficiency proposal                              page 2

	IF J<>0 THEN GO TO L1
	IF J_LOWJOB=0 THEN DONE
	ORGTIM_REMTIM_TF(J)


TO DELETE AN ENTRY:

	IF ENTRY(J)=0 THEN DONE
	USE LOWJOB, ORGTIM, REMTIME FOR THE YF OF THE ENTRY
	X_LOWJOB
	IF X<>J THEN GO TO DIFJ
	IF X_LOWJOB_JF(J)=0 THEN [ENTRY(J)_0; DONE]
	REMTIM_TF(X)-(ORGTIM-REMTIM)
	ORGTIM_TF(X)
	ENTRY(J)_0
	DONE

DIFJ:	IF JF(X)<>J THEN [X_JF(X); GO TO DIFJ]
	JF(X)_JF(J)
	ENTRY(J)_0

TO ADD AN ENTRY

	IF X_LOWJOB=0 THEN [
		LOWJOB_J; JF(J)_0
		ORGTIM_REMTIM_TF(J); DONE]
	IF REMTIM>TF(J) THEN [
		X_ORGTIM-REMTIM
		REMTIM_TF(J); ORGTIM_REMTIM+X
		TF(J)_ORGTIM; JF(J)_LOWJOB
		LOWJOB_J; DONE]
	TF(J)_TF(J)+ORGTIM-REMTIM
L1:	IF Y_JF(X)=0 THEN GO TO L2
	IF TF(Y)>TF(J) THEN GO TO L2
	X_Y
	GO TO L1

L2:	JF(J)_Y
	JF(X)_J
	DONE

















                                       311
Text: BIO10; Functional spec for block I/O                                page 1

THIS IS THE PRELIMINARY DESCRIPTION OF BLOCK I/O ON THE PDP-10.
YOU SHOULD BE FAMILIAR WITH THE DESCRIPTION OF THE BLOCK I/O
INTERFACE BETWEEN THE PDP-10 AND THE NETWORK.

BLOCK I/O FOR A PORT WILL BE INITIATED AT THE
USERS REQUEST. THE MODE WILL BE SET WITH AN AUXCAL AND MAY
BE EITHER FOR THE COMMAND PORT OR FOR AN AUXILIARY PORT.
THERE WILL BE TWO FACTORS WHICH DETERMINE WHETHER THE PORT
CAN ACTUALLY BE PLACED IN BLOCK I/O MODE OR NOT. THE
FIRST WILL BE THE NEGOTIATION WITH THE NETWORK FOR ANOTHER
PORT IN BLOCK I/O MODE USING TYPE 54 MESSAGES. THE SECOND WILL
BE THE AVAILABLITY OF BUFFER SPACE IN THE PDP-10. BUFFER SPACE WILL
BE TAKEN FROM FREE CORE. THERE WILL BE AN ASSEMBLY PARAMETER FOR
THE EXPECTED NUMBER OF BIO PORTS AND EXTRA FREE CORE WILL
BE GENERATED BASED ON THIS NUMBER. FOR CONVENIENCE IT WILL
PROBABLY BE DESIRABLE TO QUE BIO REQUESTS SO THAT THE PDP-10 IS
ONLY TRYING TO SET UP OR RELEASE 1 PORT AT A TIME. BECAUSE OF
THE LOW EXPECTED VOLUME FOR THE TRANSITIONS AND THE LOW VOLUME
OF AUXILIARY CIRCUIT CONSTRUCTION, THE SAME QUE CAN PROBABLY
BE USED FOR BOTH. WHEN THE REQUEST FOR BIO IS MADE, THE PDP-10
WILL NEGOTIATE WITH THE BASE FOR ANOTHER PORT. THE JOB COULD
BE PLACED IN THE MO STATE DURING THIS NEGOTIATION (AS WITH
AUX CIRCUIT CONSTRUCTION) TO AVOID CONFUSION IF THE
USER TRIES TO ABORT. IF THE BASE WILL NOT ALLOW ANOTHER BIO PORT,
THE NON-SKIP RETURN WILL BE TAKEN FROM THE AUXCAL
USED TO ENTER BIO MODE. IF THE BASE ALLOWS ANOTHER BIO PORT THE
MONITOR WILL ATTEMPT TO ASSIGN BUFFER SPACE. THE MONITOR WILL
RESERVE ONE BUFFER FOR EACH PORT IN BIO MODE PLUS 1 (TO ALLOW
FULL DUPLEX. OTHERWISE A PORT WITH AN INPUT REQUEST MIGHT
NOT BE ABLE TO DO AN OUTPUT FOR LACK OF BUFFER SPACE. WITH
THE EXTRA BUFFER, IT CAN EVEN IF IT MEANS WAITING FOR
THIS BUFFER TO BECOME FREE.). IF THE BUFFER SPACE CAN NOT BE
ASSIGNED, THE 10 WILL TELL THE BASE TO REDUCE THE NUMBER OF BIO PORTS
BY 1 AND GIVE THE NON-SKIP RETURN. IF ALL GOES WELL, THE PORT
WILL BE FLAGGED IN THE LDB, THE BUFFER ADDRESS REMEMBERED,
(THE EXTRA BUFFER IS REMEMBERED SEPERATELY) AND THE SKIP RETURN IS
TAKEN.

ACTUAL INPUT AND OUTPUT WILL BE BY MEANS OF SPECIAL AUXCALS
(ONE FOR INPUT AND ONE FOR OUTPUT). ANY OTHER FORM OF INPUT OR
OUTPUT WILL AUTOMATICALLY RESULT IN THE PORT BEING FORCED OUT
OF BLOCK I/O MODE.

WHEN THE OUTPUT AUXCAL IS GIVEN, THE FOLLOWING SEQUENCE WILL
TAKE PLACE:

IS THERE ALREADY A BUFFER OF OUTPUT ON ITS WAY OUT?
	YES, I/O WAIT OR INTERUPT
B:  HAS A REQUEST BEEN MADE FOR A BUFFER FULL OF INPUT?
	NO, SELECT THE BUFFER ASSIGNED THIS JOB AND GO TO A
IS THE 'EXTRA' BUFFER AVAIABLE?
	NO, GO INTO BUFFER WAIT THEN BACK TO B
GET THE 'EXTRA' BUFFER FOR USE BY THIS PORT
A:  MOVE THE USERS DATA TO THE BUFFER AND SEND THE OUTPUT
	MESSAGE TO THE BASE (TYPE 44)


                                       312
Text: BIO10; Functional spec for block I/O                                page 2


WHEN THE BASE FINISHES WITH AN OUTPUT BUFFER, THE JOB USING
THAT BUFFER IS CHECKED TO SEE IF AN OUTPUT WAKE OR AN
INTERUPT ON OUTPUT ROOM AVAILABLE SHOULD BE TAKEN. IF THE
BUFFER IS THE SPECIAL BUFFER, IT IS AGAIN MADE FREE AND
IF ANYONE IS WAITING FOR IT, THEY ARE RESTARTED.

THE ACTUAL OUTPUT AUXCAL WOULD BE
	AUXCAL AC,ADR
WHERE
AC/	PORT,,FUNCTION

ADR:	COUNT OF CHARACTERS
	DATA CHARACTERS 8 BITS EACH, LEFT JUSTIFIED

THERE WILL BE THREE MODES OF INPUT CONTROLED BY THE MODE FIELD
FOR THE DEVICE. THIS MAY BE SET WITH THE SETMOD AUXCAL OR
WITH SETSTS, SETMOD, ETC IF THE PORT IS THE COMMAND PORT.
THE MODES WILL BE BINARY, IMAGE, AND IMAGE BINARY AND WILL BE
DISTINGUISHED BY WHETHER THE MONITOR TERMINATES BLOCK INPUT
AUTOMATICALLY ON A TIMOUT OR EOF OR NOT. THIS IS LIKE THE TELETYPE MODES
WHICH EITHER FORCE THE TTY OUT OF 8-LEVEL MODE OR NOT ON TIMEOUT
DEPENDING ON THE MODE.

INPUT IS A LITTLE MORE COMPLICATED THAN OUTPUT.

IS THERE A BUFFER FULL OF INPUT DATA?
	NO, GO TO B
TRANSFER BUFFER TO USER
IF TERMINATE FLAG IS NOT SET, GENERATE ANOTHER INPUT REQUEST

B:  IS THERE AN INPUT REQUEST PENDING??
C:	YES, GO INTO INPUT WAIT OR TAKE I/O WAIT INTERUPT
IS THE TERMINATE FLAG SET?
	YES, RETURN A COUNT OF 0 AND AN END OF FILE
	AND RESET THE TERMINATE FLAG
D:  IS THE BUFFER ASSIGNED TO THIS LDB IN USE FOR OUTPUT?
	NO, GO TO E
IS THE 'EXTRA' BUFFER AVAILABLE?
	NO, GO INTO BUFFER WAIT, RESTART AT D
INTERCHANGE THE 'EXTRA' BUFFER AND THE ONE ASSIGNED TO THIS
	TERMINAL SO THE ONE DOING OUTPUT IS NOW 'EXTRA'
E:  MAKE AN INPUT REQUEST WITH THE BUFFER ASSIGNED THIS LDB
	AND GO TO C

WHEN THE BASE SIGNALS THE END OF INPUT FOR ANY OF THE THREE
REASONS (BUFFER FULL, TIMEOUT, TERMINATE CHARACTER), THE
MONITOR WILL WAKE THE JOB IF NEEDED AND INTERUPT IF NEEDED.
IF THE REASON IS A TERMINATE CHARACTER, AND THE PORT
IS NOT IN BINARY MODE, THE MONITOR WILL SET THE TERMINATE
FLAG AND REQUEST BLOCK INPUT TERMINATION (TYPE 53).
IF THE REASON FOR TERMINATION WAS A TIMEOUT, THE MONTIOR WILL SET
IOBKTL AND IF THE MODE IS IMAGE, WILL SET THE TERMINATE BIT
AND REQUEST BLOCK INPUT TERMINATION



                                       313
Text: BIO10; Functional spec for block I/O                                page 3

THE THREE MODE ARE INTENDED PRIMARILY AS FOLLOWS:

BINARY		AUXILIARY CIRCUITS. PROGRAM MUST INITIATE TERMINATE
IMAGE BINARY	2780, TERMINATE CHR TERMINATES BUT NOT TIMEOUT
IMAGE		CASSETTE TERMINALS, TIMEOUT OR TERMINATE CHR TERMINATES

THE AUXCAL FOR INPUT LOOKS LIKE
	AUXCAL AC,ADR
	 RETURN HERE ONLY IF NO SUCH CIRCUIT
	RETURN HERE WHICH CHARACTERS

AC/	PORT,,FUNCTION

ADR:	COUNT STORED HERE
	DATA STORED HERE

THERE WILL BE A FIXED SIZE FOR THE DATA AREA. THIS WILL
BE THE SIZE REQUESTED ON INPUT AND THE MAX SIZE ON OUTPUT.
THIS SIZE WILL PROBABLY BE FIXED TO CORRESPOND TO THE 2780
SIZE.

AT ANY TIME, THE PROGRAM MAY ISSUE AN AUXCAL TO TERMINATE
BLOCK INPUT MODE. THIS UUO WILL SET THE TERMINATE FLAG AND ISSUE
A TERMINATE REQUEST (TYPE 53).

AFTER ISSUING THE TERMINATE BLOCK INPUT CALL, THE USER PROGRAM
SHOULD DO INPUTS UNTIL EOF TO GET THE LAST CHARACTERS (OR 0)
AND TO CLEAR THE TERMINATE FLAG.

THERE WILL BE ONE MORE AUXCAL TO LEAVE BLOCK I/O MODE. THIS WILL
AUTOMATICALLY TERMINTE BLOCK INPUT MODE IF IT IS ACTIVE AND
WAIT FOR THE BLOCK INPUT AND OUTPUT BUFFERS IN USE (IF ANY) TO
BECOME FREE. THE PDP-10 WILL THEN REPORT ONE LESS PORT IN BLOCK
I/O MODE TO THE BASE AND RETURN BUFFERS TO FREE STORAGE.























                                       314
Text: BITS; P033 swapper bit descriptions                                 page 1

THIS IS AN INFORMAL DESCRIPTION OF VARIOUS INTERESTING
MONITOR PARAMETERS.























































                                       315
Text: BITS; P033 swapper bit descriptions                                 page 2

NAME:  MRQ

WHEN SET:

*WHEN PAGE FAULT CODE DISCOVERS THAT A LO OR HI SEG NEEDS MORE
CORE AND SOME OF ITS PAGES ARE STILL ON DISK, OR JOB NEEDS MORE CORE 
AND THERE IS NOT ENOUGH FREE PAGES TO SATISFY THE REQUEST.

* IN SWAPPER IF SWAPPING OUT A JOB'S ENTIRE CORE IMAGE

WHEN CLEARED:

* IN SWAPPER IF THE SWAPPER CAN SATISFY REQUEST FOR CORE WITH FREE
PAGES

* BY SWAPPER WHEN A SWAP IN OPERATION IS COMPLETED FOR A JOB

USAGE:

* A JOB IS UNRUNNABLE IF MRQ IS SET FOR EITHER ITS HI OR LO SEG

* IF MRQ IS SET FOR EITHER SEG AND CMWB IS ON, JOB WILL GO
INTO COMMAND WAIT QUEUE WHEN SCHEDULER IS CALLED.

* IF A JOB IS IN SHARABLE RESOURCE WAIT AND MRQ IS ON FOR EITHER
IF ITS SEGMENTS, NO SHARABLE RESOURCES ARE GIVEN TO THE JOB

* MRQ ON MAKES A SEGMENT SWAPPABLE EVEN IF THE RUN BIT IS ON
AND THE ICPT IS .GE. 0.

* IF MRQ IS ON FOR A HISEG AND A NEW LOSEG TRIES TO SHARE IT,
HMRST IS SET FOR THE LOSEG AND THE SCHEDULER IS CALLED.

* IF HMRST IS ON FOR A LOSEG AND MRQ ON FOR HISEG AND CMWB IS ON, SCHEDULER CALL WILL PUT JOB INTO CMQ

* IF MRQ IS ON FOR A LOSEG, SWAPPER CONSIDERS IT FOR INPUT.

MEANING:
MEMORY IS REQUIRED BEFORE JOB IS ALLOWED TO RUN.


















                                       316
Text: BITS; P033 swapper bit descriptions                                 page 3

NAME:  HMRST

WHEN SET:

* FOR ALL LOSEGS CONNECTED TO A HISEG IF THE HISEG IS GOING TO
BE SWAPPED OUT

* FOR HISEG (WITH SEGSPL TURN ON FOR LOSEG) IF JOB PAGE FAULTS IN
HISEG AND NEED TO ZERO PAGES IN HISEG BEFORE ALLOWING JOB TO RUN
AGAIN.

* FOR ALL LOSEGS CONNECTED TO A HISEG WHEN A JOB DOES A CORE UUO
TO CONTRACT THAT HISEG AND THERE IS I/O ACTIVE IN THE HISEG. (SEGSPL
IS ALSO SET FOR THE LOSEG)

* FOR ALL LOSEGS BUT THE ONE THAT DID A CORE UUO TO EITHER
EXPAND OR CONTRACT A HISEG THAT HAD NO I/O IN PROGRESS

* IF A JOB PAGE FAULTS IN ITS HISEG AND IT IS FOUND THAT THE REQUIRED
PAGE IS EITHER A) ON SWAPPING DEVICE OR B) NOT AVAILABLE FROM FREE CORE,
HMRST IS SET FOR ALL LOSEGS CONNECTED TO THE HIGH SEGMENT.

* FOR ALL CONNECTED LOSEGS CONNECTED TO A HISEG THAT HAS HAD SWAP
READ ERROR

WHEN CLEARED:

* IN CONTEXT SWITCHER JUST BEFORE REDOING THE HISEG MAP

USAGE:

* IF HMRST (OR MRQ) IS ON FOR A LOSEG AND MRQ IS ON FOR HISEG,
SCHEDULER PUTS JOB INTO COMMAND WAIT QUEUE IF CMWB IS ON

* IF HMRST IS ON FOR A LOSEG AND MRQ OR SWPINP IS ON FOR HISEG,
THE SCHEDULER DOESN'T GIVE THE JOB A SHARABLE RESOURCE

* IF HMRST IS ON FOR A LOSEG DURING SCHEDULER RUN SCAN OR SWAP
INPUT SCAN, HMCHK IS CALLED WHICH MAKES JOB UNRUNNABLE (OR UNSWAPPABLE)
HMRST OR SWPRQ IS ON AND JOB IS NOT SPECIAL (SEGSPL) AND REQUEUES JOB
TO BACK OF QUEUE THAT SEGSPL JOB IS IN.

* IF SEGSPL JOB IS SCANNED BY SCHEDULER AND HMRST IS ON FOR
LOSEG, HMRST IS CLEARED FOR HISEG AND SEGSPL IS CLEARED FOR LOSEG.

* DURING SWAPPER INPUT SCAN, IF HMRST IS ON FOR A LOSEG AND MRQ IS ON FOR
A HISEG AND MRQ IS OFF FOR THE LOSEG, TRY TO SWAP IN THE HISEG.

MEANING:

* FOR LOWSEG, MEANS THAT HIGH SEG MAP MUST BE REDONE BEFORE
THIS LOSEG CAN RUN

* FOR HISEG, MEANS A JOB HAS CREATED NEW PAGES IN THE HISEG
THAT MUST BE ZEROED AND IS THE ONLY JOB ALLOWED TO CONTINUE 


                                       317
Text: BITS; P033 swapper bit descriptions                                 page 4

TO RUN WITH THAT HIGH SEGMENT.
























































                                       318
Text: BITS; P033 swapper bit descriptions                                 page 5

NAME:  SWPRQ

WHEN SET:

* WHEN A JOB TRIES TO CONTRACT A HIGH SEGMENT AND ACTIVE I/O
IS PRESENT FOR HISEG, SWPRQ IS SET FOR THE HISEG TO STOP THE I/O.
(THE SPECIAL SEGMENT FLAG SEGSPL AND HMRST ARE SET FOR
THE LOSEG.)

* SET FOR A LOSEG WHEN SWAPPER WOULD LIKE TO SWAP
IT OUT BUT COULD NOT BECAUSE OF ACTIVE I/O TO THAT LOSEG
OR BECAUSE LOSEG IS THE CURRENT JOB.

WHEN CLEARED:

* CLEARED FOR HISEG BY SCHEDULER IF A LOSEG BEING CONSIDERED
TO RUN IS CONNECTED TO A HISEG THAT HAS SWPRQ ON IN ITS JBTSTS AND I/O IS
NO LONGER ACTIVE

* CLEARED ON EVERY CALL TO SWAPPER IF THE SWAPPER HAS PREVIOUSLY SET
SWPRQ FOR LOSEG BECAUSE IT COULD NOT SWAP THE LOSEG OUT
BECAUSE OF ACTIVE I/O.

USAGE:

* A JOB IS CONSIDERED UNRUNNABLE IF SWPRQ IS ON FOR THE LOSEG

* IF SWPRQ IS ON FOR A HISEG, ROUTINE HMCHK WHICH IS CALLED FROM
THE SCHEDULER RUN SCAN AND SWAPPER INPUT SCAN WILL NOT ALLOW ANY
LOSEG OTHER THAN THE ONE WITH SEGSPL ON IN ITS JBTSTS
WORD TO RUN.

* UUO EXIT CALLS SCHEDULER IF SWPRQ IS ON IN JBTSTS FOR JOB

MEANING:

FOR LOSEGS: SWAPPER IS TRYING TO STOP I/O FOR JOB IN ORDER TO
SWAP IT OUT.

FOR HISEGS: 
I/O MUST BE STOPPED FOR A HISEG BECAUSE SOMEONE IS DOING A CORE
UUO TO CONTRACT THE HISEG.















                                       319
Text: BITS; P033 swapper bit descriptions                                 page 6

NAME:  SWPINP

WHEN SET:

* WHEN SWAP IN FOR LO OR HISEG IS ABOUT TO BE STARTED.

WHEN CLEARED:

* AFTER SWAP OPERATION FOR LO OR HISEG IS COMPLETE
(AT FININ OR FINOUT)
USAGE:

* COMMAND PENDING FOR A JOB IS DELAYED (BUT JOB IS NOT
PUT INTO COMMAND WAIT) IF SWPINP IS SET AND COMMAND EITHER
NEEDS JOB TO BE IN CORE OR NEEDS MINIMUM CORE (MINCOR) TO
BE ASSIGNED.

* ON CONTROL-C OR HALT COMMAND, DO NOT SKIP CHECK OF WHETHER
OR NOT JOB CAN BE STOPPED ACCORDING TO STATE CODE (DELAYN) IF SWPINP
IS ON, EVEN IF JOB'S PC IS IN USER MODE

* WHEN LOOKING FOR A FREE SEGMENT SLOT TO USE FOR A NEW HISEG,
DO NOT USE A SLOT WITH SNA OFF IN JBTSTS IF SWPINP IS ON.

* WHEN A DORMANT HISEG IS ABOUT TO BECOME ACTIVE, DON'T DECREMENT VIRTAL
FOR IT IF SWPINP IS ON. (WHY NOT?)

* IF SWPINP IS ON FOR A HISEG AND A JOB IS IN THE PROCESS OF
CONNECTING TO THE HISEG, SET HMRST FOR LOSEG

* DO NOT GIVE A JOB ANY SHARABLE RESOURCES IF SWPINP IS ON
FOR EITHER THE HI OR LO SEG AND
THE JOB IS IN A SHARABLE RESOURCE QUEUE (IN SCHEDULER)

* IF AFTER CALLING THE SWAPPER A JOB IS FOUND THAT HAS CORE AND
A CONNECTED HISEG WITH THE CORCNT BIT OFF IN THE LOSEG'S JBTSGN WORD
AND SWPINP IS ON IN JBTSTS FOR THE LOSEG, CRASH MONITOR

* IF SWPINP IS ON FOR LOSEG, IT IS UNRUNNABLE

* DO NOT RUN SEGSPL LOSEG IF HMRST IS ON FOR HISEG BUT
SWPINP IS ALSO ON FOR HISEG.

* CHECKED IN SWAPPER TO MAKE SURE A DORMANT SEGMENT IS REALLY DORMANT

1* DO NOT SWAP OUT LOSEGS OR HISEGS FOR WHICH SWPINP IS SET

1* CRASH MONITOR IF SWAP OPERATION IS COMPLETED FOR A JOB
AND SWPINP WASN'T ON

MEANING:






                                       320
Text: BITS; P033 swapper bit descriptions                                 page 7

NAME:  VIRTAL

INITIALIZATION:

INITIALIZED TO BE THE NUMBER OF PAGES ON ALL SWAPPING UNITS.

WHEN INCREMENTED:

* WHEN A JOB IS KILLED (ROUTINE JOBKL IN COMCON) VIRTAL
(AND CORTAL) IS INCREMENTED WHEN THE UPT IS GIVEN UP.

* WHEN A JOB DOES A CORE UUO TO DECREASE ITS SIZE

* WHEN A HISEG GOES DORMANT OR UNASSIGNED (EVEN THOUGH IF
IT GOES DORMANT ITS CORE AND SWAPPING SPACE ARE STILL USED)

* WHEN TRYING TO FIND A SEGMENT NUMBER FOR A NEW HISEG,
SOMETIMES IT IS NECESSARY TO WAIT FOR A SWAP IN PROGRESS
IS COMPLETED FOR A DORMANT SEGMENT (THIS IS THE LAST RESORT,
AFTER FIRST TRYING TO FIND A COMPLETELY FREE SLOT AND THEN TRYING
FOR ONE WITH DISK AND/OR CORE ASSIGNED).  IN THIS CASE,
THE JOB REQUESTING THE NEW HISEG TEMPORARILY CONNECTS TO THE
DORMANT SEGMENT WHICH IS BEING SWAPPED.  THE SWAP DONE ROUTINE
DOES NOT INCREMENT VIRTAL, SINCE THE WAITING LOSEG
IS NOW CONNECTED (SWPFIN???). THEREFORE VIRTAL MUST
BE INCREMENTED WHEN THE SWAP IS COMPLETE, JUST BEFORE THE LOSEG
USES THE NEW SLOT.


* AT FINOUT IN THE SWAPPER, VIRTAL IS INCREMENTED WHEN
A SWAPOUT OF A DORMANT OR IDLE HIGH SEGMENT IS COMPLETE
(WAS DECREMENTED WHEN DORMANT SEG WAS SWAPPED OUT SO NO ONE WOULD
ALLOCATE THE SPACE DURING THE SWAP OUT)

WHEN DECREMENTED:

* WHEN A JOB DOES A CORE UUO THAT SUCCESSFULLY INCREASES HIS
SIZE

* BY GETMIN WHEN IT GETS CORE FOR A COMMAND

* BY SWAPPER IF IT FINDS A PAGE IN THE SWAPPING SPACE WITH
AN ERROR

* WHEN LOSEG CONNECTS TO A DORMANT HISEG, DECREMENT VIRTAL
FOR THE DORMANT SEG UNLESS SWPINP WAS ON IN THE DORMANT
HISEG'S JBTSTS WORD (BECAUSE IT WAS ALREADY DECREMENTED WHEN DORMANT
SEG WAS SELECTED TO SWAP OUT).

* ON HISEG SWAP ERROR

* WHEN SWAPPING OUT A DORMANT SEGMENT, SO NO ONE ALLOCATES
THE SWAPPING SPACE THAT THE DORMANT SEGMENT IT BEING WRITTEN TO.

USAGE:


                                       321
Text: BITS; P033 swapper bit descriptions                                 page 8


* PRINTED OUT ON CORE COMMAND

* IF VIRTAL IS LESS THAN MONITOR SYMBOL LOGSIZ
(SIZE OF LOGIN PROGRAM) AND USER TRIES TO LOG IN, SYSTEM
PRINTS OUT AMOUNT OF VIRTUAL CORE LEFT AND DOES NOT LOG USER IN.

* USED TO HELP CALCULATE RETURN ARG FOR CORE UUO IF THERE IS NOT
ENOUGH CORE IN SYSTEM TO SATISFY USER'S FULL CORE LIMIT
(PVYCOR) IF HE WANTED IT.

* USED TO DETERMINE WHETHER JOB CAN EXPAND CORE
TO NEW SIZE IN CORE UUO

* USED BY GETMIN IN COMCON (GET MINUMUM AMOUNT OF CORE
FOR A COMMAND) TO SEE IF THERE IS ENOUGH CORE TO START THE COMMAND.

* WHEN A LOSEG IS CONNECTING TO A NEW BUT DORMANT
SEGMENT, AND THE SIZE OF THE DORMANT SEGMENT IS LARGER THAN
VIRTAL, THE LOSEG IS NOT ALLOWED TO CONNECT.
THIS HAPPENS IN THE CASE WHERE ANOTHER JOB HAS
BEEN GIVEN CORE THAT HAS CAUSED VIRTAL TO BE DECREMENTED
BELOW THE SIZE OF THE DORMANT SEGMENT BUT THAT JOB HAS NOT
BEEN SWAPPED OUT YET, SO THE DORMANT SEGMENT IS STILL AROUND.

MEANING:

NUMBER OF FREE PAGES OF SWAPPING SPACE LEFT, COUNTING
DORMANT SEGMENTS.  SAME AS AMOUNT OF VIRTUAL CORE LEFT ON SYSTEM
EXCEPT WHILE R,RUN,KJOB,GET COMMANDS ARE WAITING TO BE SWAPPED
IN, IN WHICH CASE VIRTAL HAS NOT BEEN DECREMENTED FOR THE
SWAPPING SPACE TO BE FREED YET.

























                                       322
Text: BITS; P033 swapper bit descriptions                                 page 9

NAME:  CORTAL

INITIALIZATION:

* INITIALIZED AT ONCE ONLY TIME TO BE THE NUMBER OF FREE PAGES
AVAILABLE FOR USERS (FREPGN IS ALSO SET TO THIS.)

WHEN INCREMENTED:

* AT JOBKL WHEN UPT CORE IS DEALLOCATED

* WHEN A HISEG GOES DORMANT OR IDLE

* WHEN DISCONNECTING FROM A HISEG JOB WAS TEMPORARILY CONNECTED
TO FOR THE PURPOSE OF WAITING FOR THE HISEG SWAP TO FINISH

* WHEN A LOSEG SWAPOUT IS COMPLETE

* WHEN A HISEG SWAPOUT IS COMPLETED AND THERE ARE LOSEGS NOT SWAPPED
OUT (IN-CORE COUNT IS UP AND LH(JBTSWI) .NE. 0) CONNECTED TO IT.

* ON A SWAP IN ERROR FOR A HISEG

* WHEN THE IN-CORE COUNT FOR A HISEG IS DECREMENTED
AND THE IN-CORE COUNT HAS GONE TO ZERO

* WHEN A JOB DOES A CORE UUO OR CORE COMMAND TO GIVE UP SOME
OF ITS ADDRESS SPACE

WHEN DECREMENTED:

* WHEN TEMPORARILY CONNECTING TO A DORMANT OR IDLE SEGMENT
THAT HAS SWPINP ON FOR IT FOR THE PURPOSE OF WAITING FOR THE
SWAP FOR THE SEGMENT TO FINISH.

* WHEN CONNECTING TO A HISEG THAT WAS PREVIOUSLY DORMANT OR IDLE

* WHEN SWAPPER ALLOCATES SOME FREE PAGES TO A JOB INSTEAD OF
SWAPPING SOMEONE OUT (AT ENOUGH).

* WHEN A JOB DOES A CORE UUO OR COMMAND TO REQUEST MORE CORE AND
THERE ARE ENOUGH FREE PAGES TO ALLOCATE THE CORE.

USAGE:

* SCNOUT IN THE SWAPPER COMPARES CORTAL WITH FREPGN TO DETERMINE
WHETHER OR NOT THERE ARE DORMANT OR IDLE SEGMENTS TO SWAP OUT


MEANING:

* NUMBER OF FREE+DORMANT+IDLE PAGES





                                       323
Text: BITS; P033 swapper bit descriptions                                page 10

NAME:  SEGSPL

WHEN SET:

* WHEN A JOB DOES A CORE UUO TO CONTRACT ITS WRITE-ENABLED
HISEG WHEN THAT HISEG HAS ACTIVE I/O IN PROGRESS

* WHEN A JOB EXPANDS ITS WRITABLE HISEG AND THERE ARE NOT ENOUGH FREE
PAGES OF CORE TO SATISFY THE REQUEST IMMEDIATELY, SEGSPL
IS SET SO THAT NO OTHER JOB CAN RUN BEFORE THE PAGE FAULT
LEVEL CODE CAN ZERO THE NEW PAGES. (HMRST IS ALSO SET FOR ALL
LOSEGS AND THE HISEG).

WHEN CLEARED:

USAGE:

*IF SCHEDULER  RUNS THE JOB WITH SEGSPL SET
AND HMRST WAS ON FOR THE HISEG, SEGSPL FOR THE JOB WILL BE CLEARED

* ROUTINE HMCHK IN SCHEDULER, WHICH IS CALLED IF A JOB'S HISEG
HAS HMRST ON, ONLY ALLOWS JOB WITH SEGSPL SET TO RUN WITH
THAT HISEG.  IF ANY OTHER JOB (ONE WITHOUT SEGSPL ON) TRIES
TO BE RUN, IT WILL BE PLACED AT THE END OF THE QUEUE IN WHICH
THE JOB WITH SEGSPL IS.
THIS IS TO ALLOW THE SWAPPER TO PICK ONE OF THE NON-SPECIAL LOSEGS
TO SWAP OUT SO THAT CORE CAN BE ALLOCATED TO THE HISEG

THIS IS ALSO TO PREVENT A JOB CONTRACTING A HISEG THAT IS IN
A LOWER QUEUE POSITION THAN ALL OTHER LOSEGS CONNECTED TO THE
HISEG FROM BEING SWAPPED OUT AND THEN PREVENTED FROM BEING SWAPPED
IN BY THE LOSEGS (BECAUSE SWAPPER STOPS OUTPUT SCAN WHEN IT
REACHES THE JOB THAT IT IS TRYING TO SWAP IN)

MEANING:

JOB IS TRYING TO EITHER EXPAND A HISEG WHEN THERE ARE NO 
FREE PAGES TO USE (THUS NECESSITATING SWAP OUT OF SOME OTHER
JOB) OR JOB IS TRYING TO CONTRACT A HISEG THAT HAS ACTIVE I/O.


















                                       324
Text: BITS; P033 swapper bit descriptions                                page 11

NAME:  PGYADR

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       325
Text: BITS; P033 swapper bit descriptions                                page 12

NAME:  PGYBPL

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       326
Text: BITS; P033 swapper bit descriptions                                page 13

NAME:  PGYDRT

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       327
Text: BITS; P033 swapper bit descriptions                                page 14

NAME:  PGYER2

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       328
Text: BITS; P033 swapper bit descriptions                                page 15

NAME:  PGYERR

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       329
Text: BITS; P033 swapper bit descriptions                                page 16

NAME:  PGYFPL

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       330
Text: BITS; P033 swapper bit descriptions                                page 17

NAME:  PGYIO

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       331
Text: BITS; P033 swapper bit descriptions                                page 18

NAME:  PGYJOB

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       332
Text: BITS; P033 swapper bit descriptions                                page 19

NAME:  PGYLNK

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       333
Text: BITS; P033 swapper bit descriptions                                page 20

NAME:  PGYLOG

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       334
Text: BITS; P033 swapper bit descriptions                                page 21

NAME:  PGYNXM

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       335
Text: BITS; P033 swapper bit descriptions                                page 22

NAME:  PGYUNI

WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:
















































                                       336
Text: BITS; P033 swapper bit descriptions                                page 23

NAME:  LH(JBTSWI)

WHEN SET:

WHEN CLEARED:

USAGE:

* FOR HISEGS, USED AS LINK TO FIRST LOW SEGMENT IN CORE (?)
CONNECTED TO THIS HISEG.
(REST OF LINKS ARE MADE THRU BYTE POINTER JBYLNK, WHICH POINTS
TO A BYTE IN JBTSGN

* USED BY SETHMR TO SET HMRST FOR ALL LOSEGS CONNECTED TO A HISEG
(FIRST LOSEG CONNECTED)

* FOR LOSEGS, IN CORE PROTECT TIME IS KEPT IN LH(JBTSWI)

MEANING:






































                                       337
Text: BITS; P033 swapper bit descriptions                                page 24

NAME:  RH(JBTSWI)

WHEN SET:
* SET AT PFSWPP IN PAGE FAULT CODE TO NUMBER OF PAGES NEEDED FOR A LO OR HISEG TO SWAP IN
IN PAGE FAULT CODE

* IN ROUTINE GETMIN, SET TO ABSOLUTE 2 (NEED TO CHANGE FOR PAGING)
AND MRQ SET IF THERE ARE NOT 2 FREE PAGES IN CORE TO ALLOCATE
TO JOB WITH NO CORE AT ALL

* IN SCHEDULER, IF WE DECIDE TO RUN A JOB THAT HAS A NON:ZERO
RH(JBTSWI), AVDSWO (AVOIDED SWAPPING PAGES OUT) IS INCREMENTED
FROM LH(JBTUPM) FOR JOB, AND RH(JBTSWI) IS CLEARED.

WHEN CLEARED:

USAGE:

MEANING:






































                                       338
Text: BITS; P033 swapper bit descriptions                                page 25

NAME:  CORCNT (IN LOSEG JBTSGN WORD)

WHEN SET:

* WHEN ROUTINE ADDCNT IN SWAPPER IS CALLED TO INCREMENT HISEG'S IN CORE
COUNT.

WHEN CLEARED:

* WHEN ROUTINE SUBCNT IN SWAPPER IS CALLED TO DECREMENT HISEG'S IN
CORE COUNT.

USAGE:

* IF CORCNT IS 0 FOR ANY HISEG THAT IS CONNECTED TO A LOSEG
WITH CORE AND SWPINP IS OFF FOR THE LOSEG
THEN CRASH MONITOR (ALL THIS IS CHECKED DIRECTLY AFTER SWAPPER IS CALLED)

* ROUTINE ADDCNT RETURNS WITHOUT DOING ANYTHING IF CORCNT IS 1

* ROUTINE SUBCNT RETURNS WITHOUT DOING ANYTHING IF CORCNT IS 0

MEANING:

IN CORE COUNT FOR THIS JOB'S HISEG HAS BEEN INCREMENTED FOR THIS
JOB.































                                       339
Text: BITS; P033 swapper bit descriptions                                page 26

NAME:  UPTREL

HOW SET:

* SET TO -1 AT KILUPT AS A FLAG TO CONTEXT SWITCHER THAT JOB
NO LONGER EXISTS

* SET TO NEW SIZE OF LOSEG DURING A REMAP UUO

* WHEN JOB DOES CORE UUO, NEW SIZE OF LOSEG STORED

* IN ROUTINES ONLUPS AND ONLUPT IN CORE1 WHICH DEALLOCATE ALL CORE
EXCEPT FOR UPT

* IN ROUTINE GETMIN WHICH ALLOCATES THE MINIMUM AMOUNT OF CORE
FOR COMMANDS THAT REQUIRE THAT ACTION

USAGE:

* IF UPTREL FOR A JOB IS NEGATIVE AFTER CHANNEL 7 ROUTINE IS CALLED,
IT IS A SPECIAL FLAG INDICATING THAT THE JOB HAS LOGGED OUT, SO
LOCATION JOB IS SET TO -1

* DO NOT SAVE JOB'S ACS WHEN CONTEXT SWITCHING
AWAY FROM IT AND UPTREL IS .LE. 0

* DO NOT RESTORE JOB'S ACS IF CONTEXT SWITCHING TO IT AND
UPTREL IS .LE. 0

* USED BY SAVGET AS UPPER LIMIT OF PRESENT CORE AREA

* AT KILFIN IN SEGCON, UPTREL USED TO CHECK TO SEE WHETHER
START ADDR IS IN HI OR LOSEG. (BETTER GO AWAY WITH NEW VIRTUAL 
MONITOR)

* USED IN LOWCHK(RUN UUO, RUN GET COMMANDS, ETC)
IN SEGCON AS HIGHEST ADDRESSIN LOSEG TO DETERMINE WHICH SEG PC WAS IN

* USED IN INPSEG (INPUT HIGH SEGMENT INTO LOW SEG AND REMAP)
MEANING:

















                                       340
Text: BITS; P033 swapper bit descriptions                                page 27

NAME:  IMGIN
WHEN SET:

* AT UREMAP WHEN ADJUSTING LOSEG SIZE TO NEW SMALLER
NUMBER (UPTREL ALSO UPDATED)

* AT UREMAP WHEN SETTING NEW HISEG SIZE (UP0HRL ALSO SET)

* ZERO IMGIN FOR HISEG ON SWAP IN ERROR FOR HISEG (AT SWPER1
IN SCHED1)

* SET AT CORXPN IN CORE UUO ROUTINE TO NEW SIZE, %UPT+UPTREL
NOT UPDATED, UPTREL UPDATED BY CALLER OF UCOR1,
UCOR2.  CALLS TO ONLUPT OR ONLUPS CLEAR UPTREL.

* SET TO 3 AT GETMIN (ABSOLUTE) IF USER IMGIN HAD .LE. 3 PAGES
(SHOULD BE ONLY LESS THAN?) AND UPTREL IS UPDATED
IFF JOB'S JBTUPM IS NON-ZERO.

WHEN CLEARED:

USAGE:

* AT UREMAP TO DETERMINE OLD SIZE OF LOSEG (THIS MIGHT
BE CHANGED TO LOOK AT UPTREL INSTEAD)

* AT UREMAP, IF LOSEG IMGIN IS LESS THAN LOSEG IMGOUT,
GIVE IMGOUT-IMGIN(NEW) SWAPPING PAGES TO THE NEW HISEG

* AT FNDSGN IN SEGCON, USE IMGIN TO UPDATE VIRTAL WHEN
DISCONNECTING TO THE SEGMENT THAT WAS TEMPORARILY CONNECTED
TO IN ORDER TO WAIT FOR SWAP DONE

* AT SHARE2 IN SEGCON WHEN CONNECTING TO A NEW HISEG, USE
HISEG'S IMGIN TO UPDATE JOBHRL

* IN PCHECK COMMAND ROUTINE, USE TO GET JOB'S SIZE

* IN CORE 0 COMMAND, USE TO CHECK WHETHER OR NOT THERE
IS ANYTHING MORE THAN A UPT

* ROUTINE SEGSIZ IN COMCON RETURNS LO OR HISEG IMGIN IF ITS
NONZERO, OTHERWISE RETURNS LH(JBTUPM)+1 IF LH(JBTUPM) IS NON-ZERO,
OTHERWISE RETURNS ZERO.
(MAY BE LEFTOVER AND UNNECCESARY)

* IN CLOCK1 AT CIP96 (WHEN HMRST WAS ON FOR JOB'S HISEG)
USE IMGIN TO SETUP JOBHRL

* USE IMGIN TO UPDATE COUNT OF PAGES THAT WE AVOIDED SWAPPING IN
(.+7 REF IN SWPO61 IN SCHED1)

* USED IN CORUHI IN CORE1 (PROCESS HISEG CORE REQUEST) TO SEE
WHETHER OR NOT HISEG IS CONTRACTING OR EXPANDING



                                       341
Text: BITS; P033 swapper bit descriptions                                page 28

* IN EXIT CODE FOR CORE UUO, USE IMGIN FOR HISEG AND LOSEG TO RETURN
AMOUNT OF CORE JOB CAN HAVE

* USED IN UCOR1 ROUTINE TO SEE IF JOB IS EXPANDING OR CONTRACTING

* USED IN ROUTINE SUMCHK TO SEE IF CORE REQUEST CAN BE SATISFIED
(MAY NOT BE BECAUSE JOB IS NOT ALLOWED TO HAVE THAT MUCH CORE)

* USED IN PAGE FAULT CODE TO SEE IF THE PAGE FAULT
IS A REAL ERROR

* USED IN GETMIN ( CORE1) TO SEE IF USER THINKS
HE HAS GREATER THAN THREE PAGES. IF SO, CALL UCOR2 AND ASK
FOR THREE PAGES

MEANING:

SIZE THAT LO OR HI SEGMENT THINKS IT IS, LH(JBTUPM) BEING ACTUAL SIZE IN
CORE.






































                                       342
Text: BITS; P033 swapper bit descriptions                                page 29

NAME:  END%%%
WHEN SET:

WHEN CLEARED:

USAGE:

MEANING:

















































                                       343
Menu: PHILOSOPY; Architectural Notes for Tymcom-X                         page 1

345    GENERAL         General Notes about this node
346    NETWORK         Network Design philosophy
347    INTERRUPT       Interrupts and Sleeping philosophy
348    UUOFORMAT       Monitor Call Format Design philosophy
348    FRAMECTL        Frame Control philosopy
351    PAGING          Paging philosopy
353    FILESYSTEM      File System philosophy
355    DEVICES         Adding New Devices and Device drivers
356    ACCONVENTIONS   AC conventions
357    CODING          Coding Guidelines
359    CONDITIONALS    Guidelines for conditional assemblies, etc














































                                       344
Text: GENERAL; General Notes about this node                              page 1


This INFO node is intended to give the monitor being a feel for
the general design principles of the TYMCOM-X monitor which are
relatively stable. It is certainly not all inclusive, and
is not guaranteed to be entirely correct or consistent.
It is an attempt to expose some of the thinking, much of it
reconstructed, which went into the system at its various points
of conception. Remember: there is no substitue for perceptiveness.
The best guideline for gaining a grasp of design principles of
any complex structure is to look around and see if you can discover
the principles at work by noticing patterns.
Sometimes design principles are not universally applied, or become
obsolete. Therefore, it is our job to find the patterns that exist
along with their exceptions, evaluate the current utility of
the pattern for relevance in current time, and then make
the desired change with this in mind. If you are too quick to
say that something was done mindlessly or without reason,
you may be overlooking some important principle which, if ignored,
could result in the eventual structural disintegration of
the TYMCOM-X product. So think twice before departing from current
patterns. However, don't be afraid to innovate if you have invested
enough thought to assure yourself there is a better, more structured
way to do things. Above all, leave the product more organized than
you found it.

































                                       345
Text: NETWORK; Network Design philosophy                                  page 1


There is a good reason why AUXCALS don't in general put the job into
wait - the program may be driving many aux circuits and we don't want
any other circuits to not get serviced becaused one other one tied
up the job with TI wait.  Good programs who want to go into wait
if there is no terminal attached should do the standard versions
of the AUXCAL function desired, if possible. (e.g. INCHRW,
OUTCHR, etc.)

The reason that SCNSER STOPCDs on bad message types (or bad params
for legal types) instead of ignoring them is that there is no
good way for SCNSER to determine how many IRING words to ignore.
However, if one could somehow restart the base and hope that it
will behave (assuming that it is not a problem in the monitor)
SCNSER could just reset the pointers and zap all circuits, start
from the beginning.









































                                       346
Text: INTERRUPT; Interrupts and Sleeping philosophy                       page 1


*The interrupt system is designed soas to not require complexity
in the system to pass the interrupt reason from a possible
system interrupt level up to the program's user level. This would
require a variable amount of buffering. Instead, the user program
is responsible for polling all possible interrupt causes
for a software interrupt channel when such an interrupt occurs.

Whenever possible, monitor designers should provide UUOs like
POLPRT if there is a potential for a large number of causes
being assigned to one channel. This way, only one UUO dispatch
per interrupt reason need be suffered, as opposed to as many UUO
dispatches as there were possible causes if no POLPRT UUO
analogue existed.

If the program can get away with it, it can assign one interrupt cause
per channel, so that it automatically knows when an interrupt comes
in which cause it was for.  In general, it is a good idea for the
program to check the existence of the cause with a UUO for safety.

Philosophy of HIBER: The HIBER UUO is always guaranteed to wake you
up at least as often as you need to be to see the significant events
you are trying to sleep for. This often means waking up from a HIBER
when in actual fact no event has occured. The program is ALWAYS
responsible for checking the causes to make sure one occurred when
it is awakened, including the timer.

The 3 "gears" of HIBER (milliseconds, seconds, minutes) can also
wake the program up early. In the case of milliseconds,
the program will be awakened at the nearest
60th of a second boundary less or equal to the millisecond sleep
time.
The same is true of minutes and seconds - the nearest whole minute
or second without exceeding the HIBER time specified is the time
when the job gets awakened. Therefore, one should use the smallest
unit possible when waiting for a certain amount of time with HIBER.





















                                       347
Text: FRAMECTL; Frame Control philosopy                                   page 1


As of the P034 version of the monitor, a significant internal
architectural change has been made to the monitor. Handles are
now the primary representation of what are now called "frames"
and what used to be called "jobs". All access for both inter and
intra job information and control are (and should be in the future)
done through handles. There are frame type handles, which represent
the creator of the frame they point to or a friend of the creator
which represent access to the frame they point to but not necessarily
the process which is currently running in it,
process type handles, which represent access over the process running
in the frame but not access to the frame itself, license type handles,
which represent access to both the frame and the process given
to some external process as a result of its having certain licenses.
License itself should be viewed as a license handle with certain access
bits set in the handle according to the license bits.
Another handle type which doesn't really exist in the form of a frame
descriptor but exists functionally is the external type handle.
This handle represents the kind of access that a console terminal
has over the frame and/or process it is connected to. It is different
from a process type handle in that it has access to the frame itself,
different from a license type handle, and different from a frame type
handle, in that the effective rights bits change in the external
handle with the state of the current console control bits (JACCT,
JACCT2, control-C intercept). Also, the ability to perform certain
commands on a frame or process would be controlled via the
external handle's rights bits settings. (e.g. examine command
only executable if external handle over the frame had read
address space). When SCNSER gets a control-C, what can effectively
be imagined to happen is that it finds the external handle for
the frame currently attached to the port, and performs the
appropriate action depending on whether or not the holder of the
external type handle is allowed to do the operation. The external handle
rights would be set by the state of the bits in the target frame rather
than the external handle holder - just like MFR.






















                                       348
Text: FRAMECTL; Frame Control philosopy                                   page 2

The general philosophy for when a job can be stopped is as follows:
it should be possible for a user provided subsystem to prevent
anyone but a licensed frame or process from stopping the subsystem.
Reason is that a user subsystem may give out resources to various
processes participating in the subsystem, and to allow a user of
the subsystem to stop the process while it has a subsystem interlock
would potentially impede or totally stop the entire subsystem.
Therefore, as of this date, the fact that the HALT command still works
even if JACCT2 is set is a loophole. It is unreasonable to expect
the subsystem to try to protect itself from users who hang up and
then reattach via the ATTACH command to the frame they hung up on.
At one point it was suggested that LOGIN not allow them to attach
to the job in monitor mode, but this doesn't prevent them from
using the ATTACH command, then saying HALT. It is necessary to
provide a way to ensure a subsystem that none of the processes
participating in the subsystem can be stopped by other than
licensed frames or processes.








































                                       349
Text: FRAMECTL; Frame Control philosopy                                   page 3

JACCT is the highest level of unstoppability - it should only be
used for frames and processes which are part of the system
(such as CHKPNT, PJ, etc.). This is true because JACCT jobs cannot
be hung, whereas JACCT2 jobs can be.

Until EXE files come into being, the file protection of the object file determines
the MFR setting when the process is setup from the object file.
Notice that whatever the MFR setting is, or when EXE files come into
existence whatever the initial MFR specification is, it must be
the maximum rights that the process is willing to give out. This is
because the process cannot prevent holders of frame handles from
making process handles or using the frame handles under the old MFR
before they get a chance to run and set the MFR down to the desired setting.
Also note that any transition in a process which makes it want to protect
itself in a way that it did not have to before will necessitate
invalidation of all current process handles and setting the MFR down
to the new lower access level. Invalidation of all process handles
is accomplished by having the process increment its own PNO (process
number).

Someday, a processes rights over the frame it runs in will be
limited by something called self rights. It is good to keep this
in mind when designing new extensions to the access rights mechanism.


































                                       350
Text: PAGING; Paging philosopy                                            page 1

PAGING OBSERVATIONS
-------------------

ONLY REASON LMA CHAIN EXISTS IS TO BE ABLE TO TURN OFF "W"
BITS FOR ACTIVE LMAP SLOTS WHEN PAGE THEY ARE USING GOES FROM
DIRTY TO CLEAN.  OTHERWISE, COULD LEAVE ONE ACTIVE UNSHARED
SLOT AROUND AS LONG AS OTHER JOBS THAT MAPPED THE PAGE
CREATED SPT ENTRY WITH COUNT OF 2. REMOVE WOULD HAVE TO CHECK
THE SPT EVEN FOR UNSHARED PAGES THEN.

ONLY REASON SPT EXISTS IS TO KNOW WHEN TO TURN OFF "M"
BIT IN SAT, WHICH IS NECESSARY TO KNOW IN THE CASE OF SHARED
PRIVATE PAGES AND FILE PAGES THAT HAVE BEEN DELETED WHILE MAPPED
(I.E. "F" BIT IS OFF).

CAN ALWAYS INCREMENT THE USE COUNT OF A CORE PAGE THAT IS DIRTY.
IF USE COUNT IS UP, CAN ALWAYS INCREMENT IT MORE. IF USE COUNT
IS ZERO AND NO SWAPPING IN PROGRESS (DIRTY FREE), CAN ALWAYS
INCREMENT USE COUNT, DECREMENT DFRPGN AND PUT PAGE ON USE
LIST.  IF THE PAGE BEING ACTIVATED IS VIRGIN, IT WILL BE
ZEROED AFTERWARDS. IF PAGE HAS PGYSOP SET, IT CANNOT BE
INCLUDED IN RIPPGN OR CAPPGN, SINCE THOSE COUNTS ONLY
INCLUDE CLEAN PAGES (WHEN RIPPGN GETS INCREMENTED, ALL USERS
ARE DEACTIVATED FIRST, THUS NO ONE GETS THE CHANCE TO
DIRTY THE PAGE AFTER SWPIO IS CALLED, UNLESS THE PAGE IS
STOLEN AND ACTIVATED, IN WHICH CASE RIPPGN WILL HAVE BEEN
DECREMENTED.

NEED A SEPARATE PGE OUTPUT WAIT MECHANISM SO THAT VALIDATE
ONLY WAITS FOR ONE OUTPUT TO COMPLETE RATHER THAN DEPENDING
ON DIRECT I/O AND SWAP OUT I/O NOT TO OCCUR AGAIN.

NOTE THAT IN VALIDATE WAIT SECTION, CAN'T TELL THE DIFFERENCE
BETWEEN A PAGE THAT WAS STARTED OUT BY THE VALIDATE START
SECTION (PGYSOP SET, CLEAN) AND A PAGE THAT WAS OK WHEN
WE ENTERED VALIDATE BUT GOT DIRTY AND STARTED OUT
AFTER WE ENTERED VALIDATE (PGYSOP SET, CLEAN).

IS THERE A PROBLEM WITH NOT FIXING A VIRGIN PAGE UNTIL
JOB THAT VIOLATED IT RUNS AGAIN? NO, THE FIRST JOB
THAT RUNS AFTER CALLING THE SWAPPER WILL FIX SPT VIRGIN
BIT WHICH WILL STOP OTHER JOBS FROM ZEROING THE PAGE AGAIN.
SPT ENTRY NEVER GOES AWAY UNTIL LAST JOB REMOVES PGE,
SO WE DON'T LOSE THE FLAG. THE ROUTINE CALLED FIRST UPDATES
THE STATUS OF THE UNSHARED SLOT TO SHARED IF AN SPT ENTRY
EXISTS, SO IF AN UNSHARED SLOT WAITED FOR SWAPPER AND THEN
OTHERS MAPPED, CREATING SPT ENTRY AND THEN THEY WAITED TOO
AND ORIGINAL UNSHARED SLOT WAKES UP FIRST, UNSHARED SLOT WILL
SEE THE SPT ENTRY AND UPDATE THE SLOT STATUS TO SHARED.

REASONS FOR "A" BIT BEING OFF:
	1) REF BIT = 0
	2) PAGE NOT IN UWS
	3) SWAP ERROR
	4) PAGE ACTIVE BUT STILL VIRGIN


                                       351
Text: PAGING; Paging philosopy                                            page 2

	5) NOT ACTIVE
	6) MONITOR DOING REFERENCE CHECK (?) (MAY NEED ANOTHER LMAP BIT)
	7) SWAP IN IN PROGRESS.

REASONS FOR "W" BIT BEING OFF:
	1) CLEAN PAGE
	2) CURRENT PROTECTION = COW, READ ONLY

VIRGIN BIT IS ONLY USED FOR PRIVATE PAGES, NEVER FOR FILE
PAGES. VIRGIN BIT IN LMAP = 0 MEANS PAGE IS NOT VIRGIN.
VIRGIN BIT IN LMAP = 1 MEANS ITS VIRGIN IF UNSHARED
(CANNOT HAVE SPT ENTRY IF VIRGIN AND UNSHARED SINCE
ALL PRIVATE PAGES HAVE STATUS = SHARED IF ANY
OF THEM DO, I.E. THERE CANNOT BE A SINGLE UNSHARED SLOT
AS WITH FILE PAGES), MEANS MUST LOOK AT SPT VIRGIN BIT
IF SLOT IS SHARED, WHICH IS EASY SINCE SPT POINTER IS IN SLOT.

NOTE THAT ALL ROUTINES THAT CAUSE PRIVATE PAGES TO BECOME SHARED
(CURRENTLY REPLICATE, LATER MAYBE GATE SETUP CODE) MUST
CHANGE THE STATUS OF THE ORIGINAL SLOT FROM UNSHARED TO
SHARED (SEE ABOVE NOTE).

NOTE THAT JOB DOESN'T HAVE TO HAVE ACTIVE LMAP SLOT
IN ORDER TO BE IN THE PGYPGO LIST.

CAN NO LONGER SUPERCEDE A HISEG THAT A JOB HAS
PAGES MAPPED FOR WRITE FROM, SINCE ATBMWC IS NON-ZERO.

ONE MUST BE CAREFUL OF HAVING LMAP DATA IN P3 AND P4
AND THEN RESCHEDULING IF THE LMAP SLOT IS ACTIVE.
IF INACTIVE, OK, BECAUSE NO ONE ELSE WILL ACTIVATE
THAT SLOT, BUT IF ACTIVE, SWAPPER MAY DECIDE TO DEACTIVATE IT.

Disk page can have F bit off and slots can have a file ATB instead
of a dummy ATB. So max write count can still be up for a file even
though none of its current pages are being written (all of them
deleted). The hang up is that the file's current ATB is used
to keep track of all the pages that were ever mapped from it
which are still mapped by users.

Problem: tried to create anumber of pages reserved for quick I/O starts.
ran into trouble:
1) code was assuming if CAVPGN=0, and knew of a page
on CFRLST, then CRSPGN must be up
2) In SWIBKO, assumed tat if N pages were stolen
from CRSPGN, then deactivating all pages would return
them to CAVPGN. No longer true.

Can we ue PGYLST instead of checking PGYUSE and PGYSIP and SOP?








                                       352
Text: FILESYSTEM; File System philosophy                                  page 1


Philosophy of reporting various errors in data and RIBs: It would
be difficult for the monitor to keep track of the total number
of data or RIB pages that were bad in all files for a directory,
since it would require a set of counts for each directory saing
how many RIB and DATA errors there were in all the files in
that directory. It is also difficult for the monitor to keep
track of all the data errors in each file. Therefore, the philosophy
that has been adopted is as follows: The monitor guarantees that
it will retain the information as to bad data and RIB pages in
all files in a directory until a program has had a chance to see
the relevant error bit.
As soon as the program has had a chance to see the error (even if
it is too stupid to report it) the monitor feels free to get rid of
the information.

An example of this is the way output errors are handled for
files. There is an output error hash table which keeps track of
all output errors which occur in the system.  As soon as the last
person having that file page mapped removes the page, the entry
is deleted out of the OHT. (The bit in the file that says there
was an error will remain on until the next person logs into or
GFDs to that directory, at which time the bit in the UFD that says
there are damaged files will be cleared - another example of show the
user the error and then clear the error bits). The bit in the file's
RIB that says there was some sort of error in the file will remain on
for the life of the file, unless a user clears the bit, but which
page or pages are in error is not given to the user from the RIB -
he must notice the errors when they occur and log them himself.
(As a convenience and for historical purposes, RIBELB does contain
the last disk page address which had some sort of error - but
there might be prior pages which had errors whose disk addresses
were overwritten inside RIBELB by the newer ones.
























                                       353
Text: FILESYSTEM; File System philosophy                                  page 2

About protection on files: because of PIDs, it cannot be assumed
that owner has full access over his own files. Therefore, cannot
do things like assume protection was all rd no on a file with
a RIB error. Only license should allow someone to delete a file
with a rib error. This would seem to indicate that a user can never
be allowed to delete a RIB error file, since it may have been in
his directory or a directory that he can GFD to but it had
a PID that he did not have access to.

















































                                       354
Text: DEVICES; Adding New Devices and Device drivers                      page 1


Symbols should be constructed and added to the hardware configuration
files which specify the number of devices. If the device has several
levels (such as disk, where there is a channel, controller, subcontroller,
device structuring) seperate symbols should be named if the monitor
has to be aware of those components of the device. (See the symbols
for disk for an example). So, if there were a device FOO,
a symbol FOON would be defined to be the number of devices of the
type FOO.

A device dependent module (in this example, FOOSER) should be created.
If a particular monitor configuration doesn't include device FOO,
a /NOLOAD switch should be set on that line of the file. In COMMON,
an IFE FOON,< followed by dummy definitions for any globals
in FOOSER which must be satisfied (e.g. XP FOOINI,CPOPJ) should appear.
Try to follow some reasonable naming conventions when deciding the
names of major routine names, etc, such as xxxINI for the initialization
routine for device xxx. Again, the best way to do this is to
look at an example in the monitor. (If there is a strong reason
to depart from the conventions, then by all means do so. See if
you can get someone else to agree with you before you do something
drastic.)

When reasonable, keep device dependent routines in device dependent
modules, not in device independent modules, even if it costs
a few instructions. This will pay off in the future when we can
still read a device independent module because it is not littered
with myriads of conditionals. Also, it is a good idea to create
a new symbols directly tied to a device rather than assuming
a particular device appears only with a particular processor
(unless that device is integrally a part of that processor
and no similar device will ever be likely to appear on another
type of processor).
























                                       355
Text: ACCONVENTIONS; AC conventions                                       page 1


AC conventions in the monitor are loose enough to allow flexibility
for each subsystem's particular needs. The only global AC conventions
that exist in the monitor is that P is used as a push down list pointer.

At UUO level, the address of the argument of the UUO is kept in ac M
most of the time. The frame number appears in J most of the time,
but this is not always the case, so be careful. Bugs have appeared
where JBT tables were indexed by kontroller data block addresses.

In most UUO level routines and some interrupt level ones, P1-P4
are used for top level preserved registers. Any routine beyond
a certain level is responsible for saving these registers if
he wants to use them. Going along with this, T1-T4 are temporary,
and most things are written not to keep data in them across calls
to subroutines unless explicitly necessary. The data in P1-P4 is
generally variable.

As far as other registers go, they are usually assigned to contain
specific data structure addresses or values.

In device code, F contains DDB, W contains channel number sometimes,
S contains I/O status,and PG, U, W contain various permanent things.
Depending on the code, PG U and W may also contain temporary things
if they are not needed for permanent storage, but if anything
is used for permanent storage, they are used first. THE LAST
SET OF REGISTERS USED FOR HIGHER LEVEL PRESERVED REGISTERS are
T1-T4, that is, they should be held for temporary calculations
until the last moment.

In the paging and core allocation subsystem, P3 and P4 are used
to contain the "LMAP slot", and W contains the page number from
which that slot came. PG contains the physical core page number
if applicable.

In SCNSER, U contains the line data block, LDB in the right half,
and some bits in the left half of U.

The AC conventions in the file system vary somewhat, but generally
P2 contains the ATB address (sometimes T2 if the ATB is not needed
for long, but most of the byte pointers are indexed by P2), P3
contains the FNB address, and P4 contains the DRB address. (Don't assume
that these conventions are strictly followed - always check to
be sure in the specific case you are looking at.)
A noteable exception to the temporaryness of the T regs: T2 is
almost universally used to contain retrieval pointers in the file system.

Arguments to subroutines that do not usually expect to be preserved
appear in the T registers.  It is not necessary to copy a fairly
well known data structure, such as DDBs, etc, into T acs before
calling subroutines. The registers which are permanently allocated to specific
data structures are usually globally available to all levels of
subroutines.




                                       356
Text: CODING; Coding Guidelines                                           page 1


Try to avoid putting too much code into literals - it makes
the code harder to find while debugging. Especially avoid
calling subroutines in literals, or putting STOPCDs there.

Indention of instructions after subroutine calls helps code
readability.

Document the general flavor and details which are hard to
derive from the code at the head of subroutines, along with
the local AC conventions and anything else you might find
helpful in reading code yourself. Uncommented code is generally
taken as a negative reflection on the coder! Spacing
the comments and instructions to line up nicely is generally
easier on the eye. In the monitor, for the sake of consistency,
upper case is generally used in instructions, although it is
perfectly fine to use upper and lower case in comments.

If a piece of code is written making some assumptions about
the value of symbols, a conditional assembly which causes the
module not to assemble or to print a warning message if
the value is changed is a good idea.

Creation of symbols which are meaningful and/or mnemonic
helps reading and remembering the code. Symbol names can help
the programmer remember what the symbol stands for.

The general convention for creating very local symbols (for loops,
one or two jumps, etc) is to somehow shorten the name to 5 characters,
and add 1,2,3, . . . to the end of the symbol. For example, routine
FILRIB could have symbols FILRB1, FILRB2, FILRB3, etc. This helps
locate a symbol more quickly when looking at dumps or code.

Experience indicates it is generally not a good idea to use
.+n for values of n greater than 2. This is because code gets
added between the jump and/or reference and the destination,
and the code becomes wrong because of the context sensitivity
of the .+n.

When generating symbols for data structures, the first three
characters have been generally used to denote the data structure,
and the next three to indicate the item within the data structure.
For example, DEVATB, DEVFIL, FNBRIB, FNBNAM, DRBALC, DRBSTS, ATBSTS,
ATBLCW, LDBDCH, LDBMOD, etc.

The convention for byte pointers to data structures has been
the first two characters of the data structure, a Y, and the
name of the item. Examples: ATYCNT, FNYUFP. For bits, the first
two characters followed by P: ATPMXW, FNPNX.








                                       357
Text: CODING; Coding Guidelines                                           page 2

In general, there was an old TOPS10 convention that routines that
obeyed the temporariness of the T registers had six character names,
and those that preserved the T registers had five character names.
I don't believe this is followed much anymore, but its nice to know.

You will find that most symbols in the monitor are six characters,
five characters the next most common use. This is to help keep the
labels and symbols unique. The only place where three and four character
symbols are used frequently are for global symbols where the first
three characters denote something - FTAN, for example. Also,
queue names, names of bits in devices, are sometimes given shorter names.
Usually this is because these types of symbols are used together in
a line and the short symbols makes the line shorter, for example,
	TRNN	T1,BSY!CUENT!DCHK
although not all symbols used in this manner are short ones.
AC names are made as short as possible in keeping with the fact
that they appear in almost every instruction.

According to S.MAC, on June 1, 1971 all AC names were merged to
one master set. It was found by experience to be confusing to
have each subsystem have its own names for the registers, since
this contributed to using registers without saving them.
Therefore, we can keep from re-introducing this confusion
by keeping ourselves from re-introducing the source of the confusion.

Use of magic numbers is obscure and counter-productive. Use of number
constants does not appear in the CREF, therefore researchers of
the code can miss an important reference to a flag, etc. Example:

	MOVSI	T1,100000	;GET DESTROY THE FILE STRUCTURE FLAG
	IORM	T1,STRDDB+STRBTS	;SET IT.

The only hope for someone to find a reference like this is to look
at all references to STRBTS, and even then, the clever programmer
can be more diabolical and say

	MOVSI	T1,100000
	IORM	T1,STRDDB+1

!

















                                       358
Text: CONDITIONALS; Guidelines for conditional assemblies, etc            page 1


The file S.MAC contains all totally global and unconditional parameter
definitions for the monitor. No conditional code should appear in
this file for specialized processors, devices, etc.

The files ??SYM.MAC, where ?? represents the kind of processor:
KS, KI, and KL being the current possibilities, contain macros
and other conditional definitions which pertain to just those
processors. These files are where the symbols which drive the CPU
conditional macros are defined (CPUTYP, CPUKI, CPUKS, CPUKL).
Sometimes there are duplications with slight variations between
the different processor dependent parameter files.
Rather than put something that has processor dependencies into S.MAC,
we put the almost identical things into the processor dependent files.
The idea of these files is that one only needs to assemble
the monitor with a different processor dependent parameter file
and one will wind up with a monitor which will run on that processor.

Note that exec DDT is supposed to be able to run on any processor
it finds itself on, therefore do not put processor conditional assemblies
into DDT.

Device dependent code that is conditional should either be seperated
into its own module and loaded if and only if that device is present,
or should appear under a conditional in COMMOD.MAC.
Usually, only processor dependent conditionals appear in COMMON.MAC.

The only file which should contain definitions for device dependent symbols
is the CONFIG.MAC file. CONFIG.MAC is not assembled with anything
other than COMMON and COMMOD, so this limits device dependent and
configuration dependent code to these modules and to any
seperate module which can be loaded if and only if the configuration
files call for the device. This is a manual procedure right now -
for example, if the configuration files call for a paper tape reader,
the PTRSER module line in the monitor build command file must
have the /NOLOAD removed if it is there. (Library search loads
could be used to make this automatic).

The general rule for conditional assemblies is to avoid them
if it makes sense to do so. So, rather than have a module which
has frequent conditional code with large amounts of code,
it is better if it can be restructured so that the feature
has its own module, with fewer conditional assemblies
and less code. Of course, this is a continuum, in that there will
be cases where it is uncertain if there is enough code or if the
function it provides has enough conceptual integrity to warrant
a seperate module. Just remember that the idea is to seperate
and structure pieces of code and data structures which logically
belong together so that they effect as little else as possible.
If too many conditionals creep into mainstream code, there will
be so many combinations to test that we will never be sure
if the code works under all of them, and the possibility
for error is much greater.

If certain conditionally dependent modules have a need for a common


                                       359
Text: CONDITIONALS; Guidelines for conditional assemblies, etc            page 2

subset of parameter definitions, the most structured way to do it
is to create a file or files with those parameters defined
and to assemble the conditionally dependent modules with those files,
as opposed to defining the parameters in S.MAC. In general, it is
not a good idea to put parameters into the processor parameter definition
files which deal with anything else other than specific characteristics
of that processor. For example, defining parameters for a certain
kind of channel, disk, tape, which is only found on one particular
kind of processor in KLSYM.MAC is generally the wrong thing to do.
For devices intergrally associated with a processor and which
are very unlikely to be found on any other processor, it is allright
to define parameters in the processor parameter files, since those
devices are essentially part of the processor in which they appear.
Examples: accounting meters on KL10, the cache on KL10, unibus
adapter on KS (although there is a possibility that someday another
machine might use a device like this, in which case it might be a good
idea to seperate the stuff into its own modules and parameter files).
Counter examples: DK10 real time clock (physically seperate device
which could appear on any processor), I/O channels (even if they
are physically in the same box as the CPU, the same architecture
might appear on another processor), disk controllers, communications
devices.



































                                       360
Menu: PEOPLE; Monitor people                                              page 1

362    PHONES          Home and office telephone numbers
363    TERMINV         Terminal inventory























































                                       361
Text: PHONES; Home and office telephone numbers                           page 1

Ginzburg ,Allen		408/996-2869	x6370
Soley ,Bill		415/969-6366	x6210
Price ,Darren		415/321-6514(6512) x6589
Socci ,Ernie		408/733-0827	x6164
Lyons ,Greg		415/329-0632	x6696
Roysden ,Jean		408/255-4309	x7376 
Bolton ,Lee		408/732-1575	x6259
Hinckley ,Mike		415/968-2396	x7219
Bowles ,Murray		408/247-5673
Daniels ,Scott		415/968-2396	x7276
Gavette ,Sherman	408/867-7567	x6537
Corenson ,Todd		408/356-8276	x7432

C37 KLINIK line				x6902
Valley Forge console 	215/666-5536
System 118 console			x7297
VG2 machine room			x7366








































                                       362
Text: TERMINV; Terminal inventory                                         page 1

	    MODEL    SERIAL	    HOME ADDRESS

ALLEN
    OFFICE  126    33571
    HOME    225    001296		2188 WILLESTER AVE.
	    900-5  L1305(COUPLER)	SAN JOSE  95124
            900-4A 2006 (COUPLER)

ART
    OFFICE  212    024463		1028 JACQUELINE WAY
	    900-4A  2238(COUPLER)	SAN JOSE 95129
    HOME    100    725-13301	(PLZ SEE (ATKINSON)TERM.TXT)

ERNIE
    OFFICE  430    13542		1575 TENAKA PL M4
	    900-6A 10409(COUPLER)	SUNNYVALE, CA 94087
	    736    69106
    HOME    126    0274615198

MURRAY
    HOME    126    33583		2200 Monroe #1604
    OFFICE  430    13517                Santa Clara 95050
	    900-6A 10794(COUPLER)

SCOTT
    OFFICE  430    8407
	    900-4A 1539(COUPLER)	2540 Dell Avenue
    HOME    126    33418		Mountain View 94043

SHERMAN
    OFFICE  214    17213
            900-2A 2007(COUPLER)
    HOME    212    15814                13598 MYREN DRIVE
            900-6A 10192(COUPLER)       SARATOGA

BILL
    OFFICE  430    29993
    	    900-4A 2006(COUPLER)
    HOME    430    *****		241 Arriba Dr. #1
	    900-6A 10031		Sunnyvale, CA 94086

TODD
    OFFICE  430    29991
	    900-4A 2238			119 Belvue Dr.
    HOME    126    274644940		Los Gatos, CA 95030
 
SPARE
            126    0274650241		(Bill)
            126    0274651907
            126    73673
            225    001284		(Dan)
	    900-5  L1422(COUPLER)	(Dan)





                                       363
Menu: PROCEDURES; Monitor Group Procedures                                page 1

365    XMIT            Monitor transmittal Instructions
368    MONREL          Major monitor release instructions
371    NEWSYS          Adding or deleting a system
374    UPGRADE         Upgrading a KI to a KL
375    PATCH           Monitor Patch Procedures
378    CRASH           Notes on looking at monitor crashes
389    CRALOG          Procedures for logging crashes
391    UUOFORMAT       Design considerations for UUO formats
392    TAPE-BACKUP     Procedures for backup of monitor files to tape
402    BADRIB          Procedure for zapping file with rib error
403    MODIFY          Procedures for modifying monitor sources
404    MONITOR-NAME    Conventions regarding monitor names
405    INTERNAL-RELEASEMaking an experimental monitor
408    MEMFILE         Pxxx'MEM file format
409    LICENSE         Policy on programs that grant license










































                                       364
Text: XMIT; Monitor transmittal Instructions                              page 1




      MONITOR TRANSMITTAL INSTRUCTIONS V3
      --------------------------------

      1.  Inform everyone in the operating systems group that you  are
          about  to  transmit  a monitor.  Make sure everyone that has
          made changes to the monitor gets a chance to respond one way
          or the other.

      2.  Send mail to everyone in  the  operating  systems  group  to
          notify  them  that the sources are now frozen because of the
          monitor transmittal.  Don't forget to tell them which  major
          version or versions of the monitor are being transmitted.

      3.  Run the moned program in the directory in which the  monitor
          resides.   (M33) is the directory in which the current field
          test monitor lives, and  (OSCURRENT)  is  the  directory  in
          which the current release of the monitor lives.

      4.  Type the monitor name desired after MONED gives  its  prompt
          character (e.g.  "P033/M").  MONED will then proceed to edit
          all the name files, load and save all the monitors.

      5.  The last thing MONED (actually, MONMAK) does is to  checksum
          all  the  monitor files.  retain this part of the output for
          later attachment to the transmittal form.

      6.  Fill out the transmittal form.  use the .MEM file to fill in
          the  changes  section  in  the  transmittal  form.   Briefly
          summarize  the  nature  of  each  change.   Highly  detailed
          descriptions are not necessary.

      7.  Attach the checksum output saved from the monitor  build  to
          the  transmittal.   The  CKSUM program prints out the string
          "%%%" next to any file that has changed.  Make sure that the
          changed indicator does not appear next to a file that should
          not have been changed.  (This is usually  guesswork  if  you
          are  not  the only one who has changed the monitor since the
          last transmittal.)

      8.  Next, the montior must be  copied  into  the  archive  area.
          (Make sure there are about 1400 pages free on the disk.) The
          username for monitors living in (M33)  is  (QABUILD1).   The
          username  for  monitors living in (OSCURRENT) is (QABUILD2).
          Set WF license, and type "perform  (QABUILD?)ARCHIV",  where
          the  ?  represents either a "1" or "2", depending on whether
          the monitor comes from (M33) or  (OSCURRENT),  respectively.
          If  the  perform  command  says "cannot open", it is usually
          because the last monitor transmitted has not  been  archived
          yet.   Contact the software distribution group in this case,
          and they will make sure the monitor gets archived quickly.

      9.  Before the transmittal form is actually submitted, the exact


                                       365
Text: XMIT; Monitor transmittal Instructions                              page 2

          monitor  being  transmitted should be run for one day on the
          operating systems development system if it is the field test
          monitor.   Testing for the current version of the montor can






















































                                       366
Text: XMIT; Monitor transmittal Instructions                              page 3

                                                                Page 2


          be limited to making sure the  monitor  can  be  brought  up
          once,  unless  the changes are extensive enough to warrant a
          day's worth of testing.

     10.  Submit the  completed  transmittal  form  to  the  operating
          systems  manager  for signature, then submit the form to the
          software disttribution group.

     11.  If changes have been made to this  version  of  the  monitor
          that  necessitate  a  memo  being  sent  out  to  area  tech
          managers, operations, or some other  party,  make  sure  the
          memo is written and distributed.

     12.  If  any  special  instructions  need  to  be   followed   by
          operations  before  bringing  up  the  new  version  of  the
          monitor, or before dropping back to  the  previous  monitor,
          prepare  a  memo  with  such  instructions.   This  includes
          specification of any new system programs that need to be put
          up simultaneously with the new version of the monitor.

     13.  if the archive copy PERFORM command  succeeded  above,  send
          mail  to  all members of the operating systems group stating
          that the sources are now  unfrozen.   if  the  archive  copy
          command  failed, wait until software distribution clears the
          archive area of the previous monitor,  and  then  retry  the
          "PERFORM   (QABUILD?)   ARCHIV"   command  again.   When  it
          succeeds, send the mail about the monitor being unfrozen.



























                                       367
Text: MONREL; Major monitor release instructions                          page 1




MONITOR RELEASE INSTRUCTIONS
----------------------------
THE FOLLOWING INSTRUCTIONS APPLY TO MAJOR  MONITOR  RELEASES
(THOSE  IN  WHICH  THE  NUMERIC  PART  OF  THE  MONITOR NAME
CHANGES).

     1.   RUN MONCOP IN OSBACKUP TO COPY OSCURRENT FILES  TO
         OSBACKUP

     2.   RUN MONCOP IN  OSCURRENT  TO  COPY  M33  FILES  TO
         OSCURRENT

     3.   IF NECESSARY CHANGE MON??.CMD  FILES  IN  M33  (IF
         MODULES ARE BEING DELETED OR ADDED)

     4.   IF NECESSARY CHANGE  CHKSUM.CMD  (IF  MODULES  ARE
         BEING  DELETED  OR  ADDED).  MONSMG.CMD, FSHFMT.CMD
         ALSO  CONTAIN  MONITOR  MODULE  NAMES  AND   SHOULD
         EVENTUALLY  BE  UPDATED.  (QABUILD###)ARCHIV.CMD MUST
         ALSO BE CHANGED TO  REFLECT  THE  LIST  OF  MONITOR
         MODULES FOR THE CURRENT RELEASE OF THE MONITOR.

     5.  NOTIFY THE SOFTWARE DISTRIBUTION GROUP THAT MODULES
         HAVE BEEN ADDED/DELETED IF THIS HAS OCCURRED.  THEY
         MAINTAIN COMMAND FILES  OF  THEIR  OWN  WHICH  HAVE
         NAMES OF MONITOR MODULES IN THEM.

     6.   SMERGE FIELD TEST MONITOR SOURCES AND EXPERIMENTAL
         MONITOR  SOURCES  TOGETHER IF THERE ARE ANY CHANGES
         MADE TO THE FIELD TEST MONITOR SOURCES THAT ARE NOT
         BUT  SHOULD BE INCLUDED IN THE EXPERIMENTAL MONITOR
         SOURCES.   THE  .BAK   FILES   CREATED   WHEN   THE
         EXPERIMENTAL  MONITOR  SOURCES WERE ORIGINALLY MADE
         ARE USED AS GRANDFATHER FILES.

     7.   LOAD EXPERIMENTAL MONITOR  MON37?   AND  SAVE  THE
         BINARY FOR LATER COMPARE.

     8.   COPY ALL CHANGED FILES TO CURRENT FIELD TEST FILES

     9.   LOAD THE NEW  FIELD  TEST  MONITOR  AND  SAVE  ITS
         BINARYS.

    10.   COMPARE (USING DIFF) THIS TO THE BINARY  SAVED  IN
         STEP 5.  ONLY DIFFERENCES SHOULD BE IN SYMBOL TABLE
         AND CONFIG.

    11.   DELETE OLD ?????X,Y, .  .  .>.* FILES, .BAK FILES.

    12.    MODIFY  EXPERIMENTAL   MONITOR   CMD   FILES   IF
         NECESSARY.     DELETE    COMD??.REL,    COMT??.REL,
         COMN??.REL IF DELETING SYSTEM NUMBER.  ALSO  DELETE


                                       368
Text: MONREL; Major monitor release instructions                          page 2

         MONITOR SAV FILES FOR THE OLD SYSTEM NUMBER.


Note on (QABUILD###):  if you are concerned with a monitor in
(M33), archive directory is (QABUILDM33).  If OSCURRENT,
(QABUILDOSC).



















































                                       369
Text: MONREL; Major monitor release instructions                          page 3

                                                      Page 2


ADDING OR DELETING A SYSTEM NUMBER
----------------------------------

     1.  The following files in (M33) and (OSCURRENT) should
         have the new system numbers added to their internal
         system number tables:

         1.  MONED.MAC 

         2.  MONMAK.MAC 

         3.  (MPL)INFRED.MAC 


     2.  Install  MONED.SAV,   MONMAK.SAV   on   (M33)   and
         (OSCURRENT).

     3.  Install INFRED.SAV on (M33).

     4.  Create or delete MON?.CMD, CONF?.MAC, CNFN?.MAC for
         systems  being created or deleted.  The recommended
         way to do this is to copy existing system name  and
         configuration files and edit the changes.  The most
         frequent parameters that need changing  are  BPAUN,
         FTAUN,  and  the  system  name  in  CNFN?.MAC.  Use
         EDIT10 command file CNFTYP.CMD  to  view  the  full
         configuration.

     5.  Change  CHKSUM.CMD   to   reflect   any   MON?.MAC,
         CNFN?.MAC,   or  CONF?.MAC  files  that  have  been
         created or destroyed.

     6.  Change ARCHIV.???  (???  = major  monitor  version,
         i.e.    ARCHIV.033)  to  include/exclude  MON?.CMD,
         CONF?.MAC, CNFN?.MAC files.  Copy the  ARCHIV  file
         to (QABUILD###). [SEE note above on QABUILD###].


















                                       370
Text: NEWSYS; Adding or deleting a system                                 page 1




MONITOR RELEASE INSTRUCTIONS
----------------------------
THE FOLLOWING INSTRUCTIONS APPLY TO MAJOR  MONITOR  RELEASES
(THOSE  IN  WHICH  THE  NUMERIC  PART  OF  THE  MONITOR NAME
CHANGES).

     1.   RUN MONCOP IN OSBACKUP TO COPY OSCURRENT FILES  TO
         OSBACKUP

     2.   RUN MONCOP IN  OSCURRENT  TO  COPY  M33  FILES  TO
         OSCURRENT

     3.   IF NECESSARY CHANGE MON??.CMD  FILES  IN  M33  (IF
         MODULES ARE BEING DELETED OR ADDED)

     4.   IF NECESSARY CHANGE  CHKSUM.CMD  (IF  MODULES  ARE
         BEING  DELETED  OR  ADDED).  MONSMG.CMD, FSHFMT.CMD
         ALSO  CONTAIN  MONITOR  MODULE  NAMES  AND   SHOULD
         EVENTUALLY  BE  UPDATED.  (QABUILD###)ARCHIV.CMD MUST
         ALSO BE CHANGED TO  REFLECT  THE  LIST  OF  MONITOR
         MODULES FOR THE CURRENT RELEASE OF THE MONITOR.

     5.  NOTIFY THE SOFTWARE DISTRIBUTION GROUP THAT MODULES
         HAVE BEEN ADDED/DELETED IF THIS HAS OCCURRED.  THEY
         MAINTAIN COMMAND FILES  OF  THEIR  OWN  WHICH  HAVE
         NAMES OF MONITOR MODULES IN THEM.

     6.   SMERGE FIELD TEST MONITOR SOURCES AND EXPERIMENTAL
         MONITOR  SOURCES  TOGETHER IF THERE ARE ANY CHANGES
         MADE TO THE FIELD TEST MONITOR SOURCES THAT ARE NOT
         BUT  SHOULD BE INCLUDED IN THE EXPERIMENTAL MONITOR
         SOURCES.   THE  .BAK   FILES   CREATED   WHEN   THE
         EXPERIMENTAL  MONITOR  SOURCES WERE ORIGINALLY MADE
         ARE USED AS GRANDFATHER FILES.

     7.   LOAD EXPERIMENTAL MONITOR  MON37?   AND  SAVE  THE
         BINARY FOR LATER COMPARE.

     8.   COPY ALL CHANGED FILES TO CURRENT FIELD TEST FILES

     9.   LOAD THE NEW  FIELD  TEST  MONITOR  AND  SAVE  ITS
         BINARYS.

    10.   COMPARE (USING DIFF) THIS TO THE BINARY  SAVED  IN
         STEP 5.  ONLY DIFFERENCES SHOULD BE IN SYMBOL TABLE
         AND CONFIG.

    11.   DELETE OLD ?????X,Y, .  .  .>.* FILES, .BAK FILES.

    12.    MODIFY  EXPERIMENTAL   MONITOR   CMD   FILES   IF
         NECESSARY.     DELETE    COMD??.REL,    COMT??.REL,
         COMN??.REL IF DELETING SYSTEM NUMBER.  ALSO  DELETE


                                       371
Text: NEWSYS; Adding or deleting a system                                 page 2

         MONITOR SAV FILES FOR THE OLD SYSTEM NUMBER.


Note on (QABUILD###):  if you are concerned with a monitor in
(M33), archive directory is (QABUILDM33).  If OSCURRENT,
(QABUILDOSC).



















































                                       372
Text: NEWSYS; Adding or deleting a system                                 page 3

                                                      Page 2


ADDING OR DELETING A SYSTEM NUMBER
----------------------------------

     1.  The following files in (M33) and (OSCURRENT) should
         have the new system numbers added to their internal
         system number tables:

         1.  MONED.MAC 

         2.  MONMAK.MAC 

         3.  (MPL)INFRED.MAC 


     2.  Install  MONED.SAV,   MONMAK.SAV   on   (M33)   and
         (OSCURRENT).

     3.  Install INFRED.SAV on (M33).

     4.  Create or delete MON?.CMD, CONF?.MAC, CNFN?.MAC for
         systems  being created or deleted.  The recommended
         way to do this is to copy existing system name  and
         configuration files and edit the changes.  The most
         frequent parameters that need changing  are  BPAUN,
         FTAUN,  and  the  system  name  in  CNFN?.MAC.  Use
         EDIT10 command file CNFTYP.CMD  to  view  the  full
         configuration.

     5.  Change  CHKSUM.CMD   to   reflect   any   MON?.MAC,
         CNFN?.MAC,   or  CONF?.MAC  files  that  have  been
         created or destroyed.

     6.  Change ARCHIV.???  (???  = major  monitor  version,
         i.e.    ARCHIV.033)  to  include/exclude  MON?.CMD,
         CONF?.MAC, CNFN?.MAC files.  Copy the  ARCHIV  file
         to (QABUILD###). [SEE note above on QABUILD###].


















                                       373
Text: UPGRADE; Upgrading a KI to a KL                                     page 1

Following is the procedure for upgrading a current KI system to be
a KL system:

	1) Change CONFxx to exclude PTP and PTR.

	2) Change CONFxx to increase #JOBS and #PORTS (if desired).

	3) Change MONxx.CMD to look like another MONxx file for
		another KL.  Specifically, PTPSER, PTRSER should
		be /NOLOAD.

	4) Remind operations that they have to run KL BOOTS
		on the new KL system after it first comes up.












































                                       374
Text: PATCH; Monitor Patch Procedures                                     page 1




MONITOR PATCH INSTRUCTIONS
--------------------------

     1.  There is a file called PATCH.LOG  which  exists  in
         (M33).   Create  an  entry  at the end of this file
         with the following information:

         1.  Date and time

         2.  Where  patch  was   installed   (username   and
             filename  if  patched  in  a file, or uptime of
             running monitor if patched in core)

         3.  Old monitor name and checksum

         4.  New (patched) monitor name and checksum

         5.  Description of patch.

         6.  Initials of patcher.


     2.  Run the DSKMAP program  and  make  the  appropriate
         entries.

     3.  Notify operations via telephone that the patch  has
         been installed

    4.  Send mail @cralst giving all the information in the
	PATCH.LOG entry.

The following is a sample PATCH.LOG entry:

12 Apr 1310 (SYS)SYSTEM.SAV,(SYS)BACKUP.SAV, RUNNING MONITOR 37:28
 P033/S HOJPOJ P033/S-1 GRUNTY
        PATCHED MONITOR TO SEE WHAT EFFECT OF SETTING SIPTOT TO 69 WAS. /EVS




Note:
The above procedure should be followed on each system where
a patch is installed AFTER the monitor has been placed in
SYSTEM.SAV.

If a monitor is patched while in (SSINSTALL) or in (SYS)NEWMON,
please send mail @cralst announcing the patch and patch
level number.  That way, when it gets to (SYS)SYSTEM, it
will be clear what code is being put up to run.

The program (M33)PATLOG will carry out most of the steps
of the patch logging procedure described above; you will


                                       375
Text: PATCH; Monitor Patch Procedures                                     page 2

need to send mail @cralst using @patlog as text to
complete all steps.


If you are patching to fix a monitor bug which exists in
that same monitor version on other systems, please do one
additional thing:  update the master patch file in (m33:37).
For monitor P034/C, the master patch file is P034C.PAT.
Append text of your patch to this file, which is a DDT
command file.  Make your additions so that this file can
drive EDDT and FILDDT.  Some suggestions:
1. get EDIT10 in _c128 and _m37 mode.
2. ?= is altmode, ?6 is linefeed <DDT convention>
3. remember to increment CONFIG+2 patch number.  If
    it is already updated in the patch commands, you can
    easily increment it by adding 20,,000000 (good
    for -1 to -9).

Please also send mail to @cralst on 37 when you make
patches on several machines.





































                                       376
Text: PATCH; Monitor Patch Procedures                                     page 3

[End PATMON.MEM]
























































                                       377
Text: CRASH; Notes on looking at monitor crashes                          page 1




     1.0  HOW TO START

     1.  Look at SYSCRS.  If it is non-zero, it is the  address  of  a
         system stopcode that was hit.  Get out your monitor fiche and
         figure out why it got there.  Bear in mind a stopcode can  be
         caused by software or hardware.

     2.  The relation between SAV30 and 30 determines how system  came
         down.   If  SAV30  and  30 have same contents, normal case is
         that base took system down - see KEY620  (output  in  16  bit
         format)  and  first  16  bit  byte is reason base took system
         down.  Abnormal case is that base wasn't running  -  this  is
         detected by SAV30 and 30 containing a "1" (operations is told
         to put a 1 in 30 to take system down, but  occasionally  they
         may  put  something else in).  If SAV30 and 30 are different,
         then operator deposited non-zero value in 30.  Remember  that
         SAV30  is  normally  used during system operation as a normal
         instruction location, just as CRSHAC is;  i.e.,  the  monitor
         overwrites  code to save contents of location 30 and the ACs.
         Therefore, if SAV30 or the ACs look like  instructions,  they
         probably  are.   Check the locations in the monitor to see if
         the data matches the instructions that normally reside there.
         If  it  does,  the  system has not successfully completed the
         crash code.

     3.  If the base took the system down, look at the crash code.  If
         it  is  not  read  bad key from host or input ring processing
         timeout, see if the base has dumped itself into memory.  This
         can  be  determined  by  looking  at  location  FILSER in the
         monitor.  If bits 32-35 are all ones, then it has.  Save  the
         crash for the network people to look at.

     4.  Bad data type or port number from host crashes can be  caused
         by 1)Monitor telling base in initial message that it has more
         ports than base has  (configuration  problem  with  value  of
         PORTN),  2) Monitor sending bad message type to base (look at
         output ring to base (ORING) to see if all messages are  legal
         3)  Monitor  sending  port  number out of range to base (same
         procedure as sending bad message type).

     5.  Input ring processing timeout means the  system  is  probably
         hung, although APR level is refreshing the key.  This usually
         indicates that scheduler level is not running.   See  section
         on hung crashes (look at THSTIM, etc.)

     6.  Read bad key from host normally  appears  when  a  STOPCD  is
         done.   Also  appears if host stops refreshing key or if host
         places bad value for key into KEY620.






                                       378
Text: CRASH; Notes on looking at monitor crashes                          page 2

Notes for looking at crashes                                    Page 2


     2.0  HUNG CRASHES

     Don't forget - the main drive behind analysis of hung crashes  is
     to  FIND  OUT  WHAT  THE  MACHINE  WAS DOING, i.e., find the most
     recent PC the machine was known to be at.  This  motive  is  very
     easy  to forget as one gets lost in the intricacies of the crash.
     Don't spend too much time on tangents - find out what the machine
     was doing.



     2.1  Hung At PI Level?

     Check pi channels in progress, look at PCs in CHn for all  values
     of   n,  look  at  device  CONIs  to  make  sure  device  is  not
     interrupting continuously on wrong channel or  on  right  channel
     but service routine is not paying attention (line printer service
     turns off its CONSO when it thinks printer is not supposed to  be
     running).




     2.2  Hung At Scheduler Level?

     First see how  long  its  been  since  we  ran  SCNSER  (and  the
     scheduler).   Open SCNSER and compare THSTIM with the contents of
     UPTIME.  If this comparison is not very  close,  problem  was  we
     didn't get to scheduler any more.  Look for loop at PI level (see
     PISTS to see if any PIs were in progress), and if not,  look  for
     loop  in  scheduler  level.   Use  stacks  and contents of ACs to
     pinpoint last known location.  Remember - object is to  find  out
     as  much  as possible about last known location that monitor was.
     Look at all JBTSTS words with RUN bit on if channel 7 is  running
     normally.   See  if they are all stuck in one state (AC wait, for
     example when CHKPNT or stream accounting dies).  Look at PARPC to
     see if machine was processing user prity error, which can take so
     long sometimes that base takes us down for input ring  processing
     timeout (code 7).  Look at UNIHNG for all disk units to make sure
     a disk isn't hung - sometimes certain programs  and/or  jobs  can
     still  run  if  they aren't using files or pages on the hung disk
     unit, while other programs/and or jobs will be hung.Also look for
     large numbers of errors

     Sometimes looking to see what ACs were  at  last  disk  interrupt
     will yield information about a monitor loop.

     If swapper hangs, see if SIPTOT disagrees with the actual  number
     of  pages being swapped in.  If SIPTOT ever gets off by 1 or more
     (which it has been known to do) and SIPQTA is  sufficiently  low,
     swapper  will  stop  doing  anything,  OPERs  will probably crash
     system as being hung.


                                       379
Text: CRASH; Notes on looking at monitor crashes                          page 3


























































                                       380
Text: CRASH; Notes on looking at monitor crashes                          page 4

Notes for looking at crashes                                    Page 3


     2.3  Crashes Where Deposit In 30 Or 147 Start Didn't Work

     If dump  indicates  that  OPRs  hit  reset  before  saving  dump,
     sometimes  they  couldn't  get the dump any other way.  Call OPRs
     and see if they filled out a hang sheet.  One thing that  happens
     sometimes  is  that  processor  makes a memory request and memory
     sends ACK but no data - processor will just hang  in  this  case.
     If  PI  system  is  indicated  as  on, PI requests are up, All PI
     channels were indicated on, but no PI in progress were  on,  then
     processor is hung.  




     2.4  CHKPNT Failure

     The system will hang if CHKPNT dies.  There are several  ways  to
     recognize this condition.

     1.  CHKPNT's JBTSTS shows it is not running.

     2.  CHKPNT's interrupt system is not turned on, or  its  channels
         are not turned on

     3.  Almost all jobs on the system are in AC wait (note some  jobs
         will  be  able  to  continue  running  until  they perform an
         operation that requires a stream record to be written)

     Look for many hard disk errors on one or more units  (UNIHCT)  or
     hung units (UNIHNG) if CHKPNT is still running.



     2.5  Hung Disks?

     This is likely if many jobs are stuck in SW wait,  or  many  jobs
     have  MRQ on.  To see for sure, check UNIHNG for hung disk units.
     If there are one or more units with high  hung  counts,  this  is
     probably what was causing system to hang.



     2.6  Parity Error Scan

     Sometimes the parity error scan takes so  long  that  the  system
     looks  hung  and  the  base or the operators take it down.  Check
     PARPC, PARSPR, PARTOT, and the most recent PC that can  be  found
     to see if the system is processing a parity error.






                                       381
Text: CRASH; Notes on looking at monitor crashes                          page 5

Notes for looking at crashes                                    Page 4


     3.0  NXM CRASHES

     Beware of the fact that on NXM crashes the processor can actually
     execute  a  zero  before  the  NXM interrupt occurs.  This can be
     confusing.  On the KI, there is no hope of knowning exactly  what
     happened, but on the KL, examination of ERASTS shows the physical
     address (not virtual) that caused the NXM.  If this is within the
     range  of  the  memory indicated by MEMSIZ and PGYNXM bits (watch
     out for holes in memory,  don't  assume  all  memory  from  0  to
     c(MEMSIZ)  is  there)  then  it  is  certainly  a hardware crash.
     Otherwise, look for a bad page map pointer in the current UPT  or
     EPT.  On the KI, one has to deduce the location of the NXM by the
     contents of the ACs and the PC at interrupt time .



     4.0  CLUES TO UNSOLVED CRASHES

     Hanging around somewhere is a file CHUNK.CMD.  If used  properly,
     one can sometimes obtain information about why a system went down
     that is otherwise unavailable.  Setup P1 and P2 as start and  end
     byte  pointers (if P2 is zero will type out to end of chunk list)
     and type out TTY chunk free pool.  This  will  sometimes  contain
     messages  from the operator about the system, CTY output that the
     operator lost or forgot to tell operating systems group, etc.  

     Search PCBs for disk address of a RIB if you have a desire to see
     a RIB that was recently dealt with - it may still be in core.

     Look at the accounting buffer  or  the  stream  accounting  files
     (*.SAT  on  UN1  or  BILLING10)  for clues regarding who ran what
     programs.  Bear in mind that not all runs cause stream records to
     be  written,  and  that  it is possible that some stream data got
     lost by being in CHKPNT's data buffers at the time of the crash.

     Don't overlook the locations on the stack higher than the address
     of  the  current  value  of  the stack pointer.  This can be very
     helpful in reconstructing the path  that  was  traversed  by  the
     machine in getting to where it died.

     Sometimes it is possible to deduce the execution path by  careful
     examination of the ACs.  The key is to recognize what the data in
     the AC is (LDB?  clock CONI word?  DDB?  etc.)

     Occasionally there will be a crash where it  looks  like  a  disk
     transfer  brought  in  the  wrong  page.  In these crashes, it is
     important to check to see if the I/O is still  in  progress.   If
     the  job  was awakened too early for some reason, it will see the
     old contents of the page  and  not  the  new  one,  and  disaster
     usually results.




                                       382
Text: CRASH; Notes on looking at monitor crashes                          page 6

Notes for looking at crashes                                    Page 5


     5.0  GENERAL ADVICE ON CRASH ANALYSIS

     Usually,  processor  executing   instructions   incorrectly   and
     confused crash dump analyst are indistinguishable.

     This doesn't happen frequently in out monitor anymore, but  watch
     out  for PI level smashing lower level ACs.  Always be suspicious
     if the monitor crashes and  the  PC  is  close  to  one  that  is
     contained  in  an  interrupt  JSR cell.  When looking at a crash,
     always make sure you have the correct ACs for the place  you  are
     looking  at.   For  example,  a  page fault for an exec page will
     stack the acs and then die in the page fault code.   Always  look
     at  the  previous  context ACs in this case and similar cases, or
     many hours of confusion can result.  For KI10 crashes, to look at
     previous  ACs one must go into "CODE MODE" and set contents of $I
     ("Altmode I") to zero - LH of $I represents  the  simulated  user
     IOT  bit.   This causes FILDDT to look at the AC stack instead of
     indicated user AC block.  On KL10 crashes, previous  context  ACs
     are fixed by the hardware and are not affected by either the real
     user IOT flag in the actual  machine  or  the  simulated  one  in
     FILDDT.



     6.0  FREECORE ALLOCATION CRASHES

     In crashes where freecore allocation has been messed  up  (giving
     back free core that was already free, two users of same freecore)
     try to recognize what data structure is likely using the core  by
     the  contents  of  the core.  Refer to a chart of uses of monitor
     free core and it may occur to you  what  is  being  used.   (disk
     DDBs,  block  I/O  buffers, secondary PCBs, Club tables, SPTs all
     come out of freecore).  Check to make sure all callers of GETWDS,
     GIVWDS,  GET4WD,  and  GIV4WD are allocating as much free core as
     they try to give back.



     7.0  OVERWRITTEN MONITOR PROBLEM

     7.1  If Monitor Is Suspected Of Being Overwritten

     Sometimes confusing information found in  a  crash  dump  can  be
     attributed  to  the  monitor  being  overwritten.   If  you  find
     yourself  suspecting  that  the   processor   has   executed   an
     instruction  or  instructions incorrectly, check to make sure the
     code in the monitor hasn't been clobbered.  To do this,  use  the
     XPAND  program  to  convert both the source monitor and the crash
     dump into expanded form, and do selective FILCOMs between the two
     to  see  if any instructions have been modified.  The FILCOM must
     be selective, since in general code and data are  interleaved  in
     virtual/physical  memory in the monitor.  It is good to start the


                                       383
Text: CRASH; Notes on looking at monitor crashes                          page 7

     FILCOM at location FILSER (this skips some actual code in  COMMON
     and  COMMOD,  so  beware),  and end at the end of the patch area,
     location PAT.   It  is  usually  advisable  to  do  two  seperate






















































                                       384
Text: CRASH; Notes on looking at monitor crashes                          page 8

Notes for looking at crashes                                    Page 6


     FILCOMs,   one   between  FILSER  and  CRSHAC,  and  one  between
     CRSHAC+20*10 and PAT.  This is because there is  code  at  CRSHAC
     that is overwritten in a normal crash dump with AC data.  Specify
     the source monitor file  first,  then  the  crash  monitor  file.
     After doing the FILCOMs into files, edit the files and search for
     the    following    fancy    string:     <beg    of    line>6<any
     char><tab><1,2,3,4,5,6>.       EDIT10     string     for     this
     is:?9?/?/?/?/?/?/<tab>?0123456?0.  This will find  all  words  in
     the  source  monitor file that are likely to have instructions in
     them that have been modified since the system came up.  Note that
     some  of  these  changes  are OK - JEN instructions that have now
     become part of a CONSO chain, etc.  Just take the addresses  with
     the differences and see whether or not it is reasonable that they
     have changed.  Note that this procedure skips some code - it  can
     only  ensure  that  there is an instruction that was changed, not
     that one was not.  Also note that the monitor's data  base  being
     overwritten  is also a source of strange problems, although there
     is no way in many cases of knowing what is supposed to  be  there
     unless  some  other  part  of  the data base suggests some former
     contents.



     7.2  Who Clobbered The Monitor?

     The important thing to use as a clue is the address and  data  of
     the overwritten cell (cells).  Is the data pattern a recognizable
     one?  If so, it might  help  isolate  which  data  structure  the
     monitor  thinks  it  is  writing into.  Was data anded to memory,
     ored to memory, movem ed to memory?   Which  bits  are  involved?
     Does  the  address appear in any ACs?  Don't forget to look in AC
     save areas (the AC stack, UPTXAC for jobs with their UPTs in core
     and  below 256K).  Are there any other crashes with the same data
     or addresses smashed?  If so, is there a pattern to which job  or
     jobs are logged in, which programs are running?  A common monitor
     failure is using AC J without setting it up - and a common  value
     for  J  to  be  if  it  is  not  setup is a controller data block
     address.  Look at SCnnCB+CHNKON for  the  controller  data  block
     addresses,  and  subtract the value from the smashed address.  If
     this turns out to be the exact address of word 0 of a JBT  table,
     you can then look at the references to the JBT table to see which
     one is the culprit.

     When damage occurrs to  core  somewhere,  make  sure  no  channel
     command  lists  point  to damaged area (could be broken channel).
     Also broken base could cause this - look for bits  23-35  all  1.
     If suspect base wrote the data, look at output ring for block I/O
     requests and see if the request address bears any relation to the
     addresses that were overwritten.





                                       385
Text: CRASH; Notes on looking at monitor crashes                          page 9

Notes for looking at crashes                                    Page 7


     8.0  GENERAL ADVICE

     Always make sure you are looking at an exact listing of code that
     is  suspected of causing a crash, or that you are very very aware
     that what you are looking at is not the exact code running at the
     time  of the crash.  Many times a bug has been overlooked because
     the older or newer version of the code did not have a bug but the
     running version did.

     Don't believe that a PC looking thing on the stack is a PC unless
     the  stack  pointer  and  the  code  indicate  that a PC is there
     (example - UUOCON skips over a word on the  stack,  leaving  what
     could be a word looking like a PC from the last page fault)

     Always think twice before chalking a crash dump up  to  processor
     failure.



     9.0  ANALYSIS OF LIVE BUT SICK SYSTEMS

     Sometimes analyzing a running "dead" system can save  some  time.
     Here  are some techniques to use on a system that is stil running
     but is about to be crashed because it is not getting  any  useful
     work done.



     9.1  If You Can't Login

     Login to system 37 and get a copy of the monitor that is  running
     on  the  sick system into core and into DDT.  Ask the operator to
     examine key locations that you  want  to  see  to  determine  the
     problem.  For example, see what location STRDDB+STRTAL is and ask
     the operator to examine it to see if system's problems are due to
     disk space.



     9.2  Job Capacity Exceeded

     This message comes out when there is not enough disk to  allocate
     context  pages,  when  the  system  is out of job slots, when the
     system doesn't have enough contiguous free core to create  a  new
     TTY  DDB,  or when LOGIN kicks a user off because it is reserving
     job slots for GAN 3.



     9.3  System Very Slow

     This can be caused by a large variety of things, but check to see


                                       386
Text: CRASH; Notes on looking at monitor crashes                         page 10

     if  any  one  particular  job  is  getting all the runtime in the
     system.  Sometimes (PJ)PAM goes into a loop.  Sometimes it  is  a
     job  that  is  abusing/using SCHPRV.  General strategy is to find






















































                                       387
Text: CRASH; Notes on looking at monitor crashes                         page 11

Notes for looking at crashes                                    Page 8


     out where the system is spending its time.  Sometimes  the  field
     engineers  are  testing a disk drive off line through the storage
     control, which will slow down disk transfers  somewhat,  although
     they should not be doing this on customer systems.



     9.4  Job Can't Be Hung

     If a job can't be hung, see if it was detached and is  now  using
     the  spare LDB - see if there is a list of waiters waiting to use
     the spare LDB.  See if the job to be hung still has command  bits
     set for it - look at its JBTSTS, see if COMCNT is still non-zero.
     Try to look at the job's context pages and see if its  PC  is  in
     the monitor (will keep control-c from happening).







































                                       388
Text: CRALOG; Procedures for logging crashes                              page 1

PDP-10 Crash Analysis Policies & Procedures
A. Atkinson 30 apr 79

All Tymcom-X crashes except those on L88 are analyzed and
logged by the PDP10 OS group.  We are notified of crashes
by operators at each installation who send mail @(UTIL)CRALST.cmd;
(If you should be receiving crash mail and aren't, ask
them to include you on their list).

Crash files all live in (SYS)CRA###.SAV, where ### can
run from 000 to 077.  They are produced by (SYS)COPYCR.SAV
when it is automatically run at initialization time;
COPYCR looks at (SYS)CRASH.SAV's access date, and if non-zero
copies the contents of CRASH.SAV into the next available CRA0##.

To start crash analysis, read mail from OPER, gfd to M33, and
run CRSHID.  (See info node on CRSHID).  CRSHID will give
you a few basic facts about the crash.

If more analysis is necessary, run the appropriate FD file
and poke around in the crash. See info node on looking at
monitor crashes for tips.

When you have reached your conclusion, send mail @(M33)CRALST
as follows:
CRA00# <date-time> <very brief explanation>

and then log the crash in (M33)CRALOG.

Logging Crashes in CRALOG
--------------------------

Files CRALOG.75 (for 1975 crashes), CRALOG.76,...and CRALOG [no
extension. for current year's crashes] exist in M33 on each
host.  Entries in CRALOG have a standard format:

<dd> <bl> <month> <bl> <hhmm> <bl> <monitor-name> <bl> <$code> <bl>
	{APR#nnnn} <text> </initials> <crlf> <blank line>

<dd> = 2 digits day of month
<month> = 3-letter abbreviation
<bl> = 1 or more blanks
<hhmm> = 4 digits GMT time; no colon between hours and minutes
	(if exact time in doubt due to bad crash file, append
	a "?" to the time)
<monitor-name> = fully-typed-out monitor version as supplied
	by SYSNO command or by CRSHID
<$code> = 
	$H  hardware-type crash. Include all base crashes except
		base types 20 and 27.  (I.e, all problems due
		to base hardware or MIC)
	$S  software..monitor code bug
	$O  operations..operator crashed the
		system (usually by a deposit of 1 in loc 30) and
		the system seems to have been running fine otherwise.


                                       389
Text: CRALOG; Procedures for logging crashes                              page 2

	$N  network..base put illegal message in input ring, or
		base manual restart (type 20) or unidentified
		base crash (type 27).
	$U  unknown..crash file is bad (and operator mail didn't
		describe a problem which clearly makes the crash
		fall into some other category) or crash file OK but
		WE can't figure out why the crash happened.
<APR#nnnn> = not needed except for hardware-type crashes; the
		processor number as supplied by CRSHID or .SYST SERIAL
<text> = up to 2 or 3 lines of explanation;  this can go into
	more detail that the crash mail does.

</initials> = initials of person making the CRALOG entry

<blank line> = an extra line with just a carriage-return
	on it; very important separator for CRASUM program.

Ordering within CRALOG
---------------------

The CRASUM program depends on CRALOG to be in proper ascending
date-time sequence for production of proper crash counts within
date ranges.  Therefore put your entries in their proper places.

Crashes we Cannot Immediately Figure Out
----------------------------------------

If you're making no headway after a couple of hours, you may want
to put the crash "aside".  To do this, rename (SYS)CRA0##.SAV
as (M33)MMDD##.SAV [MM=month, DD=day, ##=CRA sequence number]
and make an entry in (M33)CRASH.ALL.

CRASH.ALL entries are like CRALOG entries except that you should
put into the entry everything useful you have found out about the
crash.  Be very detailed. Particularly important:  put in
"CRA0## -> (m33)MMDD## " and monitor name so that future 
investigators will know what FD file to use, and will be able
to key to CRA0## numbers in OPER mail.

Send crash mail @CRALST as usual, but mention that the crash
requires further analysis. Make a CRALOG entry and give
a tentative <$code>.















                                       390
Text: UUOFORMAT; Design considerations for UUO formats                    page 1

Is the call consistent with any existing UUO call formats?
If not, can it be made to be consistent with a related
UUO call?

Does the format of the call suggest its function?

Does the UUO have to be restartable? If so, the calling format
must be arranged soas not to overwrite any important arguments
before the point from which it can be restarted.
(Example: the terminalinput UUOs are designed so
that the process can get a software interrupt out of the
terminal input UUO. Therefore, the UUO cannot overwrite
any relevant arguments with return data if it is to be restartable.)












































                                       391
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 1

OS GROUP MAGTAPE BACKUP PROCEDURES
--------------------------------

OS GROUP MAGTAPES ARE ASSIGNED MULTIPLE-ACCESS BY:
GINZBURGA
SOCCI
KOLLINGK
BOWLESM
GOBBELR
WRS
ATKINSON
DANIELSS

When you want to store files off to the OS group magtapes,
find the TID of the tape described on the last page of this file.
Submit a batch request as usual asking them to append your files
to the tape.  Ask them to leave a tape directory in
(M33)<number>.TID; remind them to let you know if new tapes
were required, what their numbers were, and to leave a directory
of any new tape in the appropriate TID file.

Ask them to let you know the numbers of save sets written.

Any new tapes used should be assigned to the monitor group with access
rights and other parameters like existing OS group tapes.

Log a brief description of the files stored in this file;
include the save set numbers written.





























                                       392
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 2

7350
----
STUFF FROM ATKINSON UFD 76 AND 77
TOTAL DUMP OF M33 EARLY 1978





















































                                       393
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 3

18286
-----
DUMP OF M33 *.SWM AND *.SAV (P033 MONITORS N THRU T FOR
	SYSTEMS 28-39)
DUMP OF OSCURRENT *.SAV (P032/T FOR ALL SYSTEMS)
"LITTLE" (10000 PAGES) SET OF MAGNUM BENCHMARK FILES.  ALSO,
	THE VARIOUS HISTOGRAM CRASHES, OUTPUT LOGS, ETC. KK.


















































                                       394
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 4

19935
-----
DUMP OF M33 21 JUN 78
16 AUG 78 DUMP OF KOLLINGK FILES FROM 16 MAY 78 /AA
30 MAR 79 DUMP OF (M33)LOGOUT.*,VERS 40.1 THRU 41.0 SOURCES+LOGOUT.INF /AA
20 APR 79 COMPLETE DUMP OF (OSCURRENT) TO SAVE SETS 6,7. 
	THIS INCLUDES .SAV FILES FOR P033/GA AND /HA FOR ALL TENS. /AA
25 APR 79 COMPLETE DUMP OF (HOLCOMBK) PRIOR TO ZAPPING HIS FILES. /AA
25 APR 79 DUMP OF (M33:37)RPG###.*..VERSIONS 136 THRU 140 OR SO OF RPG. /AA
15 JUNE 79 TOTAL DUMP OF (OSCURRENT) P033/LA SAVE SET 14. /AA















































                                       395
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 5

34451
-----
15 JUNE 79 TOTAL DUMP OF (OSCURRENT). P033 SOURCES JUST AFTER
	GENERATION OF P033/LA AND /LA FICHE. CHANGING C38 FOR
	2 BPA CONTROLLERS. /AA   SAVE SET 1.

20 July 79 total dump of (oscurrent) P033 sources and
	save files for all systems; p033 is frozen now..P034
	is to become current system, and this dump is supposed
	to reflect P033 as it existed just before we
	began doing all development work in M33 on P034.  Basically
	its P033/LA; a few internal versions later
	than /LA exist there too. Save sets 2,3.  /AA

26 July 79 total dump of (microcycles) save set 4 & 5 /AA

27 July 79 total dump of (m33) after P034/A monitor transmittal
	and microfiche generation.  Save sets 6,7.  Continues
	on tape 35751. /AA






































                                       396
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 6

35751
-----

27 July 79 continuation of total M33 dump from 34451. save set 1. /aa

07 Sept 79 dump of saved crash files from C29. save sets 2 & 3. /aa

10 Sept 79 dump of (m33)##034A.SAV monitors and some other 
	misc M33. save sets 4,5. /AA

27 Sept 79 dump of (billing10)*.* before deleting all. Save
	sets 6,7 /AA













































                                       397
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 7

37841
-----

28 Sept 79 dump of (sail)*.* as checkpoint before deleting most.
	sets 1, 2 /SDD

30 OCT 79 TOTAL DUMP OF (M33) JUST BEFORE P034/B GEN. /AA
	SAVE SETS 3,4. /AA
2 Nov 79 (SYS)####79.DAT (Readst/Chkpnt dat files). Sets 5,6 /aa

13 Nov 79 (KS2020)*.* just after KS files smerged successfully
	with M33 sources. Sets 7,8 /AA

18 Nov 79 (M33)*.* just after P034/B gen and fiche gen. This
	save set (#9) continued on next tape. /AA










































                                       398
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 8

39512
-----

18 Nov 79 (M33)*.* continued from previous tape set 1
	set 2 (m33)*.* just after P034/B monitors
	and fiche generated.  All *.MFS files and
	*.LST files for P034/B are here. /AA

29 NOV 79 (M33)*.* FROM C26; SETS 3,4 /AA

18 DEC 79 (M33) CRASH.ALL AND CRASH FILES FROM C35.
	SETS 5,6 /AA

03 JAN 80 (M33)*.* JUST AFTER P034/C MONITOR
	GENERATED AND ARCHIVED. SETS 7,8 [8 INCOMPLETE,
	FINISHED ON NEXT TAPE]. /AA









































                                       399
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape         page 9

40867
-----
03 JAN 80 (M33)*.* JUST AFTER P034/C MONITOR
	GENERATED AND ARCHIVED. SAVE SET 1, CONTINUED
	FROM PREVIOUS TAPE 39512. /AA
29 MAR 80 (SYS)0###80.DAT TAKES IN ABOUT 1 JAN 80 TO 29 MAR 80.
	SAVE SETS 2,3 /AA

29 MAR 80 (BILLING10)*.SAT SAVE SETS 4,5 /AA

01 APR 80 (M33)*.* JUST AFTER P034/D GENERATED, FICHE *.MFS
	FILES GENERATED, EVERYTHING FROZEN AND SOURCES
	ARCHIVED IN QABUILDM33
	continued on tape 44502 /aa











































                                       400
Text: TAPE-BACKUP; Procedures for backup of monitor files to tape        page 10

44502
-----

01 April 80 (m33)*/* just after P034/D and fiche
	generated. Continued from tape 40867. /aa

29 April 80 (billing10)*.sat /AA

19 May 80 (m33:33)mmddyy.sav crash files which nobody
	has been looking at. /aa

13 Jun 80 (BOWLESM:37)TRESCN.* tree scnser copies??  /WRS













































                                       401
Text: BADRIB; Procedure for zapping file with rib error                   page 1

Sometimes a RIB goes bad; RIPBDR is set in .RBSTS,
and the monitor will refuse to do anything to he
file.  This may inconvenience a customer, because
it means that a file name is tied down and a good
copy of the file cannot be put in place with the same
name.

(MPL)TSTSUP.SAV has a procedure for allowing us
to zap a bad rib.  RA and WA license are needed.
.RUN (MPL)TSTSUP
it says DATBRK>> PAGE/ P	and waits for you
to put in PAGE the retreival pointer to read.  This
needs to be the RIB retr. ptr. for the bad file.
If you say 
LOOK$X		it will ask for a filename from the terminal:
FILE:  <type (DIRECTORY)NAME.EXT>
it will type some message here if the file can't be gotten.
You can load these cells by hand
USRNAM/   <sixbit DIRECTORY>
USRNAM+1/
FNAME/
FEXT/
and say
RLOOK$G
which will get the RIB into D<D+777> if it can
RIBCLR$G will check rib errors and clear the RIB to
indicate an empty file.
WRITE$G re-writes the data at D<D+777> to disk.





























                                       402
Text: MODIFY; Procedures for modifying monitor sources                    page 1

Your mission, should you decide to accept it, is to modify
a monitor source file.

The first consideration is:  is this edit going to take days
to complete, or is it a quickie that can be complete in
30 minutes?  If it is going to be a long edit, do the following
steps before going on to the others.
	A. Copy module.mac to (yourUFD)module.bas
		(this will be your SMERGE master file in
		case smerge is necessary)
	B. Copy module.mac to module.xxx (xxx = your initials).
	C. Leave module.mac alone in M33 so that others
	   who wish to compile monitors while you are working
		on your module can do so.
	D. Edit module.xxx until you are happy
		with it.  When finished (perhaps some days
		later), run a DIFFERENCES between (yourUFD)
		module.bas and (m33)module.mac to be sure that
		someone hasn't created a new module.mac while
		you were working on module.xxx; if no differences,
		go to step 1, but skip steps 3 & 5.  If
		differences exist, you will need to
		SMERGE module.xxx and module.mac using module.bas
		as the master. Check the results of your
		SMERGE output file module.new carefully,
		using DIFFERENCES between module.xxx
		and module.new.  When it checks out OK,
		go ahead to step 1 below; steps 3 & 5 will be
		unnecessary; use module.new in step 7.

1. Obtain the name of the most recent C37 internal monitor
release by typing (M33)CNFN37.MAC; in general this will be
what is in (sys)system.sav and the running monitor, but they
may differ; if they do, believe CNFN37.MAC; suppose the
file says P034/B13.

2. Rename module.mac as module.b13
3. Copy module.b13 to module.xxx (xxx= your initials).
4. Rename ACCESS.MSG as ACCESS.xxx; edit ACCESS.xxx, put in
   a freeze on the module; EXIT; rename ACCESS.xxx as ACCESS.MSG
5. Edit module.xxx
6. Rename P034.MEM as P034.xxx; if there is a /B14 section
   already begun, append your comments about the change to
   the module; otherwise begin a new section marked /B14
   (or whatever would be the proper next monitor name after
   that found in CNFN37.MAC) with your comments about the
   change to your module. Close your comments with /xxx mm-dd-yy.
   Rename P034.xxx as P034.MEM
7. Rename module.xxx as module.mac
8. Take the freeze statement out of ACCESS.MSG if one is
   there, using the procedure in step 4.






                                       403
Text: MONITOR-NAME; Conventions regarding monitor names                   page 1

The monitor name has the form:

P<major-version number> / <release sequence letter> { - <patch level> }
<major-version number> = 033 | 034 | etc.  this rarely changes
<release sequence letter> = A | B | ... | Z | AA | BA | ... | ZA |
				AB | BB | ... | ZZ
<patch level> is never compiled into a monitor, but is appended
		in the monitor save file at CONFIG+2 according
		to the procedures for patching, which see.

For the monitor development system  (C37 currently), we have in 
addition "internal" monitor releases.  Between any two monitors which
are released to customer machines, such as P034/B and P034/C,
we release internally monitors P034/B01, P034/B02, etc.
The proper way to make an internal release is to use MONED1.
See the internal release procedure.









































                                       404
Text: INTERNAL-RELEASE; Making an experimental monitor                    page 1

Procedure for making an experimental monitor for a single system.

1. make sure any files renamed for editing have been renamed back.
2. make sure that Pxxx.MEM has all changes described properly.
3. run MONED1 and give the system id.
4. test the monitor.
5. install it in (SYS)SYSTEM.SAV if all is well.

Changes to the .MEM file must always be appended.  Never add a heading
by hand unless you know what you are doing.  See node PROC/MEMFILE.
The MONED1 program and Pxxx.MEM file format are described in node
UTIL/MONED1 in detail, and summarized below.













































                                       405
Text: INTERNAL-RELEASE; Making an experimental monitor                    page 2

The MONED1 program will perform the following functions:
    1. find the last header in Pnnnn.MEM for the type release desired.
    2. if text follows this header, append a new header.
    3. edit the CNFNnn.MAC file to reflect current date and version.
    4. log past assemblies in CNFNnn.MAC, truncate after 1 page.
    5. create TMP:SVC with the necessary RPG commands, and run RPG.

MONED1 expects that the Pnnn.MEM file is of the form described in node
PROC/MEMfile.  Never add headings to Pnnn.MEM by hand unless you know 
what you are doing.  

If no modifications have been made to the source, MONED1 will not 
incriment the version number.  Thus there is no harm in running it
twice in a row.  It assumes that there have been no modifications if
the last thing in the Pnnn.MEM file is a heading.










































                                       406
Text: INTERNAL-RELEASE; Making an experimental monitor                    page 3

.run moned1
System id [37]: 
Version [P034/E17]: 
MACRO: COMFAK
C37-P034/E17
7-16-80
60 JOBS
128 PORTS
LOADING
174 PAGES CORE
37XE17 SAVED

.












































                                       407
Text: MEMFILE; Pxxx'MEM file format                                       page 1


The file Pnnn.MEM is the final authority for determining the current and
next version numbers.  

This file contains one page per general release. The heading on each 
page is of the form:
	P034/B
	------
This is the name of the next general release.

Under each page heading is any number of experimental releases.  Each
experimental release has a heading of the form:
	/A01
	----
This is the name of the next experimental release.

Thus, a typical page in Pnnn.MEM would look like this (----'s ommited):
	P034/B
	/A01
	text describing changes appearing in P034/A01
	/A02
	text describing changes appearing in P034/A02
Note that the experimental releases have bear "A" yet the page heading
bears "B".  If this is confusing, consider this: 
    A heading states that all changes between this heading and the next
    heading of this type will appear the release of this name.
In other words,
    The last heading in the file, shows what the NEXT monitor will be
    named.




























                                       408
Text: LICENSE; Policy on programs that grant license                      page 1

Policy Regarding Job Licenses Set By Programs

There shall be only two programs which allow setting license bits
in the job half (right half) of JBTLIC.  These programs shall be
(SYS)OPER and (SYS)SETE.  Specifically, user programs which may or
may not be run at login time (init files), which may or may not
validate the user's identity by any means whatsoever, will not be
permitted.  Such a program would:

1. allow granting of license in a manner disjoint from the 'license
   tree'

2. make the system suseptable to breaches due to obtaining the login
   password

3. allow people to set license on terminals left unattended

4. possibly be used without knowledge of the effects of the license
   it is granting






































                                       409
Menu: STANDALONE; Stand alone programs                                    page 1

411    FTALOD          Magnetic Tape Bootstrap Program
414    PAKCOP          Stand Alone Disk Pack Copy Program























































                                       410
Text: FTALOD; Magnetic Tape Bootstrap Program                             page 1

	THE PURPOSE OF FTALOD IS TO LOAD A MONITOR FROM A MAG-
TAPE WHICH IS MOUNTED ON ONE OF THE IBM TAPE UNITS.  FTALOD
IS NEEDED BECAUSE THE PDP-10 HARDWARE READ-IN FEATURE DOES NOT
WORK WITH THE IBM UNITS.

	THE MONITOR MAGTAPE MAY BE MOUNTED ON ANY OF THE UNITS
ON THE 1ST IBM TAPE KONTROLLER (I.E., ON FTA0 THROUGH FTA7).
THIS KONTROLLER MUST BE INTERFACED TO THE PDP-10 THROUGH ONE
OF THE FIRST TWO SA10S ON THE SYSTEM.

	IN THE EXAMPLES IN THIS DOCUMENT, IT IS ASSUMED THAT
THE TAPE IS MOUNTED ON FTA0.  IF THE TAPE IS ON A DIFFERENT
UNIT, SIMPLY SUBSTITUTE THAT UNIT'S NAME WHERE FTA0 APPEARS
BELOW.



PREPARATION OF THE MAGTAPE USED BY FTALOD
-----------------------------------------

	7 TRACK MAGTAPES ARE PREPARED FOR FTALOD JUST AS THEY
ARE FOR NORMAL READ-IN FROM DEC MAGTAPE UNITS:  MAGRIM IS
WRITTEN AT 556 BPI AND THE MONITOR SAV FILE IS WRITTEN AT 800
BPI.  IN CONTRAST, 9 TRACK TAPES MAY HAVE MAGRIM AND THE MONITOR
SAV FILE AT ANY DENSITIES THAT THE PARTICULAR 9 TRACK UNIT IS
CAPABLE OF HANDLING.

	(FTALOD ACTUALLY DOES NOT USE MAGRIM, IT JUST SKIPS OVER
IT;  MAGRIM IS ONLY REQUIRED SO THAT THE SAME TAPES MAY BE USED
FOR READ-IN FROM BOTH THE DEC AND IBM MAGTAPE UNITS, AND SO
THAT TWO PROCEDURES ARE NOT NEEDED FOR CREATING READ-IN TAPES.).


























                                       411
Text: FTALOD; Magnetic Tape Bootstrap Program                             page 2

RUNNING FTALOD
--------------

1. IF THE SYSTEM IS UP, FOLLOW THE USUAL PROCEDURES TO TAKE IT
   DOWN.

2. MOUNT THE MAGTAPE ON A SUITABLE UNIT, PREFERABLY FTA0.  OF
   COURSE, THE UNIT MUST BE 7 OR 9 TRACK, DEPENDING ON WHETHER
   THE TAPE WAS WRITTEN ON A 7 OR 9 TRACK UNIT, RESPECTIVELY.
   NOTE THAT 7 TRACK UNITS EXPECT TAPES WITH MAGRIM AT 556 BPI
   AND THE MONITOR SAV FILE AT 800 BPI, WHILE 9 TRACK UNITS WILL
   ACCEPT MAGRIM AND THE MONITOR SAV FILE AT ANY DENSITIES THAT
   THE UNIT IS CAPABLE OF READING.  BE SURE THAT THE UNIT IS
   READY (READY LIGHT ON).

3. SET THE CONSOLE DATA SWITCHES AS FOLLOWS:  IF THE LH OF THE
   SWITCHES ARE SET, AND THE RH ARE SET TO A NUMBER FROM 0 TO
   7 INCLUSIVE, FTALOD WILL ASSUME THAT THE TAPE IS ON UNIT FTAN
   WHERE N =RH(SWITCHES);  ANY OTHER SETTING OF THE SWITCHES
   IMPLIES FTA0.  FOR EXAMPLE, IF THE SWITCHES ARE SET TO
   777777,,000003 THE UNIT IS FTA3.

4. PUT THE PAPERTAPE OF FTALOD INTO THE PAPER TAPE READER(PTR).

5. SET THE READIN DEVICE SELECT SWITCHES TO THE PTR.

5. DEPRESS THE READIN SWITCH.

6. IF THE PAPERTAPE DOES NOT LOAD PROPERLY, REINSERT IT AND
   TRY AGAIN.

7. AT THIS POINT, IF ALL IS WELL, FTALOD WILL REWIND THE MAG-
   TAPE, SKIP OVER MAGRIM, AND READ THE MONITOR INTO CORE;  AT
   SUCCESSFUL COMPLETION, FTALOD WILL HAVE POSITIONED THE TAPE
   AFTER THE MONITOR FILE'S EOF AND STARTED THE MONITOR.  IF,
   HOWEVER, FTALOD ENCOUNTERS A FATAL CONDITION AT ANY POINT, IT
   WILL STOP PROCESSING AND DISPLAY THE CONDITION'S ERROR NUM-
   BER IN THE MEMORY DISPLAY LIGHTS ON THE CONSOLE AND ALSO
   BELL THE NUMBER OUT ON THE CONSOLE TERMINAL.  FATAL CONDI-
   TIONS ARE AS FOLLOWS:

	CONDITION		ERROR NUMBER
	---------		------------
    FTA KONTROLLER NOT		      1
    FOUND ON 1ST TWO
    SA10S ON THE SYSTEM.

    FTA KONTROLLER FOUND,	      2
    BUT THE UNIT IS EITHER
    NON-EXISTENT OR NOT
    READY.

    CANNOT REWIND		      3

    CANNOT SKIP OVER THE	      4


                                       412
Text: FTALOD; Magnetic Tape Bootstrap Program                             page 3

    1ST FILE ON THE TAPE.

    WHILE READING THE MONITOR	      5
    SAV FILE, SAW AN EOF WHERE
    IT WAS NOT EXPECTED, OR
    SAW A LENGTH ERROR FOR A
    BLOCK WHICH IS NOT THE LAST
    BLOCK IN THE FILE.

    COULD NOT READ A		      6
    RECORD ON THE TAPE.

    THE TAPE IS WRITTEN IN	      7
    A DENSITY WHICH THE UNIT
    CANNOT READ.  (THIS CAN
    ONLY BE DETECTED IN A VERY
    LIMITED NO. OF CASES;  THE
    OTHER CASES OF THIS WILL
    EITHER RESULT IN ERROR NO.
    6 OR IN INCORRECT DATA
    BEING READ BUT NO ERROR CON-
    ITION BEING INDICATED).


[END OF FTALOD.TXT]
































                                       413
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 1

WHEN THE PACKCOPY PROGRAM FOR THE CALCOMP 230'S (OR IBM 3330'S)
IS LOADED, IT WILL PRINT ITS VERSION NUMBER AND REQUEST THAT
THE DATE BE TYPED IN. AFTER THE DATE IS ENTERED, THE PROGRAM
WILL CHECK THE STATUS OF ALL UNITS AND PRINT THE INFORMATION
ON THE TELETYPE. PACKCPY HAS INFORMATION ASSEMBLED INTO IT
ABOUT WHICH UNITS ARE ON WHAT SA-10, WHICH CHANNEL, ETC. IT CAN
BE ASSEMBLED TO HANDLE THE MAXIMUM CONFIGURATION OF ANY SYSTEM
SO THAT IT IS ONLY NECESSARY TO HAVE ONE COPY. ANY UNITS NOT PRESENT
ON THE SYSTEM ON WHICH IT IS BEING RUN WILL SIMPLY BE REPORTED AS
OFF-LINE.

UNITS ARE NAMED BY THEIR DEVICE ADDRESSES BECAUSE OF POSSIBLE
DIFFERENCES IN CONFIGURATION BETWEEN SYSTEMS. THE DEVICE
ADDRESS IS IN OCTAL. THE LOW ORDER DIGIT CORRESPONDS TO THE NUMBER
ON THE ADDRESS PLUG.

	IF AN SA-10, SA-10 CHANNEL, OR KONTROLLER IS OFF-LINE,
PACKCOPY WILL REPORT THAT ALONG WITH A LIST OF THE UNITS IT
EXPECTED TO FIND ON THAT DEVICE. EXAMPLES:

KONTROLER OFF-LINE, UNITS 340-347
SA-10 CHANNEL OFF-LINE, UNITS 340-347,100-103
SA-10 OFF-LINE, UNITS 340-347,100-103,240-241

IF THE SA-10, SA-10 CHANNEL, AND KONTROLER ARE ALL ON-LINE,
A REPORT WILL BE MADE FOR EACH UNIT. IF THE UNIT IS OFF-LINE
(TURNED OFF, NO ADDRESS PLUG WITH THAT NUMBER, ETC.)THE REPORT
WILL BE:

365 OFF-LINE

IF THE UNIT IS ON LINE, THE REPORT WILL BE

362 ON-LINE

POSSIBLY FOLLOWED BY ONE OR MORE OF THE FOLLOWING:

DUAL DENSITY (UNIT IS A MODEL II WITH TWICE MODEL I CAPACITY)
WRITE PROTECT (THE READ READ/WRITE SWITCH IS IN READ)
UNFORMATTED (THE PACK FORMAT HAS BEEN DETECTED AS IMPROPER. THE
	PACK NEEDS TO BE REFORMATTED)

IF THE UNFORMATTED MESSAGE IS GIVEN, PACKCOPY IS NOT ABLE TO
DETERMINE IF THE PACK IS WRITE PROTECTED.













                                       414
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 2

AFTER THE ABOVE REPORT OF UNIT STATUS, THE PROGRAM PROMPTS WITH
* FOR A COMMAND. WHEN TYPING TO PACKCOPY, RUBOUT AND CONTROL U
CAN BE USED JUST AS AT MONITOR LEVEL. TYPEOUT MAY BE SUPPRESSED WITH
CONTROL O. COMMANDS MAY BE ABREVIATED TO AS MANY CHARACTERS AS MAKE
THEM UNIQUE. THREE CHARACTERS ARE ALWAYS ENOUGH.
WHEN WAITING FOR A COMMAND, PACKCOPY WILL RING THE BELL ONCE EVERY
TWO SECONDS.
PACKCOPY MAY BE ABORTED AT ANY TIME AND RETURNED TO COMMAND LEVEL
BY TYPING <ESC>

	PACKCOPY COMMANDS

SHH
	THIS COMMAND CAUSES PACKCOPY TO STOP RINGING THE BELL.
ITS EFFECT IS CANCELED WHENEVER A COMMAND IS EXECUTED.

HELP
	THIS COMMAND CAUSES A LIST OF COMMANDS WITH A SHORT DESCRIPTION
OF EACH TO BE PRINTED.

STATUS
	THIS COMMAND PRINTS OUT THE STATUS (UNFORMATTED,
WRITE PROTECT, ETC.) OF EACH UNIT WHICH IS ON-LINE.

RESTART
	THIS COMMAND CAUSES THE PROGRAM TO RETEST THE STATUS OF ALL
UNITS. IF A UNIT IS TURNED ON OR CHANGED FORM READ TO READ/WRITE
OR READ/WRITE TO READ, THIS COMMAND MUST BE USED FOR PACKCOPY
TO SENSE THE NEW STATUS OF THE UNIT.

LOAD
	THIS COMMAND CAUSES PACKCOPY TO CHECK THE UNITS ON-LINE
IN AN ATTEMPT TO FIND A COPY OF THE BOOT PROGRAM. IF IT FINDS ONE
IT LOADS IT IN CORE AND STARTS IT. IF ONE IS NOT FOUND A MESSAGE
IN TYPED AND A RESTART IS PERFORMED.


	THE FOLLOWING COMMANDS REQUIRE A UNIT OR A SET OF UNITS TO
BE SPECIFIED. A SINGLE UNIT IS SPECIFIED BY TYPING ITS NUMBER.
A SET OF UNITS MAY BE SPECIFIED BY TYPING A LIST OF NUMBERS AS
367,360,364,362
OR 'ALL' MAY BE USED. IF ALL IS USED, THE COMMAND WILL AFFECT ALL
UNITS WHICH ARE ON-LINE. IF THE UNIT NUMBER OF A DRIVE WHICH
IS OFF-LINE, OR IF A BAD STRING (NOT NUMBERS, ETC.) IS TYPED
THE OPERATOR WILL BE ASKED TO RETYPE THE DRIVE LIST.

	ERRORS
IN MOST CASES UNRECOVERABLE ERRORS WILL BE REPORTED. THE ONLY CASE
IN WHICH THIS IS NOT TRUE IS IF THE PROGRAM INTERPRETS THE ERROR
FOR SOME OTHER PURPOSE. FOR EXAMPLE, THE COPY COMMAND WHEN IT
IS TESTING BLOCKS MARKED BAD TO SEE IF THEY ARE REALLY BAD.
FOR A DESCRIPTION OF THE ERROR REPORT, SEE THE SECTION ON ERRORS.





                                       415
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 3

	EACH OF THE FOLLOWING COMMANDS IS FOLLOWED BY EITHER
(LIST) OR (ONE UNIT) TO INDICATE WHETHER THE COMMAND WILL ACCEPT
A LIST OF UNITS OR ONLY ONE.

LIST	(LIST)
	THIS COMMAND LISTS INFORMATION FROM THE HOME AND BAT
BLOCKS ON THE UNIT. IF THE HOME AND BAT BLOCKS ARE NOT CORRECT OR
HAVE HARDWARE ERRORS ONE OR MORE OF THE FOLLOWING MESSAGES MAY APPEAR:

FIRST HOME BLOCK HARDWARE READ ERROR
SECOND HOME BLOCK HARDWARE READ ERROR
FIRST HOME BLOCK CONSISTENCY ERROR
SECOND HOME BLOCK CONSISTENCY ERROR
FIRST BAT BLOCK HARDWARE READ ERROR
SECOND BAT BLOCK HARDWARE READ ERROR
FIRST BAT BLOCK CONSISTENCY ERROR
SECOND BAT BLOCK CONSISTENCY ERROR

THE INFORMATION PRINTED FROM THE HOME AND BAT BLOCKS IS:

UNIT ID: 360103
STRUCTURE: DSKB LOGICAL UNIT: DSKB0
NO COPY DATE       OR      LAST COPY DATE 12-NOV-1973
NUMBER OF BAD REGIONS: 1
NUMBER OF BAD SECTORS: 1
RECORD,HEAD,CYL 5,13,107
1 RECORDS(S)  12-NOV-1973     OR     NO DATE
IF THERE ARE NO ERRORS INDICATED IN THE BAT BLOCKS
NO BAD SPOTS
WILL BE PRINTED

INIT	(ONE UNIT)
	THIS COMMAND INITIALIZES THE HOME AND BAT BLOCKS ON A UNIT.
IF THE UNIT ALREADY HAS HOME BLOCKS, PACKCOPY WILL ASK
UNIT ALREADY HAS HOME BLOCKS, OVERWRITE? 
AN ANSWER OF YES IS REQUIRED (OR Y OR YE) IN ORDER TO WRITE NEW
HOME AND BAT BLOCKS
THE COMMAND WILL THEN PROMPT
ID: 
THE ID TO BE SPECIFIED IS ANY 6 CHARACTERS. HOWEVER, THE COPY COMMAND
EXPECTS THE FIRST TWO CHARACTER TO BE THE SYSTEM NUMBER, THE
SECOND TWO CHARACTERS TO BE THE PACK SET NUMBER AND THE
LAST TWO CHARACTERS TO BE THE PACK NUMBER.

NEW	(ONE UNIT)
	THIS COMMAND CHANGES THE ID IN THE HOME BLOCK ON THE SELECTED
UNIT. THE UNIT MUST ALREADY HAVE VALID HOME BLOCKS. THE PROMPT IS
ID:









                                       416
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 4

	THE 230'S AND 3330'S HAVE THE ABILITY TO USE ALTERNATE TRACKS
TO TAKE CARE OF BAD SPOTS ON A PACK. A TRACK MAY BE MARKED
AS DEFECTIVE WITH A POINTER TO ITS ALTERNATE. EVERY TIME THE
DEFECTIVE TRACK IS REFERENCED, THE ALTERNATE WILL BE READ OR
WRITTEN INSTEAD. THIS AVOIDS PROBLEMS WITH INCONSISTANT BAT BLOCKS
ON A COPY. PACKCOPY CAN REPORT AND CHECK THE ALTERNATE TRACKS
THAT HAVE BEEN SET UP. A FRESH PACK HAS 133 POSSIBLE ALTERNATE TRACKS.

ALIST	(LIST)
	THIS COMMAND PRINTS A LIST OF WHICH ALTERNATE TRACKS ARE
IN USE AND HOW MANY REMAIN AVAILABLE. THE THREE POSSIBLE
MESSAGES ARE

CYL,HEAD 405,2 DEFECTIVE
 THE ALTERNATE TRACK ITSELF IS BAD
CYL,HEAD 405,2 ALTERNATE FOR CYL,HEAD 139,5
 AN ALTERNATE TRACK HAS BEEN SET UP, CYL 139 HEAD 5 IS DEFECTIVE
131 ALTERNATE TRCKS REMAINING
 THIS THE THE NUMBER OF ALTERNATE TRACKS STILL AVAILABLE FOR USE.

AVERIFY	(LIST)
	THIS COMMAND CHECKS THAT TRACKS WHICH ARE MARKED AS
ALTERNATES ARE IN FACT POINTED TO BY TRACKS WHICH ARE MARKED AS
DEFECTIVE. THE COMMAND WILL EITHER RESPOND WITH

ALTERNATE TRACKS VERIFIED
OR A SERIES OF MESSAGES OF THE FORM
INCORRECT ALTERNATE TRACK. CYL,HEAD 408,18

AFORMAT (LIST)
	THIS COMMAND DOES THE AVERIFY FUNCTION AND CORRECTS ANY
PROBLEMS FOUND. IF THERE ARE NO HARDWARE ERRORS, THE ONLY
RESPONSE IS

ALTERNATE TRACKS FORMATTED AND VERIFIED

VERIFY	(LIST)
	THIS COMMAND CHECKS THE FORMATTING OF THE ENTIRE PACK. IF
THE FORMATTING IS CORRECT, THE MESSAGE

VERIFIED UNIT 367

WILL BE PRINTED. IF THE FORMAT IS NOT CORRECT, AN
ERROR WILL BE PRINTED,

UNIT 362 BAD ALTERNATE TRACK SETUP ON CYL 135 HEAD 15
OR
INCORRECT FORMAT 
FOLLOWED BY 
UNIT 365 DOES NOT VERIFY

IF THE BAD ALTERNATE TRACK MESSAGE IS PRINTED, GIVE THE PRINTOUT
AND THE PACK TO YOUR SHIFT SUPERVISOR.

THE VERIFY COMMAND CALLS THE AVERIFY COMMAND


                                       417
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 5

FORMAT	(LIST)
	THIS COMMAND ESTABLISHES THE CORRECT FORMAT ON A PACK
THE FORMAT COMMAND CALLS THE AFORMAT COMMAND. IT ALSO CALLS THE
VERIFY COMMAND WHEN IT HAS FINISHED TO INSURE THAT THE
FORMAT HAS BEEN CORRECTLY SET. IF PACKCOPY BELIEVES THAT THE
PACK IS ALREADY FORMATTED, IT WILL ASK:

UNIT 365 ALREADY FORMATTED, REFORMAT?

AN ANSWER OF YES WILL CAUSE THE PACK TO BE REFORMATTED.
IF THERE ARE NO ERRORS, THE MESSAGE

FORMATTED AND VERIFIED, UNIT 362

WILL BE PRINTED. POSSIBLE ERRORS ARE:

UNIT 362 DOES NOT VERIFY
 THE FORMAT WAS WRITTEN WITH NO ERROR INDICATION
 BUT DOES NOT VERIFY.

UNIT 362 BAD ALTERNATE TRACK SETUP ON CYL 135 HEAD 15
NOTIFY THE SHIFT SUPERVISOR
SAVE THIS PRINTOUT WITH PACK

ANY HARDWARE ERROR WILL BE FOLLOWED BY THE MESSAGE
FORMAT ABORTED

	TIMING

BELOW ARE SOME OF THE TIMING FIGURES FOR OPERATIONS WHICH
CAN BE DONE IN PARALLEL.

		NUMBER OF UNITS
OPERATION	1	2	3
COPY		9:40	14:15	20:30
VERIFY		2:25	4:30	6:40
FORMAT		6:50	13:10	19:30

TIMES ARE IN MINUTES AND SECONDS


















                                       418
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 6

		COPY
	THE COPY COMMAND HAS SEVERAL OPTIONS WHICH ARE SELECTED
BY SENSE SWITCHES 1,2, AND 3. THE COPY COMMAND WILL ALWAYS
PRINT OUT A LIST OF THE OPTIONS AS CURRENTLY SELECTED.
THE NORMAL MODE OF OPERATION IS WITH NONE OF THE SWITCHES ON.

	SWITCH 1 OFF
ALTERNATE TRACKS WILL BE ASSIGNED FOR BLOCKS
INDICATED BAD IN BAT BLOCKS (SENSE SWITCH 1)
	SWITCH 1 ON
COPY WILL ABORT IF ANY BAD REGIONS ARE
INDICATED IN THE BAT BLOCKS (SENSE SWITCH 1)

	SWITCH 2 OFF
COPY WILL ABORT ON READ ERRORS FROM SOURCE PACK
FOR BLOCKS NOT MARKED BAD (SENSE SWITCH 2)
	SWITCH 2 ON
READ ERRORS FROM SOURCE PACK WILL BE REPORTED BUT
COPY WILL CONTINUE (SENSE SWITCH 2)

	SWITCH 3 OFF
ALTERNATE TRACKS WILL BE ASSIGNED FOR BLOCKS
WITH READ OR WRITE ERRORS ON DESTINATION PACK (SENSE SWITCH 3)
	SWITCH 3 ON
COPY WILL ABORT ON READ OR WRITE ERRORS ON
DESTINATION PACK (SENSE SWITCH 3)

	AFTER PRINTING THE OPTIONS CURRENTLY IN FORCE, PACKCOPY
PROMPTS WITH:

SOURCE DRIVES:

A LIST OF SOURCE DRIVES MAY BE SPECIFIED. SINCE THE PROGRAM TAKES
ADVANTAGE OF I/O OVERLAP, COPYING MORE THAT ONE DIRVE AT A TIME
IS AN ADVANTAGE.
	AFTER THE LIST OF SOURCE DRIVES IS TYPED, THE FOLLOWING
IS REPEATED FOR EACH SOURCE DRIVE.

COPY FROM 364 TO:
PACKCOPY NOW WANTS THE UNIT NUMBER OF THE DESTINATION DRIVE
FOR THE SPECIFIED SOURCE DRIVE. AFTER THIS NUMBER IS
SUPPLIED, ANY OF A NUMBER OF ERRORS MAY RESULT.

SOURCE DRIVE NOT FORMATTED
DESTINATION DRIVE NOT FORMATTED
SOURCE DRIVE NOT WRITE PROTECTED
DESTINATION DRIVE WRITE PROTECTED
DESTINATION DRIVE ALREADY IN USE (DESTINATION DRIVE WAS SPECIFIED
   FOR MORE THAN ONE COPY OPERATION)
SOURCE AND DESTINATION DRIVE NOT SAME TYPE (ONE IS DUAL DENSITY
   AND ONE SINGLE DENSITY)






                                       419
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 7

ANY OF THESE MESSAGES WILL CAUSE THIS COPY (NOT ALL OF THEM) TO
TERMINATE. WHENEVER A COPY TERMINATES, A MESSAGE WILL BE PRINTED

COPY FROM 364 TO 362 ABORTED

PACKCOPY WILL NOT READ THE HOME AND BAT BLOCKS ON BOTH UNITS.
ANY HOME OR BAT BLOCK ERRORS WILL ABORT THE COPY. THE HOME ID'S
OF BOTH UNITS WILL BE CHECKED AS WELL AS THE COPY DATES. WHEN A
COPY IS COMPLETED, THE COPY DATE OF THE DESTINATION PACK IS SET
TO THE CURRENT DATE. ANY ONE OF A NUMBER OF MESSAGES MAY
NOW BE PRINTED

DESTINATION COPY DATE LATER THAN SOURCE COPY DATE
SOURCE AND DESTINATION SYSTEM NUMBERS DIFFER
SOURCE AND DESTINATION UNIT NUMBERS DIFFER
SOURCE AND DESTINATION SET NUMBERS ARE THE SAME

THEN THE MESSAGE

COPY FROM 360106 TO 360206
OK?

WILL BE PRINTED. THE UNITS ARE SPECIFIED BY THEIR HOME ID'S IN THIS
MESSAGE. IF THE ANSWER IS NOT YES, THE COPY WILL BE ABORTED.
IF THE ANSWER IS YES, THE COPY WILL PROCEED AS FOLLOWS:

THE BAT BLOCKS OF THE DESTINATION UNIT WILL BE CHECKED. IF ANY
BLOCKS ARE INDICATED AS BAD, THEY WILL BE CHECKED BY WRITING AND READING
SOME SELECTED DATA PATTERNS. IF ANY ARE REALLY FOUND TO BE BAD,
THE COPY WILL EITHER ABORT OR ATTEMPT TO ASSIGN ALTERNATE TRACKS
DEPENDING ON THE SETTING OF SENSE SWITCH 1. IF ALTERNATE TRACKS
ARE ASSIGNED, A MESSAGE WILL BE PRINTED AS

CYL,HEAD 407,3 ASSIGNED AS ALTERNATE FOR CYL,HEAD 125,8

IF NO MORE ALTERNATES ARE AVAILABLE, THE MESSAGE

NO MORE ALTERNATE TRACKS AVAILABLE

WILL PRINT AND THE COPY WILL BE ABORTED.

AFTER THE BAT BLOCKS ON THE DESTINATION PACK HAVE BEEN
CHECKED, THE COPY WILL PROCEED BY READING DATA FROM THE SOURCE
UNIT, WRITING IT ON THE DESTINATION UNIT, READING IT BACK FROM THE
DESTINATION UNIT, AND COMPARING THE DATA. IF NO ERRORS ARE DETECTED
THE HOME BLOCKS ON THE DESTINATION PACK ARE THEN UPDATED WITH THE COPY
DATE AND THE STRUCTURE INFORMATION FROM THE SOURCE PACK.
THE BAT BLOCKS OF THE DESTINATION PACK ARE CLEARED.

A FINAL MESSAGE 

COPY COMPLETED FROM 362 TO 364

IS PRINTED



                                       420
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 8

	ERRORS DURING PACKCOPY

THERE ARE FIVE PLACES WHERE ERRORS MAY HAPPEN. READING THE SOURCE
PACK, WRITING THE DESTINATION PACK, READING THE DESTINATION PACK,
CHECKING DATA AFTER READBACK, AND WRITING THE UPDATED HOME BLOCKS.

IF ANY READ OR WRITE ERRORS OCCUR, THEY ARE ANALIZED TO SEE IF
THEY ARE DATA ERRORS OR PROBABLE HARDWARE ERRORS (OVERRUN, ETC.)
IF THEY ARE HARDWARE ERRORS THE ERROR AND A MESSAGE

PROBABLE HARDWARE ERROR ON SOURCE PACK

WRITE ERROR ON DESTINATION PACK
PROBABLE HARDWARE ERROR

READ ERROR ON DESTINATION PACK
PROBABLE HARDWARE ERROR

IS PRINTED AND THE COPY IS ABORTED.

FOR A READ ERROR ON THE SOURCE PACK WHICH IS A PROBABLE DATA ERROR
THE BAT BLOCKS ON THE SOURCE PACK ARE CHECKED. IF THE ERROR IS IN
A BLOCK MARKED BAD, THE MESSAGE

ERROR IS IN A BLOCK MARKED BAD. CONTINUING

IS PRINTED AND THE COPY CONTINUES.

IF THE ERROR IS IN A BLOCK NOT MARKED IN THE BAT BLOCKS, THE

COPY WILL ABORT AFTER TYPING THE ERROR IF SENSE SWITCH 2
IS NOT SET. IF SENSE SWITCH 2 IS SET, THE ERROR WILL BE PRINTED
FOLLOWED BY

CONTINUING

FOR READ OR WRITE ERRORS ON THE DESTINATION PACK, EITHER THE
COPY WILL ABORT AFTER PRINTING THE ERROR (SENSE SWITCH 3 SET)
OR THE ERROR WILL BE PRINTED AND AN ATTEMPT MADE TO ASSIGN AN
ALTERNATE TRACK. THE COPY WILL ABORT ONLY IF AN ALTERNATE TRACK
CAN NOT BE ASSIGNED.

DATA COMPARE ERRORS ALWAYS ABORT THE COPY WITH THE MESSAGE

DATA DOES NOT COMPARE BUT NO HARDWARE
DETECTED ERRORS

FAILURE TO WRITE THE UPDATED HOME BLOCKS RESULTS IN THE MESSAGE

CAN NOT WRITE HOME BLOCKS ON DESTINATION
PACK AFTER ALL BLOCKS COPIED.
DESTINATION PACK MAY CONTAIN INCORRECT COPY DATE AND OTHER
WRONG DATA




                                       421
Text: PAKCOP; Stand Alone Disk Pack Copy Program                          page 9

	ERROR MESSAGES

PACKCOPY ONLY PRINTS ERROR MESSAGES FOR NON-RECOVERABLE HARDWARE
ERRORS. IF THE UNIT GOES OFF-LINE THE MESSAGE

UNIT 363 HAS GONE OFF-LINE

WILL BE PRINTED.

ALL OTHER ERROR MESAGES START WITH

UNRECOVERABLE ERROR ON UNIT 361
CYLINER 107,HEAD 2,RECORD 14

THE MESSAGE WHICH MAY PRINT ARE

SELECT ERROR
BUS IN PARITY ERROR
CONTROL ERROR
LENGTH ERROR
INTERUPT ERROR

ALL FROM THE SA-10

ATTENTION
BUSY
UNIT EXCEPTION

FROM STATUS BYTE

BUS OUT PARITY ERROR
OVERRUN
INVALID TRACK FORMAT
NO RECORD FOUND
PROTECTION FAILURE
DATA CHECK
COMMAND REJECT
UNIT IS WRITE PROTECTED
EQUIPMENT CHECK
PERMANENT EQUIPMENT CHECK

DECODED FROM SENSE BYTES

THE FOLLOWING WILL BE PRINTED ONLY IF NO SENSE CAN BE MADE
FROM THE SENSE BYTES RETURNED

UNKNOWN ERROR BYTE 1 BIT 2










                                       422
Text: PAKCOP; Stand Alone Disk Pack Copy Program                         page 10

	HIDDEN COMMANDS

THE FOLLOWING COMMANDS ARE PROTECTED OR HIDDEN IN THAT THEY
REQUIRE TWO COMMANDS TO ACTIVATE THEM. THESE COMMANDS ARE NOT
NORMALLY USED. THEIR USE SHOULD BE LIMITED TO SPECIAL SITUATIONS
AND TO MAINTENCE AND SUPERVISORY PERSONEL.

TO USE ONE OF THESE COMMANDS, TYPE THE COMMAND. PACKCOPY WILL
RESPOND WITH

TYPE HELP FOR A LIST OF COMMANDS

THEN TYPE 

DOIT

THE APPROPRIATE COMMAND WILL NOW BE STARTED.

REFRESH	(ONE UNIT)
	THIS COMMAND REFORMATS AN ENTIRE PACK INCLUDING THE
HOME BLOCKS AND RECORD 0'S WHICH ARE USED TO HOLD THE ALTERNATE
TRACK INFORMATION. THUS ALL ALTERNATE TRACK INFORMATION IS
RESET TO SHOW ALL TRACKS GOOD AND A FORMAT COMMAND IS DONE.
THE VERIFY PORTION OF THE FORMAT COMMAND IS NOT DONE.

OLD	(ONE UNIT)
	THIS COMMAND ASKS FOR A SOURCE AND A DESTINATION UNIT. IT
THEN MAKES A COMPLETE COPY OF THE SOURCE UNIT ON THE DESTINATION
UNIT. NOTHING SPECIAL IS DONE FOR HOME OR BAT BLOCKS. EVERY
BLOCK ON THE SOURCE UNIT IS COPPIED EXACTLY AS IT IS. ALL BLOCKS
ARE WRITTEN ON THE DESTINATION UNIT, READ BACK, AND CHECKED.
ANY ERROR WILL ABORT THE COPY.

ASSIGN	(ONE UNIT)
	THIS COMMAND IS USED TO FORCE THE SETTING OF ALTERNATE
TRACKS. IT WILL ASK FOR A CYLINDER AND HEAD. IF THE TRACK
IS NOT ONE THAT IS NORMALLY CONSIDERED 'SPARE', AN ALTERNATE
WILL BE SEARCHED FOR AND SET UP. THE PROGRAM WILL REPORT
THE CYLINDER AND HEAD SELECTED. IF THE TRACK IS ONE THAT IS
NORMALLY CONSIDERED 'SPARE', IT IS MARKED DEFECTIVE.

DEASSIGN(ONE UNIT)
	THIS COMMAND IS USED TO "UNSET" ALTERNATE TRACKS. IT
IS THE OPPOSITE OF THE ASSIGN COMMAND. IF THE TRACK INDICATED
IS A 'SPARE' AND IS MARKED DEFECTIVE, IT IS REMARKED AS GOOD.
IF THE TRACK IS NOT A 'SPARE' AND IS MARKED DEFECTIVE, BOTH IT
AND THE TRACK ASSIGNED AS ITS ALTERNATE ARE MARKED GOOD.

ERRMAK	(ONE UNIT)
	THIS COMMAND REQUESTS A 'SET' CYLINDER AND HEAD, A 'TO'
CYLINDER AND HEAD, AND A FLAG BYTE.
IT WRITES THE FLAG BYTE IN THE HOME ADDRESS OF THE SET CYLINDER
AND HEAD AND THE TO CYLINDER AND HEAD IN RECORD 0. THIS COMMAND
IS VERY DANGEROUS. YOU CAN GARBAGE A PACK COMPLETELY WITH IT.



                                       423
Menu: TYMNET; Tymnet documentation                                        page 1

425    ECHOING         The deffered echo algorithm
426    BASE            The Base-Host communication interface
430    BALLS           The character ball protocol
434   :MUD             Master User Directory information
437    BLKIO           Base-Host block I/O protocol




















































                                       424
Text: ECHOING; The deffered echo algorithm                                page 1

C12(A4TEL)@ECHO

LAST UPDATE: 3-15-71

   THIS FILE DESCRIBES THE ALGORITHM FOR HANDLING DEFERRED ECHO
IN VERSION 7 TYMNET(SUPERVISOR NETWORK).
   THE REMOTE STOPS ECHOING AND SENDS AN ENTERING DEFERRED ECHO
CHARACTER (EDEC) WHEN THE USER TYPES AHEAD OR TYPES A RUBOUT (377B),
NULL CHARACTER (CONTROL SHIFT P), OR CONTROL CHARACTER(1 THROUGH
37B). CARRIAGE RETURN, LINE FEED, AND CONTROL G(BELL) ARE NOT
CONSIDERED CONTROL CHARACTERS. WHETHER A CONTROL I(TAB) IS TREATED
AS A CONTROL CHARACTER OR ECHOED LIKE A CONTROL G IS UNDER THE
CONTROL OF THE USER PROGRAM. AT THIS POINT THE REMOTE HAS THE
NO BALL OUT FLAG(NBO) ON AND THE GREEN BALL FLAG (GBF) OFF.
   WHEN THE REMOTE IS IN THE ABOVE STATE AND ITS OUTPUT BUFFER IS
EMPTY IT SENDS A GREEN BALL, RESETS NBO, AND SETS GBF.
   WHEN GBF IS ON AND ANOTHER DATA CHARACTER IS SENT IN,
A RED BALL IS SENT AHEAD OF IT AND GBF IS TURNED OFF.
   WHEN 4 TO 8 SECONDS HAVE ELAPSED SINCE ANY BALL, RED OR GREEN,
HAS BEEN SENT IN AND NBO IS OFF, A RED BALL IS SENT IN AND
GBF IS TURNED OFF.
   WHEN A RED BALL IS RECIEVED, NBO IS SET.
   WHEN A GREEN BALL IS RECIEVED AND GBF IS OFF, IT IS IGNORED.
OTHERWISE A LEAVING DEFERRED ECHO CHARACTER(LDEC) IS SENT IN, NBO IS SET
GBF IS RESET, AND THE REMOTE REVERTS TO IMMEADIATE ECHO.
   A PROGRAM IN A HOST IS EITHER RELAXED OR UNRELAXED. IT RELAXES
THE INSTANT IT TRIES TO READ A CHARACTER FROM AN EMPTY INPUT BUFFER
(FOR A PDP10 THIS MIGHT BE MODIFIED TO READ "FROM A BUFFER WITHOUT
A COMPLETE LINE IN IT"). IT BECOMES UNRELAXED THE INSTANT A BREAK
CHARACTER ENTERS THE HOST.
   WHEN AN EDEC ENTERS A HOST AND THE PROGRAM IS RELAXED, THE HOST
ENTERS INTERRUPT ECHO MODE(IEM) AND BEGINS ECHOING CHARACTERS
AS THEY ENTER THE HOST. WHEN AN EDEC ENTERS A HOST AND THE PROGRAM
IS UNRELAXED, THE EDEC IS PASSED INTO THE INPUT BUFFER FOR THAT
PROGRAM.
   WHEN AN EDEC "ENTERS" A PROGRAM (THAT IS, THE PROGRAM DID A TCI
AND THE EDEC WAS THE NEXT CHARACTER IN THE INPUT BUFFER), THE HOST
ENTERS PROGRAM ECHO MODE(PEM) AND BEGINS ECHOING THE CHARACTERS
AS THEY ENTER THE PROGRAM.
   WHEN A BREAK CHARACTER ENTERS THE HOST AND IT IS IN IEM, IT LEAVES
IEM, ECHOES THIS CHARACTER, AND PUTS IT INTO THE INPUT BUFFER
FOLLOWED BY A EDEC. IT ALSO SWITCHES FROM RELAXED TO UNRELAXED.
   WHEN A GREEN BALL IS RECIEVED AND THE HOST IS IN IEM, IT IS
RETURNED. OTHERWISE THE HOST GBF IS SET.
   WHEN A RED BALL IS RECIEVED, IT IS RETURNED AND GBF IS RESET.
   WHEN A PROGRAM RELAXES AND IT IS IN PEM, IT SWITCHES TO IEM.
WHEN A PROGRAM RELAXES AND GBF IS SET, IT IS RESET AND THE GREEN
BALL IS RETURNED.
   IT IS AN ERROR FOR A HOST TO RECIEVE AN LDEC UNLESS IT IS IN
IEM. IT LEAVES IEM WHEN IT RECIEVES AN LDEC.







                                       425
Text: BASE; The Base-Host communication interface                         page 1

       STANDARD BASE TO HOST COMMUNICATION INTERFACE
               UPDATED 1974 JULY

The base/host Communication will be handled in groups of 8-bit
bytes.  The first byte in a logical record will specify the
type of information being passed.  Succeeding bytes will contain
information specific to the preceeding information type.

All logical records will be of one of the following formats:

FORMAT   1st       2nd       3rd       4th        OTHER
TYPE     BYTE      BYTE      BYTE      BYTE       BYTES
 A      Data      
        Type

 B       "        Port
                  Number

 C       "          "       Data

 D       "          "       Subtype   Data

 E       "          "       Character character-string.....
                              count

 F       "          "       4 Bytes of Data
 
 G     Character    "        Character-string........
          count

The Data type is in the range 1:127
If the first bit of the first byte is on the format is G.
Format G carries the data proper to and from the Tymnet circuit.
The first bit of byte three distinguishes formats E & F;
   1 means type E and the character count is in 1:127.






















                                       426
Text: BASE; The Base-Host communication interface                         page 2


The information types are currently as follows:

TYPE FORMAT DIRECTION MEANING

 1    A       Out     Host is up and answered.
               This type is obsolete and should be replaced by
               type 41 which includes the function of type 1.

 2    A       Out     Host is up but shut

 3    A       Both    Sender has crashed.

 4    A       Both    Recipient should crash.

 5    A       In      Base has been taken over.

 6    B       In      Externally initiated new circuit.

 7    B       In      Internally initiated new circuit.

10    B       Both    Stop sending.

11    B       Both    Resume sending.

12    B       Both    Gobbler.  (Disolve characters in pipe.)

13    B       Both    Zapper.  (Delete circuit)

14    B       In      Enter DEM.  (Defered echo mode)

15    B       In      Exit DEM  (Defered echo mode.)

16    B       Both    Green ball.

17    B       Both    Red ball

20    B       Both    Yellow ball

21    B       Both    Orange ball

22    B       Out     Hang character.

23    B       Out     Enter TM (2741 transparency mode)

24    B       Out     Exit TM.

25    C       In      Data loss: count in Byte 3 (not implementd, 1974 july)

26    C       Out     Supervisor request 3rd byte must be 0.

27    C       In      Response from supervisor. Byte 3 is error code.

30    C       Out     Auxilliary login character: char in 3rd. byte.



                                       427
Text: BASE; The Base-Host communication interface                         page 3

31    F       Both    Test pattern probe. pattern in bytes 3-6.
                      Byte two must be zero.

32    F       Both    Test pattern response. returned in bytes 3-0.
                      Byte 2 must be zero.

33    F       Out     Host sad: unhappy bits in bytes 3-6. Byte 2 = 0.

34    B       Out     Echo on.

35    B       Out     Echo off.

36    D       Out     Set terminal charistics: 3rd byte
                      contains sub-type 4th byte contains
                      value.

37    C       Out     Read Terminal Charistics: 3rd Byte contains
                      Sub type 1

40    D       In      Terminal charistics response.

41    C       Out     Host is up. Port number = number of ports.
                      Data = host number.


Sub types for types 36 & 37:

Type Meaning.
 0     Echo on.
 1     echo control-I
 2     echo LF with CR
 3     echo CR with LF
 4     CR delay
 5     input baud rate
 6     output baud rate
 7     requires parity
10     half duplex
11     parameter A
12     parameter B
13     parameter C
14     all (with type 37 only)

On sub-types which set a condition (for example echo on/echo off)
the value will be zero for false and non-zero for true.













                                       428
Text: BASE; The Base-Host communication interface                         page 4


Input to the XDS-940 will be in 3 byte groups with the last
two bytes of the last group of a logical undefined
if not required.

Input to the PDP-10 will be in 4 byte groups plus four undefined bits.

Input to the IBM-370 will be in 2 byte groups.

















































                                       429
Text: BALLS; The character ball protocol                                  page 1

1972 JULY 20

BALL LOGIC

DEFINITIONS

Y = YELLOW
O = ORANGE
R = RED
G = GREEN

A = ACTIVATE JOB
W = WAIT UNTIL INPUT BUFFER OF RECEIVER IS EMPTY AND JOB IS IN
    DISMISS STATE.

REC = RECEIVE
=> = RESULTS IN


WE WOULD LIKE THE FOLLOWING CIRCUITS TO WORK:
R - CP; AP - CP; AP - R.
THE LAST CASE, AUXILLARY TO REMOTE, IS NOT CURRENTLY REQUIRED.
IT MAY BE SOON.

WE WOULD LIKE THE YELLOW BALL LOGIC TO WORK IN EACH OF THE FOLLOWING
CASES, WRITING THE INITIATOR FIRST;
CP -> R; CP -> AP; AP -> CP; AP -> R.
THERE IS SOME SIMILARITY BETWEEN YELLOW AND GREEN BALLS.  ONE MIGHT
HOPE THAT THE FUNCTION OF THE GREEN BALLS MIGHT BE PROVIDED BY
YELLOW BALLS.  IN THIS CASE THE FOLLOWING CASES WOULD BE ADDED;
R -> CP; R -> AP.


**CURRENT REMOTE SITUATION

RULE NO.      RULE
--------      ------------
   1          REMOTE, REC, Y => WY
   2          REMOTE, REC, O => WO


**CURRENT XDS 940 SITUATION

RULE NO.      RULE
--------      ------------
   3          COMMAND PORT, SEND => O
   4          AUX. PORT, SEND => Y
   5          COMMAND PORT, REC, Y => WO
   6          COMMAND PORT, REC, O => A
   7          AUX. PORT, REC, Y => WO
   8          AUX. PORT, REC, O => A


THE CURRENT 370 BASES DO NOT ORIGINATE EITHER YELLOW OR ORANGE BALLS.
THEY OBEY RULE 5.


                                       430
Text: BALLS; The character ball protocol                                  page 2

THE CUPERTINO PDP-10 MONITOR ORIGINATES YELLOW BALLS AND
ACTIVATES ON EITHER.  THEY REFLECT NEITHER.

WE NOW TRY THE FOUR SCENARIOS.

CP -> R
       RULE 3 => O
       RULE 2 => WO
       RULE 6 => A  (THIS IS THE MOST COMMON (AND ORIGINAL) CASE.)

CP -> AP
       RULE 3 => O
       RULE 8 => A  THIS DOESN'T WORK.  THIS IS NOT NEW INFORMATION.

AP -> CP
       RULE 4 => Y
       RULE 7 => WO
       RULE 6 => A (GOOD)

AP -> R
       RULE 4 => Y
       RULE 1 => WY
       RULE 7 => WO   (THIS IS FATAL, THE JOB WON'T REACTIVATE.)


WE INTEND TO MODIFY RULES 1 AND 3 TO:

RULE NO.    RULE
--------    ----------------------
   1'       REMOTE, REC, Y => WO
   3'       COMMAND PORT, SEND => Y

THE FOLLOWING CONSIDERATIONS ARE INHIBITING THE CHANGE OVER
TO RULES 1' AND 3':

1.  THE MONITOR RUNNING IN BUFFALO SENDS A YELLOW BALL AFTER
    THE  LOGOUT MESSAGE TO THE TERMINAL. IT WAITS FOR A YELLOW BALL
    TO BE REFLECTED.  THEN IT ZAPS THE CIRCUIT.

2.  THE CCI MONITOR SENDS YELLOW BALLS AND EXPECTS TO RECIEVE THEM TO
    REACTIVATE THE JOB.

WHEN THESE TWO SYSTEMS CEASE TO RUN OR ARE MODIFIED WE WILL BE ABLE
TO INSTALL RULE 1'.  THE SCENARIO FOR  AP -> R BECOMES:

AP -> R
       RULE 4 => Y
       RULE 1' => WO
       RULE 8 => A   (THAT'S BETTER.)

THE MAIN BENIFIT OF THIS CHANGE IS THAT IT PAVES THE WAY FOR
SWITCHING TO RULE 3'.  SCENARIOS FOR CP -> R AND CP -> AP
MAY NOW BE REDONE:

CP -> R


                                       431
Text: BALLS; The character ball protocol                                  page 3

       RULE 3' => Y
       RULE 1' => WO
       RULE 6  => A  (STILL OK.)

CP -> AP
       RULE 3' => Y
       RULE 7  => WO
       RULE 6  => A    (NOW IT WORKS.)

WE NOW NOTE THAT RULE 2 IS NOT USED.  WE MAY TRY CHANGING IT AND ADDING:

RULE NO.    RULE
--------    -------------------
   2'       REMOTE, SEND => Y
   9        REMOTE REC, O => LEAVE DEFERED ECHO MODE.

A REMOTE WOULD SEND A YELLOW BALL IN PLACE OF A GREEN BALL.
THE TWO NEW SCENARIOS WOULD BE:

R -> CP
       RULE 2' => Y
       RULE 5  => WO
       RULE 9  => LEAVE DEFERED ECHO MODE

R -> AP
       RULE 2' => Y
       RULE 7  => WO
       RULE 9  => LEAVE DEFERED ECHO MODE

TO DO AWAY WITH GREEN BALLS WE MUST MODIFY THE RED BALLS TO EAT 
YELLOW AND ORANGE BALLS.  IF WE DO THIS WE ALSO ANSWER IN ADVANCE
THE NEED FOR A YELLOW BALL GOBBLER.

THERE IS AT LEAST ONE WAY THAT A JOB DISMISSED ON INPUT MAY
BE REACTIVATED  OTHER THAN BY RECIEVING MORE INPUT. IF PRIOR TO
BEING DISMISSED ON INPUT THE PROGRAM REQUESTED TO BE INTERRUPTED
AT SOME TIME IN THE FUTURE, THIS FUTURE TIME COULD OCCUR WHILE
DISMISSED ON INPUT.  SITUATIONS HAVE BEEN DESCRIBED WHERE IT
WOULD BE GOOD IF THE PROGRAM COULD REQUEST THAT ANY
PENDING YELLOW (OR GREEN) BALLS BE REFLECTED WITHOUT GOING THROUGH
THE OVERHEAD OF SETTING THE TIME INTERRUPT AND BRIEFLY DISMISSING
ON INPUT.

TO SUMMARIZE THE PROPOSED RULE MODIFICATIONS AND EXIBIT THE
RESULTING SYMETRY WE FOLD THE NINE RULES INTO THREE:

RULE #S         RULE
-------         --------------------
2', 3', 4       SEND => O
1', 5, 7        REC, Y => WO
6, 8, 9         REC, O => ACTIVATE OR LEAVE DEFERED ECHO MODE.


CURRENTLY (AUG. 7, 1972) WHEN GREEN AND YELLOW BALLS ARRIVE AT A 940
PORT, THEY ARE NOT RETURNED UNLESS THE USER IS DISMISSED FOR TTY INPUT


                                       432
Text: BALLS; The character ball protocol                                  page 4

OR UNTIL SUCH TIME AS HE IS DISMISSED FOR TTY INPUT.  THIS PRESENTS
A PROBLEM WITH AUXILIARY CIRCUITS IN THE CASE OF THE YELLOW
BALL IN THAT A YELLOW BALL WILL GET STUCK AT ONE END IF THE PROGRAM
NEVER DISMISSES ITSELF FOR INPUT. ALSO, IF A PROGRAM NEVER 
DISMISSES ITSELF FOR TTY INPUT, THEN A TERMINAL ATTACHED
TO THE PROGRAM WILL NEVER GET OUT OF DEFERRED ECHO MODE.
IN ORDER TO GET AROUND THESE PROBLEMS,
A NEW BRS HAS BEEN ADDED (BRS 79) WHICH WHEN EXECUTED WILL CAUSE
GREEN AND YELLOW BALLS TO BE IMMEDIATELY REFLECTED UNTIL A CHARACTER
ARRIVES IN THE USER'S INPUT BUFFER.  THE ALGORITHM BY WHICH THIS WILL
WORK IS THE FOLLOWING:  THERE IS A FLAG CALLED "RI" (REFLECT IMMEDIATE)
DEFINED FOR EACH PORT NUMBER ON THE 940.  WHEN THE BRS
IS ISSUED, ANY PENDING YELLOW AND GREEN BALLS ARE RETURNED AND THE
"RI" FLAG IS TURNED ON, SAYING REFLECT ANY FUTURE BALLS IMMEDIATELY.
THE FLAG IS ALSO TURNED WHENEVER THE USER DISMISSES HIMSELF FOR
TTY INPUT SINCE BALLS ARE ALWAYS RETURNED IN ANY CASE WHEN THE
USER IS DISMISSED FOR INPUT.  THE FLAG IS TURNED OFF WHENEVER ANY INPUT
COMES IN ON THAT PORT, SINCE THAT INPLIES POSSIBLE OUTPUT BY THE
PROGRAM AFTER ABSORBING CHARACTERS FROM THE INPUT BUFFER.
THIS FLAG "RI" IS READABLE WITH BRS 40. IT IS RETURNED AS BIT 4B6 IN
THE A-REG.




































                                       433
Menu: MUD; Master User Directory information                              page 1

435    FORMAT          Mud file format
435    CHARACTERS      MUD character set
436    CPARW           CPARW bit definitions






















































                                       434
Text: CHARACTERS; MUD character set                                       page 1

CHAR.    DECIMAL NO.
SPACE  0
A-Z    1-26
-      28
.      29
/      30
0-9    31-40
:      41
@ OR * 42      PRINTS *
'      43
ALL OTHERS  44   PRINTS $
27     RESERVED
NAMES MAY NOT START WITH A "."
LOWER CASE IS TRANSLATED TO UPPER CASE.
CONTROL CHARACTERS ARE IGNORED.










































                                       435
Text: CPARW; CPARW bit definitions                                        page 1

BIT NO.        DESCRIPTION
0      TYMSHARE PROPRIETARY
1      PREMIUM CHARGE CONTROL
2      OPERATOR
3      ALLOWS LOGIN OVER SHUT
4      ACCOUNT SUPERVISOR
5      BYPASS TYMSHARE ID MSG
6      PREVENT MULTIPLE LOGINS UNDER THIS USER NAME
7      COMMON NAME (MORE THAN ONE COMPUTER)
8      LOW PRIORITY SCHEDULING (SLOW MODE)
9      PASSWORD CONTROL (NOT ALLOWED TO CHANGE IF ON)
10     RESERVED
11     RESTRICTED USE BIT
DISTRICT IS IN THE RIGHT HALF OF THIS WORD LEFT SHIFTED TWO











































                                       436
Text: BLKIO; Base-Host block I/O protocol                                 page 1

THE FOLLOWING IS A DESCRIPTION OF THE PROPOSED BLOCK I/O INTERFACE
CONVENTIONS BETWWEN THE PDP-10 AND THE NETWORK.

ALL NUMBERS ARE OCTAL.

THERE WILL BE A MAXIMUM NUMBER OF PORTS WHICH MAY BE IN BLOCK
I/O MODE. THIS NUMBER WILL BE KNOWN TO THE BASE NOT TO THE PDP-10.
WHEN THE PDP-10 WANTS TO CHANGE THE NUMBER OF PORTS ON WHICH IT IS
DOING BLOCK I/O. IT WILL SEND THE BASE A MESSAGE
TYPE 54 IN FORMAT C. THE PORT NUMBER WILL ALWAYS BE 0, THE
DATA CHARACTER WILL INDICATE THE NUMBER OF PORTS THE PDP-10
WANTS TO BE CAPABLE OF BLOCK I/O. THE BASE WILL RESPOND WITH A
TYPE 54 WHOSE DATA CHARACTER WILL BE THE NUMBER OF PORTS THE
BASE NOW THINKS CAN BE DOING BLOCK I/O SIMULTANEOUSLY.

WHEN THE PDP-10 WANTS TO DO BLOCK OUTPUT, IT WILL SEND
A MESSAGE TYPE 44 TO THE NETWORK. THIS WILL HAVE A NEW TYPE FORMAT
DEFINED AS FORMAT TYPE H. FORMAT TYPE H IS 7 BYTES AS FOLLOWES:

1 BYTE OF TYPE, 1 BYTE OF PORT, 5 BYTES OF DATA.

THE 5 BYTES OF DATA WILL BE 2 BYTES OF COUNT AND 3 BYTES OF
ADDRESS. THE ADDRESS WILL BE THE WORD ADDRESS OF THE START OF
THE DATA AND THE COUNT THE NUMBER OF CHARACTERS OF DATA.

WHEN ALL THE CHARACTERS HAVE BEEN TRANSFERED TO THE NETWORK,
THE NETWORK WILL RESPOND WITH A TYPE 45 MESSAGE. THIS WILL
BE IN FORMAT B (I.E. TYPE AND PORT).

TO DO INPUT, THE PDP-10 WILL SEND THE NETWORK A TYPE 46
REQUESTING BLOCK INPUT. THIS MESSAGE WILL BE IN FORMAT H AND
SPECIFY A MAXIMUM COUNT AND A CORE ADDRESS. THE NETWORK MAY
WRITE INTO THIS AREA AT ANY TIME UNTIL IT SPECIFIES BLOCK
INPUT TERMINATION AS INDICATED BELOW.

WHEN THE NUMBER OF CHARACTERS INPUT TO THE BUFFER IN PDP-10 CORE
EQUALS THE NUMBER SPECIFIED IN THE BLOCK INPUT COUNT, THE NETWORK
WILL SEND A TYPE 47 MESSAGE IN FORMAT D. THIS WIL INCLUDE THE
TYPE, PORT, AND A 2 BYTE COUNT FILELD OF THE NUMBER OF
CHARACTERS ACTUALLY INPUT (THIS IS SO THE NETWORK DOES NOT HAVE TO
COMPLETELY FILL THE BUFFER). THE NETWORK WILL ALSO TURN ON
BACKPRESSURE ON THAT LINE. THE RELEASE OF THIS BACKPRESSURE IS
DESCRIBED BELOW.

IF THE NETWORK RECIEVES A SPECIAL END OF TRANSMISSION
CHARACTER DOWN THE CIRCUIT, IT WILL TERMINATE
BLOCK INPUT AND SEND IN A TYPE 50 MESSAGE. THIS WILL
ALSO BE IN FORMAT D. THE COUNT MAY BE 0. THE NETWORK WILL
APPLY BACKPRESSURE. A YELLOW BALL WILL ALSO BE
CONSIDERED AN END OF TRANSMISSION CHARACTER AND BE PUT INTO THE
INPUT RING (FOR AUXILIARY CIRCUITS).

IF A SUITABLE TIME ELAPSES WITH NO INPUT (THIS IS PRIMARILY FOR
CASSETTE TERMINALS, THE TIME WILL NEED TO BE DETERMINED), THE
NETWORK WILL TERMINATE INPUT TO THE CURRENT BUFFER (BUT NOT


                                       437
Text: BLKIO; Base-Host block I/O protocol                                 page 2

BLOCK INPUT MODE) AND SEND IN A TYPE 51 MESSAGE (ALSO FORMAT D).
THE COUNT MAY BE 0. THE NETWORK WILL APPLY BACKPRESSURE
ON THIS LINE.

AT ANY TIME, THE PDP-10 MAY REQUEST THE TERMINATION OF BLOCK
INPUT FOR A GIVEN LINE BY SENDING A MESSAGE TYPE 53. THIS WILL
BE FORMAT B. THE NETWORK WILL TERMINATE BLOCK INPUT MODE, RELEASE
BACKPRESSURE IF IT IS ON, AND SEND IN A MESSAGE TYPE
52 IN FORMAT D. THE COUNT WILL BE THE NUMBER OF CHARACTERS
ALREADY TRANSFERED TO THE PDP-10 BUFFER.
IF NO BUFFER HAS BEEN ESTABLISHED (NO TYPE 46 SINCE LAST
TYPE 47,50, OR 51) THE COUNT WILL ALWAYS BE ZERO. ANY CHARACTERS
ACCUMULATED BY THE BASE WHICH CAN NOT BE TRANSFERED TO THE
PDP-10 IN BLOCK INPUT MODE WILL BE PUT IN THE INPUT RING AFTER
A TERMINATION IS SENT IN (TYPE 52).

BACKPRESSURE ON A BLOCK INPUT LINE WILL BE TURNED OFF EITHER BY
A TYPE 53 TERMINATING BLOCK INPUT, OR BY A TYPE
47 MESSAGE SPECIFYING A NEW BUFFER ADDRESS AND COUNT.

RED AND GREEN BALLS MAY EITHER BE IGNORED BY THE NETWORK OR
PLACED IN THE INPUT RING. THEY MAY BE IGNORED BY THE PDP-10 AND
WILL NOT SERVE ANY SYNCHRONIZATION FUNCTION FOR BLOCK INPUT LINES.
CHARACTER GOBBLERS WILL BE IGNORED BY THE NETWORK. CIRCUIT ZAPPERS
WILL AUTOMATICALLY TERMINATE BLOCK INPUT OR OUTPUT. NO OTHER
CONFIRMATION OF THE TERMINATION FROM THE NETWORK TO THE
PDP-10 IS REQUIRED.

	SUMMARY OF NEW DATA TYPES

FORMAT H (7 BYTES)
	1 BYTE TYPE, 1 BYTE PORT, 2 BYTES COUNT, 3 BYTES ADDRESS

TYPE	FORMAT	DIRECTION	USE

44	H	OUT		INITIATE BLOCK OUTPUT
45	B	IN		BLOCK OUTPUT COMPLETED
46	H	OUT		INITIATE BLOCK INPUT
47	D	IN		INPUT TERMINATED OUT OF BUFFER
50	D	IN		INPUT TERMINATED END OF TRANSMISSION
51	D	IN		INPUT TERMINATED TIMEOUT
52	D	IN		INPUT TERMINATED HOST REQUEST
53	B	OUT		REQUEST BLOCK INPUT TERMINATION
54	C	IN/OUT		NEGOTIATE FOR NUMBER OF BLOCK I/O
				PORTS












                                       438
Menu: USER; User mode software                                            page 1

440   :CUSPS           Commonly Used System Programs
501   :EDITORS         Editor documentation
507   :LANGUAGES       Language documentation
517    ROYALTY         Information on Royalty Accounting
518   :UTILITY         Utility programs




















































                                       439
Menu: CUSPS; Commonly Used System Programs                                page 1

441    DEFINITION      Definition of a CUSP
442   :DDT             DDT program
452   :GFD             GFD program
459   :LOGINN          LOGINN program
465   :LOGOUT          LOGOUT program
480   :MAIL            The MAIL program
484   :RPG             RPG program
487    PROJEC          The project-code verifying program
491    VALID           Project-code validator for Acct
















































                                       440
Text: DEFINITION; Definition of a CUSP                                    page 1

CUSP stands for Commonly Used System rogram.
It must have the following qualities:
  1) be supported;
  2) be available to all users (ie. does not require license);
  3) perform a system related task (not an application related one).




















































                                       441
Menu: DDT; DDT program                                                    page 1

443    HISTORY         Modification history
444    FEATURES        Tymshare DDT Features























































                                       442
Text: HISTORY; Modification history                                       page 1

DDT 25.0	7/5/78 W.R.Soley
 1) Handlles KL paging with new formatted CONO PAG and DATAO PAGE
 2) Implements following $nG's:
    n$0G	simulates DATAO PAG,[n]		on a KI-10
    n$1G	simulates DATAO PAG,n		on a KI-10
    n$2G	copies 8 ac blocks (consecutively) from adr n
    n$3G	copies user ac block (1) from location n
    m,,n$4G	map phys page M into exec virtual page N
    n$5G	set simulated AC stack pointer from location n
    n$6G	simulates CONO PAG,n		on a KL-10
    n$7G	simulates CONO PAG,@n		on a KL-10
    n$8G	simulates DATAO PAG,[n]		on a KL-10
    n$9G	simulates DATAO PAG,n		on a KL-10
    n$10G	map phys page M into user virtual page N
    m,,n$11G	copy ac block M from location N
 3) Implements the following n^B's:
    1^B		Sets up for looking at KI crash
    2^B		Sets up for looking at KL crash
 4) Saves 8 ac blocks (opposed to 1).

DDT 25.1	7/10/78 W.R.Soley
 1) Takes lower case switches in FILDDT (/s).



































                                       443
Text: FEATURES; Tymshare DDT Features                                     page 1

The following is a collection of useful notes on the operation
of DDT.  It supplements rather than replaces the DDT manual.

$$"/text/	puts text in more than one location in SIXBIT.
$$7"/text/	same but in ASCIZ.
text$$bits&	enters stuff in RADIX-50.
$siz%byt1,byt2,byt3...$		enters bytes of siz n; if n=0
		then uses byte mask - to set byte mask, use
		n$2M where first byte field is 0, second is
		1, third is 0, etc. for example to enter PDP-10
		instructions, do
			000757,,0$2M	$0%inst,ac,indir,index,e$
$L, $$L		If bit name table is set with adr$3M, sets typeout
		mode to halfword flags.

$J, $$J		If bit name table is set with adr$3M, sets typeout
		mode to symbolic flags.








































                                       444
Text: FEATURES; Tymshare DDT Features                                     page 2


$$:		prints currently open module
module$$:	temporarily open module
^A		control-a may replace $$: in above two
$/ $\ $[ $] $<tab> $=	all calculate effective address

loc$$1_		prints loc as a byte pointer
pointer$$_	prints out byte pointed to by pointer

x$y m	sets loc $m+y to x
where:
y=0	mask
y=1	how far away until symbol not user for adr printout
y=2	byte input mask
y=3	address of bit name table, in RADIX50, 36. entries long
	  used for $L and $J.

$I is a DDT cell used in EXEC DDT. Left half contains saved PC flags,
	right half contains PI channels that were in progress.
$I+1 contains the CONO PI data to turn off interrupt channels while
	inside DDT. Default is to leave channels 1 and 2 on.
$I+3 contains the address of a special output routine. Character
	is contained in AC 5. Return is POPJ 1,.


































                                       445
Text: FEATURES; Tymshare DDT Features                                     page 3

The following switches apply only to FILDDT:

Switches that may follow input file name:
	/F	don't expand core image file
	/C	expand as core image file
	/S	load symbol table from file
If no extension is typed, will find a core image file and
	expand it unless /F given.
If extension is typed, file will not get expanded unless /C given.
















































                                       446
Text: FEATURES; Tymshare DDT Features                                     page 4

The following buffers and control commands are for FILDDT:

0^B	Executes code at %%PAT (loaded by user) - most versions
	of FDnnnv.SAV have code to print crash data there.
1^B	Sets up stuff to look at a KI crash:
	PAGDTI$1G CRSHAC$2G %UPT+UPTACP$5G
2^B	Sets up stuff to look at KL crash:
	PAGDTI$7G PAGCNI$9G CRSHAC$2G
^W	toggle write enable bit (no good on disk files )
^V	toggler between CODE MODE and FILE MODE
^Y	take a command file
$G	restart DDT

The following symbols allow user to change code for use by 0^B,
this must be done in CODE MODE:

%%PAT	address of 0^B routine
%%FET	LUUO to fetch from file - skips on success
%%END	LUUO to go back to real DDT






































                                       447
Text: FEATURES; Tymshare DDT Features                                     page 5

These "GO" commands perform the functions indicated in EDDT and FILDDT:

n$0G	   simulates	DATAO PAG,[n] on KI-10
n$1G	   simulates	DATAO PAG,n on KI-10
n$2G	   copies [n to n+20*8-1] into AC's
n$3G	   load AC block 1 from [n to n+17] (same as 1,,n$11G)
m,,n$4G	   map physical page M into exec virtual space at N
n$5G	   set simulated AC stack pointer from contents of n
n$6G	   simulates	CONO PAG,n	on KL-10
n$7G	   simulates	CONO PAG,@n	on KL-10
n$8G	   simulates	DATAO PAG,[n]	on KL-10
n$9G	   simulates	DATAO PAG,n	on KL-10
m,,n$10G   same as $4G except for user space
m,,n$11G   load AC block m from locations [n to n+17]











































                                       448
Text: FEATURES; Tymshare DDT Features                                     page 6

The following pertains to both FILDDT and EDDT:

n^E<delim><text><delim>	puts text in command buffer n
n^P	prints contents of command buffer n
n^B	executes command buffer n

$nB+3/	address of ASCIZ string to do at breakpoint

with / \ [ ] <tab> and =
$0	effective address
$1	user location
$2	fetches effective address and gets user location
$3	gives physical address with =
$ is same as $0











































                                       449
Text: FEATURES; Tymshare DDT Features                                     page 7

The following pertains only to EDDT:

EDDT is kept if breakpoint 1 exists

EDDT has two assembled command buffers:
 1^B	bring system up for T/S, ^ZB at console gets back to bpt
 2^B	stand alone - CTYSIM runs console as user terminal:

also, the following work anytime in CTYSIM:
  ^ZB	causes breakpoint
  ^ZL	logs in
  ^Zn	fill N chars
  ^ZH	simulates hangup
  ^ZO	helps control O

EDDT has 16 breakpoints.
$4G works!








































                                       450
Text: FEATURES; Tymshare DDT Features                                     page 8

FRMDDT includes the following features in addition to those in DDT:

<n>$U		- sets up frame number <n> to be hacked
^V		- read symbols from a file
^W		- toggle write enable flip-flop
		- print status line for frame being hacked 
		  the status line includes the frame number, user name,
		  program name, run state, and current PC word

In addition, the frame may be halted by doing 
	HALT$X
or, if HALT has not been defined,
	JRST 4,$X












































                                       451
Menu: GFD; GFD program                                                    page 1

453    CALLING         Calling GFD from a program
457    HISTORY         Modification history
458    ACCESS          Creating GFD access lists






















































                                       452
Text: CALLING; Calling GFD from a program                                 page 1




                                                              GFD 14.0
                                                             W.R.Soley
                                                       August 23, 1978



The following changes  appear in GFD version  14.0 and later.   GFD is
now callable from a program.  The protocol allows the user to pass the
name of the directory to be GFD'd into as well as a (optional) program
name to run upon completion.   When GFD is requested to run  a program
in this manner, it refrains from printing fatal error messages  on the
terminal.   Upon  running  the  requested  program,  GFD   passes  the
following in  the accumulators  to the  next program:  1) In  AC10, an
error code if one occured, or  0 if the GFD was performed; 2)  In AC11
through AC17, the ASCIZ error message that would have been  printed at
the  terminal.  If  AC10  contains 0,  the contents  of  AC11-AC17 are
undefined.

To call GFD, one creates either a tempcore file named "GFD" or  a disk
file named  "jjjGFD.TMP" on the  current directory.   "jjj" represents
the current  decimal job  number with  leading zeroes  preserved.  The
format  of  this data  should  be  as follows:  1)  An  ASCII username
followed  by  <Carriage-Return>;  2)  An  (optional)   ASCII  filename
followed by  <Carriage-Return>.  The file  name may contain  a device,
username  or  PPN  specification  in  the  standard  format.    To  be
compatable with other protocols, the  file name may be followed  by an
exclamation mark (!), and <CR>'s may be followed by <LF>'s.  A null in
the string,  will cause  scanning to  terminate.  If  no file  name is
given, the <CR> after the username is optional.

Below is a list of error codes that may be returned in AC10 as well as
the ASCIZ string that may  be returned in AC11-AC17.  The  error codes
are in octal.
        1       ?system problem
        2       ?access denied
        3       ?can't open structure
        4       ?ufd read error
        5       ?can't delete search list
        6       ?chgppn uuo failed
        7       ?bad ufd
        10      ?can't read lud
        11      ?not a valid user

The  calling  sequence in  MACRO  would  be as  follows:  1)  Create a
TMPCOR:GFD  file with  the necessary  information in  it  as described
above.  2)  If there is  insuficient room for  the TMPCOR  file (often
happens)  then create  DSK:jjjGFD.TMP as  above.  3)  Run  SYS:GFD (no
extension) with a start increment  of 1.  On the following page,  is a
MACRO  routine (fortran  callable)  which will  perform a  GFD  to the
username passed as it's  argument.  This example does not  request GFD
to run any programs when it is done for simplicity.



                                       453
Text: CALLING; Calling GFD from a program                                 page 2




COMMENT %
        GFD IS A FORTRAN CALLABLE (AND MACRO CALLABLE) ROUTINE TO
        PERFORM A GFD TO ANOTHER DIRECTORY.  IT SHOULD BE CALLED
        AS FOLLOWS FROM MACRO:

        JSR 16,GFD
        ARG [ASCIZ "-<username->"]

        OR AS FOLLOWS IN FORTRAN:

        INTEGER USERNAME(3)
        READ (1,1) USERNAME
1       FORMAT(3A5)
        CALL GFD(USERNAME)

        OR AS FOLLOWS IN FORTRAN:

        CALL GFD('-<username->')
%       

        ENTRY   GFD

Q=16
A=1
B=2
C=3
D=4
E=5

GFD:    Z                       ; JSR HERE

        RESET                   ; ALL I/O CHANNELS SHOULD BE CLOSED

        MOVEI   D,@(Q)          ; GET ADDRESS OF STRING
        SUBI    D,1             ; SUBTRACT 1 TO MAKE IOWD
        HRLI    D,-3            ; 3 WORDS FOR A USERNAME

        ; (D) IS NOW AN IOWD POINTING TO THE ASCIZ USERNAME
        ; FIRST TRY WRITTING TMPCOR:GFD

        MOVSI   C,(SIXBIT "GFD")
        MOVE    A,[TMP.WR,,C]   ; ARGS FOR TMPCOR UUO
        TMPCOR  A,
         SKIPA                  ; FAILED - NOT ENOUGH ROOM - USE DISK
          JRST  RUNIT

        ; HERE IF TMPCOR FAILED - TRY WRITTING ON DSK:JJJGFD.TMP

        INIT    17              ; GET DISK FOR DUMP I/O
         SIXBIT "DSK"
         Z
          JRST  CANT


                                       454
Text: CALLING; Calling GFD from a program                                 page 3


        ; NOW FIXUP THE DSK:JJJGFD.TMP FILENAME WITH JOB NUMBER























































                                       455
Text: CALLING; Calling GFD from a program                                 page 4




        PJOB    A,              ; JOB # IN A
        IDIVI   A,^D100
        IDIVI   B,^D10          ; 1ST-3RD DIGITS IN A,B,C
        ADDI    A,'0'           ; MAKE THEM SIXBIT
        ADDI    B,'0'
        ADDI    C,'0'
        MOVE E,[POINT 6,GFDNAM] ; GET POINTER TO FILENAME
        IDPB    A,E             ; SAVE THE CHARACTERS IN FILENAME
        IDPB    B,E
        IDPB    C,E

        ; FILENAME IS NOW DSK:###GFD.TMP WHERE ### IS DECIMAL JOB#
        ; NOW, WRITE THE FILE

        ENTER   GFDNAM
          JRST  CANT
        SETZ    E,              ; IOWD MUST BE FOLLOWED BY 0 FOR OUT
        OUTPUT  D               ; DO OUTPUT THROUGH THE IOWD
        CLOSE                   ; CLOSE THE FILE
        RELEAS                  ; RELEASE THE DISK

        ; NOW THE GFD TEMP FILE IS WRITTEN, TIME TO RUN GFD

RUNIT:  MOVE A,[1,,[    SIXBIT "SYS"
                        SIXBIT "GFD"
                        EXP 0,0,0,0]]
        RUN A,

        ; IF THE RUN RETURNS, IT OBVIOUSLY DIDN'T WORK!

CANT:   OUTSTR  [ASCIZ "?Unable to call GFD"]
        EXIT    1,              ; STOP THE PROGRAM
        JRST    CANT            ; IN CASE OF CONTINUE





















                                       456
Text: HISTORY; Modification history                                       page 1

13.0	5/19/78 W.R.Soley
 1) Looks for ACCESS.MSG in directory being GFD'd into.
 2) Types everything in lower case.

13.1	5/26/78 W.R.Soley
 1) Fixes so won't print line numbers or header.

13.2	6/13/78 W.R.Soley
 1) Fixes so won't print files protected against user in AUN's dir.
 2) Note: now requires RF in addition to ST and JL licenses.

13.3	6/13/78 W.R.Soley
 1) Fixes messages so they tell you what went wrong,
 2) ACCESS.MSG won't if there was an error

14.0	8/23/78 W.R.Soley
 1) Makes GFD callable by other programs, provides means for
    GFD to call program back when done and pass error codes.

14.1	11/7/78 W.R.Soley
 1) Fixes bug causing ILL MEM REF when a second program is
    specified to be run after getting CCL from a DSK: temp file.



































                                       457
Text: ACCESS; Creating GFD access lists                                   page 1

GFD permits access to persons listed in file ACCESS.LST in the
target directory.  This file is compiled by a [FORTRAN?]
program (UPL)ACCESS.sav.  Run this thing after you are in the
directory you want to be able to GFD to. (Sounds screwy, yes?;
maybe you set license to GFD there in the first place, but don't
want to have to have license set to get in later.  Or, have
the owner of the ufd run (upl)access in his ufd.  Have him enter
you username onto the list using the program, then give the QUIT command.
It will leave an updated copy of ACCESS.LST in the ufd. Thereafter
you will be able to GFD there with no license.















































                                       458
Menu: LOGINN; LOGINN program                                              page 1

460    HISTORY         Modification history
























































                                       459
Text: HISTORY; Modification history                                       page 1

64.0	26 Nov 80 /WRS
Put in check for GAN 3 to never do anything evil to a gan 3 user.
Specifically, it will not ever set a TRU limit or refuse login due
to restricted.

63.2	11 Nov 80 /EVS
Put check in for F3 - if machine is an F3, set flags which cause
LOGINN to use local password file like 2020 does.

63.0	28 May 80 /aaa
a) fix bug introduced with KS2020 mods which caused timer
not to be running while waiting for final CR LF.  If network
was slow, user would hang up on LOGINN. It would hang detached
at the INCHWL, and hang up spare LDB queue because JACCT was
set disallowing ^C-hang.  The fix was to reorganize code, which
was doing altogether too much jrst-ing around anyway (left over
from WFW days).
b) arm for zapper-recvd interrupt, so if LOGINN gets detached
it should immediately log out by itself.
c) extensive cosmetic changes to move utility routines to
one section of LOGINN and leave main code-line pretty un-
interrupted.  Added comments all over the place.



































                                       460
Text: HISTORY; Modification history                                       page 2

62.1	14 Nov 79 /elb
Fixed bug that required ! in front of user name when debugging
on KL/KI in CTYSIM.

62.0	30 Oct 79 /AAA, /ELB
Integrate KS2020 mods (pretty substantial).
Do some cosmetic editing in first few pages removing comments
which belong in this .INF file, etc.

















































                                       461
Text: HISTORY; Modification history                                       page 3

61.4	20 Sep 79 /TLC
Fixed bug that caused input supplied after prompt for job number
to not echo if no project code required. Just moved a setmod.

Bit 35, stmdat+5 (loginn stream record word 5) set if user logs in
with shut override, else cleared.

61.3	12 Jun 79 W.R.Soley
Took out the gross hack described in 61.1 below.  It was just too gross,
I couldn't bear to transmitt it.  Let the network people fix it.

61.2	3 Apr 79 /AA
Removed superfluous mstime call at inmss.

61.1	16 Mar 79 W.R.Soley
Put in a hack to not echo the ";" if project codes are turned
off.  This is to hack around the bug causing Tymnet to send
the host a ";" as the terminator in the login string regardless
of if the user supplied a <cr> or a ";".  Joe Rinde will
hopefully fix the sup. code so we can take this nauseating
hack out.  (along with this comment)
Also, fixed the project code getting set to garbage if not given.

61.0	5-Mar-79 W.R.Soley
It is now possible to set bit 8 in word 2 of the LUD entry for
a given user to prevent a project code from being read durring
LOGINN.  This will eliminate one of the semicolons in the quick
login format.  (for ONTYM)

60.1 	5 Mar 79 /AA
At the request of John Luongo and Allen G., node 1277 removed
from list of nodes which loginn will force into
XEXECJ mode. Now only nodes 1270 to 1276 do so. /aa
























                                       462
Text: HISTORY; Modification history                                       page 4

60.0 /aaa 27 nov 78
1) remove some useless stuff inside repeat 0's pg 16 & 18.
2) move loginn uuo & setjal uuo's into routine "acct", which
   is now the one place where a)loginn uuo b)setjal jacct_0
   c) login stream record
   all happen.  the purpose is to have login uuo set jbtaun
	before putsar tries to write login record.  actser depends
	on jbtaun set to check if user writing into stream
	is same aun as owner of (possibly dead) chkpnt.
	formerly login uuo was being done after putsar
	of login record; result was that if chkpnt died,
	users w/chkpnt's aun (usually oper) who logged in
	later (rather than attach to chkpnt job) got
	hung in ac wait because their aun's didnt match
	that of dead chkpnt. /aa

57.2	8/10/78 W.R.Soley
 1) Prevents alarm and set opr garbage for users not in gan 1.

57.1	6/12/78	W.R.Soley
 1) Looks for SYS:ACCESS.MSG as well.
 2) Eliminated (ugly) header, fixed so it will not print a file
	protected NO * *.


































                                       463
Text: HISTORY; Modification history                                       page 5

57.0	5/19/78	W.R.Soley
 1) Looks for ACCESS.MSG in user directory and types if found.
 2) Types everything in lower case.






















































                                       464
Menu: LOGOUT; LOGOUT program                                              page 1

466    HISTORY         Modification history
466   :ALP             Alternate Logout Program facility























































                                       465
Menu: ALP; Alternate Logout Program facility                              page 1

467    DESC            Description
475    EXAMPLE         Example (MACRO-10)























































                                       466
Text: DESC; Description                                                   page 1




                                       Alternate Logout Program facility
                                                           March 6, 1979
                                                            Wm. R. Soley



     As of Tymcom-X monitor  version P033/GA and later,  and LOGOUT
     version 41 and later, a new feature will be available allowing
     any user  to specify  a program to  be run  immediately before
     logout.

     The program may be  specified at any time durring  the session
     by a call to the SETALP uuo.  Once an alternate logout program
     (ALP)  has been  setup  by this  uuo,  it may  not  be cleared
     (except  by  logging out),  and  it may  not  be  changed (ie.
     succesive SETALP uuos will fail).

     The ALP program  will be run by  the LOGOUT program  the first
     time that logout runs durring a session.  Any subsequent times
     that LOGOUT runs will not invoke the ALP program.  This  is to
     prevent a faulty ALP program from preventing a user from being
     logged out  and thus preventing  the system from  coming down.
     The standard procedure is  for the ALP program to  perform its
     task (quickly) and proceed to do a RUN uuo for the real logout
     program.  The RUN uuo should specify physical only  to prevent
     any problems from conflicting logical device names.

     The ALP program has the following responsibilities in order to
     insure integrity:

          1) The  program should never  do terminal I/O  if it
          was  called at  entry point  plus one.   This  is to
          prevent the job  from hanging should it  be detached
          (ie. logout on disconnect).

          2)  The program  should  be prepared  to  handle any
          errors  which may  be encountered  without aborting.
          (ie. lookup errors, quota exceeded, etc.)

          3)  When finished  with its  task, or  when  a fatal
          error  is  encountered,  the  program  should  do  a
          physical  only  RUN  uuo  giving  the   device  name
          obtained  from  GETTAB  [7,,11]  (SYSTAP),  the  ppn
          obtained from  GETTAB [1,,16] (SYSPPN),  the program
          name obtained from GETTAB [25,,11] (LGONAM),  and an
          extension and core size of zero.

          4)  The  program  must  not  require  any  input  or
          response from the user.  In the case of the operator
          taking  the  system   down,  this  might   cause  an
          unreasonable  delay   thus  preventing   an  orderly
          takedown.


                                       467
Text: DESC; Description                                                   page 2

March 6, 1979      Alternate Logout Program facility              Page 2


          5) The program should complete in a short  period of
          time and should use only a small number of TRUs.

          6) The program should be very throughly debuged!!

     It should also be noted that just because a  program specified
     as the ALP is run, does not mean that the user is really being
     logged out.   That is,  anyone can run  the program,  not just
     LOGOUT.  If this is of any consequence, the ALP program may do
     a gettab to obtain the jobs JBTSTS word.  If KJOB Pending (KJP
     - bit 29) is set, this indicates that the job has  commited to
     logout and that the LOGOUT program has been run.  If  this bit
     is not set, the program does not need to run the  real logout.
     (ie. the program may abort if this bit is off)

     The usual method of setting  up the ALP program is to  have an
     init program  do a SETALP  uuo.  It should  be noted  that the
     INIT program may specify itself as the ALP program.   It could
     look at  the KJP  bit to  determine if  it is  being run  as a
     result of login or logout.  Containing both tasks in  the same
     program would save disk space as well as add aesthetic appeal.

     A variation on this method would provide greater security from
     the possibility  of the  user defeating  the ALP  program (ie.
     logging  out without  it  being run).   An  account supervisor
     could setup  a project code  validation program (which  may or
     may not validate project codes) that would do the  SETALP uuo.
     In this way the user would be unable to do any useful  work in
     a session in which the SETALP had not been done.

     Below is  an example  written in MACRO-10  of a  program which
     serves as both  the init and alp  program.  It must be  set up
     with NONAME as the user's init program.  When run at login, it
     will set itself  up as the user's  alp program.  Merely  as an
     indication of the  fact that it is  working, it will  type the
     message  "Hello there  <pjc>" when  the user  logs in  and the
     message  "See ya  later <pjc>"  when the  user logs  out (this
     assumes  that the  user logs  in using  his first  name  for a
     project  code).   If  the  user  logs  out  with  EXIT,  or is
     detached, it will not print any message.














                                       468
Text: DESC; Description                                                   page 3

March 6, 1979      Alternate Logout Program facility              Page 3


title   ALP     Alternate Logout Program (example)

; ac definitions

a=1
b=2
c=3
d=4
f=6
t1=10
t2=11
t3=12
t4=13
q=16
p=17

; uuo definitions

phonly==200000          ; bit to compliment to make physical only calli

opdef PHRUN [calli 35!phonly]   ; define physical only run uuo
opdef SETALP [calli -127]       ; not in MACRO yet
opdef CHPJC [calli -61]

 .gtsts==0              ; gettab for jbtsts
    kjp==1b29               ; KJOB Pending bit in jbtsts
 .gtfpn==-25            ; gettab for jbtfpn (program ppn)
 .gtnam==3              ; gettab for jbtnam (program name)
 .gtcnf==11             ; gettab table for sys configuration
    systap==7               ; index for system device
    lgonam==25              ; index for logout program name
 .gtdsk==16             ; gettab table for dsk system info
    sysppn==1               ; index for ppn of system files

; storrage definitions

PJC:            ; place to put project code from system (ASCIZ)
        block 3

ALP:            ; place to put name of this program (for SETALP)
alpdev: sixbit "DSK"    ; can't gettab device - assume disk for now
alpppn: z               ; ppn
alpnam: z               ; name

LOG:            ; place to put run block for logout program
logdev: z               ; device
lognam: z               ; name
        z               ; extension
        z               ; unused
logppn: z               ; ppn
        z               ; license/core



                                       469
Text: DESC; Description                                                   page 4

comment ;
























































                                       470
Text: DESC; Description                                                   page 5

March 6, 1979      Alternate Logout Program facility              Page 4


subttl  main program

start:  tdza f,f        ; f = 0 if normal start
         seto f,        ; f = -1 if start+1

        hrroi a,.gtsts  ; get jbtsts word for me
        gettab a,
          halt .        ; see note 1

        trne a,kjp      ; see if logging in or out
          jrst logout   ;   logging out (KJP = 1)
        jrst login

comment ;








































                                       471
Text: DESC; Description                                                   page 6

March 6, 1979      Alternate Logout Program facility              Page 5


subttl  login   code to handle logging in

login:  hrroi a,.gtfpn  ; get ppn of this program
        gettab a,
          halt .
        movem a,alpppn

        hrroi a,.gtnam  ; get name of this program
        gettab a,
          halt .
        movem a,alpnam

        movei a,alp
        setalp a,       ; set the alp program
          jfcl          ; somebody ran me twice - ignore this

        ; here may be inserted anything else that one may
        ; wish one's init program to do, ie. setup tty, etc.

        movei a,pjc
        chpjc a,        ; get project code for kicks
          halt .

        outstr [asciz "Hello there "] ;say hello
        outstr pjc      ; print pjc

        exit 1,         ; nice pretty exit
        jrst .+1        ; in case he types "cont"

comment ;
























                                       472
Text: DESC; Description                                                   page 7

March 6, 1979      Alternate Logout Program facility              Page 6


subttl  logout  code to handle logging out

logout: 

        ; here may be inserted anything that is to be done
        ; regardless of start address used, (ie. accounting,
        ; file cleanup, etc.) ***Remember: all errors must
        ; be handled gracefully, (ie. jrst die).

        jumpn f,die     ; if user doesn't want anything said
                        ; because we were run at start+1

        ; here may be inserted anything that is to be done
        ; only if start address +0 was used, (ie. a message,
        ; etc.) ***Remember: all errors must be handled
        ; just as gracefully here, (ie. jrst die).

        movei a,pjc
        chpjc a,        ; get project code (just an example)
          jrst die      ; see note 2

        outstr [asciz "See ya later "] ; say goodbye
        outstr pjc      ; type out project code
        outstr [byte(7)15,12] ; crlf

        ; come here to handle an error or just beacuse we're done

die:    move a,[systap,,.gtcnf]
        gettab a,       ; get system device name
          movsi a,(sixbit "SYS") ; assume "SYS:" if error
        movem a,logdev

        move a,[sysppn,,.gtdsk]
        gettab a,       ; get system directory ppn
          move a,[1,,4] ; assume [1,4] if error
        movem a,logppn

        move a,[lgonam,,.gtcnf]
        gettab a,       ; get system logout program name
          move a,[sixbit "LOGOUT"] ; assume "LOGOUT" if error
        movem a,lognam

        movei a,log
        skipe f         ; if run at start+1 do same to logout
          hrli a,1
        phrun a,        ; physical only run 
          halt .


comment @




                                       473
Text: DESC; Description                                                   page 8

March 6, 1979      Alternate Logout Program facility              Page 7



Note 1: note here that the HALT instruction after the GETTAB is
        acceptable since this particular GETTAB could never fail.

Note 2: note that the HALT after the RUN uuo is acceptable and
        desirable since it will cause the monitor to type the
        appropriate error message should it be unable to run the
        LOGOUT program.

@
        end start











































                                       474
Text: EXAMPLE; Example (MACRO-10)                                         page 1

title	ALP	Alternate Logout Program (example)

; ac definitions

a=1
b=2
c=3
d=4
f=6
t1=10
t2=11
t3=12
t4=13
q=16
p=17

; uuo definitions

phonly==200000		; bit to compliment to make physical only calli

opdef PHRUN [calli 35!phonly]	; define physical only run uuo
opdef SETALP [calli -127]	; not in MACRO yet
opdef CHPJC [calli -61]

 .gtsts==0		; gettab for jbtsts
    kjp==1b29		    ; KJOB Pending bit in jbtsts
 .gtfpn==-25		; gettab for jbtfpn (program ppn)
 .gtnam==3		; gettab for jbtnam (program name)
 .gtcnf==11		; gettab table for sys configuration
    systap==7		    ; index for system device
    lgonam==25		    ; index for logout program name
 .gtdsk==16		; gettab table for dsk system info
    sysppn==1		    ; index for ppn of system files

; storrage definitions

PJC:		; place to put project code from system (ASCIZ)
	block 3

ALP:		; place to put name of this program (for SETALP)
alpdev:	sixbit "DSK"	; can't gettab device - assume disk for now
alpppn:	z		; ppn
alpnam:	z		; name

LOG:		; place to put run block for logout program
logdev:	z		; device
lognam: z		; name
	z		; extension
	z		; unused
logppn:	z		; ppn
	z		; license/core

comment ;
.next page;



                                       475
Text: EXAMPLE; Example (MACRO-10)                                         page 2

subttl	main program

start:	tdza f,f	; f = 0 if normal start
	 seto f,	; f = -1 if start+1

	hrroi a,.gtsts	; get jbtsts word for me
	gettab a,
	  halt .	; see note 1

	trne a,kjp	; see if logging in or out
	  jrst logout	;   logging out (KJP = 1)
	jrst login

comment ;
.next page;










































                                       476
Text: EXAMPLE; Example (MACRO-10)                                         page 3

subttl	login	code to handle logging in

login:	hrroi a,.gtfpn	; get ppn of this program
	gettab a,
	  halt .
	movem a,alpppn

	hrroi a,.gtnam	; get name of this program
	gettab a,
	  halt .
	movem a,alpnam

	movei a,alp
	setalp a,	; set the alp program
	  jfcl		; somebody ran me twice - ignore this

	; here may be inserted anything else that one may
	; wish one's init program to do, ie. setup tty, etc.

	movei a,pjc
	chpjc a,	; get project code for kicks
	  halt .

	outstr [asciz "Hello there "] ;say hello
	outstr pjc	; print pjc

	exit 1,		; nice pretty exit
	jrst .+1	; in case he types "cont"

comment ;
.next page;


























                                       477
Text: EXAMPLE; Example (MACRO-10)                                         page 4

subttl	logout	code to handle logging out

logout:	

	; here may be inserted anything that is to be done
	; regardless of start address used, (ie. accounting,
	; file cleanup, etc.) ***Remember: all errors must
	; be handled gracefully, (ie. jrst die).

	jumpn f,die	; if user doesn't want anything said
			; because we were run at start+1

	; here may be inserted anything that is to be done
	; only if start address +0 was used, (ie. a message,
	; etc.) ***Remember: all errors must be handled
	; just as gracefully here, (ie. jrst die).

	movei a,pjc
	chpjc a,	; get project code (just an example)
	  jrst die	; see note 2

	outstr [asciz "See ya later "] ; say goodbye
	outstr pjc	; type out project code
	outstr [byte(7)15,12] ; crlf

	; come here to handle an error or just beacuse we're done

die:	move a,[systap,,.gtcnf]
	gettab a,	; get system device name
	  movsi a,(sixbit "SYS") ; assume "SYS:" if error
	movem a,logdev

	move a,[sysppn,,.gtdsk]
	gettab a,	; get system directory ppn
	  move a,[1,,4] ; assume [1,4] if error
	movem a,logppn

	move a,[lgonam,,.gtcnf]
	gettab a,	; get system logout program name
	  move a,[sixbit "LOGOUT"] ; assume "LOGOUT" if error
	movem a,lognam

	movei a,log
	skipe f		; if run at start+1 do same to logout
	  hrli a,1
	phrun a,	; physical only run 
	  halt .


comment @
.next page;

Note 1: note here that the HALT instruction after the GETTAB is
	acceptable since this particular GETTAB could never fail.



                                       478
Text: EXAMPLE; Example (MACRO-10)                                         page 5

Note 2:	note that the HALT after the RUN uuo is acceptable and
	desirable since it will cause the monitor to type the
	appropriate error message should it be unable to run the
	LOGOUT program.

@
	end start


















































                                       479
Menu: MAIL; The MAIL program                                              page 1

481    HISTORY         Modification history
482    USEAGE          Using the MAIL program























































                                       480
Text: HISTORY; Modification history                                       page 1

Ver 5.0		10-19-78	W.R.Soley
	The Purge command now clears all selection criteria.

Ver 6.0		10-26-78	W.R.Soley
	Will now read mail packets which have been packed 2
	per disk block.

Ver 7.0		?-78		W.R.Soley
	Added the RESET command to allow clearing out criteria.

Ver 8.0		3-23-79		W.R.Soley
	Added the FIND and the CHOOSE commands to make life easier.













































                                       481
Text: USEAGE; Using the MAIL program                                      page 1

The (SYS)MAIL program aids those users who have their mail saved
in a special mailbox by RPG.  It allows them to select certain
mail packets and display them based on the date sent or the sender's
username or GAN.  In addition, it will allow the user to periodically
purge his mailbox and have it printed for offline storrage.  The
"WRITE" command will attempt to never break a mail packet across
a page boundry by insertting form feeds where needed.


















































                                       482
Text: USEAGE; Using the MAIL program                                      page 2

Commands are:
  After <date>          - select mail sent after given date
  Before <date>         - select mail sent before given date
  Date <date>           - select mail on or after given date
  Gan <global-account>  - print mail sent by given GAN only
  Mailbox <filename>    - set mailbox name (defautl MAIL.BOX)
  Purge                 - deletes all mail packets selected
  Quit                  - just quit
  Type                  - type mail on terminal 
  User <username>       - print mail sent by given user only
  Version               - print program version number
  Write <filename>      - write mail to file
  <cr>                  - does "Type" followed by "Quit"












































                                       483
Menu: RPG; RPG program                                                    page 1

485    HISTORY         Modification history
485    SETMAIL         The SETMAIL command
486    DO              The DO, SETDOLIST and ADDDOLIST commands






















































                                       484
Text: SETMAIL; The SETMAIL command                                        page 1




                                                             RPG 133.0
                                                     September 7, 1978
                                                             W.R.Soley

Versin 133  of RPG  now contains  the following  new features:  1) New
switche for DIRIT - /AUTHOR, 2) New mail saving capability.  The first
is self explanatory.   The second is normally  off.  It is  invoked by
giving the command "CTEST SETMAIL <file.name>" to RPG.  The  file name
given must be in your directory and in most cases should have the name
MAIL.BOX.  This command will generate a record type 7 in the  RPG temp
file.  The format of record 7 is as follows:
        XWD 7,6
        EXP 5
        XWD <gan>,<uun>
        SIXBIT <name>
        SIXBIT <extension>
        EXP 0,0

Once this record exists in the RPG temp file, any MAIL  commands given
thereafter will append  one disk block  containing the mail  packet in
the first  100(8) words to  the named file  for each mail  packet read
from the system mailbox.  The format of the mail packet is:
        0..1    SIXBIT <sender's username>
        2       <sender's PPN>
        3       <date sent (DEC format)>
        4       <time sent (ticks past midnight)>
        5..n-1  <list of PPNs who have not recieved yet>
        n       -1
        n+1..77 ASCIZ <message>

For simplicity,  this file  may be simply  manipulated by  the program
SYS:MAIL which is self-documenting.






















                                       485
Text: DO; The DO, SETDOLIST and ADDDOLIST commands                        page 1

	The wonderful "DO" command

Purpose:	Provide a command to simplify running common programs

Format:		-DO program
		-CTEST SETDOLIST = dolist
		-CTEST ADDDOLIST = dolist
	A dolist is some number of directories separated by commas.
	Directories may be specified as (USERNAME) or [gan,uun].  In
	addition the special names DEFAULT or LOG may be used, to
	indicate the directory currently GFD'd to and the directory
	this job is logged in as respectively.

Use:	Behaves very much like RUN (or R), but will search a list of
	directories in the order specified until it finds a program
	of the appropriate name.  [Currently, the default list is
	DEFAULT, LOG, (SYS)]

Restrictions:	All directories are assumed to be on device DSK.  The
	default list is actually represented as the null list, so
	an initial "CTEST ADDDOLIST=(UPL)" will set the do list to
	a single entry, rather than appending (UPL) to the default.
	The "DO" command will ignore the list if a directory is
	specified.  Since the "DO" command code is in RPG, a RESCAN
	from the program will not succeed. (Thus programs which reread
	the command line and check for ";program commands" will not
	find the proper results.)






























                                       486
Text: PROJEC; The project-code verifying program                          page 1

User Guide         Tymcom-X Project Code Facility    December 9, 1976


                            Introduction.

Every user on the Tymcom-X  is assigned by his Account  Supervisor to
one of 3 classes for purposes of Project-Code accounting.  This guide
explains how to use the Project-Code faicilities to change a terminal
session from one Project-Code to another, and how to  change Project-
Codes on files.

All users are Class "0" users until otherwise declared to  the system
by the Account Supervisor, who will notify you in that  event.  Class
"0" users are not required to verify Project-Codes,  and consequently
the facility  will allow  them to set  the Project-Code  however they
wish  as  long  as  the  character-restrictions  described  below are
observed.  For such users, many  of the comments in this  guide about
validity-checking will not  apply.  Otherwise, the facility  works as
described.

A Class  "1" user is  subject to verification  of Project-Codes  by a
program written  by his Account  Supervisor.  Please consult  him for
details of the operation of his program.

Class "2"  users are  subject to  verification by  a Tymshare-written
program whose use will be explained in this Guide.

You do not need to know which  class (1 or 2) you are in;  the system
has  this recorded  and will  run the  appropriate programs  for you.
Simply give  Project-Codes that are  valid according to  the criteria
given you by your Account Supervisor.

A Project-Code  (PJC) is  a 12-character  string of  letters, digits,
spaces, &etc.   It may not  begin with an  asterisk "*" or  contain a
Tab, Semicolon, Carriage Return, or Linefeed character.   Although 12
characters is its maximum length, you need not enter trailing blanks.
The  system  will always  pad  a PJC  with  blanks to  produce  a 12-
character string.

The Tymcom-X Project-Code Facility allows you to associate  any legal
PJC  with a  terminal  session.  During  the session,  any  files you
create  will  also  have  this  PJC  recorded  on  them.   Under some
circumstances you may wish  to have Tymshare break down  your storage
bill according  to PJC's.  Your  Account Supervisor  has instructions
for indicating this option to the system.












                                       487
Text: PROJEC; The project-code verifying program                          page 2

User Guide         Tymcom-X Project Code Facility    December 9, 1976


               Setting the Initial PJC for the Session

When you  have received the  "Please Log In:"  message, you  may type
your username, password, and PJC all on one line, separating  them by
semicolons, as in the following example, where user MOORE  enters his
name, a non-printing password, then his Project-Code, K-333:
                PLEASE LOG IN:  MOORE;;K-333

An alternate method of logging in is to type a Carriage  Return after
each entry and let the system request the next entry.  For example,
PLEASE LOG IN:  ANDREWS
PASSWORD:                       (The password does not print)
PROJ CODE: ALPHA-BETA

If the PJC you have given is not correct, you will get this message:
INVALID PROJECT CODE FOR YOU
TYPE "HELP" IF YOU NEED HELP
*

At  this point  you may  type CODES  or LIST,  to find  out  what the
legitimate PJC's are. You may also type HELP.  If you wish to get off
the system, you may QUIT, EXIT, or LOGOUT.

To enter a valid PJC and get on to doing useful work, use the SESSION
command.   Suppose user  MOORE should  have typed  K-330 when  he was
logging in;  his dialog with the system would look like this  once he
corrected his error:
PLEASE LOG IN:  MOORE;;K-333
TYMSHARE 1234 15 OCT 76
INVALID PROJECT CODE FOR YOU
TYPE "HELP" IF YOU NEED HELP
*SESSION K-330
PROJECT CODE: K-330
-                       (useful work can begin here)





                       Login After Disconnect

If you  re-login after  a disconnect,  the PJC  in effect  before the
disconnect will remain in effect.  Any PJC you give when attaching to
a disconnected job will  be ignored.  This holds true  when attaching
to a job for any reason.









                                       488
Text: PROJEC; The project-code verifying program                          page 3

User Guide         Tymcom-X Project Code Facility    December 9, 1976







                      What is the Current PJC?

To print the PJC which  is currently in force, use the  XEXEC command
"PROJECT=".





                 Changing PJC for a terminal session

The system will allow you to change the PJC to another legal code via
the command
-PROJECT SESSION XXXX
where XXXX is your new legal PJC.  You will receive the response
CHANGE SESSION PROJECT CODE TO XXXX
FROM: YYYYY    (OLD CODE)
-

There are a variety of  flavors of this command.  If you  simply type
PROJECT to the system, you will enter into a dialog with the system's
PROJECT program, which has the following facilities:
CURRENT         command, to display the current PJC
SESSION         command, to set the terminal session
FILE            command, to change PJC on a file
LIST
CODES           commands, to enumerate your legal PJC's
HELP            command, to get a short summary of commands
QUIT            command, to get out of the program.

The program will tell  you what the current  PJC is as you  enter the
program and after unrecognized commands.





                       Project-Codes on Files

When you create a file, the current PJC will be recorded on the file.
If you  want to see  what PJC's are  on your files,  you may  use the
switch "/PROJ" with FILES or DIRECTORY commands given to  the system.







                                       489
Text: PROJEC; The project-code verifying program                          page 4

User Guide         Tymcom-X Project Code Facility    December 9, 1976


For example, if you gave the system command "FILES/PROJ", your output
might look like:

SUM MAC         "K-330" (PJC)
BLOB F4         "K-333" (PJC)
VAR BAS                         (none on this file)

Note that if you put the  blank PJC on VAR.BAS, (12 blanks)  you will
see "             " (PJC).  Blank PJC is not the same as null PJC.

Suppose you are  currently under PJC "ALPHA"  and you want  to change
the PJC  on VAR.BAS to  ALPHA from its  present null value.   You may
enter the following command:
-PROJECT
*FILE VAR.BAS
CHANGE PROJECT CODE ON VAR.BAS TO ALPHA      FROM: [NULL]
*QUIT
-               (here you could continue)
A shorter method is available, and has identical results:
-PROJECT FILE VAR.BAS
CHANGE PROJECT CODE ON VAR.BAS TO ALPHA      FROM: [NULL]
-     (next system command)

Note  in  these examples  that  the system  has  applied  the CURRENT
project-code to the file.  It is also possible for you to put  a non-
current PJC onto a file.  Suppose you are under ALPHA and you want to
put K-375 on file BLOB.F4, because for some reason its  current code,
K-333,  is  wrong. You  may  issue the  "PROJECT  FILE  FILENAME PJC"
command, explicitly naming a PJC to apply to the file.  For example:
-PROJECT FILE BLOB.F4 K-375
CHANGE PROJECT CODE ON BLOB.F4 TO K-375     FROM: K-333
-   (next command)
or, its longer equivalent:
-PROJECT
CURRENT: ALPHA
*FILE BLOB.F4 K-375
CHANGE PROJECT CODE ON BLOB.F4 TO K-375     FROM: K-333
*QUIT
-    (next command)

Note that such a command does not change the current session PJC.

The system will allow you to change the PJC on any files to which you
have write access.  If you try  to change PJC on a file to  which you
do not have  write access, you will  get the message  "CHANGE PROJECT
RENAME FAILED, NO ACTION TAKEN".








                                       490
Text: VALID; Project-code validator for Acct                              page 1

VALID: Tymcom-X Account-Supervisor Project-Code Facility







                            Introduction

The  Account  Supervisor on  a  Tymcom-X account  is  responsible for
establishing the "rules" for the use of Project-Codes (PJC's)  by his
users.  For this, Tymshare  provides a program called VALID  by which
he may declare to the system:
                Which users may use PJC's without restriction
                Which users' PJC's will be restricted
  and,          How the restricted users' PJCs will be verified

The VALID program is accessed by the system command ".R VALID".  Only
Account-Supervisors  or  Tymshare  personnel  may  run  this program.
VALID accepts as input some  option keywords from the terminal  and a
disk  file  containing  text describing  the  restrictions  which the
Account Supervisor would like to have enforced.

Before reading further,  please read the write-up  entitled "Tymcom-X
Project-Code Facility Users' Guide".





                Use of VALID; General Considerations

VALID processes  a descriptive text  file, encodes  the descriptions,
and  writes   the  encoded  descriptions   into  various   files  and
directories in  your account.  You  should keep a  copy of  this text
file  for  reference  in  the  event  that  you  need  to  know  what
restrictions are in effect.   VALID also produces an  optional output
listing file describing its  actions in response to  the commandments
in the input text file.  You will probably want to keep this listing,
also.

As described in the Users'  Guide, 3 classes of service  exist within
the  Project-Code Facility.   Class 0  users will  not be  subject to
restriction  and will  not be  of much  concern to  you or  the VALID
program.

A user is, by default, a Class 0 user until you declare otherwise via
the VALID program.








                                       491
Text: VALID; Project-code validator for Acct                              page 2

VALID: Tymcom-X Account-Supervisor Project-Code Facility


Class 1 users are required  by the system to satisfy a  program which
YOU have  written.  Your  program may  use any  criteria it  likes to
validate a  PJC, so long  as the character-restrictions  mentioned in
the guide are observed:  a  PJC is 12 ASCII characters  not beginning
with asterisk "*",  and not containing semicolon,  carriage-return or
linefeed.  In  addition, some other  restrictions on  character usage
are sensible:
1.  Do not try to put leading blanks in a PJC.
2.  Do not use TAB characters.
3.  Do not make heavy use of non-printing controls.
        (For your class 2 users:
        Avoid ^Q ^U ^A ^W ^D ESC (ALTMODE).  These mean
        something to the Editor with which you construct
        your text file, and you only make it confusing
        for all to put these into the text.)

The  program which  you  have written  will  need to  offer  the same
services  as are  offered  by the  Tymshare-written  program PROJECT,
described  in the  Guide.   It may  be  written in  FORTRAN.   In the
description  below, the  phrase  "(ASNAME)ASPROG" will  refer  to the
program you have written.

It is VERY IMPORTANT that this program reside in a directory  in your
account.  Probably in your directory is best.

Class  2 users  are required  by  the system  to supply  a  PJC which
matches one in a  list of PJC's you  give to VALID. Given  this list,
VALID  makes  a  hash  table file  called  "PROJ.COD"  in  the user's
directory. Each user can have  his own list, in his own  PROJ.COD, or
users may share  a PROJ.COD file.  The  PROJECT program will  look in
the appropriate PROJ.COD file  whenever the user asks to  change PJC.
The system will notice any modification which the user makes  on this
file, and refuse to validate PJC's from it thereafter.  You  are thus
assured that what  you put there will  not be changed  with impunity.
In the description below,  the phrase "(ASNAME)PROJ.COD" will  mean a
hash table which you explicitly name which resides in  your directory
[or some other directory in your account].





                   Syntax of Descriptive Text File

The descriptive file (the "source") consists of a sequence of entries
each of which describes the  status of a single user.   Entries begin
with a line that starts  with asterisk, "*" followed by  username and
other information.






                                       492
Text: VALID; Project-code validator for Acct                              page 3

VALID: Tymcom-X Account-Supervisor Project-Code Facility


You may construct  the source file in  the Tymshare Editor or  in the
editor called EDIT10, whichever is more comfortable for you.   In the
syntax of *USERNAME  lines below, spaces may  be replaced by  tabs or
multiple space characters.

The items inside  of curly braces,  {{'s and }}'s,  are alternatives.
You must select one of them.

The  items inside  of square  brackets, [['s  and ]]'s,  are options.
They can be totally omitted.

The words "PROGRAM",  "LIST" ,"FILE", "NOVERIFY" "BILLING:  USER" and
"BILLING:  PROJECT"  are   literal  keywords  recognized   by  VALID.
Everything on  a source  line following a  semicolon is  considered a
comment by VALID.

The general form of an entry is:
*USERNAME KEYWORD(S) (ASNAME)ASFILENAME [;COMMENT]


1. Form for class 1 user:

*USERNAME "PROGRAM" (ASNAME)ASPROG [;COMMENT]


So,  for example,  you  might write:  *JONES  PROGRAM (JOHNSON)ASPROG
;COMMENT if you  wished user JONES to  be forced to verify  thru your
program (JOHNSON)ASPROG, and have the system assume that  his billing
for  storage is  to be  by username.   [See below  for  discussion of
BILLING option].

2. Form for class 2 user:

*USERNAME "LIST" [;COMMENT]
First Project-Code
Second PJC
Third PJC
  etc.
  .
  .
(list ends at next *USERNAME line)

Another format for the class 2 user is:

*USERNAME "FILE" (ASNAME)FILE.EXT  [;COMMENT]

This is useful if  you want to have  many class 2 users  verify using







                                       493
Text: VALID; Project-code validator for Acct                              page 4

VALID: Tymcom-X Account-Supervisor Project-Code Facility


the same list of  PJC's.  You set it  up in one of  their directories
using  the "LIST"  form, then  name that  file in  subsequent entries
using the "FILE" form.  For example:
*JONES LIST  ;BARNES,ALBERT & JACOBS ALL USE THIS LIST
K-333
L-101                   ;THIS ONE NEW EFFECTIVE 17 JUNE 76
K-375
B-242
A-1001                  ;SPECIAL ACCOUNTING PROJECT
*BARNES FILE (JONES)PROJ.COD
*ALBERT FILE (JONES)PROJ.COD
*JACOBS FILE (JONES)PROJ.COD  ;JACOBS NEW AS OF 10 AUG 76

This example illustrates the use of comments to keep the  source file
informative.   Also  note that  the  PJC lines  may  contain comments
(everything  after  the semicolon)  but  that the  PJC  is everything
literally up to 12  characters unless a semicolon or  carriage return
is seen  sooner.  Therefore,  do not TAB  over from  the PJC  to your
comment or the TAB will be taken as part of the code.

It is likely that  you may want the  PROJ.COD file to reside  in your
own directory, but  you may not wish  to be subject to  it, yourself.
The next example illustrates how to set this up.  Assume that Account
Supervisor JOHNSON is to be a class 0 user.

3. Form for Class 0:

*USERNAME "NOVERIFY" [;COMMENT]
This is useful where you wish to remove somebody
from class 1 or 2 to class 0.  For example, take
Account Supervisor JOHNSON above:
*JOHNSON LIST ;THIS LIST IS FOR BARNES,JONES & ALBERT
K-333
L-101
K-375
B-242
A-2001
*BARNES FILE (JOHNSON)PROJ.COD
*JONES FILE (JOHNSON)PROJ.COD
*ALBERT FILE (JOHNSON)PROJ.COD
*JOHNSON NOVERIFY ;JOHNSON REVERTS TO CLASS 0 HERE

The NOVERIFY keyword is not  necessary when you are setting  up users
the very first  time who have  not been classified  for Project-Codes
before.  Remember that they are already Class 0 by default  until you
have put them in class 1 or 2.








                                       494
Text: VALID; Project-code validator for Acct                              page 5

VALID: Tymcom-X Account-Supervisor Project-Code Facility










                           BILLING Option

In cases where the extra  expense is justified, you may  want storage
charges in some user  directories to be broken down  by Project-Code.
The  VALID program  provides a  way for  you to  declare this  to the
system.  The default  setting is billing by  username, if you  omit a
declaration altogether.

The BILLING declaration has two forms:  "BILLING: USER" and "BILLING:
PROJECT".   This declaration  must proceed  the other  keywords which
determine the class.  Therefore,  the complete form for a  user entry
is:

*USERNAME {BILLING-DECLARATION} CLASS-KEYWORD FILENAME [;COMMENT]

The BILLING: USER form is recognized for completeness' sake by VALID,
but  is  in  a  sense  superfluous,  since  if  the  BILLING: PROJECT
declaration is  not seen,  BILLING: USER is  assumed.  Note  that you
cannot change the BILLING attribute  by itself and leave the  user in
his  present class,  etc.   Each time  VALID processes  an  entry, it
erases all  previous options that  may have been  in effect  for that
user  and establishes  the ones  which are  explicitly  or implicitly
declared in that entry.  Therefore your source file always accurately
represents the current restrictions in force.





         Operating VALID: Option Keywords to control a run.

As  mentioned in  the Introduction,  VALID accepts  some  keywords or
"switches" which  control its  execution.  To run  VALID and  set the
options, use the system command ".R VALID".  The program will respond
with "OPTIONS:".   Type any  of the  following keywords  separated by
spaces or commas:

LIST            To produce a listing
NOLIST          +To suppress listing
TEST            To make a dry run. More detail below






                                       495
Text: VALID; Project-code validator for Acct                              page 6

VALID: Tymcom-X Account-Supervisor Project-Code Facility


CONFIRM         To be asked to confirm all file over-writes
NOCONFIRM       +To have VALID go ahead & over-write old files
ABORT           To stop the run after the first error
PROCEED         +To keep going even if errors encountered.
INPUT=file      To name the source descriptive text file
                 and skip being prompted for it later.

If  you  simply  give  a carriage  return  to  OPTIONS:,  the default
settings will be: NOLIST  PROCEED NOCONFIRM.  In the list  above, the
"+" signs indicate which of a pair is the default.

LIST option:  VALID will write a listing of its actions on a  file of
extension ".LST" whose name is that of the source input file, in much
the same way as the FORTRAN compiler creates .REL and .LST files.  If
your input is from BLUB.IN, a listing will be written on BLUB.LST.

TEST  option:   VALID  creates  PROJ.COD  files  and  writes  in user
directories, we said in  the Introduction.  However, you can  use the
TEST switch to get a dry run which will uncover any  typographical or
other  errors  in  your  source file  without  writing  any  files or
directories.

CONFIRM option:   VALID may find  that PROJ.COD  files  already exist
for the users you name in  your source.  If you have set  the CONFIRM
switch, VALID will pause with the message "USERNAME  OLD FILE?".  You
may give "Y" or "N". If  "N" is given, the old PROJ.COD file  will be
left untouched.

ABORT option: VALID will issue error messages for a number of reasons
as it processes the source.   If you have set ABORT, VALID  will quit
at the end of processing  for the current user.  This is  valuable if
you are  making a real  run and  want to stop  before doing  too much
damage.  See below for a discussion of error messages and what  to do
about them.

INPUT=file option:  This is a quick way to answer the  question which
VALID asks next after the OPTIONS question:

TEXT FILE INPUT:  This is a request for the name of  your descriptive
text file.  will be accepted.





                             SAMPLE RUN








                                       496
Text: VALID; Project-code validator for Acct                              page 7

VALID: Tymcom-X Account-Supervisor Project-Code Facility


Let  us  suppose  Account Supervisor  JOHNSON  has  created  the file
VALID.INP with the following specifications for his users:


*BARNES LIST
T-102 4Q76
T-177 3Q75
T-99
GENERAL
CLIENT X
CLIENT Y
CUSTOMER Z
B. F. SKINNER ASSOCIATES
*CARTER FILE (BARNES)PROJ.COD
*JONES FILE (BARNES)PROJ.COD
*WOLF BILLING:PROJECT LIST
R&D
PRODUCTION
*TROTTER PROGRAM (JOHNSON)CODES ;FORTRAN PROG BY L. SMITH
*SMITH (JOHNSON)CODES
*WILLIAMS NOVERIFY 
*TAYLOR PROGRAM (JOHNSON)CODES

First of all  we may note that  JOHNSON  has not included  himself in
this specification file.  He does  not have to if he wants  to remain
in whatever class he is in.

We may also note that in specifying the program  (JOHNSON)CODES, that
it is not necessary to give the extension.

JOHNSON  submits  this source  file  to VALID  for  a dry  run  and a
listing:
.R VALID
OPTIONS: TEST,LIST,CONFIRM
TEXT INPUT FILE: VALID.INP
and receives some error messages:
BAD PROJECT CODE B. F. SKINNE   USER BARNES   ERROR!
LINE 16  SPECIFICATION ??   USER SMITH    ERROR!
COULDN'T SET SPECIFICATIONS FOR USER  TAYLOR   ERROR!
E.O.F.
ERROR(S): 3
E.O.J.

Now he types his listing file
.TYPE VALID.LST

BAD PROJECT CODE B. F. SKINNE   USER BARNES ERROR!
-----BARNES USES (BARNES)PROJ.COD STORAGE BILLED BY USERNAME






                                       497
Text: VALID; Project-code validator for Acct                              page 8

VALID: Tymcom-X Account-Supervisor Project-Code Facility


-----CARTER USES (BARNES)PROJ.COD STORAGE BILLED BY USERNAME
-----JONES USES (BARNES)PROJ.COD STORAGE BILLED BY USERNAME
-----WOLF USES (WOLF)PROJ.COD STORAGE BILLED BY PROJ CODE
-----TROTTER USES (JOHNSON)CODES.SAV STORAGE BILLED BY USERNAME
LINE 16  SPECIFICATION ??  USER SMITH   ERROR!
-----WILLIAMS USES (.NONE.) STORAGE BILLED BY USERNAME
COULDN'T SET CLASSIFICATION FOR USER TAYLOR   ERROR!

Note  that the  message "----WILLIAMS  USES (.NONE.)  ...."  does not
indicate anything  wrong.  This  will appear for  all users  put into
class 0 by NOVERIFY.





                      Error Messages from VALID

Many  messages from  VALID  indicate simple  typographical  or syntax
errors which will be obvious  from perusing the source file.   In the
above example, we have 2 trivial errors and one more substantial one.
BAD PROJECT CODE xxxx messages  result from PJC's that are  too long.
The truncated PJC was put in the PROJ.COD file. LINE nn SPECIFICATION
?? messages result from VALID not finding one of its keywords BILLING
PROGRAM  FILE  LIST NOVERIFY  after  the username.   In  the example,
PROGRAM was accidentally not typed.

"LINE nn USERNAME ??"  message:  VALID cannot recognize  the username
following the "*".  It must be 12 characters or less.

"SYNTAX  ERROR   USER  username"  messages  are  a  general catch-all
message from  not adhering  to the  syntax described  above.  Typical
reasons:   left out  a keyword  or part  of (ASNAME)ASPROG  or didn't
start comment with semicolon.

"SYNTAX   ORDER  ERROR,   USER  xxx"   comes  from   putting  BILLING
declarations after  the FILE/LIST/PROGRAM  ASPROG keywords.   It must
precede them.

"CAN'T FIND xxxx.xxx, BETTER FIX  THIS" happens when you name  a FILE
or PROGRAM which  doesn't yet exist.   VALID can proceed,  but things
will not work properly when it comes time to use the facility  if you
do not first create the program/file, then re-run VALID.

"GIVING  WRITE-PROJECT LICENSE  TO filename"  is an  advisory message
that does not indicate  anything wrong.  This license is  required by
your validation program and any PROJ.COD files but cannot be  used by
anyone to destroy files or information.






                                       498
Text: VALID; Project-code validator for Acct                              page 9

VALID: Tymcom-X Account-Supervisor Project-Code Facility


"COULDN'T SET CLASSIFICATION FOR USER name" messages result  if VALID
is unable to access  the directory of the  user.  If you name  a user
outside your account, you will get this message.

"NO DIRECTORY, USER  CANNOT BE SET UP  YET. USER name"  messages mean
that the named user does not yet exist to the system.  If he has been
validated on the system  by your Tymshare representative but  has not
yet logged in,  this message may appear.   The solution:  GFD  to his
directory,  then GFD  back.   This will  create the  directory  if it
doesn't already exist.

"UFD INTERLOCK  BUSY FOR  name" messages  can happen  if one  of your
users gets hung up trying to  log in. It should be a rare  message if
you ever get  it at all. Bring  it to your  Tymshare representative's
attention.

"BAD  PROJECT  CODE  xxxxx"  means that  the  code  was  too  long or
contained an illegal character.

"LIST 'WAY TOO BIG, USER xxx" messages will be rare.  The system will
presently handle lists  of over 600 Project  Codes.  If you  get this
message, probably your source file became garbaged.  If  it persists,
please consult your Tymshare representative.

"EMPTY CODE LIST, SERIOUS TROUBLE FOR USER name" means  exactly that:
You have said "*USERNAME LIST" and followed it immediately by another
"*USERNAME" line.  This guy will not be able to get onto the system.

"CORE UUO FAIL SET.HT" is a message that indicates a  system problem.
Please bring your output to the attention of Tymshare.

"BHASH PAST JOBREL", "GRABBING  PG FOR STRING", "STRING ATE  UP WHOLE
BUFFER!","PRIME  0  IN  HT",  "2NDARY  PROBE  OUT  OF  RANGE", "TABLE
OVERFLOW!", "FILE WRITE FAILED", "**SYSTEM CALL WPJ RENAME FAILED**",
"XMISSION ERRORS", and "CAN'T  INIT DUMP CHANNEL" messages  are other
system problem messages to bring to Tymshare's attention.





            Writing, Loading & Debugging "(ASNAME)ASPROG"

As we  said, your PJC-verifier  for class 1  users may be  written in
FORTRAN.  There are some subtleties however which require  linkage to
Assembly-Language  routines and  the assistance  of a  Tymshare field
analyst.  Please  contact your Tymshare  representative, who  can put







                                       499
Text: VALID; Project-code validator for Acct                             page 10

VALID: Tymcom-X Account-Supervisor Project-Code Facility


you  in  contact  with  the  proper  analyst  and  provide  you  with
information on  the available Assembly-Language  routines for  you to
use.

Remember that whatever program you write will become very privileged,
having  the  authority  to  keep  users  from  entering  the  system.
Therefore it  must be thoroughly  checked-out before being  placed in
service.  Again, this debugging and checkout phase will require a bit
of assistance from the Tymshare analyst.

Documentation  available  from  Tymshare  describes   the  subtleties
mentioned  above, and  outlines the  restrictions which  your program
must observe and actions it must take.









































                                       500
Menu: EDITORS; Editor documentation                                       page 1

502    EDIT10          The stopgap editor
























































                                       501
Text: EDIT10; The stopgap editor                                          page 1

@  indirect	@ <commandFileName>

A  Alter	A <range>	(see below)

B  buffer load	 B <buffer#><CR><delim><bufferText><delim>
BC Buffer Copy	 BC <buffer#>,<range>
BI Buffer Insert BI <buffer#>,<position>[,<incr>]
BP Buffer Print	 BP <buffer#>
BT Buffer Trnsfr BT  <buffer#>,<range>

C  Copy		C <position>[_<FileName>[/S]],<range>[,<inc1>[,<inc2>]]

D  Delete	D <range>

E  Exit		E [<space><fileName>]

F  Find		F [<oldtext>]$[<range>][,A|,N][,E][,<count>]

G  Go(compile)	G [<space><fileName>]

H
I  Insert	I [<position>[;<incr>|,<incr>]]

J  Join		J <position>

K
L  List		L [<range>]		(output goes to device LPT)

M  Mark page	M <position>		place page mark before line

N  Number	N <incr>,<range>[,<newfirst>]

O
P  Print	P <range>[,S]

Q
R  Replace	R <range>[;<incr>|,<incr>]

S  Substitute	S [[<oldtxt>$<newtxt>]$[<range>][,D|,N][,E][,<count>]]

T  Transfer	T <position>, <range> [,<incr1>[,<incr2>]]

U
V
W  Write now	W [<space><fileName>]		(saves edit so far)

X  eXtend line	X <position>		(like A<pos>999<sp>I)

Y
Z  Zip to file	Z			(E, but starts another file)

<^B>  Buffer use   <^B> <buffer#>	use buffer contents as if typed

<^R>  edit command <^R> 	alter mode on current (input) line



                                       502
Text: EDIT10; The stopgap editor                                          page 2

<ESC> backup	   <ESC>		print previous line (P.-1)

<LF>  forward	   <LF>			print next line (P.+1)

=  show value	= [.|BIG|CASE|ERROR|INC|STRING]

_  set parameter _ [C128|C64|ERGO|ERSTOP|EXPERT|LOWER|M33|
		    M37|NONSEPARATOR|NOVICE|SEPARATOR|UPPER]

















































                                       503
Text: EDIT10; The stopgap editor                                          page 3

Alter mode commands:

A
B BreakInsert	B		break mode insert (I, but allows <CR>)

C Change	C <char>	replace current with char and advance

D Delete	D		advance current and kill passed char(s)

E Exchange	E		interchanges the next two characters

F Find		F <char>	space to char (S<char> or N<char><sp>)

G
H
I Insert	I <newtext>$	insert mode (no <CR>); <rub> kills back

J Join forward	J		finish line and alter on rest & line+1

K Kill		K <char>	kill to character (like N <char> D)

L Line pass	L		print rest, alter from front (<CR>A.)

M Match to	M <target>$	advance to next target (T<target><sp>)

N Nextcount	N <char>	number of characters to <char> (###)

O
P Print		P		print rest, alter from here (almost L)

Q Quit		Q		leave alter mode and restore old line

R Replace	R <newText>$	replace current with newText (ie DI)

S Search	S <char>	same as F; move to next copy of <char>

T Textcount	T <target>$	number of characters to <target> (###)

U
V
W Word space	W		space to next "word"

X word replace	X <newText>$	replace the next "word" with newText

Y
Z
< lowercase	<		force next character to lower case

> uppercase	>		force next character to upper case

<^U>  Uggh!	<^U>		abort and re-start edit (like Q A.)

<sp>  space	<sp>		advance past current character

<rub> backup	<rub>		backup current (deletes in insert mode)


                                       504
Text: EDIT10; The stopgap editor                                          page 4


<cr>  return	<cr>		copy rest of line and finish alter























































                                       505
Text: EDIT10; The stopgap editor                                          page 5

Search special characters:

 :  _\	Vbar	matches "separators"
 7  ^^	Eqv	literally (exact match of following character)
 %  ^E	Not	not (invert sense of next construct)
 )  ^N	Inf	match any number (even 0) of the next construct
 -  ^R	Inter	match the next construct but not the following one
 /  ^T	Any	matches anything
 0  ^U	Exists	surrounds a set of constructs and "OR"s them


Substitute special characters:

 "  ^B	Alpha	sequential version of partial
 #  ^C	Beta	insert <cr><lf>
 *  ^O	Partial	substitute delimiter (the 5'th special match is ~5~)
 6  ^Y	Rarrow	search for next match starts here




Octal, SUAI name, Question, and Terminal codes for special characters:
				 '001	Darrow	!   ^A
 '002	Alpha	"   ^B		 '003	Beta	#   ^C
 '004	And	$   ^D		 '005	Not	%   ^E
 '006	In	&   ^F		 '007	Pi	'   ^G
 '010	Lambda	(   ^H
 '016	Inf	)   ^N		 '017	Partial	*   ^O
 '020	Inset	+   ^P		 '021	Contain	,   ^Q
 '022	Inter	-   ^R		 '023	Union	.   ^S
 '024	Any	/   ^T		 '025	Exists	0   ^U
 '026	Xor	1   ^V		 '027	Swap	2   ^W
 '030	Underl	9   ^X		 '031	Rarrow	6   ^Y
 '032	AItilde	4   ^Z		 '033	Neq	=   ^[
 '034	Leq	<   ^\		 '035	Geq	>   ^]
 '036	Eqv	7   ^^		 '037	Or	8   ^_
 '140	Assoc	@   _@
				 '173	BraceO	[   _[
 '174	vBar	:   _\		 '175	BraceC	]   _]
 '176	Tilde	3   _^		 '177	Delete	\   __

















                                       506
Menu: LANGUAGES; Language documentation                                   page 1

508   :XEXEC           Preliminary XEXEC user manual
515    MACRO           MACRO bugs























































                                       507
Menu: XEXEC; Preliminary XEXEC user manual                                page 1

509    CCL             Running XEXEC from another program
510   :RUNTIMES        User callable runtime procedures























































                                       508
Text: CCL; Running XEXEC from another program                             page 1

The following convention is used when running XEXEC as an overlay at
the CCL start address.  The contents of the following ACs at run time
have the indicated signifigance:
	0/	not used
	1/	flags
		1B0 = output to CTY if detached
		1B1 = run (SYS)PROFILE.X
		1B2 = run PROFILE.X
		1B3 = set EvalPrint (default for CCL is off)
		177B35 = ErrAction "C" for continue, "X" for exit, etc.
	2:17/	asciz "commands"














































                                       509
Menu: RUNTIMES; User callable runtime procedures                          page 1

511    CLEAR           Make a variable false
512    SET             Make a variable true
513    TYPE            Print values on standard output
514    QUIT            Terminate the EXEC





















































                                       510
Text: CLEAR; Make a variable false                                        page 1

The CLEAR command has the form

	CLEAR <var1> <var2> <var3> ... <varn>

where <vari> is any integer variable.  The value of the variables
are set to FALSE (0).  The statement does not return a value.



















































                                       511
Text: SET; Make a variable true                                           page 1

The SET command has the form

	SET <var1> <var2> <var3> ... <varn>

where <vari> is any integer variable.  The value of the variables
are set to TRUE (1).  The statement does not return a value.



















































                                       512
Text: TYPE; Print values on standard output                               page 1

The TYPE command has the form

	TYPE <val1> <val2> <val3> ... <valn>

where <vali> is any expresion of any type.  The expresions are evaluated
in order.  After each expresion is evaluated, its value is printed on
the standard output.  A <crlf> is printed after the last value is read.
The statement does not return a value.

















































                                       513
Text: QUIT; Terminate the EXEC                                            page 1

The QUIT command has the form

	QUIT

This command may be used in a non-top-level EXEC to return to the
previous level EXEC.  If the command is used from the top-level EXEC,



















































                                       514
Text: MACRO; MACRO bugs                                                   page 1

BUGS IN MACRO AND/OR LOADER
---------------------------

EXTERN FOO
	MOVSI	AC,(<FOO>B7!1B17)

RESULTS IN ZERO, LOADER DOESN'T REALIZE THAT
PROGRAMMER WANTED A SHIFT. USE _-^D18 INSTEAD.

DO NOT USE ^L OF AN EXTERNAL SYMBOL. IT DOES NOT WORK.

BEWARE: ONE CAN USE THE # OPERATOR OR THE ARRAY (ETC.) PSEUDO-OP
TO DEFINE A CERTAIN SYMBOL MORE THAN ONCE AND THE ASSEMBLER
DOESN'T COMPLAIN.

COMPILING COMMOD WITH /NOBIN SWITCH (COMMOD NEEDS A /P FOR
ITS MACROS) CAUSES STRANGE ERRORS.

RELOC AND EXTERNAL SYMBOLS

THE SEQUENCE
	EXTERNAL FOO
	FOO,,0
	RELOC .-1
	FOO,,0
CAUSES FOO+FOO TO GET INTO THE LH OF THE INVOLVED LOCATION.
USING THE BYTE (18) PSEUDO UP INSTEAD OF ,, OR XWD GETS AROUND
THE BUG.

Defining an LVAR, purging it, and trying to define the same
LVAR name later makes macro get an ill mem ref.
Actual example[

;
* NOTICE: P034/D up for field test - give it your best shot!  /WRS

tymshare  2231  28-mar-1980
APRIL 1,1980 TUESDAY 0:00 RENT,LESSONS (24)

.
.type foo.mac
00100   st:     movei   1,foo#
00350   purge foo
00375           movei   1,foo#
00400           end

.comp /com foo.mac
MACRO: .MAIN
PAGE 1
U       000001' 201040  000000  00375           movei   1,foo#

FOO     UNDEFINED 
?1 ERROR DETECTED

ILL MEM REF FOR PAGE 000373 AT USER 404102


                                       515
Text: MACRO; MACRO bugs                                                   page 2


.exit]























































                                       516
Text: ROYALTY; Information on Royalty Accounting                          page 1

When a new system is put up, usernames (UAS) and (ACTRTY) must
be valid on the system, and the files RTYACT.CTL and
RTYCTL.DAT must be on (UAS). These files contain information
about royalty program ID codes and rates, etc. If EDITOR
gives FATAL ERROR A16.???, these files/UFDs are missing.




















































                                       517
Menu: UTILITY; Utility programs                                           page 1

519    ASP             Absolute Structuresaving Program
525    ASSHOL          Lists AssHoles (SCHPRV)
526   :ATSIGN          Program to make cref listings
548    AUXDDT          AUX circuit Dynamic Debugging Tool
549    AUXIO           Aux Circuit and dialout utility
552    CACHE           Program to change cache strategy
553    COPY            Copy N files to N systems detached
554    CRASUM          Extract data from CRALOG
556    CRSHID          Program to analize crashes
559   :DDT             DDT program
569    DIRED           Directory editor for ADM3's
571    ERRCHK          Disk Error Reporting Program
579    FRMDDT          Frame DDT special features
580   :FSHSPL          Microfiche Generation System
612    ICP             Program to monitor system use
619    INFRED          Program to display PDP-10 system status
620    KAFIX           Patches Fortran-IV SAV files to run on F3
621    MASQUE          Masquerade as another user
622    MDDT            Monitor DDT
623    MONED           Runs MONED1 for all monitors
624    MONED1          Generate an experimental monitor
628    MHX             Do commands on many systems
629    PATLOG          Logs monitor patches easily
630    RUB             Set/Clear Restricted User Bit in LUD
631    SCAN            Scan stream accounting files
633    SCRIPT          Print U W SCRIPT files
634    SNARF           Snarfs job from another terminal
635    SPELL           Checks and corrects spelling
651    SPOOL           A better way to spool files
654    SWEET           Master Cref Program
656    SYMLOK          Microfiche Location Program
660    TAPE            Scan TITO tape directories
662    X1200           Xerox 1200 tape writer
663    PIP             DEC Peripheral Interchange Program























                                       518
Text: ASP; Absolute Structuresaving Program                               page 1




                       ASP OPERATING INSTRUCTIONS



     1.0  OVERVIEW

     ASP (Absolute Structure save and  restore  Program)  is  a  utility
     which  allows  an entire file structure to be saved to and restored
     from magnetic tape.  Whereas file to tape save and restore programs
     like  TITO  save each file individually, ASP saves all the pages on
     the structure sequentially.  Therefore, it is not possible to  save
     or restore individual files with ASP.

     The usefulness of ASP lies in the fact that it is  much  faster  to
     save  a  file  structure page by page than to save it file by file.
     TITO takes from 1 to 2 hours per reel of  tape,  depending  on  the
     size  of  the  files that are being saved.  ASP takes 11 minutes to
     write one reel of tape at 6250 BPI, regardless of the state of  the
     file structure.

     Since ASP runs as the only job on the system (if it  did  not,  the
     file  structure  would  not  be in a stable state to have its image
     saved) there is no synchronization problem between  files  -  since
     there are no other jobs, all files are saved in a stable state.

     The format of an ASP tape has been designed to minimize both  human
     and  machine  error  in  the save/restore.  Each tape has the exact
     date and time it was written, so that it is impossible  to  try  to
     restore  tapes  from  different  saves  to  a structure.  Each data
     record is followed by a small epilogue record containing a checking
     code and record serial number with respect to all tapes in the set.
     This allows recovery from tape errors (although at the  expense  of
     losing data).



     2.0  OPERATING ENVIRONMENT

     Whenever ASP is run for saving or restoring a file structure, there
     can  be  no other jobs logged into the system, including CHKPNT and
     PJ.  The system must be super-shut (sched 600000) to ensure that no
     other users can login.

     For SAVEs, the save to tape can be done, and the system can then be
     restored  to normal timesharing state by running CHKPNT by hand and
     unshutting the system.  Thus, the monitor need not be taken down to
     do the save.

     For RESTOREs, a file structure must be setup to  restore  to  which
     has  the  same structure name, capacity, number of units, and first
     four characters of unit ID.  The system must be brought up in "READ
     ONLY"  mode.  The RESTORE is then performed.  Immediately after the


                                       519
Text: ASP; Absolute Structuresaving Program                               page 2

     restore, the system must be taken down, as the SAT  tables  on  the
     disk  have been re-written and the checking counts that the monitor
     keeps in core will no longer match those of the SAT tables  on  the






















































                                       520
Text: ASP; Absolute Structuresaving Program                               page 3

                                                                  Page 2


     disk.   The  system  is then brought up again, and DSKCLN should be
     run to ensure the integrity of the file structure.



     3.0  COMMANDS

     Commands may be abbrieviated to their shortest unique form.  If  no
     tape  unit  is  specified  for  a  command  which requires one, the
     currently open tape unit is assumed, if there is one.



     3.1  SAVE <tape Unit>

     This command is used to save a file structures contents on  one  or
     more ASP tapes.  The system must be super-shut, and the job running
     ASP must be the only one on the system in order  for  the  SAVE  to
     proceded.   This  ensures  the file system is internally consistent
     during the entire save operation.

     ASP will print out the information it writes to the header  of  the
     tape, and begin the restore using the current density.



     3.1.1  End Of Tape - If the end of the current tape is reached, ASP
     will print "NEXT TAPE UNIT:".  The operator should then type in the
     name of the tape unit on which the next tape to be written  is  on.
     If  the  current  tape unit is to be used, the operator must rewind
     the tape at the tape unit's console and  mount  the  new  tape.   A
     carriage  return  will  be interpreted by ASP to mean the currently
     open tape unit.



     3.1.2  Unrecoverable Write Errors - If an unrecoverable write error
     to  tape occurs, ASP will print out an error message and prompt the
     operator with "NEXT TAPE UNIT:".  The operator  should  then  mount
     another  tape  on  the  tape unit and type in the tape unit's name.
     ASP will then rewrite the tape it was currently working on.



     3.2  CHECK <tape Unit>

     This command reads in what should be the ASP header record  of  the
     specified  tape.   It  prints  out the ASP version number, date and
     time  the  tape  set  was  written,  structure  name,  first   four
     characters  of  unit  ID  of  the  units in the structure, and tape
     number.  This command is used to identify ASP tapes in the event of
     the physical tape labels being unreadable or non-existent.


                                       521
Text: ASP; Absolute Structuresaving Program                               page 4

                                                                  Page 3


     3.3  RESTOR <tape Unit>

     This command restores a set of ASP tapes to the file structure.



     3.3.1  Requirements To Commence RESTOR - The file structure  to  be
     restored  to  must  have  the  same  capacity, number of units, and
     structure name as the structure that was originally saved onto  the
     ASP  tapes to be restored.  The file structure should be refreshed.
     The system should then be brought up in "READONLY" mode.  (If  this
     is  not done, the system will crash during the restore.) The system
     should then be super-shut, and the ASP job should be the  only  one
     on  the  system.   The  ASP  tapes  to  be  restored must have been
     recorded together with one ASP SAVE command.  (The header  of  each
     tape  contains  the  exact  date and time the SAVE was started, and
     these must match.)



     3.3.2  End Of Tape - When the  end  of  the  tape  currently  being
     restored  is  reached, ASP will prompt with "NEXT TAPE UNIT:".  The
     operator should mount the next tape number  in  sequence  with  the
     last  restored on a tape unit and type the name of the tape unit to
     ASP.



     3.3.3  Restore Completion - If the restore goes correctly, ASP will
     print  a  message  informing  the  operator  that  the  restore has
     completed successfully.



     3.3.4  Post Restore Procedure - After an ASP restore is  completed,
     the  system  should  be  taken  down  immediately with a deposit in
     location 30.  This is because the SAT pages on the  file  structure
     have  been  overwritten  on  the  disk,  and  the bit counts in the
     monitor under which ASP ran no longer match those  new  SAT  pages.
     Thus,  it  is possible to see the message "BAD SAT ON <disk unit>".
     Ignore these messages after an ASP restore if they are seen.



     3.3.5  Aborted Restores - If for any reason an ASP restore does not
     complete  successfully,  the  structure  being  restored to must be
     refreshed and the restore started over from the beginning.  If this
     is not done, the file structure is very probably in an inconsistent
     state.





                                       522
Text: ASP; Absolute Structuresaving Program                               page 5

                                                                  Page 4


     3.3.6  Run DSKCLN After A RESTOR - As a precaution,  DSKCLN  should
     be run over the freshly restored structure to ensure file structure
     integerity and consistency.



     3.4  HELP

     Prints out a list of commands and a short description of them.



     3.5  STATUS <tape Unit>

     Prints out specified tape unit name, available  densities,  current
     density, and whether or not the tape is write protected and at load
     point.



     3.6  DENSIT <density>

     If no  density  is  specified,  DENSIT  will  just  print  out  the
     available  densities on the specified tape unit.  Else, it will set
     the recording density for the entire run to the specified argument.
     (Example:  DENSIT 6250).



     3.7  REWIND <tape Unit>

     Rewinds the specified tape unit.



     3.8  UNLOAD <tape Unit>

     Unloads the specified tape unit.



     3.9  OPEN <tape Unit>

     Sets the currently open tape unit to the specified argument if  the
     unit is available.



     3.10  DAYTIM

     Prints out current date and time.



                                       523
Text: ASP; Absolute Structuresaving Program                               page 6

                                                                  Page 5


     3.11  QUIT

     Exits from ASP.



     4.0  KNOWN DEFICIENCIES

     On restores, ASP attempts no recovery from unrecoverable tape  read
     errors.   The  restore  is aborted.  Future versions of ASP will be
     able to continue past the bad record or  records  to  complete  the
     restore,  at  the expense of losing some data.  DSKCLN will be able
     to handle the problem of losing RIBs or UFD data pages,  but  there
     will  be no way to detect the lossage of data pages from user files
     unless DSKCLN is modified to input a  list  of  disk  page  numbers
     which have been lost.






































                                       524
Text: ASSHOL; Lists AssHoles (SCHPRV)                                     page 1

The ASSHOLe program will print the following information about
any job currently logged in with SCHPRV set in JBTSTS...
    Job number
    User name
    Program name
    Run state



















































                                       525
Menu: ATSIGN; Program to make cref listings                               page 1

527    INTRO           The basic idea behind @
528    BASIC           Simplest usage of @, for programs
530    OUTPUT          What @ output looks like, for programs
532    TEXT            Simplest usage of @, for papers
534    ASSEMBLER       What @ understands about assembler language
536    LISP            What @ understands about Lisp
537    MUDDLE          What @ understands about Muddle
538    QUOTES          Quotes (') control whether files are listed
539    SWITCHES        What you can do with command line switches
545    FILES           What files are used, and their default names
547    SUBSTITUTIONS   What to do when you move your source files














































                                       526
Text: INTRO; The basic idea behind @                                      page 1

The @ program makes cross-reference listings of programs.  One or many
files can be listed together.  On each line will appear the file, page,
and line of the definition of a symbol referenced on that line.

Comparison listings can be made, containing only the pages changed since
the previous listing, for both programs and text-justifier output files.



















































                                       527
Text: BASIC; Simplest usage of @, for programs                            page 1


Fundamentals of @ for programs:

When you make a listing, you must initially specify the names of the
files to be listed, the language they are written in, and various other
parameters.  All of this information, is remembered in a special "LREC"
file just for that purpose.  To make an update listing, you need only
specify the name of the LREC file;  all other information is read from
there.

Comparison listings work by keeping in the LREC file a table of
checksums of all the pages of each source file.  When it is time to make
the update listing, the new source file's pages' checksums are compared
with those listed in the LREC file.  A page whose checksum has changed
needs to be listed.  This scheme means that it is not necessary to
retain the copy of the program which was last listed.  The LREC file is
all that is necessary for making an update listing.

When you list a program THE FIRST TIME, your command should resemble

        :@ RMS;FOO LREC/G/L[LISP]/F[20FG],RMS;FOO,BAR,BLETCH

"RMS;FOO LREC/G" says that the LREC file should be called RMS;FOO LREC.
"/G" always indicates the name of the LREC file.  @ will see
that the LREC file does not already exist and type "(LREC file new -
listing all files in full)".  The rest of the command says that the
program is contained in RMS;FOO >, BAR >, and BLETCH >, is written in
LISP, and should be printed in the font 20FG.  The output from @ will
be three files FOO @XGP, BAR @XGP, and BLETCH @XGP.  All three will be
printed on the XGP and deleted.

The /L and /F are "global" switches (*Note Switches: Switches.) which
apply to the whole listing.  They can appear anywhere in the command
string, and it doesn't matter where they go.  The /L[LISP] switch says
that the program is written in LISP.  The /F[20FG] switch says that the
output should be printed in the font 20FG;  it also implies, by default,
that the output files should be printed on the XGP and then deleted.

To make UPDATE LISTINGS of all the files composing a program, you need
only specify the LREC file.  The names of the source files and the
switches to be used, as well as the comparison data, are taken from the
old LREC file.  That file is renamed to OLREC, and a new LREC file
containing updated comparison data is written.

        :@ RMS;FOO/G

You need not specify the name LREC this time, because @ can figure out
since the file already exists.

While all switches will default to the values read from the LREC file,
you can override any of them by explicitly specifying it.  For example,
if you want to switch to font 18FG from now on, you can just include
"/F[18FG]" in the command string.  This listing, and future listings
until you specify /F again, will use 18FG.



                                       528
Text: BASIC; Simplest usage of @, for programs                            page 2

From time to time, repeated insertions and deletions of pages will cause
page numbers such as "3/24" to exist (suppose you inserted 24 pages
before page 4).  When that happens, you may want to make A NEW FULL
LISTING and cause the pages to be renumbered as integers.  To go this,
just specify "/-G" instead of "/G" when you give the name of the LREC
file:
        :@ RMS;FOO/-G


















































                                       529
Text: OUTPUT; What @ output looks like, for programs                      page 1


What @ Output for Programs Looks Like.

@ listings of programs can contain all these things:

   One or two title pages
   Page maps
   Subtitle table of contents
   Listed source
   Symbol table
   Cref table.

exactly which are present in a given listing depends on the switches
used (*Note Switches: Switches.).

The TITLE PAGE is meant to identify the listing.  It's most prominent
feature is the name of the listed source file, "bigprinted" with
letters each built out of a matrix of characters, as in

                        FFFFF  OOO   OOO
                        F     O   O O   O
                        FFF   O   O O   O
                        F     O   O O   O
                        F      OOO   OOO

The title page also contains the full name and creation date of the
file, and the names of all other files included in the listing, as
well as the name of the user who made it, and the name of the LREC
file (very useful when you want to update the listing).  The /& switch
allows you to suppress the table of contents.

PAGE MAPS occur only in update listings.  They list the numbers of all
pages which were printed, and separately list the numbers of all pages
which were created or deleted.  Note that if you create a new page
between pages 4 and 5, neither of which were changed, the new page
will be numbered 4/1 in an update listing.  The "4" is called the
major page number and the "1" is the minor page number.  In this case,
"4/1" would be listed among the printed pages and among the created
pages.  The page map will also include a table which matches physical
page numbers against the page numbers actually used.  Using the same
example, you might see

        4       4               5       4/1             6       5

The page map is useful for interpreting compiler error messages and
SRCCOMs that contain the physical page number in the source file.

The SUBTITLE TABLE OF CONTENTS is a list of all the subtitles that
appear in the file, in order, with page numbers.  It should be
self-explanatory.  Just what constitutes a page number depends on the
language.  The /Z switch requests a table of contents.

The LISTED SOURCE contains not just the source, but a header line at
the top, an optional copyright notice at the bottom, and a line number
and cross reference on each line.  The header line contains the file


                                       530
Text: OUTPUT; What @ output looks like, for programs                      page 2

name, subtitle, and page number.  If a page is too long for the output
medium, it is split into "subpages", each short enough to fit, and
each with its own header;  but lines numbers are within the entire
page.  Thus, page 4 may be split into subpages 4.0 and 4.1, 4.0
getting lines 1 through 84, and 4.1 getting lines 84 through 122.
In addition, if there are inserted pages with nonzero minor page
numbers, such as 4/1 and 4/2, they get numbers starting where 4/0 left
off, just so that any line can be unambiguously referred to with just
the major page number and the line number.  This allows cross
references to lines to be printed more concisely.

The cross reference on each line is @'s trade-mark and most useful
feature.  It gives the page number and line number (and file name, in
a multi-file listing) of one of the symbols referred to on that line.
@ heuristically attempts to choose the most "interesting" symbol to
cross-reference.  For PDP11 code you can get two cross-references on
each line.  See the /N switch.

The listed source can be printed in multiple fonts to increase
legibility.  If you specify more than one font, the actual text uses
the second font, and comments use the third font if there are three.
The header and the cross reference use the first font, which is also
used by all the tables in the listing.

If you would like to prevent @ from ever trying to put text on the
first line of a physical page, just put a (possibly null) subtitle in
the file.  If a file has a TVEDIT directory, @ will never try to put
text on the first line of the page, assuming that it won't fit anyway.

The SYMBOL TABLE is a relatively dense alphabetical table of all
symbols and where (and how) they were defined.  Both single-file
symbol tables and "universal" (all files sorted together) symbol
tables can be requested.  If you make a cref, you might not want the
symbol table as well;  see the /$ switch.

The CREF table is a list of all definitions and all references for all
symbols.  The symbols appear alphabetically, at most one on a line;
for each symbol, all the definitions and then all the references are
listed.  The type of definition or reference is also encoded by a
special character, which can be looked up in a table appearing at the
front of the cref.  See the /C switch.

In multi-file listings, you can optionally request a UNIVERSAL SYMBOL
TABLE, which is a symbol table for all the files put together.  Each
symbol definition will list the file containing the definition as well
as its page and line number.  See the /U switch.  You can also get a
universal table of contents; see the /Z switch.

The CREF and UNIVERSAL tables are, in a multi-file listing, not
associated with any particular file.  Such non-file-specific output is
normally appended to the output file for one of the listed files.
However, you can specify that an "auxiliary output file" be used
instead for non-file-specific output.  The auxiliary output file will
not be used if all output from a given listing is file-specific.  See
the /C and /U switches.


                                       531
Text: TEXT; Simplest usage of @, for papers                               page 1


Use of @ on Text-justifier Output for Papers.

Cross-referencing papers is not usually very meaningful, but it does
help to be able to print only pages which have changed.  @ provides this
service.  @ is compatible with all text justifiers because it operates
on the output of the text justifier, the file to be printed on the XGP.
When you wish to print a new update listing, you must first process your
paper with the text justifier you are using, and then use @ to extract
the pages of the output which have changed.

To make an initial full listing of a paper, and create the LREC file,
you use a command like

        :@ RMS;PAPER LREC/G,PAPER,PAPERX,PAPERY /L[TEXT]/X

PAPER LREC/G says that the LREC file should be called RMS;PAPER LREC.
The rest says that the XGP files PAPER XGP, PAPERX XGP, and PAPERY XGP
should be listed (*Note Defaults: Files, for how filenames are
defaulted).  Each of those files will make a separate output file, with
an FN2 of "@XGP", and those output files will be queued for printing and
deleted afterward (*Note Switches: Switches, for other alternatives).

To make an update listing, run the text justifier to produce a new
version of PAPER XGP, and then do

        :@ PAPER/G

This will re-list the file remembered by PAPER LREC, using the
comparison information to tell which pages have changed.


When @ is listing a paper it does several special things, which are
all necessary:

   The default FN2 for input files is XGP, rather than >, so that your
   text justifier's output will be used, rather than the text
   justifier's input.

   Pages listed are not given line numbers or header lines;  they are
   copied verbatim.  This is because your text justifier presumably
   provides its own headers.

   The first page of the file is always included in the output file.
   This is because it usually contains special commands to the XGP
   spooler, such as font specifications.  Without them, the file will
   print totally wrong.

   No title-pages, page maps, etc. are printed before the first page
   of the paper itself.  This is, again, because the special XGP
   spooler commands must remain at the front of the file.

   The first non-blank line of each page is ignored for comparison
   purposes;  if a page has changed only in that line, it is not
   reprinted.  This is so that you can, include the date of the


                                       532
Text: TEXT; Simplest usage of @, for papers                               page 2

   current draft, or the file version that generated it, in the header
   of each page, without thereby causing @ to think that every page
   has changed whenever you make a new draft.






















































                                       533
Text: ASSEMBLER; What @ understands about assembler language              page 1


Tips on Programming Style in Assembler Language.

A few simple precautions can make @'s left-margin cross references
more informative.

@ Assumes that a semicolon starts a comment, but only when it follows
a space or tab (or at the beginning of a line).  So make sure that
your comments will be recognized.

On the other hand, sometimes you mention a tag in a comment and
would like the tag to be cross-referenced.  For that, use .SEE <tag>,
which does nothing at all in MIDAS except provide @ with a reference
to mention.

@ Will parse MIDAS .INSRT's and FAIL .INSERT's, and add the files so
found to the list of files to scan for symbol definitions.  The /I
switch controls whether or not such files should also themselves be
listed.

.AUXIL and .LIBFIL:  Assembler language files containing the pseudo
.AUXIL are regarded as files of auxiliary symbol definitions.  Symbols
which appear only in input-only auxiliary files will not be mentioned
in the cref table.  Thus, if your program .INSRT's a file of
definitions which contains a .AUXIL, only those of its symbols which
your program actually uses will show up in the cref table.  .LIBFIL is
even stronger;  it prevents a file from being processed at all, if it
is not being listed.  It essentially causes @ to ignore .INSRT's of
that file.  If your assembler does not define .AUXIL or .LIBFIL, you
can put it inside an IFN 0 conditional to avoid an error.

A subtitle in PDP-10 code is started by SUBTTL.
A subtitle in PDP-11 code is started by .SBTTL or .STITL.

Since @ does not actually assemble the program, symbol definitions and
references will be found even if they would be ignored by conditional
assembly.  This is usually a bonus.  On the subject of conditional
assembly, always use a comma to separate the condition of a MIDAS
conditional from the conditionalized code.  @ assumes that you will,
and it makes things more readable anyway.

@ doesn't expand macros, so symbol definitions in macros will not be
understood unless you take precautions to make them visible.
One thing you can do is supply the "=" or ":" to be used in defining
the symbol as part of the argument to the macro;  then the macro call
will appear to contain a definition of the symbol.  The macro itself
can strip off the ":" with an IRPS or IRPNC if necessary.  Symbols
being defined in an IRPS can be delimited with any character, so
use ":".  Another principle is that macros should not supply a
prefix for the symbol to be defined;  if you want a common prefix, put
it with the symbol name in the macro call (of course, if the symbol
is only referred to from macros that add on the same prefix, you can
still win;  @ will see the definitions and the uses without the prefix
and correctly match them up).  If you are generating lots of symbols,
you may be quite happy that they are not seen by @.


                                       534
Text: ASSEMBLER; What @ understands about assembler language              page 2


Keyword macro arguments in MIDAS will, of course, appear to be
symbol definitions, and show up in the CREF.  Simply chosing
keywords that are not the same as symbols in the program will prevent
that from causing any trouble.

@ considers symbols defined on page 1 of a file, or the current page,
to be less interesting than other symbols.  Also, symbols defined with
"=" or equivalents are less interesting than those defined in other
ways.  Given a choice of symbols for a left-margin cross-reference,
@ will use the most interesting one.  So, for example, you should
put your accumulator definitions on page 1.

Often, people use a short name like "A" as a dummy in a macro or IRP,
sometimes representing a symbol which is to be defined.  When this
happens, @ sees a definition of the symbol "A".  If "A" is also an
accumulator, this will cause a more confusing listing, so make sure
that you do not use accumulator names as dummies.

All in all, you can't expect @ perform perfectly in its search for
symbols, but luckily you are not screwed very badly when it fails.




































                                       535
Text: LISP; What @ understands about Lisp                                 page 1


A subtitle in Lisp code looks like (COMMENT ...),
where if CRLFs appear within the list, only the first line is used.
However, if you put "(COMMENT" on a line by itself, no subtitle is
recognized.  Thus, using COMMENT to comment out some code causes no
problems.

The INCLUDE function is recognized, and the included files are
searched for symbol definitions (and listed, if the /I switch is set).

Although @ initially recognizes the usual functions for defining
functions or global variables, you may have your own definers which
you would like recognized.  You can request that with the @DEFINE
function.  @DEFINE is a no-op in Lisp itself;  it is used only to tell
@ that a certain function is a symbol-definer, and uses of it should
make entries in the symbol table.  You write

     (@DEFINE DEFFOO BAR)

to tell @ that (DEFFOO UGHBLETCH ...) is a definition of UGHBLETCH.
An entry will be made in the symbol table saying that UGHBLETCH was
defined.  Furthermore, the type of definition listed will be BAR.



































                                       536
Text: MUDDLE; What @ understands about Muddle                             page 1


Currently, subtitles are not recognized in MUDDLE code.  When they are
implemented, they will be specified by any string beginning with the
characters SUBTITLE, e.g., "SUBTITLE main routines...".
        FLOAD and USE are not recognized; however, parameters and local
atoms are recognized and creffed.



















































                                       537
Text: QUOTES; Quotes (') control whether files are listed                 page 1


The Singlequote Character in Command Lines.

Somewhat like a switch is the single-quote (').  With a data (non-LREC)
file, one single-quote indicates that the file should not be listed,
just scanned for symbol definitions (to which cross-references may
appear in files that are listed).  Two single-quotes prevents the file
from being processed at all.  This is what to do when a program .INSRT's
a file which you do not want scanned (or which does not exist).  Files
specified without a single-quote are listed.

With an LREC file, a single-quote can be used to prevent an updated
LREC file from being written out.  This is very good for making an
"experimental" listing, which you suspect you will throw away.  Not
updating the LREC file means that the same pages will be listed in the
next listing.









































                                       538
Text: SWITCHES; What you can do with command line switches                page 1


Switches go inside the file specs.  Some switches are global in effect,
and it does not matter which filespec they go in.  Other switches are
"per-file".  Some of them are sticky, and affect the file in whose spec
they go and all following files, until countermanded.  Global switches
are taken from an LREC file, if any, unless you override them by
respecifying the switch.  Per-file switch settings for each file are
taken from the LREC file also, unless the file is also specified
explicitly in the command string, in which case ALL per-file switches
must be specified in the command string (or allowed to be sticky from an
explicit specification with another file earlier in the command string).

Switches exist to control:
  How the source files are parsed.
  How much of each source file will be listed.
  The files used for output.
  The device used to print the output.
  The geometry of pages in the output.
  Copyrighting.
  How inserted pages are to be numbered.
  The use of overprinting in the output.
  Which tables are generated, and exactly how they look.

Switch Syntax:

To identify switches to @, you may either enclose several switches in
parentheses, or prefix each switch with a "/".  Switches are single
characters, possibly preceded by decimal numbers.  Use "-" for negative
numbers; -X = -1X.  For two-state switches, if X turns it on -X will
turn it off.  Some switches also take trailing arguments enclosed in [];
the meaning of such an argument is described below for each individual
switch which can take such an argument.

Thus, valid switch specifications include
        (S C-U)    or   /S/C/-U    or   (SC)/-U
or      (L[LISP]54W)    or      /L[LISP](54W120V)/F[20FG]

Spaces or commas between switches in parentheses are ignored.  Note that
if the /G switch is used, the default values of all switches are those
remembered in the input lrec file, except for switches which claim that
they are "not remembered in the LREC file".  Otherwise, the default
setting of a switch is "off", unless otherwise stated.

Table of Switches:

(* indicates a per-file switch; all others are global switches; default
is off (-X) unless otherwise stated):

        /#      Inhibits the printing of anything at all in the left
                margin, even the line numbers.
 *      /$      Inhibits printing the symbol table for the file.
                This switch is sticky throughout the command string,
                defaulting off for the first file.
                For .INSRT'ED files that were not mentioned by
                the command string or an LREC file, the /$ switch


                                       539
Text: SWITCHES; What you can do with command line switches                page 2

                default is the way the switch was set at the end of
                reading the command string.
        /%      The headings at the top of each page, which normally
                contain the file name and page number, should also
                contain the current date.  This flag now defaults on.
        /&      Suppress the title page at the front of the listing,
                and also the lists of printed and deleted pages and
                the page map.
 *      /@      This file is an LREC file, but use only its comparison
                data (for detecting unchanged pages);  don't use its
                filenames and switch defaults.
        /A      Arbitrarily long symbols should be kept by @; this is
                the default for LISP code.  If (-A) - the default for
                MIDAS and other assembly code - then only the first
                six characters are retained and used.
        /C      Keep track of all references and print a CREF at the
                end of the last file output.  "/-C" says there should
                be no CREF.
        /C[<FILE>]
                Is the same as "CU[<file>]" - It specifies the
                auxiliary output file and requests a CREF.
                /-C in a later listing would supress the CREF.
                If this means that there is no no-file-specific
                output, no auxiliary output file will be written,
                but @ will not forget that you want non-file-specific
                output to go in one.  To make such output go in the
                usual place, use /U[NONE:].
        /D      When a reference is made to another file
                in the left margin, use only the first two
                characters of the first file name instead
                of the whole file name.  This reduces the
                width gobbled up by the cross-reference data
                at some cost of readability.
        /F      Is a dual purpose switch.  <N>F simply sets
                the number of fonts to be used, while
                F[<font1>,<font2>,<font3>] sets the names of
                fonts as well.
        /F[<font1>,<font2>,<font3>]
                Tells @ that the sepcified fonts are to be used.
                If one of the font names is null, it is considered
                not specified.  There need not actually be three
                fonts named; only as many as it is desired to specify.
                Thus, "F[,20FR]" specifies only font 2 (used for
                the references).  A font spec is really a file spec;
                the defaults are appropriate for the system you are
                using (on its, DSK:FONTS;...  KST).  Fonts specified
                will be remembered in an LREC file.
        /<N>F   Use the specified number of fonts on output.
                Implies the X switch (XGP).  If two fonts,
                then reference data uses the first font and
                text the second font.  For three fonts,
                comments use the third font, where a comment
                is text on a line following a semicolon
                preceded by tabs or spaces.
 *      /G      Identifies the LREC file name, and specifies that the


                                       540
Text: SWITCHES; What you can do with command line switches                page 3

                file names and switch settings specified in the old
                LREC file should be the defaults for the new listing.
                The single-quote status of each source file (none,
                one, or two) will also be remembered.
        /-G     Because the ability to use the remebered switch
                settings and files is valuable by itself, /-G has
                the meaning, "use the remembered switch settings
                and file names, but make a full listing rather
                than a comparison listing".
        /1G     Specifies an LREC file for filenames and switches
                like a regular /G, but also causes enough extra
                pages to be listed when necessary to avoid giving
                newly created pages names like "5/1", or leaving
                gaps in the page numbering due to deleted pages.
        /H      On => output ^H as real backspace, causing overprinting.
                Off => output as uparrow-H
                (For XGP, if "^" switch is given, output as
                a quoted Control-H)
        /I      All .INSRT'd files (unless individually
                inhibited) should be listed.  Default is to
                use them only for the symbol definitions
                they contain.  For LISP code, the INCLUDE
                function specifies inserted files for this purpose.
*       /J      Controls the amount of reprinting of unaltered pages.
                /-J causes a new full listing to be made of the file(s)
                it is specified for.  It is the per-file equivalent of /-G.
                /1J causes reprinting to be done when pages are inserted
                or deleted, to whatever extent is necessary to avoid
                creating page numbers like 5/1, or leaving any gaps.
                /1J is the per-file equivalent of /1G.  Neither form of
                /J is remembered in the LREC file, and both are sticky.
                To countermand them, use /J.
        /K      Causes SOS line numbers to be listed as if part of the
                text of the file.  Normally, They are ignored.
        /L      Is used to specify the source language of
                the files being listed, telling @ how to find
                symbol definitions, etc.  The "L" should be
                followed by the name of the language, enclosed
                in square-brackets.  There should be no spaces
                between the "L" and the open-bracket.
                the language name may be abbreviated.
                Languages currently known to @ are "MIDAS",
                "MACRO-10", "PALX11", "FAIL", "LISP", "RANDOM"
                (which means that the file is intended only for
                human consumption), and "TEXT" (which means that the
                file is a document output by a text justifier).
                However, "MIDAS" is the default and need not
                be mentioned.
                Thus, "(L[FAIL] X)" specifies fail code being
                listed for the XGP.
 *      /M      Identifies the file it is spec'd with as the "MAIN"
                file.  This means that the LREC file version number
                is synchronized to this file's version number.
                In more detail, if an LREC file is written, its
                default fn2 is the real fn2 of the "MAIN" file.


                                       541
Text: SWITCHES; What you can do with command line switches                page 4

                For this to be reasonable, the LREC file should
                either be kept on a different directory from the
                "MAIN" input file, or should have a different fn1.
                If neither of those is the case, the default fn2
                of the LREC file will be LREC -- otherwise, the LREC
                file written would overwrite the input file!
                If you are using the /M feature, you might also want
                to use /G with the LREC file - that will make the
                default input fn2 ">", which is just right.
        /N      Omit the cross-reference data on the left
                margin (but still produce a symbol table and
                CREF if appropriate).
        /O      Means files are old.  This is used for
                creating LREC files for your old files without
                listing them, so that you can make comparison
                listings of the new ones (this is in case
                you didn't make an LREC file the last time you
                listed them).  The results are the same as if
                you simply deleted all the listing output files,
                but /O is more efficient.  /O can also be used to
                build a new LREC up from the current source versions
                and an old LREC file.  /O is not remembered
                in the written LREC file.
        /O[<file>]
                Specifies default output file names.  If a single
                output file is being generated (/S is in use), the
                complete name may be specified in the /O (but need
                not be;  anything not specified will be defaulted).
                If /S is not in use, and each data file has its own
                listing file, ONLY the device and directory name
                may be specified in a /O, since the filename for each
                listing file must be left free to default.
                The /O filenam affects only listing output files.
                The LREC output file must be specified in front of
                a "_" in the LREC file spec;  the auxiliary output
                file is controlled by /C or /U.
 *      /<N>P   The page number of the first page to be listed.
                (Default 1.)  Useful for restarting listings lost in a
                crash.  This switch is not remembered in LREC files.
        /Q      A Qopyright message is printed at the bottom
                of each page.  The default message is: "(c) Copyright
                1977 Massachusetts Institute of Technology.
                All rights Reserved." except that the correct
                year is substituted.  A different message may
                be specified by using []: /Q[This is a message].
                [] May be used in the message if they are balanced,
                or if quoted by ^Q.
        /R      OFF => only <CRLF> counts as a line-separator.
                 Stray CR's and LF's will appear in the listing
                 as uparrow-M and uparrow-J, except that in XGP listings
                 if the "^" switch is set they will come out as
                 quoted control-M's and control-J's.
                On => all LF's count as line-separators;
                 Stray CR's cause overprinting.
        /S      Only one single output file should be


                                       542
Text: SWITCHES; What you can do with command line switches                page 5

                created, the concatenation of all the output data.
        /<n>S   Allocate space for <n> symbols.  Should never be needed
                on ITS.
        /T      -T (the default) if a line is too long, insert CRLF's.
                1T (or just T) => truncate long text lines to fit the linel.
                0T => let them run over.
                (Tables produced by @ always stay within
                the linel by design.)
        /<n>U   Universal symbol tables.  If <n> is negative,
                each file's symbol table will be a universal one
                (will list all symbols in all files).  If <n> is
                0 (the default case), each file's symbol table
                will be normal (list only that file's symbols).
                If <n> is positive, the files' symbol tables
                will be normal, but there will be <n> extra
                universal symbol tables printed.  They will go in
                the auxiliary output file if there is one;
                otherwise, at the end of one of the listing files.
        /U[<file>]
                Specifies the name of the auxiliary output file,
                and that there should be one.
                The auxiliary output file is used to hold all output
                not associated with any particular input file.  
                This now means crefs and universal symbol tables.
                Names not specified in the filespec inside the /U
                default as they would for other listing output files
                (based on the /O specification, if any, or to
                <last data file> @CREF on your working directory).
                If LREC files and /G are in use, note that the
                unspecified names will be re-defaulted each time
                a listing is made; if the device and sname are
                unspecified then in each listing the auxiliary
                output file will go on the same directory as the
                other output files.
        /U[NONE:]
                Specifies that there be no auxiliary output file.
                What would normally go in it, goes at the end of
                one of the regular output files.
        /<n>U[<file>]
                Combines the two functions of the "U" switch.
        /V      Is a multi-purpose switch, which can set either the
                page height or the VSP (vertical interline spacing).
                Given any reasonable page height (>45 or so) the page
                height is set.  Given a reasonable VSP (<= 15) the VSP
                is set.  Given a negative argument,
                the VSP is set to its absolute value.
                The default VSP is 4 (or whatever comes from an
                LREC file).  The default page height is more
                complicated.  If fonts and VSP have not been
                specified, either in the command or from an
                LREC file, the default is 60.  If fonts or VSP
                have been specified, the default is the right
                number of lines of that font to fit on a
                normal 11 inch XGP page with normal margins.
        /<n>W   Set page width.  The default for non-XGP listings


                                       543
Text: SWITCHES; What you can do with command line switches                page 6

                is 120.  For XGP listings the default is 89 if
                fonts have not been specified.  If fonts have
                been specified, the default is the number of
                characters of the widest font, that will fit
                in an 8.5 inch XGP line, with normal margins.
        /X      XGP output (also implied by F switch).
        /X[QUEUE] Do queue the output files for the XGP.
                /DELETE is used, so that the file will be
                deleted a few minutes after it is printed.
        /X[NO]  Do not queue the output files for the XGP.
                You must queue them by hand later.
        /X[GOULD] Queue the output files for the Gould printer in
                Building 38 (on MC).  Use -X[GOULD] to get LPT
                style listings (these come out faster).
        /Y      Causes @ to assume that the user will re-number
                old pages.  Normally, @ assumes that old pages
                not replaced keep their numbers, and creates
                interpolated page numbers like "1/1" when pages
                are inserted.  With /Y, it prints each page
                with its real number, and expects you to correct
                the page numbers of pages being carried over
                from the old listing (a guide telling you how
                to renumber them is printed).
        /Z      A table of contents should be printed, using
                subtitles from the various subtitle pseudo-op's.
        /^      On => control chars are output as themselves
                    (On XGP, they are XGP-quoted if necessary)
                Off => control chars output as uparrow-
                        <char+100 ASCII>
                When the language FAIL is selected, this switch
                defaults on; otherwise, off.
        /_      Print an ASCII description of the contents of the
                input LREC file.  You should use this as follows:
                :@ FOO LREC/_<CR>.
                The ASCII description goes in a file  DLREC >
                (DLREC.LST on TOPS-10) on the default directory
                (it can be moved with a /O[<defaults>] - doing so
                is not a screw, in the sense that the DLREC file
                contains the /O information from the LREC file,
                not the /O you specify.)

Switch Example:

This is how ITS would be listed now, if the LREC file were lost:

        :@ SYSENG;ITS(F[20FG] I $ 1U[ITS]),SYSLRC;ITS(G -$)

SYSENG;ITS > and all .INSRT'ed files are listed for the XGP with
font 20FG.  ITS has no symbol table, but every other file has one
(because the -$ in the LREC file spec sets the default for
.INSRT'ed files).  Also, a universal symbol table is put in a
file named ITS @CREF on the same directory as the listing files.
The reason we don't give the file ITS a symbol table of its own is
that it would be a repetition of most of the universal symbol table.



                                       544
Text: FILES; What files are used, and their default names                 page 1


Filenames Used by @.

Normally, a separate output file is written for each data file,
onto the user's working directory (on ITS, for non-XGP listings,
onto TPL:).  Its first file name is the same as the data file's.
Any output not associated with a single file (universal symbol
tables, or CREF tables) goes at the end of one of those output
files (namely, the last one written).

You do have some control, however.  The output files can be forced
onto a different device or directory with the /O[<defaults>] switch.
You can cause all the listings to go in a single file, rather than
one for each data file, with the /S switch, and then you can use
the /O switch to specify its name completely.

In addition, you can make the non-file-associated output go in
a separate file, called the auxiliary output file, and specify
its name, with the /C[<file>] or /U[<file>] switches (Filename
components not specified in the /C or /U default, as in other output
files, to the /O or the working directory/TPL).  Any names
specified in the /O, /C or /U switches are remembered for future
listings;  names not specified are defaulted anew each time, and
not necessarily always the same way.  Thus, if you do not specify a
directory name, the output files will, each listing, go on the
current working directory of the user making the listing.

As for filename defaulting, all the first file names default
together stickily.  Each second file name defaults for each
file separately, according to the file's use.  Device names
and directory names default stickily data files, starting out
as "DSK:" and the user's working directory;  however, the
LREC file is unaffected by the stickiness.  It defaults to
DSK: and the user's working directory.

The default second name for LREC files is "LREC" ("LRC" on TOPS-10)
and "OLREC" ("OLR" on TOPS-10).  For data files, the default on ITS is
">";  on TOPS-10, it is the appropriate extension for the language the
file is in (as specified by the /L switch).  The TOPS-10 version will
also recognize the language that a file is written in from its
extension, if you specify the extension but not /L.

For output files, the default on its is "@" for non-XGP output, "@XGP"
for XGP output, and "@CREF" for auxiliary output files (see /C and
/U).  On TOPS-10, the defaults are "LST", "XGP" and "ATC",
respectively.

An alternative naming scheme for LREC files is available on ITS, which
matches the LREC file versions with the source versions they describe,
by giving the LREC file the same version number as the source.  This
scheme is useful only with one-file listings, or when there is one
file in the listing which is paramount, and which changes far more
often than the others.  To request it, specify the /M switch with the
input file whose version numbers are to be followed by the LREC file.
You should then specify the directory and first name of the LREC file


                                       545
Text: FILES; What files are used, and their default names                 page 2

as usual, but not the second name (and don't make the directory and
first name of the LREC file the same as those of the source file, as
you otherwise would be likely to do!  Luckily, @ will refuse to
clobber the source with the LREC).  /M will be remembered in the LREC
file so the alternative naming scheme will continue to be used.  If
you want to change to the normal one, specify /-M in a listing.  If
you want to change the file whose version numbers are followed,
specify /M with the new file to use.

















































                                       546
Text: SUBSTITUTIONS; What to do when you move your source files           page 1


What to do when you change the names of some of your source files.

Sometimes, you will change the name of one of the files of a
program, or move it to a different directory.  When this happens,
you must make sure, when you next list the program, that @ obtains
that part of the program from the right place.

On ITS, the easiest way to do this is to make a link from the old
name to the new name.  Thus, if SYSENG;FOO > has been moved to
SYSTEM;, make a link SYSENG;FOO > to SYSTEM;FOO >.  The next listing
will obtain the correct file through the link, and in the new LREC
file the new names SYSTEM;FOO > will be rememebered.  Subsequent
listings will use SYSTEM; even if the link is deleted.  If it is
not convenient to use a link, a translation (see the ^T and $^T
DDT commands) will do just as well.

If you are moving a file to a new directory, but not changing
the first filename, then you can simply specify the file explicitly,
with its new names, in the next listing.  Because of the matching
first names, @ will assume that the specified file is the same
one as mentioned in the LREC file, on a new directory.  However,
it is necessary to respecify all the per-file switches that you want.

If all else fails, you can specify the new name of the file explicitly,
and specify the old names with two single-quotes to make @ ignore it.
On a DEC system, this is probably the only alternative.
Unfortunately, it will always make a new full listing of the file
that was moved.  Of course, you can always delete that listing file.




























                                       547
Text: AUXDDT; AUX circuit Dynamic Debugging Tool                          page 1

The AUXDDT program allows debugging programs which expect to
be a slave to a master over an auxilary circuit.  Such programs
as KLDCP (APT10 protocal) and UPDLUD, etc.  The program first
asks for a username to build the circuit to (prompt is "*").
It then builds the circuit and enters conversational mode.
The following commands then work:

"<string>       Sends string as is
'<string>       Same as " but with parity
^<string>       Sends the string as control chars (subtracts
                '100 from them)
.<decimal#>     Sends character with given ascii code
!<decimal#>     Same as . but with parity
#<octal#>       Breaks # into 4 bytes (high order 1st)
#n:<octal#>     Breaks # into n bytes (high order 1st)
=<octal#>,<octal#> ... <octal#>
                Displays value of given bytes packed into
                an integer (all in octal) - opposite of #
$               Zaps circuit and returns to monitor
(<string>)      Sends string in 4 byte words, last word has
                the sign bit on (parity)
<octal#>        Sends character with given ascii code
?               Types this message
B<decimal#>     Sets the value of BYTE!SIZE to given number
                defining the number of bits in a byte for
                # and = commands only.
W<decimal#>     Sets the value of WORD!SIZE to given number
                defining the number of bytes in a word for
                # command only

Note: this program doesn't work very well...
1) It screws up echoing
2) It ill mem ref's because it does bad things in SAIL immediate
	interrupts.  























                                       548
Text: AUXIO; Aux Circuit and dialout utility                              page 1

AUXIO is a program to communicate over an auxilary circuit or
dialout line to another host.  It allows sending files as if
they were typed at the terminal as well as recording what is
printed on the terminal in a file.  Very basic commands may
be storred in a command file to perform certain common functions.




















































                                       549
Text: AUXIO; Aux Circuit and dialout utility                              page 2

.r(mpl)auxio
version 25
*?
Valid commands are:
Creaux <user>:<sys>     build circuit over Tymnet
Dial <phone-#>          dial host at phone-#
Input <file-spec>       send contents of file over circuit
Output <file-spec>      record all chars from host in file
Set COPY / NOCOPY       turn on and off recording
Set BLANK / NOBLANK     turn on and off blank line suppression
Set WATS / LOCAL        select WATS or LOCAL dialout line
Set ^<char>             set escape character (default is ^P)
Set <baud-rate>         set dialout baud (default is 300)
List                    display current settings and connections
Force <string>          send string to host followed by <crlf>
Wait <seconds>          wait for n seconds to elapse
Time <seconds>          wait until no chars rec'd for n secs (5)
Resume                  resume transparent connection
Hangup                  disconnect dialout connection
Zap                     disconnect auxiliary connection
@<file-name>            execute commands in file named
?                       print help message
Note: dialout number should contain no punctuation except "=" which
should be inserted where necessary to wait for a secondary dialtone.
The dialer is currently connected to an in-house line at Corporate.
To dial a local Cupertino #, use "9=nnnnnnn".  To dial outside
of CA use "4=aaannnnnnn".  To dial PaloAlto, "112=nnnnnnn".
To dial LA, use "115=nnnnnnn".  SF is "116=9=nnnnnnn".
*q
.



























                                       550
Text: AUXIO; Aux Circuit and dialout utility                              page 3

The command file allows the following conventions...
any line may have embedded in it a Terminal-Query.
The terminal query is a string enclosed in ?( )? or ?< >?.
The string will be printed on the user's terminal and input
will be requested.  The input given will replace the terminal
query in the command line.  Query's enclosed in ?< >? will
not echo the terminal input while those enclosed in ?( )? will.
This makes ?< >? useful for passwords.

When describing the user-name string in a Creaux command,
the character ?* may be used to specify either the default
user-name (the one logged in to when running AUXIO) or the
default system (the one logged in to when running AUXIO).
Example: 
	C ?*:236 
will log into system 236 under whatever user name the person
running AUXIO is using.

If the last character in a force command is an escape (?=)
then no CRLF will be sent after the forced text.  The escape
will not be sent either.  If it is necessary to send an
escape followed by a CRLF, use
	F ?=?=
	F
or, if <ESC><SPACE><CRLF> will do,
	F ?=<space>

When putting command files in MYAUX.COM, each command file
must begin with "@<file-name>".  file-name may be any
length.  This will be scaned for if the file <file-name>.CMD
does not exist on the GFD'd directory.


























                                       551
Text: CACHE; Program to change cache strategy                             page 1

The (MPL)CACHE program which should be on all KL systems, is
a utility program to be used with WC license to turn the CACHE
on or off for the system.  The program runs with USER-IOT set
and performs a number of I/O instructions as well as a few
pokes.  When it is first run, it will inform the user of the
state of the two cache strategy bits.  The user is then asked
what he wishes each of the bits to be set to.

The purpose of the program is to allow the user to disable the
cache to uncover a possible cache bug, or to more easily locate
some problem which may be obscured by the cache.

The best way to turn off the cache is to insure that no more
locations will be loaded (by turning off load).  The cache
program always does an unload sweep so this will insure that
the cache is effectively disabled.  This is safer than turning
off look (which is seldomly necessary).
(Note: the description of the cache bits below differs from that
in the KL-10 Hardware Manual which is not correct)

LOOK	This bit being on causes the cache to be looked at for
	all references to memory.  If the location being ref'd
	is in the cache, it will be used.
	Turning this bit off, completely disables the cache.
	***NOTE*** Disabling the cache on some KL's will cause
	the monitor to hang waiting for the cache-sweep-done
	interrupts after sweeps.  Other KL's will cause the
	interrupt imediately if the cache is off (good luck).

LOAD	This bit controls loading the cache.  If it is on
	(and LOOK is too), then references to memory not
	already in the cache will cause the cache to be
	loaded.  If this bit is off, the cache will never
	be loaded, even though, it may be consulted for
	data already in it, new data will never apear in it.






















                                       552
Text: COPY; Copy N files to N systems detached                            page 1

The copy program allows the user to TELECOPY files from
the directory he is GFD'd to to any or all other systems.
The program runs detached and disowned in a sprouted frame.

The program expects the following input:

  FILE(S): 
	The characters "#" and "*" may be used with their normal
		effect.  Also "," or "-" may be used to seperate
		file specifications.  The "-" will not copy the
		files listed after it (ie. *.*-*.REL will copy all
		files in the directory except the .REL's)
	If the line is terminated with an <esc>, the file(s) will
		be copied to the GFD'd directory on all systems.
		Existing files will be superceded.
	If the /SUPERCEDE switch is present, COPY will not ask the
		user if existing files are to be superceded.
  COPY TO USER NAME: (without parenthesis)
	Default here is the GFD'd directory.
	If the user has AC license, TELECOPY will be logged in to
		this user name.
  COPY TO SYSTEM(S): (seperated by ",")
	"10s" or "*" or <cr> may be given to specify default.
	Default is to all PDP-10's known by telecopy.
  SUPERCEDE EXISTING FILES? 
	Default is no unless <ESC> or /SUPER switch given.

Note: the user must be GFD'd to the directory he is copying from.

Garbage collection: Copy leaves around some junk files of the form 
	###COP.TMP	- copy scratch file.
	###TEL.DIR	- directory scratch file.
	###TEL.COM	- telecopy command file.
	###TEL.OUT	- telecopy log.
### is a job number.  It is the job number for COPY in the first
2 files, and for TELECOPY in the last two.  These files may be
deleted with the command
.DEL @(MPL)COPY



















                                       553
Text: CRASUM; Extract data from CRALOG                                    page 1

CRASUM accepts more than one command on one line.
For example, the command
	LIST SOFTWARE FROM 1 DEC TO 31 DEC
would do what it appears it would do.

Commands are:

LIST	Causes a listing to print out.
COUNT	Causes just the count of selected crash type to print.
ABBREIV	Causes brief listing to print.
BRIEF	Same as ABBREIV.
YEAR	Selects year of CRALOG file to use. Default is current year.
START	Selects starting date, format DD MMM
FROM	Same as START
BEGIN	Same as START
STOP	Selects ending date, format DD MMM.
TO	Same as STOP
END	Same as STOP
MONITOR	Selects monitor type crashes.
HARDWA	Selects hardware crashes.
SOFTWA	Selects software crashes.
NETWORK	Selects network crashes.
OPERATOR Selects operator caused crashes.
UNKNOWN	Selects unknown crashes.
ALL	Selects all crashes.
ONLY	Same as all.
PRIME	Selects only prime time crashes.
NON-PR	Selects only non-prime time crashes.
NONPRI	Same as NON-PR
DDT	For debugging.
LONG	Opposite of BRIEF - prints full crash text.
QUIT	QUIT program.

All specified dates will hold for the remainder of the program's
execution. To select new dates, one must run CRASUM again.






















                                       554
Text: CRASUM; Extract data from CRALOG                                    page 2

The format of CRALOG must be as follows:

DD MMM TTTT <Monitor version> $<H,S,O,U,N> <Crash text>
	<multi line crash text preceded by a tab>

CRASUM assumes that crashes are in ascending date order in CRALOG;
If they are not, date ranges will not work properly..
the counts will be off.

See info node CRALOG in Procedures for further information.















































                                       555
Text: CRSHID; Program to analize crashes                                  page 1

CRSHID is an aid to a person doing crash analysis in that it will
provide the following information about any crashes which have
been saved:
	The name of the crash file
	The version of the monitor that crashed
	The date of the crash (or the uptime if crash date unknown)
	The APR serial number
	The APR type (KI,KL or KS)
	The APRSTS bits (if signifigant)
	The base crash code (if signifigant)
	Miscelaneous other hints

The following brief help message is obtained by saying
.r(m33)crshid;?
Commands may be given on the command line with the call to CRSHID:
        R(M33)CRSHID;<commands>
Commands may be either "?" or a list of file specs.  The file
specs may contain a directory or PPN and a file name.  No extension.
If the file name is omited, "CRA0##" is used.  If no arguments
are given, the default is "(SYS)CRA0##".
If the argument "/SYS" is given (alone) it will scan each of
(SYS)SYSTEM,(SYS)BACKUP,(SYS)NEWMON,(SYS)OLDMON.
Example:
        R(M33)CRSHID;(SYS)SYSTEM,(SYS)BACKUP
Output is sent to both TTY: and DSK:CRSHID.LOG.
Switches may be abbreviated to their point of uniqueness, in this
case "/".






























                                       556
Text: CRSHID; Program to analize crashes                                  page 2

Below are a few examples of CRSHID runs:

.r(m33)crshid
CRA001 C37-P033/H02 #1336(KL) 4/20/1979 1400, Base type 7

.r(m33)crshid;/sys
BACKUP C37-P033/H01-1 up at 4/20/1979 1816, No crash
OLDMON C37-P033/FA up at 2/20/1979 0218, No crash
SYSTEM C37-P033/H04 up at 4/20/1979 1817, No crash
















































                                       557
Text: CRSHID; Program to analize crashes                                  page 3

The following assumptions are made by the program and will cause
it to break if they change in the real monitor:

KEY620=150
137/ ?,,CONFIG
147/ ?,,CRASHX
CONFIG...CONFIG+4/ asciz system name
CONFIG+10/ tics past midnight GMT of crash
CONFIG+11/ days past 1/1/64 GMT of crash
CONFIG+20/ APR serial number
CONFIG+26/ tics per second

TSTLOC=CRASHX-2
SYSCRS=CRASHX-1

normal KEY620 value is 633751506262

APR serial number maps to CPU type as follows (octal values)
0...1777 = KI;  2000...7777 = KL;  10000...17777 = KS






































                                       558
Menu: DDT; DDT program                                                    page 1

560    HISTORY         Modification history
561    FEATURES        Tymshare DDT Features























































                                       559
Text: HISTORY; Modification history                                       page 1

DDT 25.0	7/5/78 W.R.Soley
 1) Handlles KL paging with new formatted CONO PAG and DATAO PAGE
 2) Implements following $nG's:
    n$0G	simulates DATAO PAG,[n]		on a KI-10
    n$1G	simulates DATAO PAG,n		on a KI-10
    n$2G	copies 8 ac blocks (consecutively) from adr n
    n$3G	copies user ac block (1) from location n
    m,,n$4G	map phys page M into exec virtual page N
    n$5G	set simulated AC stack pointer from location n
    n$6G	simulates CONO PAG,n		on a KL-10
    n$7G	simulates CONO PAG,@n		on a KL-10
    n$8G	simulates DATAO PAG,[n]		on a KL-10
    n$9G	simulates DATAO PAG,n		on a KL-10
    n$10G	map phys page M into user virtual page N
    m,,n$11G	copy ac block M from location N
 3) Implements the following n^B's:
    1^B		Sets up for looking at KI crash
    2^B		Sets up for looking at KL crash
 4) Saves 8 ac blocks (opposed to 1).

DDT 25.1	7/10/78 W.R.Soley
 1) Takes lower case switches in FILDDT (/s).



































                                       560
Text: FEATURES; Tymshare DDT Features                                     page 1

The following is a collection of useful notes on the operation
of DDT.  It supplements rather than replaces the DDT manual.

$$"/text/	puts text in more than one location in SIXBIT.
$$7"/text/	same but in ASCIZ.
text$$bits&	enters stuff in RADIX-50.
$siz%byt1,byt2,byt3...$		enters bytes of siz n; if n=0
		then uses byte mask - to set byte mask, use
		n$2M where first byte field is 0, second is
		1, third is 0, etc. for example to enter PDP-10
		instructions, do
			000757,,0$2M	$0%inst,ac,indir,index,e$
$L, $$L		If bit name table is set with adr$3M, sets typeout
		mode to halfword flags.

$J, $$J		If bit name table is set with adr$3M, sets typeout
		mode to symbolic flags.








































                                       561
Text: FEATURES; Tymshare DDT Features                                     page 2


$$:		prints currently open module
module$$:	temporarily open module
^A		control-a may replace $$: in above two
$/ $\ $[ $] $<tab> $=	all calculate effective address

loc$$1_		prints loc as a byte pointer
pointer$$_	prints out byte pointed to by pointer

x$y m	sets loc $m+y to x
where:
y=0	mask
y=1	how far away until symbol not user for adr printout
y=2	byte input mask
y=3	address of bit name table, in RADIX50, 36. entries long
	  used for $L and $J.

$I is a DDT cell used in EXEC DDT. Left half contains saved PC flags,
	right half contains PI channels that were in progress.
$I+1 contains the CONO PI data to turn off interrupt channels while
	inside DDT. Default is to leave channels 1 and 2 on.
$I+3 contains the address of a special output routine. Character
	is contained in AC 5. Return is POPJ 1,.


































                                       562
Text: FEATURES; Tymshare DDT Features                                     page 3

The following switches apply only to FILDDT:

Switches that may follow input file name:
	/F	don't expand core image file
	/C	expand as core image file
	/S	load symbol table from file
If no extension is typed, will find a core image file and
	expand it unless /F given.
If extension is typed, file will not get expanded unless /C given.
















































                                       563
Text: FEATURES; Tymshare DDT Features                                     page 4

The following buffers and control commands are for FILDDT:

0^B	Executes code at %%PAT (loaded by user) - most versions
	of FDnnnv.SAV have code to print crash data there.
1^B	Sets up stuff to look at a KI crash:
	PAGDTI$1G CRSHAC$2G %UPT+UPTACP$5G
2^B	Sets up stuff to look at KL crash:
	PAGDTI$7G PAGCNI$9G CRSHAC$2G
^W	toggle write enable bit (no good on disk files )
^V	toggler between CODE MODE and FILE MODE
^Y	take a command file
$G	restart DDT

The following symbols allow user to change code for use by 0^B,
this must be done in CODE MODE:

%%PAT	address of 0^B routine
%%FET	LUUO to fetch from file - skips on success
%%END	LUUO to go back to real DDT






































                                       564
Text: FEATURES; Tymshare DDT Features                                     page 5

These "GO" commands perform the functions indicated in EDDT and FILDDT:

n$0G	   simulates	DATAO PAG,[n] on KI-10
n$1G	   simulates	DATAO PAG,n on KI-10
n$2G	   copies [n to n+20*8-1] into AC's
n$3G	   load AC block 1 from [n to n+17] (same as 1,,n$11G)
m,,n$4G	   map physical page M into exec virtual space at N
n$5G	   set simulated AC stack pointer from contents of n
n$6G	   simulates	CONO PAG,n	on KL-10
n$7G	   simulates	CONO PAG,@n	on KL-10
n$8G	   simulates	DATAO PAG,[n]	on KL-10
n$9G	   simulates	DATAO PAG,n	on KL-10
m,,n$10G   same as $4G except for user space
m,,n$11G   load AC block m from locations [n to n+17]











































                                       565
Text: FEATURES; Tymshare DDT Features                                     page 6

The following pertains to both FILDDT and EDDT:

n^E<delim><text><delim>	puts text in command buffer n
n^P	prints contents of command buffer n
n^B	executes command buffer n

$nB+3/	address of ASCIZ string to do at breakpoint

with / \ [ ] <tab> and =
$0	effective address
$1	user location
$2	fetches effective address and gets user location
$3	gives physical address with =
$ is same as $0











































                                       566
Text: FEATURES; Tymshare DDT Features                                     page 7

The following pertains only to EDDT:

EDDT is kept if breakpoint 1 exists

EDDT has two assembled command buffers:
 1^B	bring system up for T/S, ^ZB at console gets back to bpt
 2^B	stand alone - CTYSIM runs console as user terminal:

also, the following work anytime in CTYSIM:
  ^ZB	causes breakpoint
  ^ZL	logs in
  ^Zn	fill N chars
  ^ZH	simulates hangup
  ^ZO	helps control O

EDDT has 16 breakpoints.
$4G works!








































                                       567
Text: FEATURES; Tymshare DDT Features                                     page 8

FRMDDT includes the following features in addition to those in DDT:

<n>$U		- sets up frame number <n> to be hacked
^V		- read symbols from a file
^W		- toggle write enable flip-flop
		- print status line for frame being hacked 
		  the status line includes the frame number, user name,
		  program name, run state, and current PC word

In addition, the frame may be halted by doing 
	HALT$X
or, if HALT has not been defined,
	JRST 4,$X












































                                       568
Text: DIRED; Directory editor for ADM3's                                  page 1

The DIRED program will display a subset of the current directory
on the screen and allow you to move around within the directory
and optionally mark or unmark files and type files.  When a file
is typed, your place in the directory is remembered and when you
have seen enough of the file, you are returned to it intact.

When you exit from the program, a file will be written called
DIRED.CMD (it is a temp file).  The file will have the names of
all the files which were selected or marked durring the session.
One to a line.  You may then say DEL @DIRED or use it with the 
COPY program or any such thing.  The DIRED.CMD file will disappear 
when you GFD anywhere or logout.













































                                       569
Text: DIRED; Directory editor for ADM3's                                  page 2

While, DIRED is running, files are selected and deselected by
combinations of the following single character commands:
  +;    Named files will be selected (default)
  -     Named files will be deselected
  :     Names all files from cursor to next file named
  [     View top page of directory
  ]     View bottom page of directory
  ^     View next page of directory
  .     ReView the current page of the directory
  =_    Peek at the file named next
  <lf>  View previous page of directory
  <esc><ctrl-D><ctrl-C>  Exits from DIRED and writes command file
A file is 'named' by typeing the single letter shown in the left
margin.  A range of files may be named by typeing <letter>:<letter>.











































                                       570
Text: ERRCHK; Disk Error Reporting Program                                page 1

ERRCHK VERSION 2 HAS TWO DIFFERENCES FROM VERSION 1.
ERRCHK NOW HAS BOTH A LONG AND A SHORT OUTPUT MODE. THE SHORT
MODE IS THE SAME AS PREVIOUS VERSIONS OF ERRCHK. THE LONG MODE
ATTEMPTS TO CONVER THE CONI AND DATAI BITS TO A READABLE SET
OF MESSAGES TAKING INTO ACCOUNT THE TYPE OF DEVICE. ERRCHK
IS NORMALLY IN LONG MODE. TO ENTER SHORT MODE, TYPE
  ERROR SHORT
TO RETURN TO LONG MODE, TYPE
  ERROR -SHORT

DISK AND DRUM NOW HAVE AN ADDED FIELD IN SHORT MODE LABELED
SLBN. THIS IS THE BLOCK NUMBER OF THE LAST SOFT ERROR (LIKE LBN).

ERRCHK RECOGNIZES THREE TYPES OF DEVICES IN LONG MODE

BP	CALCOMP 230 OR IBM 3330
DP	CALCOMP 268 OR DEC RP03 OR DEC RP02
FH	DEC RM10B

THE GENERAL FORM IS ILLUSTRATED BY THE FOLLOWING EXAMPLE:

9-SEPT-74

16:32	FHA0(TYD033)	HDEV 72 
HARD DATA
	NOT READY

	PARITY REGISTER 0 UNIT 0 SECTOR 41

	TRACK 2 SECTOR 56
SOFT DATA
	NOT READY

	PARITY REGISTER 0 UNIT 0 SECTOR 36

	TRACK 2 SECTOR 56

NUMBER OF RETRIES 40

THE MESSAGES WHICH MAY BE PRINTED FOR THE DIFFERENT DEVICES
ARE GIVEN BELOW. FOR AN EXPLANATION OF THEIR MEANING
SEE THE DEC HARDWARE MANUAL AND THE IBM 3330 MANUAL.

DRUM (FH)

	CHANNEL TERMINATE ERROR
	SEARCH ERROR
	UNIT ERROR
	TRACK ERROR
	NOT READY
	POWER FAILURE
	DEVICE PAIRTY ERROR
	DATA PARITY ERROR
	CONTROL WORD PARITY ERROR
	NO SUCH MEMORY


                                       571
Text: ERRCHK; Disk Error Reporting Program                                page 2

	ILLEGAL WRITE
	DATA LATE
THE ABOVE FROM CONI
	PARITY REGISTER
	UNIT
	SECTOR
THE ABOVE FROM DATAI
	TRACK
	SECTOR
THE ABOVE FROM THE BLOCK NUMBER

DISK (DP)

	CONTROL WORD PARITY ERROR
	SECTOR PARITY ERROR
	CHANNEL DATA PARITY ERROR
	DISK WORD PARITY ERROR
	CHANNEL TERMINATE ERROR
	END OF CYLINDER
	POWER FAILURE
	SEARCH ERROR
	DATA LATE
	NO SUCH MEMORY
	NOT READY
	ILLEGAL WRITE
	ILLEGAL DATAO
	SECTOR ADDRESS ERROR
	SURFACE ADDRESS ERROR
THE ABOVE FROM CONI
	DRIVE
	CYLINDER
	SECTOR COUNTER
	POSITION FAILURE
	HEADS IN POSITION
	DISK ON LINE
	FILE UNSAFE
	NO SUCH DRIVE
	READ ONLY
	WRITE HEADER LOCKOUT
	ATTN 0
	ATTN 1
	ATTN 2
	ATTN 3
	ATTN 4
	ATTN 5
	ATTN 6
	ATTN 7
THE ABOVE FROM DATAI
	CYLINDER
	HEAD
	SECTOR
THE ABOVE FROM BLOCK NUMBER

DISK (BP)



                                       572
Text: ERRCHK; Disk Error Reporting Program                                page 3

	WRITE PROTECT ERROR
	SELECT ERROR
	CONTROL ERROR
	LENGTH ERROR
	EQUIPMENT CHECK
	PERMANENT EQUIPMENT CHECK
	UNIT EXCEPTION
	ATTENTION FLAG
	BUSY
	COUNT ERROR
	UNRECOVERABLE DATA CHECK
	RECOVERABLE DATA CHECK
	INVALID TRACK FORMAT
	SEARCH ERROR
	CORE PARITY ERROR
	NO SUCH MEMORY
	DATA LATE
	UNKNOWN ERROR
	PROTECTION FAILURE
	BUS IN PARITY ERROR
	BUS OUT PARITY ERROR
	COMMAND REJECT
THE ABOVE FROM SENSE BYTE 0-3
	CONTROL
	DRIVE
THE ABOVE FROM SENSE BYTE 4

PROGRAM ERROR OR SYSTEM CHECK
	NO MESSAGE
	INVALID COMMAND
	INVALID SEQUENCE
	CCW COUNT LESS THAN REQUIRED
	DATA VALUE NOT AS REQUIRED
	DIAGNOSTIC WRITE NOT PERMITTED
	CHANNEL DISCONTINUED RETRY
	CHANNEL RETURNED WITH INCORRECT RETRY CCW
	23FD - NOT READY
	23FD - HARD SEEK CHECK
	23FD HARD READ CHECK
	IMPROPER DEFFECTIVE TRACK POINTER
	SERDES MALFUNCTION - NO ST 4'S
	DIAGNOSTIC WRITE CONTROL CODE MISMATCH
	CONTROL STORAGE BUSY WITH MICRODIAGNOSTIC
	RETRY BYTE COUNT/SECTOR VALUE INCORRECT

DISK DRIVE EQUIPMENT CHECK
	NO MESSAGE
	SET TARGET ERROR
	NOT USED
	NO WRITE GATE AT DRIVE
	NO WRITE CURRENT SENSE
	TRANSMIT CYLINDER ERROR
	TRANSMIT HEAD ERROR
	TRANSMIT DIFFERENCE ERROR
	FILE STATUS NOT AS EXPECTED


                                       573
Text: ERRCHK; Disk Error Reporting Program                                page 4

	SEEK ERROR
	SEEK INCOMPLETE ON RETRY
	NO INTERRUPT FROM DRIVE

STORAGE CONTROL EQUIPMENT CHECK
	NO MESSAGE
	ECC P1 OR P3 COMPARE FAILURE
	ECC P2 COMPARE FAILURE
	NOT USED

STORAGE CONTROL - CONTROL CHECK
	NO MESSAGE
	NOT USED

DATA CHECK WITHOUT DISPLACEMENT
	HA FIELD ECC UNCORRECTABLE
	COUNT FIELD ECC UNCORRECTABLE
	KEY FIELD ECC UNCORRECTABLE
	DATA FIELD ECC UNCORRECTABLE
	HA FIELD NO SYNC BYTE FOUND
	COUNT FIELD NO SYNC BYTE FOUND
	KEY FIELD NO SYNC BYTE FOUND
	DATA FIELD NO SYNC BYTE FOUND
	NOT USED
	AM DETECTION FAILURE ON RETRY

DATA CHECK WITH DISPLACEMENT
	HA FIELD CORRECTABLE
	COUNT FIELD CORRECTABLE
	KEY FIELD CORRECTABLE
	DATA FIELD CORRECTABLE
	NOT USED
THE ABOVE FROM SENSE BYTE 7
	CYLINDER
	HEAD
	RECORD
THE ABOVE FROM BLOCK NUMBER

THE OTHER DIFFERNCE IS THAT ERRCHK WILL NOW REPORT MAGTAPE
ERRORS. MAGTAPE ERRORS ALSO HAVE A LONG AND A SHORT MODE.
IN THE SHORT FORM THE REPORT CONSISTS OF

ERRS	THE TOTAL NUMBER OF TAPE ERRORS
WRT	THE TOTAL NUMBER OF WRITE RETRYS
WRT OK	THE NUMBER OF TIMES WRITE RETRY WAS SUCCESSFUL
WRT FL	THE NUMBER OF TIMES WRITE RETRY FAILED
RD OK	THE NUMBER OF TIMES READ RETRY WAS SUCCESSFUL
RD FL	THE NUMBER OF TIMES READ RETRY FAILED

CONI	THE CONI BITS FOR THE LAST ERROR

IN LONG FORM ERRCHK REPORTS

NUMBER OF ERRORS		SAME AS ERRS



                                       574
Text: ERRCHK; Disk Error Reporting Program                                page 5

WRITE RETRYS, NUMBER		SAME AS WRT
	SUCCESSFUL		SAME AS WRT OK
	FAILED			SAME AS WRT FL

READ RETRYS, NUMBER		RD OK+RD FL
	SUCCESSFUL		SAME AS RD OK
	FAILED			SAME AS RD FL

CONI

	CONTROL WORD PARITY ERROR
	NO SUCH MEMORY
	DATA PARITY ERROR
	UNIT HUNG
	ILLEGAL
	TAPE PARITY ERROR
	END OF FILE
	READ COMPARE ERROR
	RECORD LENGTHS DIFFER
	DATA LATE
	BAD TAPE

NOTE THAT WRT IS NOT JUST THE SUM OF WRT OK AND WRT FL
IT IS THE NUMBER OF TIME A REWRITE IS ATTEMPTED. REWRITE MAY
BE ATTEMPTED MORE THAN ONCE FOR THE SAME RECORD BEFORE IT
IS CONSIDERED EITHER A FAILURE OR A SUCCESS.































                                       575
Text: ERRCHK; Disk Error Reporting Program                                page 6

	VERSION 3

SEVERAL NEW COMMANDS HAVE BEEN ADDED

CONTIG	WILL START WITH THE DATE GIVEN AND PRINT ALL
	DAYS UP THROUGH THE CURRENT DATE

ONEDAY	WILL TURN OFF CONTIG

ERR ENVIRO	WILL ADD ENVIRONMENTAL DATA TO BP DISK PRINTOUT

ERR -ENVIRO	WILL REMOVE THE ENVIRONMENTAL DATA

ERR SENSE	WILL ADD SENSE BYTES FOR BP AND FT ERRORS

ERR -SENSE	WILL CAUSE THE SENSE BYTES NOT TO BE PRINTED

ERR -ALL	WILL CAUSE ALL ERRORS TO BE SUPRESSEND
		THIS CAN BE USED TO PRINT ONLY ENVIRONMENTAL DATA
		AS ERR ENV -ALL

ERR ALL		RESETS ERROR PROCESSING TO THE NORMAL MODES.

NORMAL MODES FOR THE NEW OPTIONS ARE ONEDAY, -ENVIRO, AND -SENSE.

BP SENSE DATA

IF THE SENSE DATA IS NOT ENVIRONMENTAL DATA IT WILL BE
PRINTED AS 24 BYTES (8 BIT) IN OCTAL. THE BYTES WILL BE
PRINTED 4 PER LINE SEPERATED BY COMMAS. THERE WILL BE A
HEADING WITH THE UNIT NAME AND THE LEGEND  LAST SENSE

BP ENVIRONMENTAL DATA

IF THE SENSE DATA FOR A 230 (3330) IS ENVIRONMENTAL DATA,
IT WILL BE PRINTED (IF ERR ENV) WITH THE TIME, UNIT NAME
AND   ENVIRONMENTAL DATA
A SAMPLE IS GIVEN BELOW:

1:12	BPA1 ENVIRONMENTAL DATA
CONTROL 2 DRIVE H
BYTES READ,SEARCHED 83,427,265
CORRECTABLE DATA CHECKS 0
RETRY DATA CHECKS 0
SEEKS 3,638
SEEK ERRORS 0
COMMAND OVERRUN INTERFACE A 0
DATA OVERRUN INTERFACE A 0
COMMAND OVERRUN INTERFACE B 0
DATA OVERRUN INTERFACE B 0

THE LAST 4 LINES MAY REFERENCE INTERFACES C AND D INSTEAD OF
A AND B.

FT ERRORS


                                       576
Text: ERRCHK; Disk Error Reporting Program                                page 7


THE FORMAT FOR FT ERRORS IN SHORT FORM IS

1:12 FTA3 WRT RT 2 WRT FL 1 RD RT 3 RD FL 2 HUNG 5
HARD CONI 123456
SOFT CONI 123456
HUNG CONI 23456 FUNCT 13

THE BITS IN THE CONI'S ARE LISTED IN THE MONITOR INFORMATION
FOR P022 AS IS THE HUNG FUNCTION (FUNCTION IN PROGRESS WHE
LAST HUNG) THE HUNG CONI IS FROM THE SA-10, THE BITS ARE
LISTED IN THE SA-10 MANUEL. THE FIELDS ON THE FIRST LINE ARE
WRT RT	NUMBER OF WRITES WHICH NEEDED RETRY
WRT FL	NUMBER OF WRITES WHICH NEEDED RETRY AND RETRY FAILED
RD RT	NUMBER OF READS WHICH NEEDED RETRY
RD FL	NUMBER OF READS WHICH NEEDED RETRY AND RETRY FAILED
HUNG	NUMBER OF TIMES DEVICE WAS FOUND HUNG (NO RESPONSE)

ANY OF THESE FIELDS MAY BE OMITTED IF 0 OR NOT MEANINGFUL.
ALL COUNTS ARE INCREMENTAL (SINCE LAST ERROR REPORT)

IN LONG FORM THE INFORMATION IS

1:12 FTA3

WRITE RETRYS, NUMBER 2
	FAILED 1

READ RETRYS, NUMBER 3
	FAILED 2

HARD CONI
	<DATA FROM HARD CONI, SEE BELOW>

SOFT CONI
	<DATA FROM SOFT CONI, SEE BELOW>

TIMES HUNG 5
	FUNCTION <FUNCTION>
SA-10 CONI
	<CONI DATA FROM SA-10>

THE CONI BITS AND THEIR NAMES ARE

 1	SELECT ERROR
 2	BUS IN PARITY ERROR
 3	CONTROL ERROR
 4	EQUIPMENT CHECK
 5	INTERVENTION REQUIRED
 6	COMMAND REJECT
 7	NOT CAPABLE
 8	BUSY
 9	CAN'T SENSE
10	MEMORY ERROR
11	BUS OUT CHECK


                                       577
Text: ERRCHK; Disk Error Reporting Program                                page 8

12	OVERRUN
13	DATA CHECK ON ERASE GAP
14	DATA CHECK ON WRITE OR WRITE TAPE MARK
15	DATA CHECK ON READ
16	ID BURST CHECK

THE SA-10 CONI BITS ARE

18	PI REQUEST
19	PARITY ERROR
20	NON-EXISTANT MEMORY
21	INTERUPT ENABLE CHL 0
22	INTERUPT ENABLE CHL 1
23	INTERUPT ENABLE CHL 2
24	INTERUPT ENABLE CHL 3
25	GO CHL 0
26	GO CHL 1
27	GO CHL 2
28	GO CHL 3
29	STATUS CHL 0
30	STATUS CHL 1
31	STATUS CHL 2
32	STATUS CHL 3

THE HUNG FUNCTIONS ARE

 0	UNKNOWN
 1	REWIND
 2	WRITE TAPE MARK
 3	SKIP RECORD
 4	BACKSPACE RECORD
 5	REWIND AND UNLOAD
 6	ERASE GAP
 7	SKIP FILE
 8	BACKSPACE FILE
 9	UGETF SENSE
10	READ
11	WRITE

ANY OTHER PRINTS AS UNKNOWN

IF ERR SENSE IS USED, THE SENSE DATA WILL BE PRINTED IN THE
SAME FORMAT AS FOR BP SENSE DATA














                                       578
Text: FRMDDT; Frame DDT special features                                  page 1

FRMDDT includes the following features in addition to those in DDT:

<n>$U		- sets up frame number <n> to be hacked.  Beware that
		  job (frame) numbers usually appearin decimal so you
		  probably want to do <n>.$U

^V		- read symbols from a file - prompts for file name.
		  The file should be a save file containing symbols.
       		  Note that the extension of the filename should be
		  ommited for save file (or it willnot work)

^W		- toggle write enable flip-flop - prints new state.
		  rite enable must be set to do anything but look.

^T		- print status line for frame being hacked.
		  The status line includes the frame number, user name,
		  program name, run state, and current PC word

In addition, the frame may be halted by doing 
	HALT$X
or, if HALT has not been defined,
	JRST 4,$X

As of this time, breakpoints are not implimented.  Thay can be
simulated by the user by placing something such as
	JRST 4,.
in place of the instruction that is to be 'broken' on.  When the
breakpoint is hit, the frame will halt at the address of the 
'breakpoint'.  Then you can put back whatever instruction was
originally there and continue the program with
	<a>$G
where <a> s the address where the 'breakpoint' was.  This is crude and
requires pencil and paper, but...

Also note that unless the frame being hacked is a child (and the child
frame handle is used in <n>$u), the whole thing requires read core (RC)
license to examine all things and write core (WC) license for 
everything else.



















                                       579
Menu: FSHSPL; Microfiche Generation System                                page 1

581    RUN             How to run FSHSPL
583    PROG            How to write programs in FSHSPL language
611    FSHTAP          Operator instructions for FSHTAP






















































                                       580
Text: RUN; How to run FSHSPL                                              page 1

THIS IS A BRIEF DESCRIPTION OF THE MYCRO-FYSH SYSTEM FOR USE
BY THE OPERATING SYSTEMS GROUP. THE SYSTEM IS DESIGNED TO
PLACE CROSS REFERENCE LISTINGS ON MICRO-FICHE. IT CONSISTS OF
TWO PARTS. THE FIRST IS A PROGRAM CALLED FSHSPL WHICH SPOOLS ALL
MICRO-FICHE TO A SPOOLING AREA (USER SPOOLING). THE SECOND PART
IS A PROGRAM FSHTAP WHICH UNSPOOLS THE FILES TO TAPE FOR THE
FYSH TO BE MADE FROM. BOTH OF THESE PROGRAMS ARE ON SYS.
FSHSPL REQUIRES WF LICENSE AND FSHTAP REQUIRES WF AND GD.

WHEN FSHSPL IS RUN IS ASKS A SERIES OF QUESTIONS.

1. NUMBER OF COPIES    IN CASE DUPLICATES ARE DESIRED. NORMAL
	NUMBER IS 1

2. MAX FILES/FICHE.   WHEN FSHSPL RUNS IT TAKES
	THE SELECTED FILES AND TRIES TO FIT THEM ON THE MIN. NUMBER
	OF FYSH. IT USES THE NUMBER GIVEN HERE AND THE GROUPING
	INFORMATION (SEE BELOW) TO DETERMINE WHICH FILES TO
	PUT ON WHICH FYSH. THIS NUMBER MAY NOT BE GREATER THAN 6.

3. GLOBAL TITLE   THIS MAY BE ANY 6 CHARACTERS (OR LESS.. TERMINATE
	WITH A <RETURN>) AND APPEARS IN READABLE FORM AT
	THE TOP OF EACH FYSH. IF A GLOBAL TITLE IS
	GIVEN, EACH FYSH WILL ALSO HAVE A NUMBER WITHIN THE SET
	MADE IN THIS RUN.

4. FILE NAMES:    WILD CARDS MAY BE USED. BOTH *
	AND # ARE IMPLIMENTED.

5. GROUPING: THIS IS HOW YOU WOULD LIKE THE FILES
	GROUPED ON THE FYSH. EACH LINE CONTAINS THE TITLES FOR
	ONE FYSH (NOT FILE NAMES BUT THE TITLE OF THE LISTING)
	THESE NAMES ARE SEPERATED BY COMMAS. A BLANK LINE
	INDICATES THE END OF THE GROUPING INFORMATION.
	IF THE INDICATED FILES WILL NOT FIT OR SOME ARE MISSING,
	AN ERROR MESSAGE WILL BE GIVEN AND THE PROGRAM WILL
	PROCEED. ANY FILES NOT INDICATED IN THE GROUPING WILL BE
	PUT ON FYSH ALPABETICALLY BY FILE NAME AS MANY AS FIT
	WITHOUT EXCEEDING THE MAXIMUM GIVEN.  THIS
	QUESTION WILL ONLY BE ASKED IF THERE IS MORE THAN ONE
	FILE NAME AND THE MAX FILES/FICHE IS GREATER THAN 1.

AT ANY POINT, A COMMAND FILE MAY BE INDICATED BY @NAME. THE
EXTENSION CMD IS ASSUMED IF NONE IS GIVEN. THERE IS A
STANDARD FILE FOR PRODUCING MONITOR LISTINGS CALLED
FSHFMT.CMD IN M33.

FSHSPL WILL OUTPUT FILE TITLES (NOT NAMES) AS THEY ARE SPOOLED.
ALL FILES TITLES ON A GIVEN LINE ARE ON THE SAME FYSH. THE
TOTAL NUMBER OF FYSH IS PRINTED AT THE END.

THE READABLE TITLE ON THE FYSH CONSISTS OF THE GLOBAL TITLE
THE TITLES OF THE LISTINGS ON THE FYSH, THE DATE, AND THE
NUMBER WITHIN THE SET IF A GLOBAL TITLE IS GIVEN. IF A FILE WILL
NOT FIT ON ONE FYSH, IT IS BROKEN AND THIS IS INDICATED IN THE


                                       581
Text: RUN; How to run FSHSPL                                              page 2

TITLE WITH A -<PART NUMBER> AND THE STARTING AND ENDING
SEQUENCE NUMBERS, CREF SYMBOLS, ETC.

FSHSPL GENERATES AN INDEX BLOCK IN FRAME N 16. FOR EACH FRAME
ON THE FYSH THIS CONTAINS
TITLE OF ROUTINE
FIRST CREF LINE NUMBER, CREF SYBOL, SYMBOL TABLE SYMBOL, ETC.
TYPE OF INDEX INFORMATION
	BLANK	CREF LINE NUMBER
	S	SYMBOL TABLE ENTRY
	C	CREF SYMBOL ENTRY
	M	CREF OPDEF/MACRO ENTRY
	O	CREF OPCODE ENTRY
PAGE NUMBER (EDIT10 PAGE NUBBER IF APLICABLE)
ROW AND COLUMN NUMBER ON THE FYSH (AS B  5)


THE SECON PART, FSHTAP, REQUESTS ONLY THE DEVICE NAME TO
OUTPUT TO. THIS MUST BE A 9TRACK 1600BPI MAGTAPE.
A SEPERATE TAPE WILL BE GENERATED FOR EACH NUMBER OF DUPLICTES.
(I.E. ALL FYSH FOR WHICH ONLY A MASTER SHOULD BE MADE ON ONE
TAPE, ALL FOR WHICH ONE DUPLICATE SHOULD BE MADE ON
ANOTHER, ETC.)
FSHTAP WILL PRINT A LABEL FOR EACH TAPE GENERATED GIVING THE
NUMBER OF DUPLICATES TO MAKE.
IF ALL THE FYSH WITH A GIVEN NUMBER OF DUPLICATES WILL NOT FIT
ON ONE TAPE, FSHTAP WILL REWIND AND UNLOAD THE TAPE AND REQUEST
ANOTHER ONE.  SPOOL FILES ARE DELETED AS THEY ARE PUT
ON TAPE




























                                       582
Text: PROG; How to write programs in FSHSPL language                      page 1

FSHSPL IS USED TO SPOOL DATA TO THE SPOOLING AREA OF THE DISK
AND FORMAT IT FOR PRODUCTION OF MICROFICHE. IT INCLUDES PROVISIONS
FOR THE GENERATION OF READABLE TITLES AND A BLOCK OF INDEX
INFORMATION.

THE PROGRAM ACCEPTS FILES WHICH ARE PROPERLY FORMATTED FOR PRINTING.
IT DOES NOT INCLUDE PROVISIONS FOR UNDERSTANDING THE SPECIAL
FORTRAN PRINT FORMAT. THESE FILES MUST FIRST BE CONVERTED
WITH SOME OTHER PROGRAM. FSHSPL WILL ACCEPT A LIST OF FILES
AND OPTIONALLY A LIST INDICATING WHICH FILES ARE TO
BE PLACED ON FICHE TOGETHER. THE MAXIMUM NUMBER OF FILES WHICH
MAY BE PLACED ON ONE FICHE IS 6. IF A FILE WILL NOT FIT
ON A FICHE, IT WILL BE BROKEN TO MORE THAN ONE FICHE AUTOMATICALLY.
IF THIS IS DONE, EACH OF THESE FICHE WILL CONTAIN PART OF THIS
FILE AND NO PART OF ANY OTHER FILE. IF THE FILES REQUESTED FOR
THE SAME FICHE WILL NOT ALL FIT, THEY WILL BE BROKEN AT A FILE
BOUNDARY AND SOME PLACED ON ONE FICHE AND OTHERS ON OTHER FICHE.

THE FIRST QUESTION ASKED WILL BE

COPIES

1 INDICATES THE MASTER ONLY. A HIGHER NUMBER INDICATES THAT DUPLICATES
ARE TO BE MADE OF EACH FICHE (I.E. 3 WOULD INDICATE MASTER AND
2 DUPLICATES). THE MAXIMUM NUMBER WHICH MAY BE SPECIFIED IS 8.

THE NEXT QUESTION IS

MAX NUMBER OF FILES/FICHE

THIS MAY BE A NUMBER FROM 1 TO 6 AND CONTROLS HOW MANY FILES
FSHSPL WILL TRY TO FIT ONTO EACH FICHE.

THE NEXT REQUEST IS

GLOBAL TITLE

THIS IS A TEXT STRING WHICH MAY BE UP TO 80 CHARACTERS. IT MAY
BE PLACED INTO THE TITLE OR INDEX BLOCKS BY THE FORMAT INFORMATION.
A RETURN WILL CAUSE THE GLOBAL TITLE TO BE CONSIDERED ABSENT.

THE NEXT REQUEST IS

START NUMBERING AT

THIS IS FOR USE IN SEQUENTIALLY NUMBERING THE FICHE STARTING
AT A NUMBER OTHER THAN 1 (SEE SECTION ON FORMAT INFORMATION).

THE NEXT QUESTION IS

FORMAT INFORMATION

THIS IS A REQUEST FOR INSTRUCTIONS ON HOW TO MAKE UP THE TITLE AND
INDEX BLOCKS AND WILL BE COVERED IN DETAIL LATER.



                                       583
Text: PROG; How to write programs in FSHSPL language                      page 2

THE NEXT REQUEST IS

FILE NAMES

AS MANY NAMES AS DESIRED MAY BE SPECIFIED SEPERATED BY COMMAS.
THE "WILD CARDS" * AND # MAY BE USED. IF NO EXTENSION IS
SPECIFIED FOR A FILE NAME, LST WILL BE ASSUMED. TO SPECIFY
THE BLANK EXTENSION USE A . FOLLOWED BY NOTHING (I.E. ABC.,DEF.).

IF MORE THAN 1 FILE/FICHE IS ALLOWED AND MORE THAN ONE FILE
NAME IS GIVEN (OR A WILD SPECIFICATION SPECIFIES MORE THAN ONE FILE)
THE NEXT REQUEST WILL BE

GROUPING

THIS REQUEST DETERMINES HOW THE FILES WILL BE PLACED ON THE FICHE.
EACH LINE SPECIFIES THE FILES FOR ONE FICHE. THE SPECIFICATION IS
TERMINATED BY A BLANK LINE. EITHER FILE NAMES OR TITLES MAY BE
USED. FSHSPL HAS AN IDEA OF WHAT THE TITLE OF A FILE IS. THIS
IS THE FIRST NON-BLANK FIELD FOUND STARTING IN COLUMN 1. THIS
IS COMPATABLE WITH MACRO AND CREF LISTING. IF FILE NAMES ARE USED,
THEY SHOULD BE SEPERATED WITH !'S IF TITLES, SEPERATE WITH ,'S.
IF MORE  NAMES ARE SPECIFIED ON ANY ONE LINE THAN THE
MAXIMUM FILES/FICHE ALLOWED, THE ERROR

TOO MANY NAMES IN LINE STARTING WITH  

FOLLOWD BY THE FIRST NAME ON THAT LINE, WILL BE PRINTED AND THE
LINE IGNORED. FICHE WILL BE GENERATED IN THE REVERSE ORDER FROM
THE INFORMATION SPECIFIED IN THE GROUPING SPECIFICATION, I.E. THE
FIRST LINE SPECIFIED WILL BE THE LAST FICHE GENERATED. THIS IS IMPORTANT
IF THE FICHE ARE BEING NUMBERED. ANY FILES NOT SPECIFIED IN THE
GROUPING WILL BE GROUPED IN A SOMEWHAT ARBITRARY MANNER AND WILL
BE GENERATED AFTER ALL FICHE SPECIFIED IN THE GROUPING.

AT ANY POINT @FILENAME MAY BE TYPED IN RESPONSE TO A QUESTION.
FSHSPL WILL START READING THE INDICATED FILE UNTIL IT FINDS
THE END OF FILE AND THEN RESUME READING THE TELETYPE. THE
FILE MAY HAVE THE ANSWERS TO MORE THAN ONE QUESTION ON IT.
THIS FEATURE IS PARTICULARLY USEFUL FOR THE FORMAT AND GROUPING
SPECIFICATIONS. IF THE FILE CAN NOT BE ACCESED, THE ERROR

COMMAND FILE NOT AVAILABLE

WILL BE PRINTED AND FSHSPL WILL RESUME READING FROM THE TELETYPE.












                                       584
Text: PROG; How to write programs in FSHSPL language                      page 3

THE FORMAT INFORMATION SPECIFICATION ALLOWS EXTREME FLEXIBILTY
IN THE SELECTION AND FORMATTING OF THE EYE READABLE TITLES AND
THE INDEX BLOCK. THE SPECIFICATION AMOUNTS TO A PROGRAM WRITTEN IN
A SPECIAL LANGUAGE AND IS ACUTALLY COMPILED BY FSHSPL.

BASICLY, THE USER IS ALLOWED TO SELECT PIECES OF DATA FROM
SPECIFIED PORTIONS OF THE INPUT FILES AND PLACE THEM IN THE
TITLES AND INDEX BLOCKS. THE BNF FOR THE LANGUAGE WILL BE GIVEN
AND AN EXAMPLE USED TO GENERATE FICHE FROM CROSS REFERENCE FILES
WILL ALSO BE USED AS AN ILLUSTRATION.

<STR> WILL INDICATE A STRING. A STRING IS A SET OF LETTERS
	ENCLOSED WITHIN EITHER "S OR 'S. A STRING MAY NOT BE
	LONGER THAN 80 CHARACTERS.
<EOL> IS THE END OF A LINE (I.E. A RETURN)
	BLANK LINES WILL ALWAYS BE IGNORED. LINES MAY BE
	CONTINUED BY PLACING A ; AT THE END.
<NUMBER> IS ANY DECIMAL NUMBER (UNSIGNED)
<VNAM> IS THE NAME OF A VARIABLE. VARIABLES COME IN TWO CLASSES.
	THE NAMES VAR1,VAR2,...VAR50 AND OUTVAR MAY BE DEFINED BY THE USER
	IN THE TEXT SECTION. CERTAIN OTHER NAMES ARE DEFINED BY
	FSHSPL AS INDICATED BELOW:

	GLOBAL	THE INFORMATION TYPED IN FOR THE GLOBAL TITLE
	YEAR	THE CURRENT YEAR (4 DIGITS AS 1975)
	DAY	THE CURRENT DAY OF THE MONTH (1 OR 2 DIGITS)
	MONTH	THE NAME OF THE CURRENT MONTH (AS JANUARY)
	MON3	A 3 CHARACTER ABREVIATION FOR THE CURRENT MONTH
			(AS JAN, FEB)
	MONTHN	THE NUMBER OF THE CURRENT MONTH (1 THROUGH 12)
	FICHEN	THE NUMBER OF THE CURRENT FICHE (STARTS ONE
		GREATER THAN THE NUMBER SPECIFIED TO START NUMBERING
		AT OR AT 1 IF NOTHING SPECIFIED)
	BREAKN	IF THE FILE WILL NOT FIT ON ONE FICHE, THIS IS
		THE NUMBER OF FICHE SO FAR PRODUCED FOR
		THIS FILE (SATRTING AT 1)
	LOC	THIS IS A 4 CHARACTER STRING IDENTIFYING THE
		CURRENT FICHE FRAME. THE FORMAT IS B  2
		N 16, ETC. THE LETTERS ARE FROM B TO N, THE
		NUMBERS FROM 1 TO 16.
	TITLE	THE TITLE OF THE CURRENT FILE
	TITLE1	THE TITLE OF THE FIRST FILE ON THIS FICHE
	TITLE2...TITLE6 TITLES OF THE 2ND THROUGH 6TH FILES
		ON THIS FICHE IF ANY.
	FILE	THE FILE NAME OF THE CURRENT FILE
	FILE1...FILE6 THE FILE NAMES OF THE FIRST THROUGH 6TH
		FILES ON THIS FICHE IF ANY
	EXT	THE EXTENSION OF THE CURRENT FILE
	EXT1...EXT6 THE EXTENSIONS OF THE FIRST THROUGH 6TH FILES
		ON THIS FICHE IF ANY.







                                       585
Text: PROG; How to write programs in FSHSPL language                      page 4

<FORMAT SPEC>:=<FMTSP1> # END <DEPSPC> <EOL>
<DEBSPC>:=|DEBUG
<FMTSP1>:=|<FMTSP2>|<FMTSP2><FMTSP1>
<FMTSP2>:=# TEXT <EOL> <TXTSPC>|# PAGE <EOL><PAGSPC>
	|# OVERFLOW PAGE <EOL><PAGOSPC>|# INDEX <EOL><INDSPC>
	|# FICHE <EOL> <TTLSPC>|#OVERFLOW FICHE <EOL> <TTLSPC>
	|# NFILE <EOL> <TTLSPC>
	|# OVERFLOW FICHE PAGE <EOL> <PAGOSPC>


;A GENERAL DEFINITION

<STRINGV>:=<STRINGV1>|<STRINGV1>+<STRINGV>
<STRINGV1>:=<STRINGV2>|<STRINGV1> START <NUMBER> FOR <NUMBER>
<STRINGV2>:=<VNAM>|<STR>|STRINGI>|INDEX ITEM <NUMBER> PAGE <NUMBER>
<STRINGI>:=<IFEXP> <STRINGV> ]
<IFEXP>:=IF <STRINGV> [ | IFN <STRINGV> [
	|IFDIF <STRINGV><STRINGV> [ | IFEQ <STRINGV><STRINGV> [

<TXTSPC>:=<TXT1>|<TXT1><TXTSPC>
<TXT1>:=<VNAM>=<TXT2><EOL>
<TXT2>:=<STRINGV>|LINE <LSPEC><TXTSP1>
<LSPEC>:=<NUMBER>|LAST|LAST AFTER <NUMBER>|FIRST AFTER <NUMBER>
<TXTSP1>:=<SCNSPC>|<TXT1SPC>
<TXT1SPC>:=START <NUMBER> FOR <NUMBER> <STOPSPC>
<STOPSPC>:=|STOP AFTER ITEM|STOP ON BLANK
<SCNSPC>:=SCAN <MSTSPC>
<MSTSPC>:=<SSTSPC>|<SSTSPC>!<MSTSPC>
<SSTSPC>:=<STR><ACTSPC>
<ACTSPC>:=<SKPSPC> NUMBER|<SKPSPC> CHARACTERS <NUMBER><STPSPC>
	|=<STR>
<SKPSPC>:=|SKIP BLANK

<PAGSPC>:=<PAG1>|<PAG1><PAGSPC>
<PAG1>:=KEEP <VNAM><EOL>

<PAGOSPC>:=<PAGO1>|<PAGO1><PAGOSPC>
<PAGO1>:=BLANK <NUMBER>|<PAG1>

<INDSPC>:=<HDSPC><ISC2><ISC3>|NONE <EOL>
<HDSPC>:=|HEADING <STRING><EOL>
<ISC2>:=|NO CLEAR <EOL>
<ISC3>:=<ISC4>|<ISC4><ISC3>
<ISC4>:=LOCATE <NUMBER><EOL>|<STR><EOL>
	|ITEM <NUMBER> SIZE <NUMBER><STRINGV><JSTITM><CLRRQ1><MODE>
<JSTITM>:=|RIGHT|CENTER
<MODE>:=|SUPRESS UNCHANGED|INDENT UNCHANGED <NUMBER>
<CLRRQ1>:=<CLRRQ2>|<CLRRQ2><CLRRQ1>
<CRLRQ2>:=CHANGE CLEAR ITEM <NUMBER>

<TTLSPC>:=<REVSPC><TT2>
<REVSPC>:=|REVERSE <EOL>
<TT2>:=<TT3>|<TT3><TT2>
<TT3>:=<DEFNI><CDEF>
<DEFNI>:=GROUP <DEFNI1><EOL>


                                       586
Text: PROG; How to write programs in FSHSPL language                      page 5

<DEFNI1>:=<DEFNI2>|<DEFNI2><DEFNI1>
<DEFNI2>:=<DEFNI3>|<IFEXP><DEFNI1> ]
<DEFNI3>:=FRAMES <NUMBER>|CHARACTERS <NUMBER>|LINES <NUMBER>

<CDEF>:=<CDEF1>|<CDEF1><CDEF>
<CDEF1>:=TLINE <NUMBER><TLNDF>
<TLNDF>:=|<TLNDF1>|<TLNDF1><TLNDF>
<TLNDF1>:=SIZE <NUMBER><STRINGV><JSTITM><EOL>

















































                                       587
Text: PROG; How to write programs in FSHSPL language                      page 6

THE FORMAT SPECIFICATION CONSISTS OF A GROUP OF
SECTIONS EACH STARTING WITH #<NAME>. THE LAST OF THESE IS #END.

THE #TEXT SECTION DEFINES THE INFORMATION WHICH MAY BE TAKEN
FROM THE TEXT AREA FOR USE IN GENERATING THE TITLE AND INDEX
INFORMATION. THIS SECTION CONTAINS THE DEFINITIONS OF THE
VARIABLES VAR1,VAR2,...,VAR50 AND OUTVAR. A VARIABLE MAY BE SET FROM ANOTHER
VARIABLE OR AS THE RESULT OF DATA READ FROM THE TEXT.

THE SIMPLEST FORM FOR READING DATA FROM THE TEXT IS

<VNAM>=LINE <NUMBER> START <NUMBER> FOR <NUMBER>

THIS SPECIFIES THAT THE VARIABLE IS TO BE THE STRING OF
CHARACTERS FOUND ON THE SPECIFIED LINE, STARTING IN THE
SPECIFIED COLUMN AND WITH THE SPECIFIED LENGTH. FOR EXAMPLE

VAR3=LINE 5 START 6 FOR 7

WOULD SET VAR3 TO THE STRING FOUND ON LINE 5 IN COLUMNS 6 THROUGH
12. NOTE THAT TABS ARE EXPANDED TO SPACES BEFORE ANY OTHER
PROCESSING IS DONE ON THE TEXT. THUS TABS WILL NEVER BE PART OF
A VARIABLE.

A SLIGHTLY MORE COMPLEX FORM MAY BE USED TO STOP BEFORE THE
SPECIFIED ENDING COLUMN IS REACHED BY APPENDING EITHER
STOP ON BLANK     OR     STOP AFTER ITEM
TO THE ABOVE SPECIFICATION.  STOP ON BLANK STOPS READING CHARACTERS
WHEN THE FIRST BLANK IS ENCOUNTERED (IT IS NOT INCLUDED IN THE
VARIABLE). STOP AFTER ITEM READS UNTIL A NON-BLANK IS ENCOUNTERED
AND THEN GOES TO STOP ON BLANK MODE. AN EXAMPLE MAY PROVIDE
A CLEARER EXPLANATION. THE CHARACTER * IS USED TO DESIGNATE A BLANK

COLUMNS 6-12 ARE	**ABC*DE	ABCD**D

SPECIFICATION

NONE			**ABC*DE	ABCD**D

STOP ON BLANK		NULL STRING	ABCD

STOP AFTER ITEM		**ABC		ABCD

IN ADDITION TO THIS, THE LINE SPECIFIED NEED NOT BE A SPECIFIC
LINE NUMBER. IT MAY BE EITHER LAST, LAST AFTER <NUMBER>, OR
FIRST AFTER <NUMBER>.

LAST REFERES NOT TO THE ACTUAL LAST LINE ON THE PAGE, BUT TO
THE LAST LINE ON THE PAGE IN WHICH SOMETHING WAS FOUND.

EXAMPLE 1:

VAR1=LINE LAST START 6 FOR 3

IF THE LAST TWO LINES ON THE PAGE ARE


                                       588
Text: PROG; How to write programs in FSHSPL language                      page 7


1234567890
123

THEN VAR1 WILL BECOME 678 BECAUSE COLUMS 6-8 WERE NOT PRESENT
ON THE ACTUAL LAST LINE.

EXAMPLE 2:

VAR1=LINE LAST START 6 FOR 3 STOP ON BLANK

THE LAST TWO LINE ARE

1234567890
12345 7890

VAR1 WILL BE 678 SINCE THE NULL STRING WOULD HAVE BEEN FOUND
ON THE LAST LINE BECAUSE OF THE BLANK IN COLUMN 6.

THE CONSTRUCT   LAST AFTER <NUMBER>   IS SIMILAR BUT DOES NOT START
EXAMINING TEXT UNTIL THE LINE AFTER THE INDICATED NUMBER.
LAST   IS A SHORT WAY OF SAYING     LAST AFTER 0.

THE CONSTRUCT    FIRST AFTER <NUMBER>   IS SIMILAR BUT WILL NOT
EXAMINED A LINE IF A NON-NULL STRING HAS ALREADY
BEEN FOUND.

EXAMPLE:

VAR1=FIRST AFTER 3 START 6 FOR 3 STOP ON BLANK

IF LINES 4 THROUGH 6 ARE:

12345 789
123456789
12345ABCD

THEN VAR1 WILL BE 678. NOTE THAT LINE 4 HAS THE
NULL STRING FOUND SO LINE 5 IS EXAMINED, BUT THAT VAR1
HAS ALREADY BEEN FOUND ON LINE 5 SO THAT LINE 6 IS NOT EXAMINED.

















                                       589
Text: PROG; How to write programs in FSHSPL language                      page 8

THE NEXT WAY IN WHICH TEXT MAY BE TAKEN FROM A LINE IS TO
SCAN THAT LINE FOR A MATCH WITH SOME STRING AND THEN TAKE
A SELECTED NUMBER OF CHARACTERS FROM THAT LINE. IF LINE 2 OF
EACH PAGE CONTAINS THE WORDS    BILL TO:    FOLLOWED BY A SPACE
AND THEN A USER NAME OF UP TO 12 CHARACTERS, WE MIGHT USE

VAR6=LINE 2 SCAN "BILL TO: " CHARACTERS 12

NOTE THAT THE SPACE IS INCLUDED IN THE CHARACTERS BEING SCANNED FOR
OTHERWISE WE WOULD HAVE TO SAY CHARACTERS 13 AND THE SPACE WOULD
BE INCLUDED IN THE VARIABLE. 

THERE ARE SEVERAL OPTIONS WHICH CAN BE USED WITH THE SCAN STATEMENT.
THE   CHARACTERS <NUMBER>  STATEMENT MAY BE FOLLWED BY EITHER
STOP ON BLANK     OR     STOP AFTER ITEM.
IT MAY BE PRECEEDED BY       SKIP BLANK

EXAMPLE:

SUPPOSE WE SCAN FOR   USER NAME=   AND THE CHARACTERS FOLLOWING
ARE **ABC*D  WHERE * REPRESENTS BLANK

SPECIFICATION		RESULT

NOTHING			**ABC*D

STOP ON BLANK		NULL STRING

SKIP BLANK		ABC*D

SKIP BLANK
STOP ON BLANK		ABC

SKIP BLANK
STOP AFTER ITEM		ABC		SAME AS ABOVE IN ALL CASES

STOP AFTER ITEM		**ABC

INSTEAD OF SPECIFYING SOME CHARACTERS TO READ, WE MAY
SPECIFY THAT A NUMBER IS TO BE READ WITH LEADING BLANKS
SKIPPED OR NOT. THE FORMS ARE:

<VANM>=SCAN <STR> NUMBER
<VNAM>=SCAN <STR> SKIP BLANK NUMBER

IT IS POSSIBLE TO SCAN FOR SOME SPECIAL STRING AND THEN
SET A VARIABLE TO A PREDETERMINED STRING INSTEAD OF READING TEXT FROM
THE LINE. THIS COULD BE USEFUL FOR CHECKING FOR A CERTAIN
TYPE OF PAGE AND FLAGGING IT FOR THE INDEX. THE FORM FOR THIS IS:
<VNAM>=LINE <NUMBER> SCAN <STR> = <STR>

SEVERAL SCAN CLAUSES MAY BE INCLUDED IN THAT SAME STATEMENT.
IN THIS CASE, THE FIRST STRING THAT IS RECOGNIZED IS THE
ONE ACTED UPON. THE STRINGS ARE SEPERATED BY !'S.



                                       590
Text: PROG; How to write programs in FSHSPL language                      page 9

EXAMPLE:


VAR5=LINE 1 SCAN "ABC"="DR"!"XYZ" CHARACTERS 3

IF LINE 1 IS:

       XYZ123  ABC
THEN VAR1 WOULD BE 123.

THE MAXIMUM NUMBER OF STRINGS ALLOWED IN A SINGLE SCAN DEFINITION
IS 20.

IF THE CHARACTER BEING SEARCHED FOR IS AN UPPER CASE LETTER,
IT WILL BE MATCHED BY EITHER AN UPPER OR LOWER CASE LETTER.










































                                       591
Text: PROG; How to write programs in FSHSPL language                     page 10

ONE VARIABLE MAY BE SET FROM ANOTHER VARIALBE OR A COMBINATION
OF OTHER VARIABLES. IF THIS IS DONE, ALL THE VARIABLES USED IN
DEFINING THE NEW VARIABLE, MUST HAVE BEEN DEFINED PREVIOUSLY.

THE CONCEPT OF A "VARIABLE STRING" (<STRINGV>) IS VERY IMPORTANT
BOTH HERE AND IN OTHER PLACES. A "VARIABLE STRING" IS A GROUP
OF VARIABLES, STRINGS, AND INDEX ITEMS ACTED ON BY
CONCATENATION, SUBSTRING OPERATIONS, AND CONDITIONAL EXPRESSIONS.

STRINGS AND VARIABLES HAVE BEEN DISCUSSED PREVIOUSLY, AN INDEX
ITEM IS

INDEX ITEM <NUMBER> PAGE <NUMBER>

THE INDEX ITEM IS DEFINED IN THE INDEX SECTION. THIS CONSTRUCT
IS PARTICULARLY USEFUL IN DEFINING THE TITLES FOR THE FICHE.
IF IT IS USED IN THE TEXT SECTION, AND THE PAGE INDICATED HAS NOT
YET BEEN REACHED, THE NULL STRING WILL BE USED.

CONCATENATION IS SPECIFIED BY COMBINING TWO STRING ELEMENTS WITH
A + SIGN. THE SUBSTRING OPERATION IS SPECIFIED BY FOLLOWING
A STRING ELEMENT WITH    START <NUMBER> FOR <NUMBER>. THE FIRST
CHARACTER OF THE STRING ELEMENT IS NUMBERED 1. 

A CONDITIONAL EXPRESSION HAS ONE OF THE FOLLOWING FORMS:

IF <STRINGV> [ <STRINGV> ]
IFNO <STRINGV> [ <STRINGV> ]
IFEQ <STRINGV><STRINGV> [ <STRINGV>]
IFDIF <STRINGV><STRINGV> [ <STRINGV> ]

THE FIRST OF THESE FORMS EVALUATES TO THE SECOND <STRINGV> IF
THE FIRST <STRINGV> DOES NOT EVALUATE TO THE NULL STRING AND
TO THE NULL STRING OTHERWISE. THE SECOND EXPRESSION EVALUATES
IN THE OPPOSITE WAY (I.E. TO THE NULL STRING IF THE FIRST 
<STRINGV> EVALUATES TO NULL AND THE THE SECOND <STRINGV>
OTHERWISE.) THE THIRD EXPRESSION EVALUATES TO THE THIRD
<STRINGV> IF THE FIRST TWO <STRINGV>'S EVALUATE TO THE
SAME STRING OF CHARACTERS AND TO THE NULL STRING OTHERWISE.
THE FOURTH EXPRESSION EVALUATESS TO THE THIRD <STRINGV> IF THE
FIRST TWO ARE DIFFERENT AND TO THE NULL STRING OTHERWISE.

EXAMPLES:

VAR1+"ABC"+IFNO VAR3+VAR2 [VAR4 START 2 FOR 3]
VAR7+IFEQ VAR3 START 4 FOR 7 VAR2+VAR4 [VAR5+VAR7]

ALL VARIABLE ASSIGNMENTS OF THE FORM:

<VNAM>=<STRINGV>

ARE EVALUATED IN THE ORDER WRITTEN, AT THE END OF EACH PAGE.





                                       592
Text: PROG; How to write programs in FSHSPL language                     page 11

NORMALLY ALL VARIABLES ARE RESET TO THE NULL STRING AT THE END OF
EACH PAGE OF TEXT. THERE ARE TIMES WHEN IT IS DESIRABLE TO
"KEEP" A VARIABLE FROM ON PAGE TO ANOTHER, FOR EXAMPLE TO REMEBER
THE LAST TIME A CERTAIN PIECE OF INFORMATION WAS SEEN ON THIS
FICHE. THIS AUTOMATIC RESETTING CAN BE OVERRIDDEN. FSHSPL CONSIDERS
THREE DIFFERENT END OF PAGE CONDITIONS. THE FIRST IS THE NORMAL
END OF PAGE, THE SECOND THE CASE WHERE A NEW PAGE IS FORCED
BECAUSE A PAGE CONTAINS TOO MANY LINES, AND THE THIRD, THE
END OF A PAGE WHICH IS THE LAST PAGE ON THE FICHE. THE OVERRIDE
OF THE AUTOMATIC VARIABLE RESETTING IS CONTROLED IN THE
#PAGE SECTION FOR THE FIRST CASE, THE #OVERFLOW PAGE SECTION FOR
THE SECOND CASE AND THE #OVERFLOW FICHE PAGE SECTION FOR THE
THIRD CASE.

EACH OF THESE SECTIONS CONSISTS OF ANY NUMBER OF STATEMENTS
OF THE FORM:

KEEP <VARIABLE LIST>

AS:

KEEP VAR3,VAR5,VAR7

THESE INDICATE THE VARIABLES WHICH ARE NOT TO BE RESET TO THE NULL
STRING IN EACH OF THESE CASES. IN ADDITION, THE #OVERFLOW PAGE
SECTION MAY INCLUDE A STATEMENT OF THE FORM:

BLANK <NUMBER>

WHICH SPECIFIES A NUMBER OF BLANK LINES TO BE INSERTED AT THE
TOP OF THE OVERFLOW PAGE.


























                                       593
Text: PROG; How to write programs in FSHSPL language                     page 12

THE #INDEX SECTION SPECIFIES THE CONTENTS OF THE INDEX PAGE. THE
INDEX PAGE WILL APPEAR AT LOCATION N 16. IF NO INDEX PAGE
IS DESIRED, THE ONLY STATEMENT IN THIS SECTION
SHOULD BE:

NONE

IN THIS CASE, THERE WILL BE NO INDEX PAGE AND A MAXIMUM OF
208 PAGES OF DATA MAY BE PUT ON THE FICHE INSTEAD OF 207.

THE FORMAT OF THE INDEX BLOCK IS AS FOLLOWES:
(ID B 6  STANDS FOR THE INDEX INFORMATION FOR PAGE B 6)

		<BLANK LINE>
HEADING		HEADING		HEADING		HEADING
		<BLANK LINE>
ID B 1		ID B 5		ID B 9		ID B 13
ID C 1		ID C 5		ID C 9		ID C 13
		...
ID K 1		ID K 5		ID K 9		ID K 13
		<BLANK LINE>
ID L 1		ID L 5		ID L 9		ID L 13
		...
ID H 2		ID H 6		ID H 10		ID H 14
		<BLANK LINE>
		...
		<BLANK LINE>
ID M 4		ID M 8		ID M 12		ID M 16
ID N 4		ID N 8		ID N 12

THE BLANK LINES ARE INSERTED EVERY 10 LINES OF INDEX
INFORMATION FOR EASE OF READING. THE INDEX INFORMATION
FOR EACH PAGE MAY BE A MAXIMUM OF 30 CHARACTERS. THE
SECOND COLUMN OF INFORMATION WILL ALWAYS START IN COLUMN 33, THE
THIRD IN COLUMN 65, AND THE FOURTH IN COLUMN 97.

THE FIRST SPECIFICATION IN THE #INDEX SECTION IS FOR THE HEADING.
THIS IS SIMPLY A STRING WITH A MAXIMUM LENGTH OF 30 CHARACTERS AS:

HEADING "NAME    INDEX   PAGE  LOC"

IF NO HEADING STATEMENT APPEARS, THE HEADING LINE WILL BE LEFT BLANK.
THE NEXT STATEMENT WHICH MAY APPEAR IS:

NO CLEAR

WHEN FSHSPL IS GENERATING A LINE OF INDEX DATA, IT REMEMBERS WHAT
WAS PLACED ON THE PREVIOUS LINE. DATA ON THIS LINE MAY BE
SUPRESSED OR INDENTED IF IT IS THE SAME AS ON THE PREVIOUS LINE.
NORMALLY, THE BLANK LINES INSERTED EVERY 10 LINES, CAUSE THE
REMEMBERED INFORMATION TO BE RESET TO THE NULL STRING. THE
NO CLEAR STATEMENT CAUSES THE BLANK LINES NOT TO HAVE THIS EFFECT.





                                       594
Text: PROG; How to write programs in FSHSPL language                     page 13

THE REMAINDER OF THE #INDEX SECTION IS USED TO DESCRIBE THE
CONTENTS OF THE INDEX DATA FOR EACH PAGE (REFERED TO AS ID IN
THE DIAGRAM OF THE INDEX BLOCK FORMAT).

THERE ARE THREE TYPES OF STATEMENTS IN THIS PART OF THE #INDEX
SECTION, LOCATE STATEMENTS, STRINGS, AND ITEM STATEMENTS.

ITEM STATEMENTS EVALUATE TO STRINGS. THE STRINGS PRODUCED BY THE
ITEM STATEMENTS, AND THE STRINGS WHICH APPEAR ON LINES BY
THEMSELVES, ARE CONCATENATED IN THE ORDER IN WHICH THEY APPEAR.
WHEN A LOCATE STATEMNT IS ENCOUNTERED, IT GENERATES ENOUGH SPACES
TO GET TO THE COLUMN SPECIFIED BY THE NUMBER. COLUMNS ARE NUMBERED
FROM 1 TO 30.

ITEM STATEMENTS SPECIFY A NUMBER, SIZE, JUSTIFICATION, MODE, AND
CLEARING REQUEST. THE NUMBERS ON THE ITEMS MUST APPEAR IN
INCREASING ORDER. THEY ARE USED TO REFERENCE SPECIFIC ITEMS
FROM SPECIFIC PAGES IN THE ITEM CONSTRUCT IN A <STRINGV>.
THE STRING WHICH THE ITEM STATEMENT EVALUATES TO WILL ALWAYS HAVE
THE NUMBER OF CHARACTERS SPECIFIED BY THE SIZE FIELD (EXCEPT WHEN
INDENT UNCHANGED IS USED, SEE BELOW). THE <STRINGV> SPECIFIED
MAY HAVE MORE CHARACTERS THAN THIS SIZE IN WHICH CASE THE
RIGHTMOST CHARACTERS WILL BE LOST. IF THE <STRINGV> HAS
FEWER CHARACTERS THAN SPECIFIED, IT WILL BE LEFT JUSTIFIED
IN THE FIELD SPECIFIED UNLESS A JUSTIFICATION CLAUSE IS USED.
THIS MAY INDICATE EITHER RIGHT JUSTIFICATION IN THE FIELD OR
CENTER JUSTIFICATION. IF CENTER JUSTIFICATION IS SPECIFIED AND
AN ODD NUMBER OF SPACES MUST BE SUPPLIED, THE EXTRA SPACE WILL
BE SUPPLIED TO THE LEFT OF THE <STRINGV>.
THERE ARE TWO OPTIONAL MODE SPECIFICATIONS ALLOWED.
THE FIRST IS    SUPRESS UNCHANGED   . IF THIS ITEM IS THE SAME
ON THIS LINE AS IT WAS ON THE LAST LINE, IT WILL BE REPLACED WITH
A FIELD OF SPACES. NOTE THE EFFECT OF THE NO CLEAR STATEMENT
AND THE INSERTED BLANK LINES ON THIS MODE. THE SECOND MODE IS
INDENT UNCHANGED <NUMBER>. IF THE ITEM HAS NOT CHANGED
FROM THE LAST LINE, THIS WILL ADD THE INDICATED NUMBER OF
SPACES TO THE LEFT OF THE ITEM. NOTE THAT THIS INDENTS THE
ENTIRE REMAINDER OF THE LINE UNLESS A LOCATE STATEMENT
APPEARS SOMEWHERE AFTER IT.

SOMETIMES WHEN ONE ITEM IN THE INDEX CHANGES, IT IS DESIRABLE FOR
SOME OTHER ITEM TO PRINT EVEN THOUGH IT HAS NOT CHANGED AND
WOULD NORMALLY BE SUPRESSED IF UNCHANGED. THE
CHANGE CLEAR ITEM <NUMBER>
CLAUSE PERFORMS THIS FUNCTION. IF THIS ITEM HAS CHANGED
FROM THE PREVIOUS LINE, THE REMEMBERED STRING FROM THE PREVIOUS
LINE FOR THE INDICATED ITEM WILL BE RESET TO THE NULL STRING
CAUSING IT TO PRINT. STRANGE RESULTS WILL BE OBTAINED IF
AN ITEM ATTEMPTS TO CLEAR AN EARLIER ITEM I.E. IF ITEM 4 SAYS
CHANGE CLEAR ITEM 2.







                                       595
Text: PROG; How to write programs in FSHSPL language                     page 14

THERE ARE 16 FRAMES AT THE TOP OF EACH FICHE (A 1 THROUGH 1 16)
RESERVED FOR EYE-READABLE TITLES. THE INFORMATION TO BE PLACED
IN THESE FRAMES IS DESCRIBED IN THE #FICHE AND #OVERFLOW FICHE
SECTIONS. THE #OVERFLOW FICHE SECTION IS USED TO DESCRIBE THE
TITLE FOR FICHE WHICH CONTAIN A PART OF A FILE WHICH
HAD TO BE BROKEN BETWEEN MORE THAN ONE FICHE. IF THE 
#OVERFLOW FICHE SECTION IS MISSING, THE #FICHE SECTION IS USED IN
THIS CASE AS WELL AS THE NORMAL CASE.

THERE ARE TWO WAYS THE TITLE MAY APPEAR. IT MAY APPEAR AS WHITE
LETTERS ON A BLACK BACKGROUND OR AS BLACK LETTERS ON A WHITE
BACKGROUND. SINCE THE WHITE IS THE EXPOSED PORTION OF THE FICHE,
THE BLACK LETTERS ON WHITE BACKGROUND MAY TEND TO BE
A LITTLE FADED FROM THE LARGE PORTION OF THE FICHE EXPOSED.

IF BLACK LETTERS ARE DESIRED, THE FIRST STATEMENT IN THE #FICHE
SECTION (OR #OVERFLOW FICHE SECTION) SHOULD BE

REVERSE

THE 16 FRAMES OF TITLE INFORMATION ARE BROKEN INTO GROUPS. ALL THE
FRAMES IN A GROUP HAVE THE SAME NUMBER OF CHARACTERS/FRAME AND
THE SAME NUMBER OF LINES/FRAME. THE NUMBER OF CHARACTERS/FRAME
MAY BE 1 TO 6 AND THE LINES/FRAME 1 TO 5. IT IS RECOMENDED THAT
3 OR 4 CHARACTERS/FRAME AND 1 OR 2 LINES PER FRAME BE USED TO GET
THE BEST LOOKING CHARACTERS.

THE SPECIFICATION FOR EACH GROUP BEGINS WITH THE WORD GROUP.
THE REMAINDER OF THE LINE CONTAINS A FRAMES SPECIFICATION
(FRAMES <NUMBER>) A NUMBER OF CHARACTERS/FRAME SPECIFICATION
(CHARACTERS <NUMBER>) AND A NUMBER OF LINES/FRAME SPECIFICATION
(LINES <NUMBER>) IF ANY OF THESE ARE OMITTED, THEY ARE LEFT
THE SAME AS IN THE PREVIOUS GROUP. IF THEY ARE OMITTED IN THE FIRST
GROUP, THEY ARE ASSUMED TO BE FRAMES 1 CHARACTERS 3 LINES 1.
ANY OF THESE DEFINITIONS CAN BE PART OF A CONDITIONAL STATEMENT
LIKE THOSE USED IN THE #TEXT SECTION. FOR EXAMPLE:

GROUP FRAMES 5 LINES 1 IF VAR4+VAR7 [LINES 3]

MORE THAN ONE LINES, FRAMES, OR CHRACTERS SPECIFICATION MAY APPEAR
IN A SINGLE GROUP LINE, THE LAST TO APPEAR WHICH IS NOT
INSIDE AN UNSATISFIED CONDITIONAL IS USED.















                                       596
Text: PROG; How to write programs in FSHSPL language                     page 15

AFTER THE GROUP SPECIFICATION, THE INFORMATION TO APPEAR ON
EACH LINE IN THIS GROUP IS SPECIFIED. THE START OF THE INFORMATION
FOR A GIVEN LINE IS INDICATED BY 

TLINE <NUMBER>

WHERE <NUMBER> IS THE NUMBER OF THE LINE IN THIS GROUP.

THERE FOLLOW AS MANY LINES AS DESIRED EACH SPECIFYING A STRING.
THE STRINGS ARE CONCATENATED AND TOGETHER MAKE UP THE INFORMATION
TO GO ON THAT LINE. THE FIRST STRING MAY APPEAR ON THE SAME
LINE AS THE TLINE. THE SPECIFICATION FOR THE LINES NEED NOT
APPEAR IN ORDER. IF MORE LINES OF INFORMATION ARE GIVEN
THAN THE NUMBER SPECIFIED IN THE LINES SPECIFICATION, THE EXTRA
INFORMATION IS IGNORED. IF NO INFORMATION IS GIVEN FOR
A LINE, IT IS BLANK.

THE TOTAL NUMBER OF FRAMES SPECIFIED BY THE #FICHE SECTION MUST
BE 16. THERE ARE TWO SPECIAL CASES, FRAMES 0 CAUSES THERE
TO BE NO OUTPUT FOR THIS GROUP. THIS WILL USUALLY APPEAR IN
CONJUNCTION WITH A CONDITIONAL STATEMENT. LINES 0
CAUSES BLANK FRAMES TO BE GENERATED.

THE LINES OF STRING DEFINITIONS CONSIST OF
SIZE <NUMBER> <STRINGV> AND POSSILBLY A JUSTIFICATION CLAUSE.
THESE ARE JUST LIKE THE ITEM ENTRIES IN THE #INDEX SECTION
EXCEPT THAT THE SUPRESS UNCHANGED AND INDENT UNCHANGED
AND CHANGE CLEAR ITEM SPECIFICATIONS ARE NOT ALLOWED.

WHEN MORE THAN ONE FILE IS PUT ONTO A FICHE, IT MAY BE DESIRABLE
TO GENERATE AN EYE-READABLE TITLE IN THE MIDDLE OF THE FICHE
TO INDICATE THE START OF THE NEW FILE. THIS MAY BE DONE
WITH THE #NFILE SECTION. THE FORMAT OF THIS SECTION IS EXACTLY
LIKE THAT OF THE #FICHE SECTION. STRANGE RESULTS WILL BE
OBTAINED IF MORE THAN ONE GROUP IS SPECIFIED OR IF MORE THAN ONE
FRAME IS SPECIFIED FOR A GROUP. IF THIS SECTION IS OMITTED,
NO SPECIAL ACTION WILL BE TAKEN AT THE START OF A NEW FILE.

THE LAST SECTION TO APPEAR IN THE FORMAT INFORMATION IS THE
#END SECTION. THIS MAY BE EITHER

#END

OR

#END DEBUG

THE SECOND OPTION WILL CAUSE SPOOLING TO BE SUPRESSED, INSTEAD
A FILE NAMED  FSHDEB.MFS WILL BE GENERATED IN YOUR DIRECTORY.
THIS FILE WILL CONTAIN PRINTABLE IMAGES OF THE INDEX AND TITLE
BLOCKS FOR THE FICHE WHICH WOULD HAVE BEEN GENERATED. THIS ALLOWS
THE FORMAT INFORMATION TO BE CHECKED TO MAKE SURE IT IS GENERATING
THE DESIRED RESULTS WITHOUT HAVING TO ACTUALLY GENERATE AND
EXAMINE THE FICHE.



                                       597
Text: PROG; How to write programs in FSHSPL language                     page 16

CERTAIN INFORMATION GATHERED BY THE FSHSPL PROGRAM MAY BE OUTPUT
FOR USE BY OTHER PROGRAMS. IF THE VARIABLE OUTVAR IS USED, A
FILE WILL BE CREATED IN YOUR DIRECTORY NAMED FSHDMP.MFS. AT
THE END OF EACH PAGE, IF OUTVAR IS NOT THE NULL STRING, IT WILL
BE APPENDED TO THE END OF THIS FILE FOLLWED BY A RETURN LINE FEED.




















































                                       598
Text: PROG; How to write programs in FSHSPL language                     page 17

TO HELP WITH THE UNDERSTANDING OF THE FORMAT INFORMATION, TWO
EXAMPLES WILL BE GIVEN WITH EXPLANATIONS. THE NUMBERS AT THE
LEFT MARGIN IN THE EXAMPLES ARE NOT PART OF THE FORMAT
INFORMATION BUT ARE FOR REFERENCE ONLY.

EXAMPLE 1

THIS IS THE FORMAT INFORMATION FOR GENERATING FICHE FROM SOME
ACOUNTING DETAIL RECORDS. THE RECORDS CONTAIN USER NAME
DISTRICT NUMBER, CUSTOMER NUMBER, SYSTEM NUMBER, AND DATE. AS AN
ADDED COMPLICATION, ALL PAGES EXCEPT THE FIRST START WITH A
BLANK LINE.

1)	#TEXT
2)	VAR1=LINE 1 SCAN "USER " CHARACTERS 12
3)	VAR14=LINE 2 SCAN "USER " CHARACTERS 12
4)	VAR2=LINE 1 SCAN "SYSTEM" SKIP BLANK NUMBER
5)	VAR15=LINE 2 SCAN "SYSTEM" SKIP BLANK NUMBER
6)	VAR3=LINE 3 SCAN "DISTRICT" SKIP BLANK NUMBER
7)	VAR16=LINE 4 SCAN "DISTRICT" SKIP BLANK NUMBER
8)	VAR4=LINE 3 SCAN "CUSTOMER NUMBER" SKIP BLANK;
9)		CHARACTERS 50 STOP ON BLANK
10)	VAR17=LINE 4 SCAN "CUSTOMER NUMBER" SKIP BLANK;
11)		CHARACTERS 50 STOP ON BLANK
12)	VAR13=LINE 1 SCAN "AS OF " CHARACTERS 8
13)	VAR19=LINE 2 SCAN "AS OF " CHARACTERS 8
14)
15)	VAR11=IF VAR4+VAR17 [VAR4+VAR17]+IFNO VAR4+VAR17;
16)		[IF VAR1+VAR14 [VAR11]]
17)
18)	VAR5=IF VAR5 [VAR5]+IFNO VAR5 [VAR11]
19)	VAR6=IF VAR11 [VAR11]+IFNO VAR11 [VAR6]
20)
21)	VAR7=IF VAR7 [VAR7]+IFNO VAR7 [VAR1+VAR14]
22)	VAR8=IF VAR1+VAR14 [VAR1+VAR14]+IFNO VAR1+VAR14 [VAR 8]
23)
24)	VAR9=IF VAR9 [VAR9]+IFNO VAR9 [VAR3+VAR16]
25)	VAR10=IF VAR3+VAR16 [VAR3+VAR16]+IFNO VAR3+VAR16 [VAR10]
26)
27)	VAR12=IF VAR12 [VAR12]+IFNO VAR12 [VAR13+VAR19]
28)	#INDEX
29)	HEADING "CUST.    USER       HOST LOC"
30)	ITEM 1 SIZE 6 VAR11 RIGHT CHANGE CLEAR ITEM 3;
31)		CHANGE CLEAR ITEM 2 SUPRESS UNCHANGED
32)	" "
33)	ITEM 2 SIZE 12 VAR1+VAR14 CHANGE CLEAR ITEM 3 SUPRESS UNCHANGED
34)	" "
35)	ITEM 3 SIZE 3 VAR2+VAR15 RIGHT SUPRESS UNCHANGED
36)	" "
37)	ITEM 4 SIZE 4 LOC







                                       599
Text: PROG; How to write programs in FSHSPL language                     page 18

38)	#PAGE
39)
40)	KEEP VAR5,VAR6,VAR7,VAR8,VAR9,VAR10,VAR11,VAR12
41)	KEEP VAR13,VAR19
42)
43)	#OVERFLOW PAGE
44)
45)	KEEP VAR1,VAR2,VAR3,VAR4,VAR5,VAR6,VAR7,VAR8,VAR9,VAR10
46)	KEEP VAR11,VAR12,VAR13,VAR14,VAR15,VAR16,VAR17,VAR19
47)
48)	#OVERFLOW FICHE PAGE
49)
50)	KEEP VAR1,VAR2,VAR3,VAR4,VAR14,VAR15,VAR16,VAR17
51)	KEEP VAR12,VAR11
52)
53)	#FICHE
54)
55)	GROUP CHARACTERS 4 LINES 1 FRAMES 5
56)	  TLINE 1 SIZE 20 "DETAIL FOR "+VAR12
57)	GROUP
58)	  TLINE 1 SIZE 20 "DISTRICT "+VAR9+IFNDIF VAR9 VAR10;
59)		[" TO "+VAR10] CENTER
60)	GROUP FRAMES 2 LINES 2 IFEQ VAR5 VAR6 [LINES 1]
61)	  TLINE 1 SIZE 8 VAR5+" " RIGHT
62)	  TLINE 2 SIZE 8 VAR6+" " RIGHT
63)	GROUP FRAMES 3 LINES 2 IFEQ VAR5+VAR7 VAR6+VAR8;
64)		[LINES 1]
65)	  TLINE 1 SIZE 12 VAR7
66)	  TLINE 2 SIZE 12 VAR8
67)	GROUP FRAMES 1 LINES 2 CHARACTERS 3
68)	  TLINE 1 SIZE 3 FICHEN RIGHT
69)
70)	#END

LINES 2 AND 3 ARE USED TO PICK UP THE USER NAME. LINE 2 WILL FIND
THE USER NAME ON THE FIRST PAGE OF THE FILE, LINE THREE ON THE
OTHERS. WHEN THE USER NAME IS TO BE USED, THE CONSTRUCT
VAR1+VAR14 IS USED SINCE THE ONE WHICH DID NOT FIND THE USER NAME
WILL BE NULL, NOTE LINES 21 AND 22 FOR AN EXAMPLE.
SIMILARLY LINES 4 AND 5 GET THE SYSTEM NUMBER, 6 AND 7
THE DISTRICT NUMBER, AND 8 AND 9 THE CUSTOMER NUMBER. THE CUSTOMER
NUMBER IS ACUTALLY OF THE FORM 123-N SO THE NUMBER SCAN CAN NOT
BE USED. INSTEAD A SKIP BLANK, STOP ON BLANK, AND A "LARGE ENOUGH"
CHARACTER FIELD ARE USED.
LINE 12 AND 13 GET THE DATE. LINE 27 (VAR12) IS USED TO REMEMBER
THE DATE IN CASE OF PAGES WHICH DO NOT HAVE THE DATE (POSSIBLY
BLANK PAGES). IF VAR12 IS ALREADY SET TO A DATE THIS LINE
BECOMES EFFECTIVELY VAR12=VAR12 OTHERWISE IT BOCOMES
VAR12=VAR13+VAR19. LINES 18 AND 19 ARE USED TO SAVE THE
FIRST AND LAST CUSTOMER NUMBER OF THE FICHE, LINES 21 AND 22
THE FIRST AND LAST USER NAME ON THE FICHE, AND LINES 24 AND 25
THE FIRST AND LAST DISTRICT ON THE FICHE. LINE 15 (VAR11)
REMEMBERS CUSTOMER NUMBERS IN CASE OF PAGES WHICH DO NOT HAVE A
CUSTOMER NUMBER (CONTINUATION PAGES IN THE DETAIL). IF A CUSTOMER
NUMBER IS SEEN, IT IS SET TO THE CUSTOMER NUMBER. IF A CUSTOMER NUMBER WAS


                                       600
Text: PROG; How to write programs in FSHSPL language                     page 19

NOT SEEN (IFNO VAR4+VAR17) BUT A USER NAME WAS, IT IS KEPT
OTHERWISE IT IS SET NULL























































                                       601
Text: PROG; How to write programs in FSHSPL language                     page 20

THE INDEX SPECIFICATION (LINES 28 THROUGH 37) IS RELATIVELY
STRAIGHTFORWARD. IT CONSISTS OF THE CUSTOMER NUMBER, USER NAME,
AND SYSTEM NUMBER. EACH OF THESE IS SUPRESSED IF IT IS UNCHANGED.
A CHANGE IN THE CUSTOMER NUMBER FORCES PRINTING OF THE USER NAME
AND SYSTEM NUMBER EVEN IF UNCHANGED AND A CHANGE OF USER NAME
FORCES PRINTING OF THE SYSTEM NUMBER.

AT THE END OF A PAGE (LINE 38 THROUGH 41) THE VARIABLES REMEMBERING
THE FIRST AND LAST CUSTOMER NUMBER, DISTRICT, AND USER NAME
ARE KEPT AS WELL AS THE REMEMBERED DATE AND CUSTOMER NUMBER.
ON AN OVERFLOW PAGE (LINES 43 THROUGH 46) ALL VARIABLES
ARE KEPT SINCE THIS ACTS AS PART OF THE SAME PAGE. IF THE FILE
IS BROKEN ACROSS A FICHE (LINES 48 THROUGH 51) THE VARIABLES
FROM THE LAST PAGE ARE REMEMBERED (IN CASE THE FIRST PAGE ON THE
NEXT FICHE IS A CONTINUATION) BUT THE FIRST AND LAST THINGS
FOR THE FICHE ARE ALLOWED TO BE RESET SO THEY CAN START
ACCUMULATING INFORMATION FOR THE NEXT FICHE.

THE TITLE IS INTERESTING IN LINES 58 AND 59 WHERE A COMPARISON OF THE
FIRST AND LAST DISTRICT IS MADE TO CONTROL PRINTING OF THE
TO DISTRICT INFORMATION. LINE 60 USES A CONDITIONAL EXPRESSION
ON THE LINE DEFINITION TO CAUSE ONLY ONE LINE TO PRINT IF
THE FIRST AND LAST CUSTOMER NUMBER ARE THE SAME. LINE 63 HAS
A SIMILAR TEST FOR FIRST AND LAST USER NAME BUT FOR THE TEST, IT
CONCATINATES THE CUSTOMER NUMBER TO THE USER NAME SO THAT A CHANGE
IN CUSTOMER NUMBERS WILL FORCE TWO LINES OF USER NAME EVEN IF
THEY SHOULD HAPPEN TO BE THE SAME.






























                                       602
Text: PROG; How to write programs in FSHSPL language                     page 21

THIS EXAMPLE IS USED TO GENERATE FICHE FROM LISTINS OUTPUT BY
CREF. THE LISTING MAY HAVE A PAGE NUMBER IN LINE 1, LINE 2
MAY CONTAIN  SYMBOL TABLE  SYMBOL CROSS REFERENCE
MACRO/OPDEF CROSS REFERENCE    OR OPCODE CROSS REFERENCE
DEPENDING ON THE TYPE OF INFORMATION IN THAT PAGE. THE PROGRAM
GENERATES AN INDEX BASED ON THE FIRST CREF LINE NUMBER OR SYMBOL
ON A PAGE. #OVERFLOW FICHE AND #NFILE SPECIFICATIONS ARE USED.

1)	VAR1=LINE 1 SCAN "PAGE" SKIP BLANK NUMBER
2)	VAR2=LINE 2 SCAN "SYMBOL TABLE"="S"! "SYMBOL CROSS REFERENCE";
3)		="C"! "MACRO/OPDEF CROSS REFERENCE"="M"!;
4)		"OPCODE CROSS REFERENCE"="O"
5)	VAR3=LINE FIRST AFTER 2 START 1 FOR 6 STOP AFTER ITEM
6)	VAR4=LINE LAST AFTER 2 START 1 FOR 6 STOP AFTER ITEM
7)	VAR5=IF VAR4 [VAR4]+IFNO VAR4 [VAR5]
8)	VAR6=IF VAR4 [VAR2]+IFNO VAR4 [VAR6]
9)
10)	#PAGE
11)	KEEP VAR5,VAR6
12)
13)	#OVERFLOW PAGE
14)	KEEP VAR1,VAR2,VAR4,VAR5,VAR6
15)	BLANK 3
16)
17)	#INDEX
18)
19)	HEADING "NAME    INDEX     PAGE  LOC"
20)
21)	ITEM 1 SIZE 6 TITLE SUPRESS UNCHANGED
22)	LOCATE 9
23)	ITEM 2 SIZE 6 VAR3
24)	LOCATE 17
25)	ITEM 3 SIZE 1 VAR2
26)	LOCATE 20
27)	ITEM 4 SIZE 3 VAR1 RIGHT
28)	LOCATE 25
29)	ITEM 5 SIZE 4 LOC
30)
31)	#FICHE
32)
33)	REVERSE
34)	GROUP FRAMES 2 CHARACTERS 3 LINES 1
35)	  TLINE 1 SIZE 6 GLOBAL
36)
37)	GROUP FRAMES 10 LINES 1 IF TITLE4 [LINES 2]
38)	  TLINE 1 SIZE 30 TITLE1+IF TITLE2 [","+TITLE2+;
39)		IF TITLE3 [","+TITLE3]] CENTER
40)	  TLINE 2 SIZE 30 TITLE4+IF TITLE5 [","+TITLE5+;
41)		IF TITLE6 [","+TITLE6]] CENTER
42)
43)	GROUP FRAMES 2 LINES 2
44)	  TLINE 1 SIZE 6 DAY+"-"+MON3 CENTER
45)	  TLINE 2 SIZE 6 YEAR CENTER
46)
47)	GROUP IFNO GLOBAL [LINES 0]


                                       603
Text: PROG; How to write programs in FSHSPL language                     page 22

48)	  TLINE 1 SIZE 6 FICHEN RIGHT
























































                                       604
Text: PROG; How to write programs in FSHSPL language                     page 23

49)	#OVERFLOW FICHE
50)
51)	GROUP FRAMES 2 CHARACTERS 3 LINES 1
52)	  TLINE 1 SIZE 6 GLOBAL
53)
54)	GROUP FRAMES 5
55)	  TLINE 1 SIZE 12 TITLE RIGHT
56)		  SIZE 3 "-"+BREAKN
57)
58)	GROUP FRAMES 3 LINES 2
59)	  TLINE 1 SIZE 3 " "+INDEX ITEM 3 PAGE 1
60)		  SIZE 6 INDEX ITEM 2 PAGE 1
61)	  TLINE 2 SIZE 3 " "+VAR6
62)		  SIZE 6 VAR5
63)
64)	GROUP FRAMES 2 LINES 0
65)
66)	GROUP FRAMES 2 LINES 2
67)	  TLINE 1 SIZE 6 DAY+"-"+MON3 CENTER
68)	  TLINE 2 SIZE 6 YEAR CENTER
69)
70)	GROUP FRAMES 2 IFNO GLOBAL [LINES 0]
71)	  TLINE 1 SIZE 6 FICHEN RIGHT
72)
73)	#NFILE
74)
75)	REVERSE
76)
77)	GROUP FRAMES 1 IFNO TITLE2 [FRAMES 0] CHARACTERS 3 LINES 2
78)	  TLINE 1 SIZE 3 TITLE START 1 FOR 3
79)	  TLINE 2 SIZE 3 TITLE START 4 FOR 3
80)
81)	#END
























                                       605
Text: PROG; How to write programs in FSHSPL language                     page 24

LINE 1 WILL READ THE PAGE NUMBER IF PRESENT.
LINES 2 THROUGH 4 WILL SET VAR2 TO S FOR A SYMBOL TABLE PAGE,
C FOR A CROSS REFERENCE PAGE, M FOR A MACRO/OPDEF CROSS
REFERENCE PAGE, O FOR AN OPCODE CROSS REFERENCE PAGES AND
NULL FOR THE ASSEMBLY LISTING PAGES.
LINE 5 GETS THE FIRST ITEM ON THE PAGE AND LINE 6 THE LAST.
THE STOP AFTER ITEM MODE IS USED BECAUSE THE ITEMS SCANNED
MAY BE EITHER SYMBOLS WHICH ARE LEFT JUSTITFIED OR CROSS REFERENCE
LINE NUMBERS WHICH ARE RIGHT JUSTIFIED WITH LEADING BLANKS.
LINES 7 AND 8 REMEMBER THE LAST VALUES OF VAR2 AND VAR4. THESE
ARE USED IN THE #OVERFLOW FICHE SECTION.

LINE 15 GENERATES THREE BLANK LINES ON A PAGE OVERFLOW AND INSURES
THAT VAR1 AND VAR2 WILL NOT FIND MATCHES AND THUS REMAIN UNCHANGED.
NOTE THAT THE MULTIPLE SCAN IN FOR VAR2 LEAVES
VAR2 UNCHANGED IF NOT MATCH IS FOUND RATHER THAN SET TO THE
NULL STRING. IT IS THE VARIABLE CLEARING AT THE END OF THE
PAGE WHICH NORMALLY GIVES THE NULL STRING IF NO MATCH IS FOUND.
THE SAME IS TRUE FOR THE PAGE NUMBER IN VAR1.

THE INDEX SECTION (LINES 17 THROUGH 29) USES LOCATE INSTEAD OF
INSERTING STRINGS OF SPACES. EITHER WILL WORK HERE. THE ONLY
DIFFERENCE OCCURS WHEN THE INDENT UNCHANGED FEATURE IS USED.
IN THIS CASE, LOCATE MAY BE USED TO CAUSE THE REMAINDER OF THE
ITEMS ON THE LINE TO BE LINED UP.

LINES 37 THROUGH 41 IN THE #FICHE SECTION GENERATE ONE LINE FOR
1 TO 3 FILES ON THIS FICHE AND 2 LINES FOR 4 TO 6 FILES. NOTE
THAT IF TITLE4 IS NULL, THE LINES 1 DEFINITION IS IN EFFECT AND
THE TLINE 2 DOES NOT MATTER.

LINE 43 THROUGH 45 SET THE CURRENT DATE INTO THE TITLE AREA.

LINES 49 THROUGH 71 SHOW A DIFFERENT TITLE SCHEME IF A FILE
MUST BE BROKEN ACROSS MORE THAN ONE FICHE. THE FILE TITLE WITH THE
BREAK NUMBER WHICH STARTS AT 1 FOR THE FIRST FICHE THE
FILE IS ON AND INCREMENTS AS WELL AS AN INDICATION OF THE FIRST
AND LAST DATA ON THE FICHE IS GENERATED.

LINES 55 AND 56 GIVE AN EXAMPLE OF USING MORE THAN ONE
LINE OF DEFINITION FOR THE SAME TLINE. LINES 59 AND 60
USE THE INDEX ITEM CONSTRUCT TO GET THE FIRST DATA ON THE FICHE.
LINE 64 GENERATES 2 BLANK FRAMES.

LINES 73 THROUGH 79 GENERATE EYE-READABLE TITLES BETWEEN
FILES ON THE SAME FICHE. NOTE THAT THE IFNO TITLE2 IN LINE
77 WILL SUPRESS TITLE GENERATION FOR THE FIRST FILE.










                                       606
Text: PROG; How to write programs in FSHSPL language                     page 25

	ERROR MESSAGES

THE FOLLOWING ERRORS ARE WARNINGS ONLY:

TOO MANY NAMES IN LINE STARTING WITH <NAME>
	THIS OCCURS WHILE ENTERING GROUPING INFORMATION IF THE
	NUMBER OF NAMES ENTERED EXCEEDS THE MAXIMUM NUMBER
	OF FILE/FICHE. THE INDICATED LINE IS IGNORED.

SPOOL FILE IN USE...WAITING
	THE PROGRAM WILL CONTINUE WHEN THE SPOOL FILE IS NOT
	LONGER IN USE BY ANOTHER USER.

OVERFLOW PAGE, BLANK SPECIFICATION TOO LARGE, IGNORED
	THE BLANK SPECIFICATION SPECIFIED MORE THAN 61 BLANK LINES.
	IT WAS IGNORED.

CAN NOT FIND <FILE OR TITLE>
	THE FILE OR TITLE BEING SEARCHED FOR FOR GROUPING PURPOSES
	CAN NOT BE FOUND, IT WILL SIMPLY BE OMITTED.

COMMAND FILE NOT AVAILABLE
	A FILE SPECIFIED WITH @ COULD NOT BE FOUND, READING FROM
	THE TELETYPE IS RESUMED.

ERROR READING FILE <FILE NAME> ERROR IGNORED
	THERE WAS AN INPUT ERROR, THE ERROR WAS IGNRRED.

UNTRANSLATABLE CHARACTER <OCTAL> IN FILE <FILE>
	A CHARACTER WAS FOUND IN THE FILE WHICH FSHSPL DOES NOT
	KNOW THE TRANSLATION FOR (PERHAPS A CONTROL CHARACTER).
	<OCTAL> IS THE OCTAL ASCII REPRESENTAION OF THE CHARACTER.
	THE CHARACTER IS PLACED IN THE OUTPUT FILE AS A #.

CAN NOT FIT FILE <FILE> ON FICHE
	THE NEXT FILE TO BE GROUPED ON THIS FICHE WILL NOT FIT.
	IT IS AUTOMATICALLY STARTED ON A NEW FICHE.

THE FOLLOWING ARE FATAL ERRORS:

DISK NOT AVAILABLE
	THE DISK CAN NOT BE INITTED. A VERY UNUAUAL CONDITION.

CAN NOT READ UFD
	THE UFD IS SEARCHED WHEN FILE NAMES ARE SPECIFIED, THE
	USERES UFD OR THE ONE INDICATED BY THE USER NAME, COULD
	NOT BE READ.

MORE THAN ONE USER NAME SPECIFIED
	MORE THEN ONE USER NAME WAS SPECIFIED IN THE FILE
	SPECIFICATION. THIS IS CURRENTLY NOT ACCEPTED.






                                       607
Text: PROG; How to write programs in FSHSPL language                     page 26

NO INPUT FILES
	AFTER ALL "WILD CARD" OPTIONS HAVE BEEN CHECKED, THERE
	WERE NO INPUT FILES TO PROCESS

CAN NOT ENTER OUTPUT DUMP FILE
	CAN NOT ENTER THE FSHDMP.MFS FILE. NORMALLY HAPPENS
	BECAUSE THE USER HAS EXCEEDED HIS DISK QUOTA OR THE
	FILE ALREADY EXISTS AND IS PROTECTED.

INSUFFICIENT CORE AVAILABLE
	FSHSPL CAN NOT OBTAIN SUFFICIENT CORE FOR ITS INTERNAL
	TABLES.

CAN NOT ACCESS SPOOL FILES
	FSHSPL HAS INSUFFICIENT LICENSE TO ACCESS THE SPOOLING
	DIRECTORY

CAN NOT OPEN SPOOL FILE
	AN OUTPUT SPOOLING FILE CAN NOT BE OPENED, POSSIBLY
	THE SPOOLING DIRECTORY CONTAINS TOO MUCH DATA.

THE FOLLOWING ARE FATAL ERRORS AND SPECIFY THE FILE BEING
PROCESSED AT THE TIME THEY OCCUR:

OUTPUT ERROR
	THE SYSTEM INDICATED THAT THERE WAS AN OUTPUT ERROR ON
	THE SPOOL DISK FILE

TAPE BUFFER TO SMALL
	THIS IS AN INTERNAL ERROR. THE RECORD THAT IS TO BE
	WRITTEN ON TAPE FOR THIS PAGE IS GREATER THAN THE
	MAXIMUM TAPE RECORD SIZE.

INCORRECT NUMBER OF TITLE FRAMES
	THE NUMBER OF TITLE FRAMES GENERATED FOR THIS FILE
	WAS NOT 16.

CONCATINATED STRING TOO LONG
	A CONCATINATED STRING WITH MORE THAN 80 CHARACTERS WAS
	GENERATED.

SUBSTRING OPERATION STARTING FROM POSITION 0
	A SUBSTRING OPERATION SPECIFIED CHARACTER 0 AS THE
	FIRST CHARACTR.

STRING SCAN OVERFLOW, TOO COMPLEX
	THERE HAS BEEN AN OVERFLOW OF INTERNAL TABLE SPACE
	WHILE PROCESSING A SCAN SPECIFICATION IN THE TEXT
	SECTION. THIS MAY HAPPEN IF THE SCAN STRINGS GENERATE TOO
	MANY PARTIAL MATCHES AT ANY GIVEN TIME.







                                       608
Text: PROG; How to write programs in FSHSPL language                     page 27

THE FOLLOWING ERRORS OCCUR WHEN SCANNING THE FICHE FORMAT
INFORMATION. ALL ARE FATAL:

IN GENERAL, IF THE FORMAT INFORMATION IS NOT IN ACCORD WITH THE
SPECIFICATIONS, THE ERROR

SCAN ERROR, EXPECTED
 <A LIST OF POSSILBE THINGS WHICH MIGHT LEGALLY OCCUR HERE>
FOUND <WHAT WAS ACTUALLY SEEN>, REMAINDER OF LINE FOLLOWS
<THE REMAINDER OF THE LINE TO THE NEXT RETURN>

IN ADDITION, IF THE INPUT IS FROM AN @ FILE AND THAT FILE IS AN
EDIT10 FILE, THE LINE AND PAGE NUMBER WILL BE PRINTED
AS 00100/6.

EXCEPT AS OTHERWISE INDICATED, ALL OF THE FOLLOWING ERRORS
ARE FOLLOWED WITH
, REMAINDER OF LINE FOLLOWS
<THE REMAINDER OF THE LIEE TO THE NEXT RETURN>
AND POSSIBLY THE EDIT10 LINE AND PAGE NUMBER AS DESCRIBED ABOVE.

STRING TOO LONG
	A STRING OF MORE THAN 80 CHARACTERS HAS BEEN SCANNED

TOO MANY SCAN STRINGS
	A SCAN SPECIFICATION IN THE TEXT SECTION SPECIFIES MORE
	THAN 20 STRINGS.

EXPRESSION COMPLEXITY EXCEEDED
	THERE HAS BEEN AN OVERFLOW OF INTERNAL SPACE INTO WHICH
	EXPRESSIONS (VARIABLES, TITLES, INDEXES, ETC.) ARE
	COMPILED

ILLEGAL NUMBER OF CHARACTERS IN TITLE
	THE NUMBER OF CHARACTERS/FRAM SPECIFIED IS LESS THAN 1
	OR MORE THAN 5

ILLEGAL NUMBER OF FRAMES IN TITLE
	THE NUMBER OF FRAMES SPECIFIED IS LESS THAN 0 OR MORE
	THAN 16

ILLEGAL INDEX ITEM PAGE NUMBER
	THE PAGE NUMBER SPECIFIED FOR THE INDEX ITEM EXCEEDS
	208.

ILLEGAL NN`UMBER OF LINE IN TITLE
	THE NUMBER SPECIFIED AFTER TLINE IS LESS THAN 1 OR MORE
	THAN 5 OR THE NUMBER OF LINES IN THE GROUP IS LESS THAN
	0 OR MORE THAN 5

ILLEGAL FIELD SIZE IN TITLE
	THE NUMBER SPECIFIED FOR A SIZE SPECIFICATION IN
	THE TITLE SECTION IS LESS THAN 0 OR MORE THAN 80




                                       609
Text: PROG; How to write programs in FSHSPL language                     page 28

MULTIPLE TITLE DEFINITION
	MORE THAN ONE #FICHE, #OVERFLOW FICHE, OR #NFILE
	SPECIFICATION HAS BEEN SEEN

MULTIPLE INDEX SPECIFICATION
	MORE THAN ONE #INDEX SECTION HAS BEEN SEEN

OVERFLOW IN INDEX SPECIFICATION OR INCORRECT LOCATE STATEMENT
	THE GIVEN INDEX SPECIFICATION WOULD RESULT IN AN INDEX
	LINE WITH MORE THAN 30 CHARACTERS

BAD ITEM NUMBER IN INDEX
	THE INDEX ITEM NUMBERS ARE NOT IN ORDER OR AN ITEM
	NUMBER IS LESS THAN 1 OR MORE THAN 10

MISMATCH IN []'S IN IF
	THE []'S IN AN IF, IFN, IFEQ, IFDIF DO NOT MATCH

BAD LINE NUMBER IN TEXT SECTION
	THE LINE NUMBER SPECIFIED IS LESS THAN 0 OR GREATER
	THAN 63.

THE FOLLOWING ERRORS GIVE THE VARIABLE OR IDENTIFIER
INVOLVED:

UNRECOGNIZABLE IDENTIFIER
	THE IDENTIFIER IS NOT A RESERVED WORD OR A VARIABLE
UNDEFINED VARIABLE
	A VARIABLE HAS BEEN USED WHICH HAS NOT BEEN PREVIOUSLY 
	DEFINED

MULTIPLE VARIABLE DEFINITION
	AN ATTEMPT HAS BEEN MADE TO DEFIEE A VARIABLE FOR THE
	SECOND TIME OR TO DEFINE ONE OF THE "PREDEFINED" VARIABLES
	SUCH AS LOC, TITLE, ETC.






















                                       610
Text: FSHTAP; Operator instructions for FSHTAP                            page 1




     Instructions for running a micro-fiche spooling request:

     1.  Set OP license

     2.  Make sure there is a 1600 BPI 9 track tape drive free  for  the
         micro-fiche tape to be written on.

     3.  Type "R FSHTAP"

     4.  The program will request the tape unit.  Type the name  of  the
         tape unit, for example, "FTA1".

     5.  If the name given is not for a tape unit or  the  unit  is  not
         capable  of  1600  BPI  9 track operation, the program will say
         "not a tape unit" and ask for the tape unit name again.

     6.  The program will ask for a username.   Type  the  username  for
         which the request has been made.  For example, "M33".

     7.  The program will type
         
                MOUNT TAPE LABELED
         
                ......
         
         Type return when tape is mounted.

     8.  Mount a tape on the indicated drive and put a label on it  that
         is the same as indicated by the program.  the write ring should
         be in.

     9.  Type return.  The program will now write on the tape.

    10.  When the program is finished writing, it will rewind and unload
         the  tape.   it will then either exit or go back to the step in
         which it types out "mount tape labeled"  and  ask  for  another
         tape to be mounted.

    11.  When the program finally exits, call  Zytron  at  733-4900  and
         tell  them that there is a tape(s) to be picked up for Tymshare
         and where to pick it  (them)  up.   Also  tell  them  that  the
         completed fiche are to be delivered.

    12.  When the fiche are delivered, they should be delivered  to  the
         original  requester  along  with  the  receipt.  Do not deliver
         fiche to the operating systems group unless they are  the  ones
         who requested the fiche.







                                       611
Text: ICP; Program to monitor system use                                  page 1

DISPLAY SELECTION

There are five kinds of output from ICP:

	job lists
	file lists
	job summaries
	file summaries
	system statistics

They are controlled by switchs as follows

	job	produces a job list with entries for all jobs,
		and a job summary

	active	produces a job list with entries for all active
		jobs (all jobs not in TTY i/o wait or HIBERs),
		and a job summary

	file	produces a file list with entries for all
		files currently open or with pages mapped
		from them, and a file summary

	shared	produces a file list with entries for all
		files posessing a shared page table (this
		is roughly all files a page of which has
		ever been shared), and a file summary

	summary	in combination with any of the above,
		turns off the job and file lists, leaving
		only the summaries

	statistics
		produces a list of system statistics about
		paging performance

The modifier

	repeat <wait time>

causes the selected display to repeat forever, waiting
<wait time> seconds between displays.















                                       612
Text: ICP; Program to monitor system use                                  page 2

OTHER COMMANDS

Other ICP commands are:

	quit	leaves ICP

	open <file name>
		causes subsequent ICP output to go to
		the specified file rather than to the
		terminal (input still comes from the
		terminal)

	close	directs ICP output back to the terminal

	display	enables a crude ADM3-oriented mode, which
		is mostly useful for repeating displays
		(only the fields that change are updated
		on the screen)







































                                       613
Text: ICP; Program to monitor system use                                  page 3

JOB LISTS

The columns of a job list are

	job	the job number (decimal)

	program	the program name

	size	the number of existant pages for the
		job

	wss	the number of pages in the job's working
		set. an asterisk is printed to the left of
		this column if the number is greater than
		the system-wide job working set limit.

	act	the number of pages currently in core for
		the job (more or less). a + is printed to
		the left of this column if the pages are
		currently protected from being stolen by
		the swapper for another job. a - is printed
		if they are not so protected and the swapper
		has at least thought about taking some of
		them.

	icp	the number of jiffies left in the job's in-
		core quantum. if this is nonzero, the job's
		pages will be protected from the swapper.

	mc/s	microcycles per second since ICP was started
		or since the last job list was output by ICP

	io/s	blocks per second of (simulated) disk i/o

	state	the job's state






















                                       614
Text: ICP; Program to monitor system use                                  page 4

JOB STATES

The state field is more or less the same as SYSTAT's. A minor
exception is that TI and TO are both given as TI. The major
exception is that RN jobs get extra information printed
about them:

	Q<queue number>.<queue position>
		indicates which of the four run queues
		the job is currently in and where it stands
		in the queue (ICP's method of obtaining
		this information is somewhat unreliable, so
		the queue indication does not always appear)

	+mrq	the job has page-faulted and is now blocked
		waiting for the swapper's attention

	+prf	the job (directly or via the disk i/o
		simulator) has prereferenced a page and the
		swapper has not finished the prereferencing

	+swpinp	the swapper is currently bringing in pages
		for the job

The SW state, it should be noted, does not exactly mean
"swapped out". When a job page-faults, it stays in RN but
+mrq gets set. Eventually the swappper comes around and
decides to get all the job's working set back in again.
This results in +swpinp getting set. When the swapper has
queued disk requests for all of the job's swapped-out
pages, it lets the job run again (and +swpinp goes off).
If the job gets to a page before the corresponding disk
request gets satisfied, the job goes into SW.
























                                       615
Text: ICP; Program to monitor system use                                  page 5

JOB SUMMARIES

The ICP job summary fields are:

	XX jobs		XX is the number of logged-in jobs

	XX active	XX is the number of jobs not in TTY
			i/o wait or HIBERs

	NN (N0+N1+N2+N3) RN
			NN is the number of jobs in the RN
			state. Ni is the number in queue i.

	XX with MRQ set	XX is the number of (RN state) jobs
			having MRQ set (see JOB STATES)

	XX SW		XX is the number of SW state jobs
			(see JOB STATES)

	XX microcycles/second
	YY simio blocks/second
			XX and YY are the totals from the
			corresponding job list columns

	XX mapped, YY in wss, ZZ in active wss,
	AA activated, BB icp
			XX, YY, ZZ, AA and BB are in pages
			over available core pages

			XX is the sum of the size column
			YY is the sum of the wss column
			  (roughly SYSTAT's swapping ratio)
			ZZ is the sum of the wss column for
			  jobs not in TTY i/o wait or HIBERs
			  (roughly SYSTAT's active swapping
			  ratio)
			AA is the sum of the act column
			BB is the sum of the act column entries
			  which have a + in front of them


















                                       616
Text: ICP; Program to monitor system use                                  page 6

FILE LISTS

The columns of a file list are:

	directory file ext
		the file's directory, name, and extension

	u	the number of jobs with this file open in
		update mode

	r	the number of jobs with this file LOOKed UP

	eof	the position of the end-of-file (in
		decimal pages/decimal words)

	prv	the protection code in octal

	md	the data mode

	pages	the number of allocated pages for the file
		(including RIB pages)

	mapped	the number of pages being mapped from the file

	shr	the "sharing factor" -- the average number of
		jobs having each page mapped































                                       617
Text: ICP; Program to monitor system use                                  page 7

FILE SUMMARY

The file summary consists of the total mapped-page count for
the system and the average sharing factor.





















































                                       618
Text: INFRED; Program to display PDP-10 system status                     page 1

To run INFRED, type
	.R (M33)INFRED[;[<system number>][/<switch>][/<switch>]]

Available switches are:

SUMMARY
ERRORS
VERSION
TIMES
USE
CRASHES
ALLERR
DISK
CORE
STREAM
SERROR
TABLE
UP
CHECK






































                                       619
Text: KAFIX; Patches Fortran-IV SAV files to run on F3                    page 1

The program (MPL)KAFIX will patch a .SAV file replacing all sequences

	SETO a,
	AOBJN a,e

with		

	SETO a,
	SETZ a,e

This will prevent the problem of the F3 causing Fortran-IV programs 
to die with the message ?KI-10 code won't run on a KA-10.  It makes
the assumption that all the instructions which are required are
implimented or simulated on the F3.

The program asks for the name of the .SAV file to patch.  The file is
superceded, so if a backup is desired, do it yourself.








































                                       620
Text: MASQUE; Masquerade as another user                                  page 1

Those with WC,RC, and SY set may give the command
    R(MPL)MASQUE;<username>
and immediately become that user.  It will appear to
the system that you had logged out and logged back in
under that user name.  Your current directory will 
remain the same (ie if you were logged in as WRS and not
GFD'd anywhere, then said R(MPL)MASQUE;OPER, you would
appear to be logged in as OPER and GFD'd to WRS).
All .TMP files and TMPCOR files are preserved.  In fact
you are never logged out at all.  The program pokes
into JBTUNM,JBTUN1 and JBTAUN.  No stream accounting
records are written.













































                                       621
Text: MDDT; Monitor DDT                                                   page 1

This quick hack actually gettabs the name of the running system
and decides which FileDDT it should run and runs it on either
(M33) (OSCURRENT) or () whichever it is found on first.  This
is useful for pokeing around in core without worring about
getting the right filddt.




















































                                       622
Text: MONED; Runs MONED1 for all monitors                                 page 1

The program MONED, used to make several monitors for general release,
performs the following functions:

1.	Creates a frame in which it runs MONED1 once for each system
	named ## such that the file CONF##.MAC exists.  The default
	general release monitor name is used in each case (see MONED1
	documentation for <ESC>).

2.	Output from the assemblies is recorded in the file MONED.LOG.

3.	Transmittal data such as files, checksums and build instructions
	are output to MONED.XMT.

4.	A list of files is output to MONED.FIL.

When MONED is run, it lists the systems it will make monitors for.
It then asks if it should detach.  (note the program may be attached
to and detached from at any point)







































                                       623
Text: MONED1; Generate an experimental monitor                            page 1

There is a new procedure for assembling an experimental monitor or 
general release.  The system version is broken down into 4 fields:
	C37-P034/E17
	-NN--AAA-BCC

field A is 3 digits decimal, incriments in a major release
field B is n letters, incriments in a general release, omit from pre /A
	to incriment this field, incriment the leftmost letter fastest:
	A,B,C...Z,AA,BA,CA...ZA,AB,BB,CB...ZB,AC...ZZ,AAA...
field C is 2 digits decimal, incriments in experimental, omit in general















































                                       624
Text: MONED1; Generate an experimental monitor                            page 2

The file Pnnn.MEM is the final authority for determining the current and
next version numbers.  

This file contains one page per general release. The heading on each 
page is of the form:
	P034/B
	------
This is the name of the next general release.

Under each page heading is any number of experimental releases.  Each
experimental release has a heading of the form:
	/A01
	----
This is the name of the next experimental release.

Thus, a typical page in Pnnn.MEM would look like this (----'s ommited):
	P034/B
	/A01
	text describing changes appearing in P034/A01
	/A02
	text describing changes appearing in P034/A02
Note that the experimental releases bear "A" yet the page heading
bears "B".  If this is confusing, consider this: 
    A heading states that all changes between this heading and the next
    heading of this type will appear the release of this name.
In other words,
    The last heading in the file, shows what the NEXT monitor will be
    named.





























                                       625
Text: MONED1; Generate an experimental monitor                            page 3

The new MONED1 program will perform the following functions:
    1. find the last header in Pnnnn.MEM for the type release desired.
    2. if text follows this header, append a new header.
    3. edit the CNFNnn.MAC file to reflect current date and version.
    4. log past assemblies in CNFNnn.MAC, truncate after 1 page.
    5. create TMP:SVC with the necessary RPG commands, and run RPG.

MONED1 expects that the Pnnn.MEM file is of the form described above.
Never add headings to Pnnn.MEM by hand unless you know what you are 
doing.  

If no modifications have been made to the source, MONED1 will not 
incriment the version number.  Thus there is no harm in running it
twice in a row.  It assumes that there have been no modifications if
the last thing in the Pnnn.MEM file is a heading.










































                                       626
Text: MONED1; Generate an experimental monitor                            page 4

.run moned1
System id [37]: ?
Enter the id for the system to assemble for in the form:
   ##
such that MON##.CMD and CNFN##.MAC are relavent
or enter <cr> or <esc> to use 37
System id [37]: 
Version [P034/E17]: ?
Enter the desired monitor version in one of these forms:
   E17
   /E17
   P034/E17
or enter <cr> to use P034/E17
or enter <esc> to use P034/F
Version [P034/E17]: 
MACRO: COMFAK
C37-P034/E17
7-16-80
60 JOBS
128 PORTS
LOADING
174 PAGES CORE
37XE17 SAVED

.
































                                       627
Text: MHX; Do commands on many systems                                    page 1

The MHX program will take a series of commands from the terminal
and a list of hosts.  One at a time, it will log into each of the
hosts over an aux circuit and send the commands down the pipe.
All output coming back from the circuit will be displayed on the
terminal.

For sending control characters, the escape sequence $<char> is used
where <char> is the character to be 'controled'.  ie. $[ = <esc>,
$C = <ctrl-c>, etc.

MHX now has the ability to output to a file.  If the question
"Record?" is answered "Y" then a filename is taken and output is
copied there as well as the terminal.  If a file is given, the
user is also asked if he wants to detach.  A detached MHX will
logoff when completed.

Any line of input beginning with "@" will be taken as a file
name for all future inputs.  When the end of file is reached,
input resumes from the terminal.  The default file extension
is ".MHX".  If a line really needs to begin with "@" then use
"@@".  Command file will not nest.

The !SKIP! bug has been fixed so that (most) control characters
may be input as themselves without using the "$" escape kludge.
Of course this does not apply to ^D,^U or rubout, etc.

Known bugs:
1) There is no way to send a yellow ball and wait for an orange ball.





























                                       628
Text: PATLOG; Logs monitor patches easily                                 page 1

The program (M33)PATLOG should be run after patching SYSTEM.SAV
(and possibly the running monitor).  The program currently functions
to log the patch in the following ways:
	1. Update SYS:DSKMAP.DAT
	2. Update (M33)PATCH.LOG
	3. Create file to be sent as mail
The program asks for a brief (less than 35 chars) remark describing
the patch.  You may want to add your initials to the end.
The new version and checksum are calculated at run time.  The old
version and checksum are obtained from SYS:DSKMAP.DAT.  Note that
this method of obtaining the old data loses if SYS:DSKMAP hasn't
been kept up to date.  This will eventually be changed to be less
dependent on DSKMAP for the old data.  When this happens, the name
of the program may even change.  Anyway,  when it's done,  you need
to give the command 
	SEND @(M33)CRALST
	@PATLOG
to send the necessary mail.
That's all folks!






































                                       629
Text: RUB; Set/Clear Restricted User Bit in LUD                           page 1

The program (MPL)RUB will allow the user (with WF) to set or clear
the restricted user bit (RUB) in the LUD for either users in a 
given GAN or all users.
When the program is run, it asks "SET or CLEAR" and then it asks
for a GAN.  If no GAN is given (CR) then all users are affected.
The program opens the LUD in update mode which does not allow other
programs (such as updlud or noname) to change the LUD.

The effect of setting RUB for a user is to prevent him(her) from
logging in to the system durring STATES=100000 which may be set
by a user with OP license with the command "SCHED 100000".
Users with and without shut-override are effected the same so it
is possible to lock out even OPER!  (this may be a bug)
When a user with RUB set tries to log in durring STATES=100000,
LOGINN prints the messaged "RESTRICTED" and zaps the circuit.










































                                       630
Text: SCAN; Scan stream accounting files                                  page 1

SCAN allows the stream files to be scaned selectively extracting
only wanted events.  The following criteria may be used to select
events to be listed:
    User name logged in to
    Program run from given directory
    Program run of given name
    User logged in to given node
    User logged in to given port on node
    Accesses to programs not in AUN directory
    Accesses to programs other than (SYS)RPG
    All of a given type (or group of types) of records

All querys accept a <cr> to mean all.
The program may be detached if output is routed to a file.
Below is an example:










































                                       631
Text: SCAN; Scan stream accounting files                                  page 2

.r(mpl)scan
Version 2
Output to (File,Term or Both): T
Username to watch (or <cr>): GBLOOD
Program to watch ([(user)][file]): 
Exclude owner? 
Exclude SYS:RPG? 
Node to watch (or <cr>): 
Port to watch (or <cr>): 
Start date (mon,day,yr): 4,16,79
Number of days: 1
Include record types (type list, "?" or <cr>): ?
  RUN? y
  EXIT? y
  NEXIT? y
  SETNAM? y
  START? y
  REENTER? y
  DDT? y
  PJC? y
  XCHARGE? y
  INIT? y
  PUTLSA? y
  SETLIC? y
  SETE? y
  RUNLIC? y
  LOGIN? y
  LOGOUT? y

Reading file 041679.SAT
APR 15,79 17:23:54 #4(GBLOOD) LOGIN WCO6E:3 TID=E
APR 15,79 17:23:54 #4(GBLOOD)  PJC=GBB,VFY=0
APR 15,79 17:23:54 #4(GBLOOD) SETLIC (SYS)LOGINN LIC=0,,0
APR 15,79 17:23:54 #4(GBLOOD) NEXIT (SYS)LOGINN
APR 15,79 17:23:56 #4(GBLOOD) RUN (SYS)SETE
APR 15,79 17:23:56 #4(GBLOOD) PUTLSA (SYS)SETE03 LIC=0,,0
APR 15,79 17:23:59 #4(GBLOOD) NEXIT (SYS)SETE
APR 15,79 17:24:06 #4(GBLOOD) RUN (SYS)SETE
APR 15,79 17:24:06 #4(GBLOOD) PUTLSA (SYS)SETE03 LIC=0,,0
APR 15,79 17:24:09 #4(GBLOOD) SETE (SYS)SETE LIC=0,,775617
APR 15,79 17:24:09 #4(GBLOOD) NEXIT (SYS)SETE
APR 15,79 17:24:15 #4(GBLOOD) RUN (SYS)NONAME LIC=777617,,775617
APR 15,79 17:27:35 #4(GBLOOD) NEXIT (SYS)NONAME
APR 15,79 17:27:37 #4(GBLOOD) RUN (SYS)LOGOUT LIC=777617,,775617
APR 15,79 17:27:37 #4(GBLOOD) SETLIC (SYS)LOGOUT LIC=775617,,775617
APR 15,79 17:27:37 #4(GBLOOD) SETLIC (SYS)LOGOUT LIC=777617,,775617
APR 15,79 17:27:38 #4(GBLOOD) LOGOUT
End of SAIL execution









                                       632
Text: SCRIPT; Print U W SCRIPT files                                      page 1

The (MPL)SCRIPT program will take a UWSCRIPT file or other file which
contains only line feeds and no form feeds.  It will print the file on
the terminal ommiting trailing lf's on a page and replacing every 66'th
line feed with a form feed.  The net effect is to print the same file
but to allow for recovery from feed failures or line noise.  To start
the listing on a page other than at the beginning, one may end the
input with append an <escape><page number> to the input string.


















































                                       633
Text: SNARF; Snarfs job from another terminal                             page 1

The SNARF program will perform the following functions:
	Poke JBTPRV of other job to Continue on Disconnect
	do a Hang uuo to detach the other job
	Poke JBTPRV back to what it was
	do an ATTACH uuo to attach to the other job
	log out the old job

It requires WC,RC,SY,JL licenses.

















































                                       634
Text: SPELL; Checks and corrects spelling                                 page 1



The text of this comment is intended to  provide most of the external
documentation for this program.  Since this program operates slightly
differently under TENEX, some  of the documentation has been  labeled
TENEX or TOPS-10 as appropriate. 


				Ralph E. Gorin
				Artificial Intelligence Laboratory
				Computer Science Department
				Stanford University
				Stanford, California 94305












































                                       635
Text: SPELL; Checks and corrects spelling                                 page 2



	SPELL: Spelling Check and Correction Program


SPELL is  a program designed  to read text  files and check  them for
correctness  of spelling.   In  addition to  the spelling  check, the
program provides  a means  for correcting  words that  it thinks  are
misspelled.  This  program was written by Ralph E.  Gorin of Stanford
University Artificial Intelligence Laboratory.  It has been augmented
by William Plummer and Jerry Wolf of BBN. 

In its normal mode of usage, SPELL reads  through an input text file,
asks the  user about each word it does  not recognize, and creates an
output file in  which corrections have  been made.   Provisions exist
for:

   a. Loading, incrementally augmenting, and dumping special
      dictionaries.  Such dictionary files are ordinary text
      files  which may  be  listed and  edited.  Arbitrarily
      many dictionaries  may be loaded,  subject   only   to
      availability of (virtual) main memory. 


   b. Training modes where SPELL scans  an  input  file  and
      makes a list of all words it does not recognize.  Such
      a list can be used as an auxiliary dictionary.

   c. Termination of spelling checking part  way  through  a
      file  and  a way of picking up where you left off in a
      later session.

Other features of the program are:

   a. SPELL will read either  SOS, TECO or E/TV files.   The
      corrected  output will  be written  in the  same mode,
      except E/TV directories must  be deleted.   Dictionary
      files may be SOS, TECO or E/TV format.

   b. An  exception  file  may also  produced.   This   file
      contains  all words SPELL did not recognize (and their
      contexts), all corrections, plus all words which SPELL
      recognized  by stripping off prefixes and/or suffixes.
      This last class of words appears marked  with  "["  or
      "]" to denote prefix- or suffix- removal.  E.g., 
        FOOING]
        [PREFOOED]
      The  affix-stripping  algorithms  are  not   foolproof
      (e.g.,  CHOSES] ),  so  this gives a quick way to scan
      for the exceptions which may slip through.

   c. SPELL keeps track of all  word  spellings  which  were
      corrected by the user.  Subsequent occurrences of such
      are automatically corrected by the program.   This  is
      reported  to the user by a typeout of "MISSPELLING ==>


                                       636
Text: SPELL; Checks and corrects spelling                                 page 3

      CORRECTION".

   d. When a word is corrected,  the  output  file  will  be
      rewritten with either upper case, lower case, or mixed
      (first  letter  upper,  the   remainder   in   lower),
      depending on the cases of the first two letters in the
      original word.  Note: this will be incorrect  in  some
      cases (e.g., McCarthy).

















































                                       637
Text: SPELL; Checks and corrects spelling                                 page 4



Using SPELL

Type the  command  R SPELL (under  TENEX,  type "SPELL" to the EXEC). 
All typeins to  SPELL must be terminated by carriage return.  (In the
TENEX version, editing by ^A, ^Q, and ^R may be done.)

It  will first ask: "Do  you want to augment  the dictionary?" If you
wish to use only  the main dictionary  presently in memory, type  "N"
<cr>.  You can then skip the next paragraph. 

If in  fact  you have  an auxiliary  dictionary  (of specific  terms,
infrequently used  words, etc.) you wish to use,  type "Y" <cr>.  You
will then be asked for the name of your dictionary file.   The format
of the file is  one dictionary entry (word) on a  line; words must be
composed  of alphabetic  characters  or apostrophe  and less  than 40
letters long.   The dictionary  entries need  not be in  alphabetical
order.  A misspelling-correction pair  may occur one line in the form
"MISSPELLING>CORRECTION".   After typing  the file  name you  will be
given  the  option   of  marking  the  new  entries   as  incremental
insertions.   If the new entries are  marked as incremental then they
will be included in an incremental  dump of the dictionary.  To  have
the new entries marked as incremental, type "I" <cr>; otherwise, type
<cr>.   (If any of the words in your auxiliary dictionary are already
in the main dictionary then no second copy of the  word will be made.
Hence, if your  words are marked as incremental  then in a subsequent
incremental dump, any words that were already in the dictionary  will
not be  dumped.)  After loading an  auxiliary dictionary the  program
will type  the  new total  number of  words in  the dictionary  (and,
except under TENEX, the  amount of core used).  You will then have an
opportunity to save the new core image (normally you won't  do this).
You will  again be asked, "Do  you want to augment  the dictionary?",
thus  allowing  you  to  enter  a  number  of auxiliary  dictionaries
(limited only by the availability of virtual core). 

You will then be given an opportunity to  specify zero or more switch
options.  The meanings of the switches are:

T    Training mode.  SPELL will treat the input  file  as  a
     training  set  rather than a file to be corrected.  All
     words in the file which are unfamiliar to SPELL will be
     entered  in  the  dictionary as incremental insertions.
     After SPELL finishes reading the file, the user has  an
     opportunity to dump all the words that were inserted in
     this manner.   The  resulting  list  of  words  may  be
     edited,  and  any  words  which  are  incorrect  may be
     deleted.  Then this file can be used  as  an  auxiliary
     dictionary while correcting the original source file.

     This feature is provided for the purpose of easing  the
     problem  of creating a specialized dictionary of jargon
     and infrequently used words.

Q    Q-Training mode.  In this mode, all words in the source


                                       638
Text: SPELL; Checks and corrects spelling                                 page 5

     file  that are unfamiliar to SPELL will be added to the
     dictionary; the difference is, if  any  "new"  word  is
     "close  to"  some old word, the new word will be output
     to the exception file.  The exception file will contain
     only  such  words.   In  this way, the spelling checker
     calls to your attention the fact that these  words  may
     be misspelled.

N    No suffix removal.  This  switch suppresses the attempt
     to  remove suffixes  to  recognize a  correctly spelled
     root word.  SPELL will then find many more questionable
     words,  but  it  will  work  more  correctly  than  the
     heuristic affix removal. 

A    No prefix removal.  This  switch suppresses the attempt
     to  remove prefixes  to  recognize a  correctly spelled
     root word.

U    Accept Upper case mode.   In this mode, all  words that
     are written entirely  in upper case will be inserted in
     the dictionary.  This is useful when a  manuscript file
     contains jargon  terms that are written  in upper case,
     and text-processor (e.g., PUB, TJ6, or RUNOFF) commands
     in upper case.   Before reading  the input file,  SPELL
     will ask  for a dictionary number to  use for all words
     inserted   this  way   (see   "How  to   Use   Multiple
     Dictionaries"). 

P    Pickup mode.  After specifying input  and  output  file
     names,  you  will  be  asked to specify a page and line
     number for pickup.  The effect is to  suspend  spelling
     checking  until  the  page  and line specified.  When a
     user has a partially corrected  file,  this  mode  will
     enable  him  to  skip over the portion of the file that
     has already been corrected.  The  input  file  will  be
     copied  without  checking  to the output until the page
     and line specified, at which  point  spelling  checking
     begins.

	Next you will be asked for the name of the file that you want
to check for spelling errors.  File names are specified in the  usual
format  of "name.ext[prj,prg]" where name is the filename, ext is the
file extension, and [prj,prg] is the name of the  file  owner,  which
may be omitted if the file is on the present user's disk area. If you
omit the file name then you will immediately enter the exit  sequence
(see below).

After specifying the switches, you will be asked to specify the names
of the  file to be checked, the corrected file  to be output, and the
exception file.   In the TENEX  version there  are always output  and
exception files; by  default the output file will have  the same name
and  extension as  the input,  and the  exception file will  have the
extension "EXCEPTIONS".  In  non-TENEX versions there are  no default
names, and output or exception files may be omitted. 



                                       639
Text: SPELL; Checks and corrects spelling                                 page 6

The exception file, should  you chose to make one,  will contain each
line on which an error was found, the indication of the page and line
number, and the suspect word.   Words accepted via the affix  removal
heuristics will also appear in the exception file. 

After you have specified all the files, the program will respond with
"Working..." and start checking the input file for spelling errors. 

When  the spelling  checker  encounters  a  word that  isn't  in  the
dictionary, it will  type the page and line number, the line in which
the word occurs, and the word itself.  You will be given a  choice of
actions to take: 


A    Accept this word, this one time. 

I    Accept this word and insert it  in  the  dictionary  so
     that  subsequent  occurrences  of  this  word  will  be
     recognized and accepted.  Words that are inserted  this
     way  are  marked as incremental insertions and they may
     be dumped to form an auxiliary dictionary.

R    Replace this word.  Type "R" <cr> and the program  will
     ask  you  for the replacement word.  If the replacement
     word is not already in the dictionary, the program will
     give you an opportunity to insert it.

     If the misspelling is due to an omitted  space  between
     words, use the "R" command to retype the words with the
     space.

     If the replacement  word contains no spaces  or illegal
     characters, you  will be asked if you  wish to add this
     replacement  to  the  list  of   misspelling-correction
     pairs. If you do add the replaced word as a misspelling
     then all  subsequent occurrences  of that word  will be
     replaced with the replacement string. 

X    Accept  this  word  and  finish.   The  word  will   be
     accepted.  Then the remainder of the input file will be
     copied without checking to the output file.

W    Save  my  incremental  insertions.   After   you   type
     "W" <cr>  you  will  be asked for a file name.  Then an
     incremental dump of the dictionary will be written into
     the  file.   After  the  dump  is complete you may then
     decide what to do with the excepted word.

L    Load  an auxiliary  dictionary.   The  present word  is
     accepted  and you  will be  asked for  the name  of the
     dictionary  file to  load.    This  is  useful  if  you
     encounter  a  jargon  term   but  forgot  to  load  the
     appropriate dictionary. 

D    Display the line and offending word  again.   The  line


                                       640
Text: SPELL; Checks and corrects spelling                                 page 7

     that  is  displayed will not have any corrections shown
     in it.  If a line has more than one error the line will
     only  be  typed  once.   Subsequent errors on that line
     will cause only the particular word to be typed, unless
     this command is used.

S    If this choice is offered then the spelling checker has
     discovered   several   words  that  could  be  possible
     corrections of this word.  If you  type  "S" <cr>  then
     you  will  enter a mode where you can look at the words
     that were found by the program and (optionally)  select
     one of the words from the list.

     When you enter this selection submode, the  first  word
     in  the  list  of  possible  corrections  will be typed
     followed by an asterisk.  Then you have  the  following
     choices:

     C<cr>       Use this word as the Correction.

     <cr>        Show the next possible  choice.   When  you
                 exhaust the choices you are returned to the
                 outer mode, and asked again.

     ^<cr>       Back up in the list.

     <alt mode>  Escape from this submode and return to  the
                 outer command mode.

In general, when  a word is  found that is  not in the  dictionary, a
brief message,  either "Type A,I,R,X,W or D"  or "Type A,I,R,X,W,D or
S" will  be typed to  remind you  of the  possible choices.   In  the
special  case   where  the  program  finds   precisely  one  possible
correction  for the word, then the message,  "I guess <word>.  Type C
to make this  correction or A,I,R,X,W  or D" will  be typed.  If  you
type "C" <cr> then the indicated substitution will be made; otherwise
you have the usual choices. 

Note that  when  you  make a  correction  via  the C  command  or  by
selection from the list  presented by the S command,  that correction
is   entered  in  the  misspelling-correction   list  and  subsequent
occurrences of the same misspelling will be corrected automatically. 

When the input file is  exhausted, all files are closed, the  program
types "Finished.", and  the exit sequence is entered.   The user then
has several options:

E    Exit now.

S    Save this core image.

C    Go back and correct another file.

A    Augment the dictionary, set new switches,  and  correct
     another file.


                                       641
Text: SPELL; Checks and corrects spelling                                 page 8


D    Complete dump of the dictionary.  This  will  create  a
     very large file, and it is not usually recommended.

I    Incremental dump of the dictionary.  All the words that
     were inserted while running the program are dumped to a
     file.  The user specifies  a file name (the default  is
     WORDS.LST).    This incremental  file  is  in a  format
     suitable  for  editing  or  for  use  as  an  auxiliary
     dictionary.  The words in this file are in alphabetical
     order. 

X    This command is used  to  get  a  trace  count  of  the
     program.   It  is  for diagnostic purposes only, and is
     displayed as a possible choice only if the program  has
     been assembled as a debugging program.









































                                       642
Text: SPELL; Checks and corrects spelling                                 page 9



How to Use Multiple Dictionaries

SPELL has a set  of features whereby the user can  cause the creation
of several disjoint  incremental dictionaries.  In this way, the user
may collect several dictionaries  of special terms.  Internally,  all
dictionary  entries   are  considered  equivalent  as   regards  word
searches.  The distinction between dictionaries becomes relevant when
doing incremental dumps  (the I command  during the exit sequence  or
the W command while in the middle of execution).  When an incremental
dump is requested,  the user may  specify a number,  e.g., W9,  which
selects the particular incremental dictionary to be  dumped.  In this
example, dictionary 9 will be dumped. 

Dictionary 0  is the main dictionary.  Words  cannot be added to this
dictionary, except by reading an  auxiliary file.  In general,  words
that are inserted incrementally are  marked as being in dictionary 1.
All  words that are incremental insertions  in the dictionary will be
marked in dictionary 1, unless the user specifies otherwise. 

	When requesting an incremental dump, the user may specify the
particular dictionary to dump.  This is allowed in two cases:

The following places are where the user may  specify which dictionary
to add to:

    1.  When loading an auxiliary dictionary,  if  the  user
        responds with "In" to the question about marking new
        entries as incremental, then the new entries will be
        marked   in   dictionary   number   n  (where  n  is
        interpreted as decimal and should be less than 31).

    2.  After a word has been rejected, type "In" to  insert
        the word in dictionary number n.

    3.  After replacing a word, if the replacement is not in
        the   dictionary,  then  type  "In"  to  insert  the
        replacement into dictionary n.

When  requesting  an  incremental dump,  the  user  may  specify  the
particular dictionary to dump.  This is allowed in two cases:

    1.  After some word has been rejected, the command  "Wn"
        will cause dictionary number n to be dumped.

    2.  During the exit  sequence,  the  command  "In"  will
        cause dictionary number n to be dumped.

In all five cases above, if n is either 0 or omitted, then it will be
taken as being 1. 

Caution!  There  is  no  provision  in  SPELL for  remembering  which
dictionary  numbers have  been  used.    Therefore,  it  remains  the
individual user's responsibility  to remember the numbers  of all the


                                       643
Text: SPELL; Checks and corrects spelling                                page 10

dictionaries that  he creates.  (Forgetting the number will mean that
the forgotten dictionary can not be dumped incrementally.   The words
in a forgotten  dictionary will still be available,  but the only way
to actually get them dumped out is to dump the entire dictionary). 

Hint: In the course of correcting a file, it is likely that you  will
be asked  about words  which you  wish to  have accepted during  this
file,  but which  you don't  wish to have  saved in  your incremental
dictionary(s).  In these cases,  simply insert them in a  "throwaway"
incremental dictionary  which you  don't bother  to dump  when you're
finished. 














































                                       644
Text: SPELL; Checks and corrects spelling                                page 11



Abnormal Conditions

While  the program  is running it  is possible  that certain abnormal
conditions may obtain.  The usual response of the  program is to type
some sort  of error message.   The following  is a list  of the error
messages in SPELL, with an indication of the severity of the error. 

    Illegal dictionary entry: <word>
          This error occurs if an entry in a dictionary file
          exceeds  40  (decimal)  characters.   The  word is
          ignored.

    0 LENGTH WORD AT HASHCP
          Somebody just asked to compute the hash address of
          an  empty  word.  The program continues, but there
          is a possibility of error.

    HASHING ERROR
          Somebody asked for the hash address of a word that
          doesn't  begin  with  letters or apostrophe as the
          first two characters.  This is a fatal error;  the
          program halts.

    DEVICE DATA ERROR (OUTPUT)
          This message means  that  while  writing  a  file,
          something screwed up.  The program halts.

    DEVICE ERROR (INPUT)
          The input file is screwed up  in  some  way.   The
          program halts.

    Internal confusion in the spelling checker.
          Called from location <loc>.  The spelling  checker
          has  discovered  a  (possible) bug in itself.  The
          program halts, but the  user  may  type  CONTINUE.
          Please   note   the  location  mentioned  and  the
          circumstances that evoked the message.

    Dictionary number too large, Maximum is 30.
          This message means  that  the  user  attempted  to
          select  for  insertion  or  dumping  a  dictionary
          beyond the range of  allowed  numbers.   The  user
          will get another chance to do the right thing.

    Unrecognized switch.
         The user  asked  for an  unknown switch.   He  must
         repeat the entire switch specification again. 

The following messages occur only in the non-TENEX version:

    Illegal Character in Scan.
         This is a message from the  routine that reads file
         names.  You  will be asked to try retyping the name


                                       645
Text: SPELL; Checks and corrects spelling                                page 12

         (non-TENEX only). 

    File not Found. <filename>
         The indicated  file could  not be  found. The  user
         gets to specify some other file. 

    Enter failed on: <file name>
         An  enter uuo  failed while  trying  to select  the
         indicated  file for output.   The  user may specify
         another name. 

    Open Failed on Device <dev>:
         You asked for a device that  doesn't exist or isn't
         available to the program.  You will get a chance to
         ask for something else. 

    Insufficient Core Available.
         SPELL  requires  more  core   while  expanding  the
         dictionary  but  none is  available.    The program
         exits. 





































                                       646
Text: SPELL; Checks and corrects spelling                                page 13



		Appendix - Internal Workings

	Data Structures - Hashing Function

The data structure is the heart of the program, and any efficiency in
the  program  operation  is due  primarily  to  this  choice of  data
structure.   The data  structure is  basically a  hash coding  scheme
where dictionary entries are accessed  by both their alphabetic order
and  by their length.  There is a base  table that contains 26 * 26 *
10 halfwords; this table gives  anchors for 6760 chains.   Each chain
contains exactly all  words with the same two  first letters and some
given length.  To be precise, the hashing function is:
	(L1*26+L2)*10+min(WL-2,9),
where L1 and L2  are numeric representations of the  first and second
letters  (A=0, B=1, ...  Z=25, and apostrophe also is 25), and  WL is
the  length of the  word in characters.

This scheme was chosen since it provides  both  an  efficient
way  to probe the dictionary and a quick way to select a small subset
of all words that are close to a given input word.

	Data Structures - Dictionary Entry Format

Entries  are added  to  the  appropriate  hash chain  by  the  INSERT
subroutine.   Entries are added to the head  of the chain, saving the
time and effort of  searching to the end of  the chain.  This  scheme
means that the last item entered on a chain is the first item seen by
a search. The format of the entry is given by:

	Word 0:	xwd flags,nextlk
	Word 1: 5 bit representation
	Word 2: 5 bit representation
		...

There  are precisely  1+ceiling(WL/7)  machine  words used  for  each
dictionary  entry.   WL is  the  length of  the entry  in characters.
Nextlk is the pointer to the next entry in the list, or zero  if this
is the last in  the chain.  The left side  contains flags; bits 13-17
specify  the  incremental dictionary  number  (0 for  main,  1-30 for
incremental dictionaries, and 31 for misspellings).   One can imagine
that bits 5-12 could be  used to store semantic information about the
entry.  The unused bytes in the  last word of an entry must be  zero,
since they are used to stop the routine that converts the five bit to
7 bit. 

Misspellings are entered  in the main dictionary with the incremental
dictionary number  set to  decimal 31.   If  a word  is  marked as  a
misspelling then  the word  preceding the flags  and link  contains a
pointer  to the flag and  link word of  the correction.  Misspellings
may be  deleted before  the full  dictionary is  dumped, or  whenever
SPELL  asks about  saving the  core image.   The  space  obtained  by
deleting misspellings  is not  reutilized at  present, although  that
feature could be added without great difficulty. 


                                       647
Text: SPELL; Checks and corrects spelling                                page 14


Spelling Correction Heuristics

There are four kinds  of errors that the program attempts to correct:
	1. one wrong letter.
	2. one missing letter.
	3. one extra letter.
	4. two transposed letters.

For a wrong  letter in the  third or subsequent character,  all words
that  are candidates must  exist on the  same chain  that the suspect
word hashes to.   Hence,  each entry  on that chain  is inspected  to
determine  if the  suspect  differs  from the  entry  by exactly  one
character.  This is accomplished by an exclusive-or (XOR) between the
suspect and  the dictionary.   Then  a JFFO  instruction selects  the
first  non zero byte  in the  XOR.   This byte is  zeroed and  if the
result is all zero then the dictionary word differs from the  suspect
in only one letter.  All such words are  listed at CANDBF, where they
can be inspected later. 

For  a wrong  letter in  the first or  second character,  the program
tries varying  the  second letter  through  all 26  possible  values,
searching for  an exact match.   Then all  26 possible values  of the
first  letter  are tried,  after  setting  the second  letter  to its
original value.   This  means that 52  more chains  are searched  for
possible matches. 

To correct transposed letters, all combinations of transposed letters
are tried.  There  are only WL-1 such  combinations, so it is  fairly
cheap to do that. 

To correct  one extra letter,  wl copies of  the word are  made, each
with  some  letter  removed.   Each  of  these is  looked  up  in the
dictionary.  This takes WL searches. 

To correct one missing letter, WL+1 copies of the word are made, each
time inserting  a null character  in a  new position in  the suspect.
The  null character is  never part of  any word, so  the suspect word
augmented by an embedded  null can be thought  of as a word  with one
wrong  letter (the null)  then the  algorithm for matching  one wrong
letter is used.  If the  first character is omitted, all 26  possible
first  characters are  tried.   Also,  26 more  words  are formed  by
varying the second character in case that had been omitted. 














                                       648
Text: SPELL; Checks and corrects spelling                                page 15



		Appendix - Assembly Instructions

There are three assembly time switches, TENEX,  STANSW and SANSW.  If
STANSW is set then there are SIXBIT ppn's and the SWAP UUO; if STANSW
is zero, then normally there are octal ppn's except if SANSW  is set,
in which case, there  are decimal ppn's.  If the  TENEX switch is set
it overrides the others and TENEX style file names are used.  Compile
the program  using MACRO or  FAIL and load  it.   When you start  the
program the  first time after  loading, it will  demand a dictionary.
Use the file SLOVAR (at  BBN, SPELL.SLOVAR), or anything else  that's
handy. 

Save the resulting core image when the dictionary load is complete.  

There  are various  other  assembly  switches,  but they  default  to
reasonable settings, and you meddle with them at your peril. 







































                                       649
Text: SPELL; Checks and corrects spelling                                page 16



		Appendix - Possible Expansions

No  program  that  is  still in  use  is  complete.    The  following
paragraphs include suggestions of possible future work in this area. 

The dictionary  should be expanded to include  all suffixes for every
word.  There  is a feature  that strips suffixes  for the purpose  of
finding the stem of the word in the dictionary, but this heuristic is
error prone and incompatible with later attempts to correct the word. 

If  semantic information  were included  in the dictionary,  it could
help guide the selection of a correction. 

Either of these would  require a major restructuring of  the program,
since  the dictionary would  no longer  fit in  core.   Probably, the
dictionary should be kept on the disk, with a data structure  similar
to the one used in core, but arranged to  keep each hash chain in the
minimum number of disk pages, so that searches through the dictionary
can be made efficient. 




































                                       650
Text: SPOOL; A better way to spool files                                  page 1

Tired of the cretinous SPOOL program?  Use (MPL)SPOOL!
This allows abbreviated commands to be entered to SPOOL.
(MPL)SPOOL actually builds a command file and runs the
real spool (on SYS).  The program expects to find a file
SPOOL.DEF on your AUN directory which contains your default
options (such as your name and extension).  These are only
defaults and are used only if the are not overriden by the
commands entered at run-time.

















































                                       651
Text: SPOOL; A better way to spool files                                  page 2

Below is the syntax for a command to SPOOL.  The SPOOL.DEF file
should contain only a <switch-list>.

<command-line> ::= <file-list>[/<switch-list>]
<file-list> ::= <file> [,<file-list>]
<switch-list> ::= <switch> [/<switch-list>]
<switch> ::= NAme=<requestor's-name>  |
        PHone=<requestor's-phone>  |
        PRoject=<project-code>  |
        PAper=<type-of-paper> [-<number-of-parts>]  |
        Tty  |  Big  |  Small  |
        Head  |  NOHead  |  Lines=<lines-per-page>  |
        Fortran  |  NOFortran  |
        Indent=<margin> 
        NODe=<node-number>  |  Center  |  Remote  |
        Deliver=<delivery-method>  |
        Address=<delivery-address>  |
        INStructions=<additional-delivery-instructions>  |
<delivery-method> ::= Mail | Officemail | Courier | Pickup






































                                       652
Text: SPOOL; A better way to spool files                                  page 3

An example of running SPOOL.  Notice that it returns all of the
information normally returned by SPOOL.  For canceling and so
forth, you must use the real SPOOL.

.r(mpl)spool
Version 3
*(mpl)copy.sai/pap=tty
    5  PAGES        (MPL)COPY.SAI
Total of 1 files, 5 pages: request # 37654
*q
.














































                                       653
Text: SWEET; Master Cref Program                                          page 1

SWEET IS A PROGRAM DESIGNED TO PERFORM LIBRARY LIKE
FUNCTIONS ON CROSS REFERENCE FILES. IT WILL MAINTAIN A
MASTER FILE OF CROSS REFERENCE DATA AND MERGE IN A SET
OF CROSS REFERENCE DATA FRO A NEW PROGRAM OR REPLACE THE DATA
FOR AN OLD PROGRAM WITH UPDATED INFORMATION. THE FILES
WHICH SWEET USES ARE GENERATED BY CREF WHEN COMPILATION IS
DONE WITH THE       /CROSS (MONITOR)       OPTION.
THIS CAUSES CREF TO GENERATE FILES WITH THE EXTENSION .SWT
WHEN IT PREPARES THE CROSS REFERENCE OUTPUT. THESE FILES
CONTAIN BINARY INFORMATION ABOUT THE CROSS REFERENCE. THE MASTER FILES
CREATED AND USED BY SWEET HAVE THE EXTENSION .SWM.

WHEN SWEET IS RUN, IT FIRST REQUESTS THE NAME OF THE
MASTER FILE BEING USED. IF NO EXTENSION IS TYPED, THE EXTENSION
SWM IS ASSUMED. IF THE MASTER FILE DOES NOT EXIST, SWEET
WILL REQUEST CONFIRMATION THAT A NEW MASTER FILE IS BEING
PRODUCED. CONFIRMATION SHOULD BE Y<RETURN>.

SWEET NEXT ASKS FOR THE OUTPUT NAME. IF NO NAME IS GIVEN, THE
MASTER FILE NAME IS ASSUMED. AT THIS POINT, 4 POSSIBLE
OPTIONS CAN BE GIVEN WITH SWITCHES:

/A	AUTOMATIC MODE (SEE BELOW)
/L	OUTPUT MASTER CROSS REFERENCE LISTING
/S	OUTPUT A LIST OF SYMBOLS REFERENCE ONLY ONCE IN A GIVEN
		PROGRAM
/M	OUTPUT A LIST OF ALL SYMBOLS IN MULTIPLE INTERNAL
		STATEMENTS IN A GIVEN PROGRAM

IN /L, /S, AND /M MODE NO FURTHER QUESTIONS ARE ASKED. THESE OPTIONS
WILL ACCEPT A DEVICE NAME AS PART OF THE OUTPUT STRING. NOTE THAT
THE EXTENSION SWM IS STILL ASSUMED UNLESS ANOTHER IS GIVEN.

FOR A LISTING IN /L MODE, INFORMATION FOR ALL REFERENCES IS PUT
OUT FOR EACH SYMBOL IN EACH PROGRAM. THE SYMBOL NAME IS
OUTPUT AND THEN THE PROGRAM NAME. (IF A BLOCK NAME
EXISTS FOR FAIL OR SAIL, IT IS OUTPUT BETWEEN THE SYMBOL AND
PROGRAM NAME).

IN /S MODE, THE PROGRAM NAME IS OUTPUT FIRST, THEN THE CROSS
REFERENCE NUMBER OF THE REFERENCE THEN THE SYMBOL. IF THE
PROGRAM NAME OR LINE NUMBER IS THE SAME AS THE
PREVIOUS LINE, IT IS NOT PRINTED.

/M MODE LOOKS LIKE /S BUT EACH OCCURANCE BUT THE FIRST
WILL BE LISTED.

IN NORMAL MODE, SWEET NOW ASKS FOR THE NAMES OF THE NEW FILES
TO BE INSERTED OR REPLACED IN THE MASTER FILE. AN EXTRA <RETURN>
IS GIVEN AFTER THE LAST FILE NAME. A MAXIMUM OF 13 FILES MAY
BE GIVEN.

IN AUTOMATIC MODE, SWEET WILL AUTOMATICALLY INSERT (REPLACE)
IN THE MASTER FILE, ALL FILES IN THE DIRECTORY WITH
THE EXTENSION SWT. IT WILL THEN GENERATE AN OUTPUT LISTING WITH


                                       654
Text: SWEET; Master Cref Program                                          page 2

THE SAME NAME AS THE MASTER FILE BUT THE EXTENSION LST.

NOTE THAT AFTER A 'NEW' FILE IS INSERTED IN THE MASTER FILE
IT IS DELETED.





















































                                       655
Text: SYMLOK; Microfiche Location Program                                 page 1

SYMLOK
------

DESCRIPTION
-----------

SYMLOK IS A PROGRAM WHICH LOCATES MACROS, SYMBOLS, AND OPCODE
DEFINITIONS AND REFERENCES IN A GIVEN SET OF PROGRAM SOURCE
MODULES WHICH HAVE BEEN SPOOLED FOR REPRODUCTION  ON A
SET OF MICROFICHE.  IT USES THE MASTER FILES PRODUCED BY
SWEET AND FSHSPL TO ACCOMPLISH THIS.
SYMLOK WILL ACCEPT AN ITEM NAME AND PRINT THE MODULE NAMES,
CREF LINE NUMBERS, PAGE NUMBERS, AND FICHE LOCATIONS
WHERE THE ITEM OCCURS.  OPTIONS EXIST TO SPECIFY THE ITEM ENTERED
AS BEING EXCLUSIVELY A MACRO NAME, SYMBOL NAME, OR OPCODE NAME.
OPTIONS EXIST TO LIMIT ITEM SEARCHES TO A SPECIFIC SET OF PROGRAM
SOURCE MODULES. THERE ARE ALSO OPTIONS TO CONTROL THE
TYPE OF INFORMATION RETURNED FOR AN ITEM (PROGRAM SOURCE MODULE NAME,
PAGE NUMBER, FICHE LOCATION).  IT IS ALSO POSSIBLE TO INSTRUCT SYMLOK
TO LIMIT ITEM INFORMATION PRINTOUTS TO INCLUDE ONLY
LOCATIONS IN WHICH THE ITEM IS DEFINED.




































                                       656
Text: SYMLOK; Microfiche Location Program                                 page 2

SETUP INSTRUCTIONS
------------------

OBTAIN COPIES OF THE SWEET MASTER FILE (USUALLY HAS THE EXTENSION
"SWM") AND THE MASTER FILE OUTPUT BY FSHSPL (USUALLY
HAS THE EXTENSION "MFS") FOR THE SET OF MODULES
DESIRED. CHOOSE A SINGLE FILENAME TO IDENTIFY
THE SET OF MODULES (FOR EXAMPLE, MP030D FOR THE P030D MONITOR)
AND RENAME THE SWM AND MFS FILES TO <CHOSEN FILENAME>.SWM
AND <CHOSEN FILENAME>.MFS.















































                                       657
Text: SYMLOK; Microfiche Location Program                                 page 3

OPERATION
---------

RUN SYMLOK. IT WILL ASK THE NAME OF THE MASTER FILE TO
BE USED.  BE SURE THAT BOTH THE .SWM AND .MFS FILE
OF THE FILENAME SPECIFIED WERE MADE FROM
THE SAME SET OF MODULES.  IF THE SWM FILE IS NOT IN THE FILES
AREA TO WHICH YOU ARE CONNECTED, THE MESSAGE "CANNOT FIND
MASTER FILE" WILL APPEAR AND SYMLOK WILL ASK FOR THE MASTER FILE NAME AGAIN.
IF THE .MFS FILE IS NOT IN THE FILES AREA, THE MESSAGE "NO MICRO-FICHE INFORMATION FILE"
WILL APPEAR AND SYMLOK WILL CONTINUE NORMALLY (NOTE THAT THE
MICRO-FICHE LOCATION AND PAGE NUMBER INFORMATION WILL
NOT BE AVAILABLE IF NO MFS FILE IS PRESENT).

AFTER ASKING FOR THE MASTER FILE NAME, SYMLOK WILL PROMPT
WITH A "*".  THE FORMAT OF COMMANDS TO SYMLOK IS:
	/SWITCH/SWITCH <ITEM NAME>/SWITCH/SWITCH

SWITCHES APPEARING BEFORE ITEM NAMES ARE "STICKY" AND REMAIN
IN EFFECT UNTIL A /CLEAR SWITCH IS SEEN. SWITCHES APPEARING
AFTER THE ITEM NAME REMAIN IN EFFECT FOR THE CURRENT COMMAND
LINE ONLY.

THE CURRENTLY DEFINED SWITCHES ARE:

ITEM TYPE SELECTION SWITCHES
----------------------------

/MACRO - FIND REFERENCES AND DEFINITIONS TO ITEM ONLY WHEN USED AS A MACRO
	NAME.

/SYMBOL - ITEM IS SYMBOL ONLY

/OPCODE - ITEM IS OPCODE ONLY

NOTE THAT ONLY ONE OF THESE SWITCHES CAN BE IN EFFECT AT ANY GIVEN
TIME, I.E. /MACRO/SYMBOL WOULD NOT SPECIFY THAT ITEM NAME USED
AS EITHER SYMBOL OR MACRO SHOULD BE FOUND

APPEARANCE CONTEXT SELECTION
----------------------------

/DEFINITION - PRINT ONLY THOSE PLACES WHERE ITEM IS DEFINED

/LIMIT (MODULE1 MODULE2 MODULE3) - PRINT ONLY APPEARANCES
	OF THE ITEM THAT OCCUR IN THE SPECIFIED LIST OF MODULES

INFORMATION PRINTOUT SELECTION
------------------------------

/PAGE - PRINT OUT MODULE NAMES, PAGE NUMBERS, AND CREF LINE NUMBERS.
	PAGE NUMBERS APPEAR AS P<NN>, WHERE <NN> IS THE PAGE NUMBER
	AS IT APPEARS ON THE FICHE

/LOC - PRINT OUT MODULE NAMES AND FICHE LOCATIONS, WITH


                                       658
Text: SYMLOK; Microfiche Location Program                                 page 4

	A LIST OF CREF LINE NUMBERS OPPOSITE EACH FICHE LOCATION
	TO INDICATE LINES IN THE FICHE FRAME WHERE THE ITEM
	APPEARS

/FILE - PRINT ONLY PROGRAM SOURCE MODULE NAMES IN WHICH THE
	ITEM APPEARS.

DEFAULT CONTROL SWITCHES
------------------------

/CLEAR - RESETS DEFAULT SWITCHES BACK TO /SYMBOL WITH ALL OTHER
	SWITCHES TURNED OFF.  IN THIS STATE, SYMLOK WILL PRINT
	OUT MODULE NAMES AND CREF LINE NUMBERS FOR ALL OCCURENCES OF
	OF THE ITEM SPECIFIED WHERE THE ITEM IS USED
	AS A SYMBOL.

NOTE THAT SWITCHES MAY BE ABBREVIATED DOWN TO THEIR SHORTEST UNIQUE
FORM.

[END OF SYMLOK.INF]





































                                       659
Text: TAPE; Scan TITO tape directories                                    page 1

(MPL)TAPE.sav may be used to search for any number of wild-carded
file names on any number of TITO format tapes.  The files ######.TID
must exist in the current directory where ###### is the TID assigned
by the tape librarian for the tape.  These files should contain a
TITO written directory of the tape they are named after.  The program
will take "*" and "#" wild cards in file names seperated by commas.

Note that all copies of a given file are shown in the order in which
they appear on the tape.  It is up to the user to find the one he
wants if they are different.  When submitting a batch request, it is
helpful to the operators (and recommended) to give the tape position
of the file you want restored.













































                                       660
Text: TAPE; Scan TITO tape directories                                    page 2

.dir *.tid
7385    TID     131  23-APR-79
23360   TID       6  12-APR-79
18288   TID       7  26-SEP-78

.r(mpl)tape
Targets: pager.*,edit##.*
TID     CREATION DATE    CHKSUM POSITN  FILENM EXT 
7385    15:37 24-OCT-77  VAXVIC    721  EDITOR.MAC
7385    15:36 24-OCT-77  RIXSOX   1053  EDITOR.CMD
7385    17:44 10-AUG-77  GEVVOD   2001  EDITOR.OLD
7385    09:04 08-NOV-77  REYFUN   2020  EDITOR.MIC
7385    13:54 28-JAN-77  WIQLUS   2123  EDIT  .SAI
7385    10:04 03-MAY-78  TENVIQ   2204  EDIT  .COD
7385    10:35 08-MAY-78  SEMSEF   2205  EDIT  .MOD
7385    10:35 08-MAY-78  YENLUR   2206  EDIT  .CMN
7385    10:35 08-MAY-78  MAJDOQ   2207  EDIT  .SDM
7385    10:36 08-MAY-78  REQNIM   2210  EDIT  .CMT
7385    10:54 11-NOV-77  DIGNIY   3002  EDIT10.SHR
7385    10:51 11-NOV-77  YONCAG   3003  EDIT10.MAC
7385    10:54 11-NOV-77  JAMFEK   3004  EDIT10.MEM
7385    12:30 28-JUL-78  FITKON   4166  EDIT10.SAI
7385    11:25 03-OCT-78  HIBTAQ   5143  PAGER .SAI
7385    11:26 03-OCT-78  ZIYWUN   5144  PAGER .SAV
7385    01:10 12-DEC-78  BIFCIT   5431  EDIT10.INI
7385    21:10 19-SEP-78  XUXPAS   7122  EDIT10.LRC
7385    13:55 05-DEC-78  VAGMON   7125  EDIT10.MAC
7385    13:58 05-DEC-78  KOFGOX   7127  EDIT10.BUG
End of SAIL execution




























                                       661
Text: X1200; Xerox 1200 tape writer                                       page 1

This program will write a X1200 formatted EBCDIC tape for use
on the X1200 printer.  The format of the tape is documented 
elsewhere.  The program asks for a tape drive name and sets the
density to 1600 bpi (no choice).  It then will accept file names
to be written to the tape.  The first page of each file contains
the file name overlaid on the first page of whatever is in
X1200.CVR (the cover page).  No formatting is done by the
program except that it allows a variable left and top page margin.
It is recommended that the left margin be a multiple of 8 for
the sake of tabs.  The top margin works out good at about 3 or 4.
The pages are printed by the X1200 in landscape format (sideways)
on 8.5x11 inch bond.  66 lines of 132 characters (same as big
LPT paper) may be put on a page (less margins).
The program will accept command files containing the files to
be storred on the tape.










































                                       662
Text: PIP; DEC Peripheral Interchange Program                             page 1

A note about rewinding magtapes using PIP:  I don't remember how
I found out about this command, but it was useful when I was
debugging magtape SAVEGET:
.r pip
*FTA#:(MW)_
*^C
rewinds FTA#.
.

















































                                       663
Menu: FORMAT; System file formats                                         page 1

665    LUD             Format of LUD
668    DUL             Format of DUL
669    STREAM          Format of stream accounting files
682    STFILE          Format of system statistics files
684    SYMTAB          Format of macro/fail/loader symbol tables




















































                                       664
Text: LUD; Format of LUD                                                  page 1

		PDP-10 LUD FORMAT

THE LUD FILE [(SYS)LUD.SYS] CONSISTS OF 887  NORMAL
BLOCKS, NUMBERED 1 TO 887 AND ANY NUMBER OF OVERFLOW BLOCKS.
THE FORMAT DESCRIPTION STARTS AT THE BEGINING OF THE BLOCK
SPECIFIED BY A HASH LOCATER GENERATED FROM THE USER NAME.
THIS FORMAT IS REAPEATED AS NECESSARY.

WHEN AN ENTRY IS DELETED, THE SPACE IS NOT NECESSARILY RECLAIMED
IMMEDIATELY. AN EMPTY ENTRY WILL BE INDICATED BY A HASHED
USER NAME (WORD 4) OR 0.

WORD 0: PROJECT PROGRAMMER NUMBER. SAME AS GLOBAL ACCOUNT NUMBER
	IN LEFT HALF, UNIVERSAL USER NUMBER IN RIGHT HALF.
	IF THE WORD IS 0, IT IS THE END OF THE BLOCK AND THERE
	ARE NO MORE OVERFLOW BLOCKS FOR THIS HASH LOCATER.
	IF THE WORD IS NEGATIVE, THE RIGHT HALF CONTAINS THE
	BLOCK NUMBER OF THE NEXT OVERFLOW BLOCK FOR THIS HASH
	LOCATER.

WORD 1:	BITS 28-35 (377) DISTRICT NUMBER

WORD 2:	BIT 0 USER MAY NOT LOGIN UNDER THIS NAME
	BIT 1 USER SHOULD NOT RECIEVE THE 'TYMSHARE' MESSAGE
	BIT 2 RESTICTED BIT
	BIT 3 ANYONE IN THIS GAN CAN GFD HERE
	BIT 4 TRU BUDGET WORD PRESENT
	BIT 5 DO NOT ALLOW ATTACH DURRING LOGIN
	BIT 6 FORCE ATTACH AT LOGIN (IF ANY DET JOBS)
	BIT 7 DO NOT ALLOW MULTIPLE JOBS THIS UUN
	BIT 8 DO NOT REQUIRE PROJECT CODE
	BITS 9-20 UNUSED
	BITS 21-26 INDICATE BROADCAST LETTER NOT YET RECIEVED
	 BY THIS USER. BIT 26 INDICATES BROADCAST LETTER 1.
	BIT 27 (400) INDICATES THERE IS A PROGRAM TO BE RUN
	 AUTOMATICALLY FOR THIS USER WHEN HE LOGS IN.
	BIT 28 UNUSED
	BITS 29-35 (177) SIZE OF THIS ENTRY IN WORDS.

WORD 3:	PRIVILEGE BITS
	BITS 0-1 (600000) LANGUAGE BITS
	BIT 2 (100000) THIS USER SHOULD BE SWITCHED TO
	 DAYLIGHT SAVINGS TIME AT APPROPRIATE TIME
	BITS 3-7 (76000) NUMBER OF HOURS DISPLACEMENT FROM
	 GMT WHICH SHOULD BE APPLIED FOR THIS USER
	  A ZERO VALUE IN THIS FIELD IS INTERPRETED AS PACIFIC ZONE.
	  ALL OTHER VALUES ARE INERPRETED AS A FOUR BIT DISPLACEMENT
	  FROM GMT - IF BIT 3 (40000) IS ON, THE DISPLACEMENT IS
	  POSITIVE, IF BIT 3 IS OFF, THE DISPLACEMENT IS NEGATIVE.
	BITS 8-10 UNUSED
	BITS 11-17 SETTABLE AMOUNT OF CORE THIS USER CAN
	 ACCESS. SHOULD BE SET TO SAME NUMBER AS
	 BITS 29-35.
	BIT 18 RESERVED FOR USE BY MONITOR, IGNORED IN THIS
	 FIELD.


                                       665
Text: LUD; Format of LUD                                                  page 2

	BIT 19-20 ONE OF
		0 - LOGOUT ON DISCONNECT
		1 - DETACH ON DISCONNECT
		2 - CONTINUE ON DISCONNECT
		3 - DETACH ON DISCONNECT - TIMEOUT
	 HANGS UP
	BIT 21 (40000) TYMSHARE PROPRIETARY
	BIT 22 (20000) ACCOUNT SUPERVISOR
	BIT 23 USED BY MONITOR (FOR MAIL WAITING)
	BIT 24 USED BY MONITOR. IGNORED IN THIS FIELD.
	BIT 25 (2000) SET BY LOGIN FROM BIT 4 OF WORD 2 TRU CONTROL
	BIT 26 UNUSED
	BITS 27-28 MODE USER IS RUNNING IN
	 0 PDP-10 MODE
	 1 TYMEX (940) MODE
	 2 GE MODE
	 3 SUDS MODE
	BITS 29-35 AMMOUNT OF CORE USER IS ALLOWED TO HAVE.
	 THIS NUMBER HAS 1 ADDED TO IT AND IS THEN MULTIPLIED BY
	 2 TO DETERMINE NUMBER OF K OF CORE ALLOWED. THIS
	 NUMBER IS SUBJECT TO A MINIMUM IN THE MONITOR AND A
	 MAXIMUM IMPOSED BY PHYSICAL CORE SIZE.

WORD 4:	HASHED USER NAME

WORD 5:	TRU BUDGET (POSSIBLY NOT PRESENT)

WORD 6A:NAME OF PROGRAM TO RUN (THIS WORD AND THE 2 FOLLOWING IT
	 ARE PRESENT ONLY IF WORD 2 INDICATES THAT THERE IS
	 SUCH A PROGRAM.

WORD 7A:FIRST HALF OF USER NAME OF PROGRAM TO RUN
WORD 10A:SECOND HALF OF USER NAME (IN SIXBIT)

WORD 6:	(OR 11) BITS 0-23 NAME OF FILE STRUCTURE
	BITS 24-35 FLAG BITS FOR FILE STRUCTURE
	 BIT 24 STRUCTURE READ ONLY FOR THIS USER.
	 BIT 25 DO NOT CREATE NEW FILES IN THIS STRUCTURE.
	 BITS 26-35 UNDEFINED

WORD 7:	LOGGED IN QUOTA (IN BLOCKS)

WORD 10:	LOGGED OUT QUOTA (IN BLOCKS)

THESE THREE WORDS ARE REPEATED FOR EACH STRUCTURE THE USER CAN
ACCESS. THE NUMBER OF REPEATS MAY BE DETERMINED FROM THE SIZE
FIELD IN WORD 2.

		HASH SUBROUTINE

ROUTINE TAKES A 12 CHARACTER USER NAME (SIXBIT) IN T1 AND T2.
IT USES ACCUMULATORS T3,T4,A,B,C,D, AND E. T1 AND T2 MUST BE
CONSECUTIVE. T3 AND T4 MUST BE CONSECUTIVE. C,D, AND E MUST
BE CONSECUTIVE. THE ROUTINE RETURNS THE HASHED USER NAME IN T1
AND THE BLOCK NUMBER (HASH LOCATER) IN T2.


                                       666
Text: LUD; Format of LUD                                                  page 3


HASH:	0
	MOVEI	B,0
	MOVE	C,[555555555555]
	MOVE	D,[361275431652]
	MOVE	E,[612754316523]
	JSR	RND
	JSR	RND
	JSR	RND
	JSR	RND
	XOR	E,D
	MOVE	T1,E
	TLZ	T1,400000
	IDIVI	T1,^D887
	ADDI	T2,1
	XOR	C,E
	MOVE	T1,C
	JRST	@HASH

RND:	0
	ADD	D,T1
	ROTC	T1,-22
	MOVEI	A,5
RND1:	MOVE	T3,D(B)
	MUL	T3,[5*5*5*5*5*5*5*5*5*5*5*5*5*5*5]	;5^15
	ADDM	T4,E(B)
	AOJE	B,RND2
	MOVNI	B,1
	TRNE	D,1
	SKIPL	E
	MOVEI	B,0
	EXCH	C,E
RND2:	SOJG	A,RND1
	JRST	@RND























                                       667
Text: DUL; Format of DUL                                                  page 1


Each DUL entry consists of:

0/	PPN
1/	word 1 of username
2/	word 2 of username

where PPN must be a positive quantity. If PPN is negative,
the right half of word 0 contains the block number
in the DUL of a continuation block.

The proper block to find or insert a DUL entry is determined as follows:
	block # = PPN REM 101. + 1

If there are any free entries in that block, insertion of DUL entry
is made in that block.
If there are no free entries in the block while inserting,
a pointer is created to the overflow block and the new entry
is inserted at that overflow block.

When searching, if the desired entry is not found in the current block,
any existing overflow blocks for that hash chain must also be searched
before declaring the entry does not exist, i.e. the blocks
might be sparse.  Each DUL entry position must be searched for
either a match or an overflow pointer. The overflow pointer
is guaranteed to be the last valid entry in the block.































                                       668
Text: STREAM; Format of stream accounting files                           page 1

STREAM ACCT'G RECORDS P031 & LATER MONITORS
REVISION 24 APRIL 1978 A.ATKINSON

THIS DOCUMENT DESCRIBES DIFFERENCES BETWEEN STREAM ACCOUNTING
RECORD FORMATS UNDER P031 & LATER MONITORS FROM P030 & BEFORE.
APPENDED IS A COPY OF (MONDOC)STREAM.10 WHICH DESCRIBES THE
STREAM PRIOR TO P031, AND A COPY OF (MONDOC)FACT.10, WHICH
DESCRIBES RECORD FORMATS IN THE OLD "FACT" FILES. FURTHER
INFORMATION ON OPERATING PROCEDURES FOR THE STREAM CAN
BE FOUND IN (MONDOC)OPERAT.031, AND IN THE SECTION "THE
CHKPNT WATCHDOG" IN (MONDOC)P031.INF.

MUCH REMAINS THE SAME.  BRIEFLY, THE "FACT" ACCOUNTING INFO
HAS BEEN CONSOLIDATED INTO THE STREAM.  LOGINN,LOGOUT &
CHKPNT NOW WRITE STREAM RECORDS, NOT FACT RECORDS.

THE INFORMATION FOR A GIVEN DAY (GMT) IS IN THE FILE
(UN1)MMDDYY.SAT . RECORDS NEVER CROSS A BLOCK BOUNDARY.
DUMMY RECORDS ARE USED TO FILL TO THE END OF A RECORD.
CHKPNT IS THE ONLY WRITER OF THE MMDDYY.SAT FILES.
IF IT IS UNABLE TO UPDATE A GIVEN MMDDYY.SAT, IT
WILL CREATE A MMDDYY.S01 FILE & CONTINUE USING THAT.
THIS PROCESS OF CREATING ALTERNATIVES TERMINATES WITH
EXTENSION "S77", AT WHICH POINT CHKPNT WILL TERMINATE
WITH A FATAL ERROR.

THE FORMAT FOR A STREAM ACCOUNTING RECORD IS AS FOLLOWS:

WORD 0:	BITS 0-8 RECORDTYPE CODE
	BITS 9-17 JOB NUMBER
	BITS 18-29 TERMINAL TYPE INFO  OR 0
	BITS 30-35 RECORDLENGTH (THIS WORD INCLUDED)
	**FOR TYPE 401, BITS 29-35 ARE RECORDLENGTH **

WORD 1:	BITS 0-17 DATE IN DAYS SINCE JAN 1,1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

WORD 2:	AUN OF JOB

WORD 3:	HI ORDER TRU'S 		(EXCEPT LOGIN RECORD)
WORD 4:	LOW ORDER TRU'S 	(EXCEPT FOR LOGIN RECORD)

WORD 5:
 THRU
RECORDLENGTH-1:    VARIABLE, DEPENDING ON RECORD TYPE. SEE BELOW

(NOTE THAT ALL RECORDS EXCEPT SYSTEM INITIALIZATION--TYPE 11--
AND THE DUMMY RECORD--TYPE 401-- HAVE DATE,,TIME IN WORD 1
OF THE RECORD. CHKPNT DEPENDS ON THIS FACT
TO KNOW WHEN TO CLOSE ONE GMT DATE MMDDYY.SAT FILE AND OPEN
THE NEXT.)

******************************************************




                                       669
Text: STREAM; Format of stream accounting files                           page 2

THE FOLLOWING RECORD TYPES ARE IMPLEMENTED

0	GET, RUN, R, RUN UUO, RUNSEG UUO

1	EXIT UUO

2	EXIT AC,  UUO

3	SETNAM UUO

4	START COMMAND

5	REENTER COMMAND

6	DDT COMMAND

7	PROJECT CODE CHANGED

10	XCHARG UUO RESET FUNCTION: TRU'S MODIFIED

11	SYSTEM INITIALIZATION

12	DATE OR TIME CHANGE DURING TIMESHARING

13	LOCAL STREAM ACCOUNTING RECORD

14	SETLIC UUO

15 	SETE UUO

16	RUN UUO LICENSE

17	TRANSACTION-CHARGES RECORD

40	LOGINN RECORD

41	CHKPNT RECORD (VERY SIMILAR TO LOGOUT RECORD)

42	LOGOUT RECORD

43	UPTIME RECORD, WRITTEN BY CHKPNT AS IT COMES UP

400	RESTART OF CHKPNT. ONLY WORDS 0 AND 1

402	ERROR. DATA FROM ACT DEV INCONSISTANT. ONLY WORDS 0 & 1
	PRESENT

401	DUMMY RECORD. VARIABLE LENGTH TO GET TO END OF BLOCK
	NO DATA.  1 .LE. RECORDLENGTH .LE. 177


**********************************************************
RECORD LENGTHS:	(OCTAL)

TYPE 0-6 10 WORDS	GET,RUN,START,EXIT,...


                                       670
Text: STREAM; Format of stream accounting files                           page 3


TYPE 7	11 WORDS	PROJ CODE

TYPE 10	36 WORDS	XCHARG

TYPE 11 2 WORD		SYS INIT'ZN

TYPE 12 6 WORD		DATE/TIME CHANGE

TYPE 13 10 WORDS	LOCAL STREAM ACCTG

TYPE 14 10 WORDS	SETLIC 

TYPE 15 10 WORDS	SETE UUO

TYPE 16 03 WORDS	RUN LICENSE

TYPE 17 36 WORDS	TRANSACTION (LENGTH SUBJECT TO CHANGE)

TYPE 40	7 WORDS		LOGINN

TYPE 41	41 WORDS	CHKPNT

TYPE 42 41 WORDS	LOGOUT

TYPE 43	3 WORDS		UPTIME


********GET,RUN,EXIT,START,&ETC. RECORDS*********************


TYPES 0-6, FORMAT OF WORDS 5,6,7

WORD 5:	NAME OF PROGRAM IN SIXBIT

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	CURRENT CONTENTS OF JBTSOK, PREMIUM CHARGE CELL

***********PROJECT CODE RECORD************************

TYPE 7, WORDS 5,6,7,10

WORD 5:	NEW PROJECT-CODE CHARS 1-5, 

WORD 6:	CHARS 6-10

WORD 7:	BITS 0-13	CHARS 11 & 12
	BITS 14-34	0
	BIT  35		PROJECT CODE VERIFY BIT

WORD 10: SECONDS OF CONNECT TIME, EXCLUDING DETACH TIME.

*******************XCHARG RECORD**********************



                                       671
Text: STREAM; Format of stream accounting files                           page 4

TYPE 10, WORDS 5 THRU END (OCTAL)

THE VALUES IN WORDS 10-END (OCTAL) ARE THE DIFFERENCE BETWEEN
THE VALUE THAT WAS CURRENT AT THE MOMENT XCHARG WAS EXECUTING,
AND A VALUE SUPPLIED BY THE USER OR PREVIOUSLY SAVED.  SEE
XCHARG DOCUMENTATION (MONDOC)P029.INF AND (MONDOC)P031.INF.
IN EFFECT, AMOUNTS IN THESE POSITIONS WERE "GIVEN AWAY".

WORD 5:	PROGRAM NAME IN SIXBIT   JBTNAM

WORD 6: 	SOURCE UFD OF RUNNING PROGRAM (JBTFPN)

WORD 7: PREMIUM CELL JBTSOK AFTER ANY INCREMENT BY XCHARG

WORD 10: 	HI-ORDER PART OF MICROCYCLES*SIZE
WORD 11:	LOW-ORDER MICROCY*SIZE

WORD 12: HI ORDER MICRO CYCLES JBTCP2
WORD 13: LOW ORDER MICRO CYCLES JBTCMP

WORD 14: JBTELP ELAPSED TIME*SIZE

WORD 15: JBTBCS BREAK CHARS*SIZE

WORD 16: JBTCIN CHARS IN

WORD 17: JBTCOT CHARS OUT

WORD 20: JBTBET BLOCK I/O ELAPSED SECONDS

WORD 21: BLOCK IO CHARS IN/OUT

WORD 22: JBTSER ENTERS & RENAMES*SIZE

WORD 23: JBTSLK LOOKUPS*SIZE

WORD 24: JBTSIN DISK BLOCKS READ*SIZE

WORD 25: JBTSOT BLOCKS WRITTEN*SIZE

WORD 26: JBTERN ENTERS & RENAMES

WORD 27: JBTDLK LOOKUPS

WORD 30: JBTRCT DISK BLOCKS READ

WORD 31: JBTWCT DISK BLOBKS WRITTEN

WORD 32: JBTMPC MAPPED PAGES COUNT (INCLUDES PAGES CREATED)

WORD 33: JBTPWS PAGES PUT INTO USER WORKING-SET

WORD 34: HI ORDER JBTPWS*SIZE
WORD 35: LO ORDER JBTPWS*SIZE



                                       672
Text: STREAM; Format of stream accounting files                           page 5

*********************TRANSACTION CHARGE ***********************

TYPE 17, WORDS 0 THRU END (OCTAL)

WORD 0		HEADER: TYPE = 17, LENGTH = 36 OCTAL

WORD 1		DATE,,TIME

WORD 2		AUN

WORD 3		HI ORDER TRU
WORD 4		LOW ORDER TRU

WORD 5		PROGRAM NAME IN SIXBIT

WORD 6		JBTFPN PPN OF PROGRAM'S SOURCE UFD

WORD 7		JBTSOK PREMIUM CHARGE CELL CONTENTS

WORD 10
 THRU
WORD 35		DATA WORDS VARIABLE FORMAT

******************* LOCAL STREAM ACCOUNTING *****************

TYPE 13, WORDS 5,6,7

WORD 5:	IF /IDENTIFIER/ =0 THEN CURRENT JBTNAM
	ELSE SIXBIT /IDENTIFIER/ PASSED BY PROGRAM VIA
	LOCAL-STREAM-ACCTG UUO, CALLI AC,-63

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	CURRENT CONTENTS PREMIUM CHARGE CELL JBTSOK

**************** LOGINN ***********************

TYPE 40, WORDS 3,4,5,6

WORD 3:	PROJECT-CODE GIVEN TO LOGIN, CHARS 1-5, (NOT

WORD 4:	CHARS 6-10 				(NECESSAIRILY

WORD 5:	CHARS 11,12 				(VALID)

WORD 6:	SUPERVISOR INFO 32 BITS

******************* UPTIME REC ***********
TYPE 43, WORDS 0,1,2

WORD 0:	HEADER AS USUAL. JOB=0

WORD 1:	DATE,,TIME AS USUAL

WORD 2:	JIFFIES (CLOCK TICKS) SINCE SYSTEM LOADED


                                       673
Text: STREAM; Format of stream accounting files                           page 6


********** CHKPNT & LOGOUT **********************************

WORDS 5-END OCTAL OF LOGOUT & CHKPNT RECORDS

WORD 5:	BLOCKS OF STORAGE. -1 IF ANOTHER USER LOGGED
	IN UNDER SAME AUN OR IF THIS IS A CHKPNT RECORD

WORD 6:	HI ORDER KILO-CORE-TICKS
WORD 7: LOW ORDER KILO-CORE-TICKS

WORD 10: LOOKUPS

WORD 11: LOOKUPS*SIZE

WORD 12 ENTERS+RENAMES TIMES SIZE

WORD 13: BLOCKS READ * SIZE

WORD 14: BLOCKS WRITTEN * SIZE

WORD 15: CHARS IN

WORD 16: CHARS OUT

WORD 17: SECONDS ELAPSED*SIZE

WORD 20: SECONDS CONNECT (EXCLUDING DETACH TIME)

WORD 21: BREAK CHARS*SIZE

WORD 22: BLOCKS READ

WORD 23: BLOCKS WRITTEN

WROD 24: SUPERVISOR LOGIN INFO. RIGHT 32 BITS ARE THE 4
	8-BIT CHARS SENT BY THE SUPERVISOR. THESE HAVE
	THE INFO ON TERMINAL TYPE,NODE AND PORT OF ORIGIN

WORD 25: ENTERS + RENAMES

WORD 26: SECONDS CONNECT FOR REMOTE PERIPHERALS

WORD 27: CHARS TRANSFERREED TO/FROM REMOTE PERIPHERALS

WORD 30: CONTENTS OF PREMIUM CHARGE CELL

WORD 31: SECONDS ELAPSED IN BLOCK PORT I/O

WORD 32: CHARS TRANSFERRED OVER BLOCK I/O PORT

WORD 33: HI ORDER MICRO CYCLES
WORD 34: LOW ORDER MICROCYCLES

WORD 35: JBTMPC MAPPED PAGE COUNT (INCLUDES VCREATES)


                                       674
Text: STREAM; Format of stream accounting files                           page 7


WORD 36: JBTPWS PAGES PUT IN WORKING SET

WORD 37: JBTPWH HI ORDER JBTPWS*SIZE
WORD 40: JBTPWL LO ORDER JBTPWS*SIZE

***********RESTART REC******

WORD 0:	HEADER AS USUAL TYPE=400 JOBJ=0 LENG=2

WORD 1:	DATE,,TIME

*****************ERROR RECORD**************
TYPE 402, WORDS 0,1

WORD 0:	HEADER JOB=0 LENG=2 TYPE=402

WORD 1:	DATE,,TIME OF LAST GOOD RECORD

******************SYSTEM INITIALIZATION RECORD TYPE 11********
TYPE 11, JOB=0 , LENGTH = 2 ,WORDS 0,1

WORD 0: HEADER TYPE=11 JOB=0 LENGTH=2

WORD 1: COPY OF HEADER WORD

THIS RECORD APPEARS ONLY WHEN THE SYSTEM HAS BEEN RE-BOOTED

************DATE CHANGE RECORD (IMPLEMENTED AFTER P031/G)***

TYPE 12 LENGTH 6

WORD 0:
 THRU
WORD 4:	USUAL HEADER WITH OLD DATE,,TIME VALUE

WORD 5:	NEW DATE,,TIME IN USUAL FORMAT

THE HEADER CONTAINS IDENTIFICATION OF JOB EXECUTING THE
DATE CHANGE. THE DATE,,TIME IN HEADER IS THAT VALUE
PRESENT WHEN THE UUO (SETUUO SET DATE/TIME FUNCTION) WAS
EXECUTED. THE NEW DATE,,TIME IN WORD 5 IS THAT WHICH
PREVAILS UPON EXIT OF THE UUO.

NOT YET IMPLEMENTED, 20 JAN 77 AAA
*******************

*************************************************
		SETLIC
**************************************************

TYPE 14

WORDS 0-4: USUAL HEADER



                                       675
Text: STREAM; Format of stream accounting files                           page 8

WORD 5:	NAME OF PROGRAM IN SIXBIT

WORD 6:	PPN (JBTFPN) FROM WHICH PROGRAM CAME

WORD 7: THE LICENSE SET BY SETLIC UUO (JBTLIC)


**************************
	SETE
**************************

TYPE 15

WORDS 0-4: USUAL HEADER

WORD 5:	PROGRAM NAME IN SIXBIT (JBTNAM)

WORD 6:	PPN FROM WHICH PROGRAM CAME (JBTFPN)

WORD 7:	LICENSE SET BY THE SETE UUO



*********************************
	RUN LICENSE
********************************

TYPE 16

WORD 0:	USUAL HEADER: RECORDTYPE,JOB NUMBER,LENGTH=3

WORD 1:	DATE,,TIME

WORD 2:	LICENSE SET BY THE LAST RUN/RUNSEG UUO FOR THIS JOB

(NOTE: RUN/RUNSEG UUO'S WHICH DO NOT SET LICENSE DO
NOT GENERATE THIS RECORD. ONLY THOSE SETTING LICENSE DO SO,
AND NO OTHER RECORDS CAN INTERVENE FOR THE JOB BETWEEN
THE RUN RECORD AND RUN LICENSE RECORD EXCEPT FOR
A CHKPNT RECORD FOR THE JOB.)

















                                       676
Text: STREAM; Format of stream accounting files                           page 9


HERE FOLLOWS (MONDOC)STREAM.10, RELEVANT PRE-P031:

THE FORMAT FOR THE STREAM ACCOUNTING DATA IS AS FOLLOWES:

THE INFORMATION FOR A GIVEN DAY (GMT) IS IN THE FILE
MMDDYY.SAT IN (UN1). RECORDS NEVER CROSS A BLOCK BOUNDARY.
DUMMY RECORDS ARE USED TO FILL TO THE END OF A RECORD.

WORD 0:	BITS 0-8 TYPE CODE
	BITS 9-17 JOB NUMBER
	BITS 18-35 LENGTH OF THIS RECORD (THIS WORD INCLUDED)

WORD 1:	BITS 0-17 DATE IN DAYS SINCE JAN 1,1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

WORD 2:	AUN OF JOB

WORD 3:	TRU'S FOR JOB AT CURRENT TIME

WORD 4:	NAME OF PROGRAM IN SIXBIT

WORD 5:	PPN FROM WHICH PROGRAM CAME

WORD 6:	CURRENT CONTENTS OF SOAKEM (TYMCHG) CELL

THE FOLLOWING CODES ARE USED

0	GET, RUN, R, RUN UUO, RUNSEG UUO

1	EXIT UUO

2	EXIT AC,  UUO

3	SETNAM UUO

4	START COMMAND

5	REENTER COMMAND

6	DDT COMMAND

400	RESTART OF PROGRAM. ONLY WORDS 0 AND 1

402	ERROR. DATA FROM ACT DEV INCONSISTANT. ONLY WORD 2
	PRESENT

401	DUMMY RECORD. VARIABLE LENGTH TO GET TO END OF BLOCK
	NO DATA








                                       677
Text: STREAM; Format of stream accounting files                          page 10

**********************************************************
HERE FOLLOWS A COPY OF (MONDOC)FACT.10, RELEVANT TO PRE-P031

FACT FILE FORMAT

THE INFORMATION FOR A GIVEN DAY (GMT) CAN ALL BE FOUND IN THE FILE
MMDDYY.DAT IN UN1. IF THIS FILE BECOMES GARBAGED OR IS BUSY
THEN MMDDYY.D01 ... .D77 ARE USED.

EACH ENTRY IN THE FACT FILE HAS THE FOLLOWING FORMAT

WORD 0:	BITS 0-8 CODE IDENTIFYING TYPE OF ENTRY
	BITS 9-17 JOB NUMBER
	BITS 18-29 TERMINAL TYPE 0=DETACHED
		1=A, 2=C, 3=E, 4=G, 5=B, 6=F, 7=J, 10=N
		11=RETURN (2741), 12=D, OTHERS UNDEFINED
	BITS 30-35 LENGTH OF THIS ENTRY (INCLUDING THIS WORD)

    CODES
	100 FOR LOGIN
	140 FOR LOGOUT
	200 FOR CHKPNT
	377 DUMMY, IGNORE, LENGTH USUALLY 1
	777 END OF INFORMATION, LENGTH USUALLY 0

WORD 1:	LEFT HALF, GLOBAL ACCOUNT NUMBER
	RIGHT HALF, UNIVERSAL USER NUMBER

WORD 2:	BITS 0-17 DATE IN DAYS SINCE JAN 1, 1964 GMT
	BITS 18-35 TIME IN SECONDS SINCE MIDNIGHT GMT

	FOR LOGIN ONLY
	WORDS 3-5 CONTAIN 12 ASCII CHARACTER OF PROJECT CODE
	WORD 6 SAME AS NORMAL WORD 24.

WORD 3:	TRU'S AS CALCULATED BY MONITOR (TIMES 10**4)

WORD 4:	LOW ORDER PART OF NUMBER OF MICRO-CYCLES*SIZE

WORD 5:	NUMBER OF BLOCKS OF STORAGE. -1 IF ANOTHER USER LOGGED
	IN UNDER SAME NAME OR FROM CHKPNT

WORD 6:	NUMBER OF LOOKUP'S AND ENTER'S DONE

WORD 7:	NUMBER OF LOOKUP'S AND ENTER'S TIMES SIZE

WORD 10:NUMBER OF USETI'S AND USETO'S TIMES SIZE

WORD 11:NUMBER OF DISK BLOCKS READ TIMES SIZE

WORD 12:NUMBER OF DISK BLOCKS WRITTEN TIMES SIZE

WORD 13:NUMBER OF CHARACTERS INPUT

WORD 14:NUMBER OF CHARACTERS OUTPUT


                                       678
Text: STREAM; Format of stream accounting files                          page 11


WORD 15:ELAPSED TIME (IN SEC.) TIMES SIZE

WORD 16:CONNECT TIME (IN SEC.) NOT COUNTING DETACHED TIME

WORD 17:NUMBER OF BREAK CHARACTERS TIMES SIZE

WORD 20:HIGH ORDER PART OF  NUMBER OF MICRO-CYCLES*SIZE

WORD 21:NUMBER OF MICRO-CYCLES

WORD 22:NUMBER OF DISK BLOCKS READ

WORD 23:NUMBER OF DISK BLOCKS WRITTEN

WORD 24:LOGIN INFORMATION FROM SUPERVISOR. RIGHT 32 BITS ARE
	THE 4 8-BIT CHARACTERS SENT BY THE SUPERVISOR.
	THESE HAVE INFORMATION ON TERMINAL TYPE, NODE, AND
	PORT OF ORIGIN.

WORD 25: NUMBER OF USETI'S AND USETO'S DONE

WORD 26:NUMBER OF CLOCK TICKS OF CONNECT TIME FOR REMOTE PERIPHERALS

WORD 27:NUMBER OF CHARACTERS TRANSFERED TO AND/OR FROM REMOTE
	PERIPHERALS

WORD 30: NUMBER OF SOAKEM'S (TYMCHG UUO) DONE

WORD 31: ELAPSED TIME (SEC) WITH BLOCK I/O PORT

WORD 32: CHARACTERS TRANSFERED OVER BLOCK I/O PORT

























                                       679
Text: STREAM; Format of stream accounting files                          page 12

HERE FOLLOWS A COPY OF (MONDOC)STREAM.MEM, WHICH
DESCRIBES THE GENESIS OF STREAM ACCOUNTING AND THE
ALGORITHM BY WHICH THE MONITOR ORIGINALLY DECIDED WHEN
TO WRITE STREAM RECORDS TYPE 0-6:



	The following is a proposal for the new stream
accounting and premium charge systems on the pdp-10.

		PREMIUM CHARGES

	A new cell will be added (1 per job) which will record
the premium charges accumulated by the program. This cell will
be written into the accounting records by LOGOUT and CHKPNT and
into the stream accounting records as outlined below. This
cell will be incremented by a new UUO (SOAKEM) which will specify
the amount to increment. The amount will be restriced to some
small number of bits (say 7). The UUO will require no special
license. The number in this cell will be assigned a multiplier
to convert it to TRU. This cell will be included in the TRU
calculations for the SET LIMIT and TIME commands. It will
not be included in the TRU calculations for the TRU gettab.
LOGOUT will include this number in its TRU calculations when it
prints TRU used at end of session.

		STREAM ACCOUNTING

	The stream accounting data will be passed from the monitor
to a program through a pseudo device (ACT). The program will
INIT this device and do INPUT's from it in a normal manner. At
appropriate times, the monitor will pass buffers of data
to the program. The HANG UUO will cause the last partial buffer
to be dumped when hanging the entire system. The program will
do the apropriate transfer to an accounnting file. If
the program should crash for some reason (swap read error, etc.)
The monitor will start sending messages to the OPR terminal
and start ignoring data which would overflow its buffer space.
The exact amount of buffer space used in the monitor will be
determined after data is gathered on the frequency with which
such records will be written. The following is the proposed format
for the stream accounting records:

word 0:	bits 0-8 code indicating reason for record
	bits 9-17 job number
	bits 18-35 length of record (in case other types eventually
		included)

word 1:	bits 0-17 date in days since Jan 1,1964 GMT
	bits 18-35 time in sec. since midnight GMT

word 2:	AUN of job
word 3:	current TRU's for job
word 4:	name of program in sixbit
word 5:	PPN from which the program came


                                       680
Text: STREAM; Format of stream accounting files                          page 13

word 6:	current contents of premium charge cell

The following algoritm will be used to determine when to write
records: (the proposed record code is also given).

For each job, a 1 bit data field called recwrt will be used

code 0
	a GET, RUN, R, RUN UUO, RUNSEG UUO
	if JBTFPN (source directory) is not equal to JBTPPN (users
		directory) or recwrt=1 write a record
	if JBTFPN=JBTPPN recwrt_0 else recwrt_1

code 1
	an EXIT UUO
	if recwrt=1 write a record. recwrt_0

code 2
	an EXIT 1, UUO
	if recwrt=1 write a record.

code 3
	SETNAM UUO
	if recwrt=1 write a record. recwrt_0.

code 4
	START command
	if JBTFPN not equal JBTPPN and JBTFPN not 0 and
	recwrt=0 write a record and recwrt_1

code 5
	REENTER command
	same as code 4

code 6
	DDT command
	same as code 4

code 7
	error (such as ill mem ref)
	same as code 1 (this may not be implimented immediately)
















                                       681
Text: STFILE; Format of system statistics files                           page 1


The statistics file can be found in (SYS)mmddyy.DAT, where mm=month
(01-12), dd=day, yy=last two digits of the year.

Word 0:	Date,,Time
Word 1:	-1,,<type> if device record; uptime if performance record.

Device Records
--------------

Record length is 16. words. Types:

<Type>	Record
-----	------
0	Unit Error intormation
	2/	Total TRU that recording program used.
	3/	Unit name
	4/	Unit ID
	5/	Number of hard errors
	6/	Number of soft errors
	7/	Hard CONI
	10/	Soft CONI
	11/	Logical block number
	12/	Soft DATAI
	13/	Hard DATAI
	14/	Retry count
1	Old tape (MTA) information
2	system restart message
	(no further data).
3	IBM tape drive error (FT)
	2/	Total TRUs used by recording program
	3/	Unit name
	4/	number of recovered reads
	5/	number of unrecovered reads
	6/	number of recovered writes
	7/	number of unrecovered writes
	10/	Soft CONI
	11/	Hard CONI
	12/	Hung count
	13/	Hung function
	14/	Hung CONI
4	Sense data for 3330 disks
	2/	Total TRUs recording program has used
	3/	Unit name
	4-11/	sense bytes
5	Sense data for FT tapes
	2/	Total TRUs recording program has used
	3/	Unit name
	4-11/	Sense Bytes.
6	parity error
	2/	Number of Parity Interrupts
	3/	Number of parity errors found
	4/	Address of last parity error
	5/	Contents of data
	6/	Pc of last parity error.


                                       682
Text: STFILE; Format of system statistics files                           page 2

7	Disk I/O statistics
	2/	Uptime
	3/	File Transfers
	4/	Swap Transfers (includes file as of P033)
	5/	TRUs * 10000.
	6/	Monitor page transfers (PCBs, included in SWAP)

Performance record

Record length is 16 words. Record format:

2/	Null time in ticks
3/	Lost time in ticks
4/	Number of jobs
5/	Total size of jobs.
6/	Average size of jobs.
7/	Median size.
10/	Number of jobs under 8K
11/		from 8 to 15K
12/		from 16 to 23K
13/		from 24 to 31K
14/		from 23 to 39K
15/		from 40 to 47K
16/		from 48 to 55K
17/		from 56 to 512K.
































                                       683
Text: SYMTAB; Format of macro/fail/loader symbol tables                   page 1

Symbol Table Format
8 May 79 A. Atkinson

This information is based on conversations with Bill Weiher
and experience with several symbol tables while writing a macro
routine SYMSRC for use by SNOOPY and other SAIL programs.

A symbol-table is composed of 2-word entries.  It "begins"
at high-core address RH(jobsym) + (-LH(jobsym)-2), and its
last entry is pointed to by rh(jobsym).  JOBSYM is not available
in .rel files; it is part of the jobdata area saved by
the .SAV and .SSAVE commands.  Generally speaking, the
symbol table of a program is available via JOBSYM only if the
program was loaded with DDT via the DEBUG command.

Format of an entry in the table:
	word 0: byte(4)code  (32)radix-50 symbol-name
	word 1: 36-bit symbol-value
Word 1 is toward higher addresses.

Values for <code>: (as printed by DDT if word 0 is opened $5T/)
	0 - symbol is a module name
		value word holds address of beginning of module)
	1 - symbol is a global
	10- symbol is a local
	14- block name (FAIL block-structured symbol table)

Marker Entries
------------------

"End of Table"
	word 0: -1
	word 1:  0
"End of Module"
	word 0:  0
	word 1:  arbitrary positive value

Organization of Table:
---------------------

[low core addresses]
	"end of table"
	 global
	   ..
	   ..
	 global
	"end of module"	......
	 local		     .
	  ..		     .(DDT searches only this much and
	  ..		     .globals when you do MODULE$:  )
	 local		     .
	Module begins	......
	"end of module"
	 local
	  ..


                                       684
Text: SYMTAB; Format of macro/fail/loader symbol tables                   page 2

	  ..
	 local
	Module begins

	[Further entries for other modules]
	
	Module begins	<<--------jobsym
[high core addresses]

Note that modules are not arranged in any specific order
in the table; particularly, they are not in ascending order
according to their beginning addresses unless this
is the way in which the loading process went.












































                                       685
Index: ROOT; Summary of available monitor documentation                   page 1

                          CHARACTERS  435             /DSKCLNBUGS  199
                          CLUBS  8                    /DSKCLNSTRUCTURES  200
ACCONVENTIONS  356        CODING  357               DUL  668
ACCOUNTING  195           COMMANDS  8
AC  241                     /ADRBRK  9
ADRBRK  9                   /SET  10                ECHOING  425
ARCHIV  269               COMMAN  27                EDIT10  105
  /PROJEC  270              /TYPE  28               EDIT10  502
  /CHANEL  274              /CHANGE  42             EDITORS  501
  /FILSPC  275              /REFRES  45               /EDIT10  502
  /FILES  277               /DEFINE  46             ENTER  16
  /PAGE  279                /ADD  47                ENVIRONMENT  82
  /USE  282                 /GO  48                 ERRCHK  571
  /FILMEM  292              /HELP  49               ERRORS  19
  /FILNAM  294            CONDITIONALS  359         EXAMPL  50
  /INTR  296              COPY  553                 EXTERNAL  7
  /UNHAP  298             CPARW  436                  /CLUBS  8
  /INDIR  300             CRALOG  389                 /COMMANDS  8
  /PDLANL  303            CRASH  103                  /FILESPEC  11
  /ASSLOA  306            CRASH  378                  /INITIALIZATION  12
  /SUDS  308              CRASUM  554                 /IOIMPM  14
  /SLEEP  310             CRSHID  556                 /ONCE  15
  /BIO10  312             CRSNOT  242                 /PID  52
  /BITS  315              CUSPS  104                  /PTYS  61
ASP  519                    /EDIT10  105              /RIBVAL  65
ASSHOL  525               CUSPS  440                  /SEGMENTS  66
ASSLOA  306                 /DEFINITION  441          /SYSNO  72
ATSIGN  526                 /DDT  442                 /TIPS  73
  /INTRO  527               /GFD  452                 /TRUFRM  79
  /BASIC  528               /LOGINN  459              /UUO  81
  /OUTPUT  530              /LOGOUT  465              /PROJECTS  81
  /TEXT  532                /MAIL  480
  /ASSEMBLER  534           /RPG  484
  /LISP  536                /PROJEC  487            FILESPEC  11
  /MUDDLE  537              /VALID  491             FILES  109
  /QUOTES  538                                      FILES  204
  /SWITCHES  539                                      /DEVRIB  205
  /FILES  545             DDT  442                    /DEVFLO  206
  /SUBSTITUTIONS  547       /HISTORY  443             /FBITS  209
AUXDDT  548                 /FEATURES  444            /DISKIO  210
AUXIO  549                DDT  559                    /PCBS  211
                            /HISTORY  560             /SAFETY  229
                            /FEATURES  561            /SIMUPD  230
BADFOR  77                DEFINITION  441             /FASTDSKCLN  233
BADRIB  402               DESCRIPTION  177          FILES  277
BALLS  430                  /STRUCTURE  178         FILESYSTEM  353
BASE  426                   /CPU  179               FILMEM  292
BIO10  312                  /CORE  180              FILNAM  294
BITS  315                   /RESOURCE  181          FILSPC  275
BLKIO  437                  /JOBS  182              FORMAT  435
                            /PERFORMANCE  183       FORMAT  664
                            /TUNING  184              /LUD  665
CACHE  552                DEVICES  355                /DUL  668
CAPACITY  83              DIRED  569                  /STREAM  669
CHANEL  274               DSKCLN  198                 /STFILE  682


                                       686
Index: ROOT; Summary of available monitor documentation                   page 2

  /SYMTAB  684            LICENSE  409              OTHER  51
FRAMECTL  348             LOGINN  459
FRMDDT  579                 /HISTORY  460
FSHSPL  580               LOGOUT  465               P033  115
  /RUN  581                 /HISTORY  466           P034  115
  /PROG  583                /ALP  466               PACKID  76
  /FSHTAP  611            LUD  665                  PAGE  279
FTALOD  411                                         PAGING  188
FUNCTION  97                                        PAGING  351
                          MACRO  515                PAKCOP  414
                          MAIL  480                 PATCH  375
GENERAL  187                /HISTORY  481           PATLOG  629
GENERAL  345                /USEAGE  482            PDLANL  303
GFD  452                  MASQUE  621               PEOPLE  361
  /CALLING  453           MDDT  622                   /PHONES  362
  /HISTORY  457           MEMFILE  408                /TERMINV  363
  /ACCESS  458            MHX  628                  PERFORMANCE  88
                          MISCELLANEOUS  101        PHILOSOPY  344
                          MODIFY  403                 /GENERAL  345
ICP  612                  MONED  623                  /NETWORK  346
IDEAS  102                MONED1  624                 /INTERRUPT  347
  /CRASH  103             MONINF  186                 /UUOFORMAT  348
  /CUSPS  104               /GENERAL  187             /FRAMECTL  348
  /MONITOR  106             /PAGING  188              /PAGING  351
INDIR  300                  /TAPE  191                /FILESYSTEM  353
INFO  108                   /SCHEDULER  192           /DEVICES  355
  /FILES  109               /SCNSER  193              /ACCONVENTIONS  356
  /PUB  110                 /ONCE  194                /CODING  357
  /SPCHAR  112              /ACCOUNTING  195          /CONDITIONALS  359
  /PUBLISH  113             /DSKCLN  198            PHONES  362
INFRED  619                 /KL10  204              PID  52
INITIALIZATION  12          /FILES  204             PI  237
INTERNAL  114               /PI  237                  /DATABS  238
  /P033  115                /UUOCON  239            PIP  663
  /P034  115                /AC  241                POLICY  87
  /SCHEDULER  176         MONITOR  106              PROCEDURES  364
  /MONINF  186            MONITOR-NAME  404           /XMIT  365
  /CRSNOT  242            MONREL  368                 /MONREL  368
  /XFRRAT  253            MUD  434                    /NEWSYS  371
  /STREAM  256              /FORMAT  435              /UPGRADE  374
  /ARCHIV  269              /CHARACTERS  435          /PATCH  375
  /PHILOSOPY  344           /CPARW  436               /CRASH  378
INTERNAL-RELEASE  405                                 /CRALOG  389
INTERRUPT  347                                        /UUOFORMAT  391
INTR  296                 NETWORK  346                /TAPE-BACKUP  392
IOIMPM  14                NEWSYS  371                 /BADRIB  402
                                                      /MODIFY  403
                                                      /MONITOR-NAME  404
KAFIX  620                ONCE  15                    /INTERNAL-RELEASE  405
KL10  204                   /ENTER  16                /MEMFILE  408
                            /ERRORS  19               /LICENSE  409
                            /COMMAN  27             PROJECTS  81
LANGUAGES  507              /EXAMPL  50               /ENVIRONMENT  82
  /XEXEC  508               /OTHER  51                /CAPACITY  83
  /MACRO  515             ONCE  194                   /RELIABILITY  85


                                       687
Index: ROOT; Summary of available monitor documentation                   page 3

  /POLICY  87               /FTALOD  411              /ICP  612
  /PERFORMANCE  88          /PAKCOP  414              /INFRED  619
  /STRUCTURE  94          STFILE  682                 /KAFIX  620
  /FUNCTION  97           STREAM  256                 /MASQUE  621
  /SECURITY  100          STREAM  669                 /MDDT  622
  /MISCELLANEOUS  101     STRUCTURE  94               /MONED  623
PROJEC  270               SUDS  308                   /MONED1  624
PROJEC  487               SWEET  654                  /MHX  628
PTYS  61                  SYMLOK  656                 /PATLOG  629
PUB  110                  SYMTAB  684                 /RUB  630
PUBLISH  113              SYSNO  72                   /SCAN  631
                                                      /SCRIPT  633
                                                      /SNARF  634
QUEUE  185                TAPE  191                   /SPELL  635
                          TAPE-BACKUP  392            /SPOOL  651
                          TAPE  660                   /SWEET  654
RELIABILITY  85           TERMINV  363                /SYMLOK  656
RIBERR  75                TIPS  73                    /TAPE  660
RIBVAL  65                  /SATDEBUG  74             /X1200  662
ROOT  6                     /RIBERR  75               /PIP  663
  /EXTERNAL  7              /PACKID  76             UUO  81
  /IDEAS  102               /BADFOR  77             UUOCON  239
  /INFO  108              TRUFRM  79                  /BUFMOD  240
  /INTERNAL  114          TYMNET  424                 /AC  241
  /PEOPLE  361              /ECHOING  425           UUOFORMAT  348
  /PROCEDURES  364          /BASE  426              UUOFORMAT  391
  /STANDALONE  410          /BALLS  430
  /TYMNET  424              /MUD  434
  /USER  439                /BLKIO  437             VALID  491
  /FORMAT  664
ROYALTY  517
RPG  484                  UNHAP  298                X1200  662
  /HISTORY  485           UPGRADE  374              XEXEC  508
  /SETMAIL  485           USE  282                    /CCL  509
  /DO  486                USER  439                   /RUNTIMES  510
RUB  630                    /CUSPS  440             XFRRAT  253
                            /EDITORS  501           XMIT  365
                            /LANGUAGES  507
SATDEBUG  74                /ROYALTY  517
SCAN  631                   /UTILITY  518
SCHEDULER  176            UTILITY  518
  /DESCRIPTION  177         /ASP  519
  /QUEUE  185               /ASSHOL  525
SCHEDULER  192              /ATSIGN  526
SCNSER  193                 /AUXDDT  548
SCRIPT  633                 /AUXIO  549
SECURITY  100               /CACHE  552
SEGMENTS  66                /COPY  553
SET  10                     /CRASUM  554
SLEEP  310                  /CRSHID  556
SNARF  634                  /DDT  559
SPCHAR  112                 /DIRED  569
SPELL  635                  /ERRCHK  571
SPOOL  651                  /FRMDDT  579
STANDALONE  410             /FSHSPL  580


                                       688 uee#