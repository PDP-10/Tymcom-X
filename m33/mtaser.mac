TITLE MTASER -MAGTAPE ROUTINES FOR PDP-10(TM-10A)
SUBTTL T.WACHS/TW/CMF  TS  3-SEP-70 V512

	STOPCD(,ENTRY,MTASER)

	INTERN MTAINT,MTADDS,MTADDB
	EXTERN	MTALOC,MTLOC1,MTASAV,MTIOC,MTCCW,JBTIOA,PJOBN,JBTABT

;DISPATCH TABLE

	PHASE -2
DDO:	JRST MTDMPO
DDI:	JRST MTDMPI
	DEPHASE
MTADSP:	PHASE 0
DDXZ:	DSPSIZ
DDINT:	POPJ P,
DBYT:	4400,,4400
DVSIZ:	MOVEI T1,MTADDS
DINI:	JRST MTAINI
DHNG:	JRST MTASEC
DRL:	JRST MTAREL
DCL:	JRST MTCLOS
DOU:	JRST MTOUT
DIN:	JRST MTIN
DXFR:	POPJ P,
DFTRD:	JRST GETRDY
DMT:	JRST MTAP0
DGF:	JRST MTUGF
	DSPSIZ==.-1
	DEPHASE

MTC==340
MTS==344

;MTACHN=FLAG CHANNEL
;MTDCHN=DATA CHANNEL
;MTFLAG=10*MTACHN + 400
;MTBOTH=10*MTACHN+MTDCHN
;MTALOC=40 + 2*MTDCHN
;MTLOC1=MTALOC+1
	INTERNAL	MTAINT
	EXTERNAL	TIME,JOB
	EXTERNAL	ADVBFE,ADVBFF,MTBOTH,SETACT,CLRACT,WSYNC
	EXTERNAL	STDENS,SETIOD,MTREQ,MTAVAL,MTSWT
	EXTERNAL	CPOPJ,CPOPJ1,PIOMOD,PUNIT,MTWAIT,HNGSTP
	EXTERNAL	PIOFF,PION,ADRERR,MTSIZ,STOIOS,SETHNG,TPOPJ

WRLOK==20000			;THIS TRANSPORT IS WRITE LOCKED
HASCTL==40000			;THIS TRANSPORT HAS CONTROLLER
COMPAT==100000			;IBM COMPATABLE 9-TRACK

MTREW==400000			;MAGTAPE IS REWINDING

MTTRY==10			;NO. OF TIMES TO RETRY ON AN ERROR
QUANT==10			;NO. OF RECORDS TO READ UNINTERRUPTED
MTWTTM==4000		;TIME TO WAIT FOR STATUS.  INCREASE IF CPU
			;SPEED INCREASES (WILL GET UNDESERVED DEVICE OK
			;IF TOO SMALL).
NOISE==3		;ANY RECORD READ IN ERROR WITH .LT. NOISE
			;WORDS IS CONSIDERED "NOISE" AND IGNORED
;MAG TAPE DEVICE DATA BLOCK

MTADDB:
	PHASE 0
DEVNAM:! SIXBIT	/MTA0/
	XWD	^D5*HUNGST,MTSIZ+1
DEVIOS:! Z
DEVSER:! MTADSP
$MODE==1_D+1_DR+1_B+1_IB+1_I+1_AL+1_A
	XWD DVIN+DVOUT+DVMTA,$MODE
	Z
	Z
DEVIAD:! 0
DEVOAD:! 0
DEVCLS:		XWD	600000,DEVLSA+MTADDB	;CLASS
DEVSTS:! Z
DEVABC:! 0		;ADVANCE BUFFER COUNT
DEVBWC:! 0		;BUFFER WORD COUNT OF LAST PARTIAL BUFFER
DEVCTR:! 0
DEVINT:	0		;INTERRUPT WORD
DEVLSA: BLOCK LENFXL	;COMMAND LIST AREA
MTDLNK:	1,,0	;LINK INFOR FOR MTA ERRORS
	.LINK 1,MTADDB+MTDLNK
	MTADDB,,[SIXBIT /MTANAM/]
	MTANMN,,0	;GOT NAME NOW ERRORS
	MTADDB+MDHMTS,,MTANMS
MDHMTS:	0		;STATUS WHEN DRIVE HUNG
MDHMTC:	0		;COUNT OF TIMES HUNG
MDHFNC:	0		;0-17 FUNCTION HUNG RECOVERY ATTEMPTED ON
MDHTIM:	0		;TIME IN JIFFIES WHEN LAST RETRY ATTEMPTED
MDRCNT:	0		;COUNTER OF HUNG TIMEOUTS
MDSERR:	0		;CONI FOLLOWING LAST TAPE ERROR
MDSCNT:	0		;COUNT OF TAPE ERRORS
MDRWRT:	0		;COUNT OF REWRITES
MDWFAL:	0		;COUNT OF RECORDS UNWRITEABLE
MDWREC:	0		;COUNT OF RECORDS REWRITTEN SUCCESSFULLY
MDRRED:	0		;COUNT OF REREAD OPERATIONS
MDRFAL:	0		;COUNT OF RECORDS UNREADABLE
MDDCNT:	0		;COUNT OF WORDS ON LAST DUMP OPERATION

	XP	MTADDS,.
	XP	MTBDDS,.
	DEPHASE

REPEAT 0,<

MEANING OF MTC BITS

15-17	NEXT UNIT NUMBER

18-20	CURRENT UNIT NUMBER

21	PARITY	1==ODD, 0=EVEN
22	CORE DUMP 0==4 BYTES, 1=4.5 BYTES

23-26	FUNCTIONS
	0	NO-OP  -CLEAR INTERRUPT FLAGS
	1	REWIND
	2	READ
	3	READ/COMPARE
	4	WRITE
	5	WRITE END-OF-FILE
	6	SPACE FORWARD ONE OR MORE RECORDS
	7	SPACE REVERSE ONE OR MORE RECORDS
	10	NO-OP  INTERRUPT WHEN XPORT IDLE
	11	REWIND AND UNLOAD
	12	READ ACCROSS RECORD BOUNDARIES
	13	READ/COMPARE ACROSS RECORD BOUNDARIES
	14	WRITE WITH LONG EOR  GAP
	15	WRITE 3 INCHES OF BLANK TAPE
	16	SPACE TO END-OF-FILE
	17	SPACE REVERSE TO END-OF-FILE

27	NEXT UNIT ENABLE

28-29	DENSITY
	00	200BPI
	01	556BPI
	10	800BPI
	11	RESERVED (CURRENTLY 800BPI)

30-32	FLAG PIA
33-35	DATA PIA
>
;MAG TAPE STATUS BITS (MTS)

HUNG==1B18		;*TRANSPORT HUNG
REW==1B19		; TRANSPORT IS REWINDING
BOT==1B20		; AT BEGINNING OF TAPE

ILLOP==1B21		;*ILLEGAL OPERATION
PERROR==1B22		; PARITY ERROR
EOF==1B23		; END OF FILE

EOT==1B24		; END OF TAPE
RCERR==1B25		; READ-COMPARE ERROR
RLINC==1B26		; RECORD LENGTH INCORRECT

DLATE==1B27		; DATA LATE
BDTAPE==1B28		; BAD TAPE (DATA IN EOR)
JBDONE==1B29		;*JOB DONE

;IDLE==1B30		; TRANSPORT IDLE
CHANER==1B31		; CHANNEL ERROR (TM10B ONLY)
WRLK==1B32		; WRITE LOCK

CHAN7==1B33		; 7-CHANNEL TRANSPORT
;NXUNIT==1B34		;*(IF ENABLED) NEXT UNIT STATUS AVAILABLE
;DATARQ==1B35		;*(ON DATA PIA) DATA REQUEST

;LH CONI BITS
CWPAR==1B11		;CONTROL WD PARITY ERR (TM10B)
CHANXM==1B12		;CHAN NXM (TM10B)
DTPAR==1B13		;*CHAN DETECTED CORE PARITY ERR (TM10B)
WCWDON==1B14		;*WRITE CONTROL WORD DONE (TM10B)
;INITIALIZE

MTINLP:	MOVEI T3,MTDLNK(T2)	;INIT LINK INFOR LOOP FOR ALL DRIVES
	HRRM T3,MTDLNK+2(T1)	;LINK NEW DRIVE INTO OLD
	SKIPA T1,T2	;NOW GET NEW DRIVE IN T1
MTAINI:	MOVEI T1,MTADDB		;START LINK INITIALIZE
	HRRZ T2,MTDLNK(T1)	;THIS POINTS TO NEXT LINK AFTER MTA
	HRRM T2,MTDLNK+2(T1)	;PUT IN CORRECT PLACE IN CASE LAST
	HRLM T1,MTDLNK+1(T1)	;POINT TO NAME IN FIRST POINTER WORD
	MOVEI T2,MTDLNK+2(T1)
	HRRM T2,MTDLNK(T1)	;LINK ERROR INFO AFTER NAME
	MOVEI T2,MDHMTS(T1)
	HRLM T2,MTDLNK+3(T1)
	MOVEI T2,DEVLSA(T1)
	HRRM T2,DEVCLS(T1)	;SET UP LIST
	HLRZ T2,DEVSER(T1)	;NEXT DRIVE
	MOVE T3,DEVMOD(T2)
	TLNE T3,DVMTA		;IS IT AN MTA?
	JRST MTINLP		;YES, LINK IT ALSO
	MOVEI	T1,INTIGN	;IGNORE INTERRUPTS
	MOVEM	T1,INTSW
	HLLZS	MTAINT
	CONO	MTC,0		;TURN OFF MTC
	CONI MTC,T1
	TLNE	T1,(1B9)	;CONTROLLER TYPE BIT
	MOVNS	T1
	MOVEM	T1,TM10FG	;FLAG INDICATES 18 OR 22 BIT CONTROLLER
	MOVNI	T1,1
	SKIPGE	TM10FG
	LSH	T1,4		;ADJUST WORDCOUNT FOR CONTROLLER
	HRLM	T1,CPNTR
	MOVE	T1,[JSR MTDEND] ;SET UP END-CONDITION
	MOVEM	T1,MTLOC1	;FOR BLKI/BLKO
	MOVEI	T1,PNTR
	MOVEM	T1,MTIOC	;SET INITIAL CHANNEL CONTROL WORD
	POPJ	P,

;CLOSE
MTCLOS:	TLNN	F,OUTPB	;OUTPUT BEEN DONE?
	POPJ	P,		;NO. GO AWAY
	MOVEI	M,3		;WRITE 2 ENDS-OF FILE
	PUSHJ	P,MTAP1
	TRNE	S,IOIMPM	;WRITE LOCK?
	POPJ	P,		;YES! RETURN
	MOVEI	M,3
	PUSHJ	P,MTAP1
	MOVEI	M,7		;AND BACKSPACE OVER ONE OF THEM
	PUSHJ	P,MTAP1
	PUSHJ P,DLYCTL		;SO WE WILL TIME OUT IF NEC.
	PUSHJ P,RELCTL
	TRZ	S,IODEND	;CLEAR EOF AFTER CLOSE SINCE
				; PROGRAMS EXPECT IT ON INPUT ONLY
	PJRST	STOIOS		;STORE S AND EXIT

;HUNG DEVICE TIME OUT.

MTASEC:	CONI	MTS,MDHMTS(F)	;SAVE STATUS IF RECEIVE HUNG DRIVE
	CONI	MTC,MDHMTC(F)
	HLRZ	T1,USEWRD	;GET COMMAND
	MOVEM	T1,MDHFNC(F)	;SAVE FUNCTION
	ANDI	T1,007000	;MASK PART OF FUNCTION
	CAIG	T1,4000		;SOME KIND
	CAIGE	T1,2000		;OR READ OR WRITE?
	JRST	MTASC6		;NO.
	PUSHJ	P,SDCIOA	;YES, DECREMENT JBTIOA.
MTASC6:	AOS	MDRCNT(F)	;COUNT OCCURENCE
	MOVE	T2,TIME
	MOVEM	T2,MDHTIM(F)	;NOTE TIME OF OCCURENCE
	JUMPGE S,HUNGTP		;NO.
	TLNN	S,HASCTL	;DO WE HAVE CONTROL?
	POPJ	P,		;DON'T1 RELEASE CONTROL WE DON'T1 HAVE
	JRST	RELTAP		;RELEASE TAPE CONTROL & PRINT MESSAGE

HUNGTP:
	TRO	S,IODERR	;SET DEVICE ERROR
	MOVEM	S,DEVIOS(F)
	JRST	RELTAP		;RELEASE CONTROL AND EXIT TO
				; GIVE HUNG DEVICE MESSAGE


;SUBR TO DECREMENT JBTIOA.

SDCIOA:	LDB	T1,PJOBN	;GET JOB NO.
	SOS JBTIOA(T1)	;DEC DONT SWAP COUNT
	POPJ	P,

;SUBR TO INCREMENT JBTIOA.

SNCIOA:	LDB	T1,PJOBN	;GET JOB NO.
	AOS JBTIOA(T1)	;INC THE DON'T SWAP FOR I/O ACTIVE
	POPJ	P,
;UGETF UUO.


MTUGF:	XCT XBU,[HRRZ T1,(M)]
	CAILE T1,2
	JRST UGFERR		;ERROR
	JUMPE T1,UGFCNT		;GET COUNT FROM LAST DUMP TRANS
	CAIE T1,2
	JRST	[MOVEI T1,0	;SENSE DATA ON IBM
		JRST UGFSTR]
	PUSHJ P,DLYCTL		;GET THE CONTROLER
	MOVE T2,CNIMTS		;HERE IS THE STATUS
	MOVSI T1,(1B15)		;800 BPI, ALL RUN AT THAT
	TRNE T2,CHAN7
	TLO T1,(1B12!1B16!1B17)	;7 TRACK, MARK THAT AND 556 AND 200
	TRNE T2,WRLK
	TLO T1,(1B0)		;MARK AS WRITE PROTECT
	TRNE	T2,BOT		;MARK IF AT
	TLO	T1,(1B3)	;LOAD POINT.
	TRNE	T2,EOT		;MARK IF AT
	TLO	T1,(1B4)	;EOT.
	UMOVEM T1,1(M)
	JRST RELTAP		;GET RID OF CCONTROLER
	
UGFCNT:	PUSHJ P,WAIT1		;LET I/O STOP
	SKIPA T1,MDDCNT(F)
UGFERR:	MOVNI T1,1		;-1 FOR ERROR
UGFSTR:	UMOVEM T1,1(M)
	POPJ P,
;IT IS POSSIBLE TO GET HERE WHILE JOB STILL HAS MAGTAPE CONTROL
;AND AN INTERRUPT PENDING FROM A PREVIOUS MTAPE, SO MUST WAIT
;FOR MTAPE TO BE FINISHED

;IN CASE WE ALREADY HAVE CONTROL, QUING FOR IT WILL STILL WORK
;CORRECTLY. WE WILL GET IT WHEN IT COMES FREE

;GET CONTROL OF MAG TAPE CONTROLLER AND CONNECT IT TO A TRANSPORT

DLYCTL:
GETCTL:	AOSE	MTREQ		;NO, GET IT.
	PUSHJ	P,MTWAIT
	SETZM MTSWT
	MOVSI S,HASCTL
	IORB S,DEVIOS(F)	;MARK THAT WE HAVE IT
	MOVEI	T1,PNTR		;MTIOC MAY HAVE BEEN CHANGED SINCE INI TIME
	MOVEM	T1,MTIOC		;SO RESET EVERYTIME CONTROLLER IS ATTACHED
	LDB	T1,PUNIT	;GET UNIT NUMBER FROM DDB.
	LSH	T1,17		;SET UP CONO
	CONO	MTC,10000(T1)	;SELECT UNIT.
	MOVEI	T2,MTWTTM
	CONSO	MTS,HUNG!JBDONE!REW	;WAIT FOR STATUS
	SOJG	T2,.-1
	JUMPE	T2,GETC6	;NO STATUS??
	PUSHJ	P,SETPST	;COPY NON-TRANSITORY  STATUS INTO S
	JUMPGE	S,GETC3	;JUMP IF NOT REWINDING.
EXTERN SLEEP
	PUSHJ	P,RELCTL	;RELEASE CONTROL
	MOVE	J,JOB	;GET JOB # FOR SLEEP
	MOVEI	T1,2
	PUSHJ	P,SLEEP	;SLEEP 2 SECONDS -CAN BE SWAPPED
	JRST	GETCTL		;TRY AGAIN

GETRDY:	PUSH P,T1	;MAKE SURE WE ARE READY TO DO I/O NOW
	PUSH P,T2
	PUSH P,T3	;DLYCTL MAY ZAP THEM
	PUSH P,P4
	PUSHJ P,DLYCTL
	LDB J,PJOBN
	MOVEI T1,RELCTL
	MOVEM T1,JBTABT(J)	;SET ABORT ADDRESS
	POP P,P4
	POP P,T3
	POP P,T2
	JRST TPOPJ	;AND RETURN

;WE ARE NOW CONNECTED TO THE TRANSPORT

GETC3:	TRNN	S,IODERR	;IS TRANSPORT SICK?
	JRST	GETC2		;NO.
GETC6:	PUSHJ	P,RELCTL	;YES, RELEASE CONTROL
	PUSHJ	P,HNGSTP	;PRINT MESSAGE
	JRST	GETCTL		;ON "CONT" TRY AGAIN.

GETC2:	TLNE	S,COMPAT	;IBM 360 COMPATABILITY MODE?
	JRST	GETC4		;YES.
	LDB	U,[POINT 2,S,28]
	SKIPN	U		;DENSITY=0?
	MOVEI	U,STDENS	;YES, USE STANDARD
	SUBI	U,1
	LSH	U,6
	TRNN	S,IOPAR	;ODD PARITY?
	TRO	U,40000	;YES.
	CONSO	MTS,CHAN7	;7-CHANNEL TRANSPORT?
	TRO	U,20000	;NO, SET 4.5 BYTE MODE
GETC5:	LDB	T2,PUNIT
	DPB	T2,[POINT 3,U,20]
	CONO	MTC,(U)	;CLEAR CONTROLLER FLAGS
	TRO	U,MTBOTH	;SET UP BOTH PI CHANNELS
	MOVEI	T1,HUNG!ILLOP!JBDONE!CHANER!BDTAPE
	HRRM	T1,MTAINT	;SET UP INTERRUPT MASK
	MOVEI	T1,QUANT	;SET UP PROTECT TIME
	MOVEM	T1,QUANTM
	POPJ	P,		;RETURN

GETC4:	MOVEI	U,40300	;800 BPI, ODD PARITY, 4 BYTE MODE
	JRST	GETC5

;HERE TO RELEASE HARDWARE, THEN SOFTWARE
RELTAP:	PUSHJ	P,MTADIS	;CLEAR THE HARDWARE (CONO MIC)

RELCTL:				;RELEASE CONTROL
	TLZN	S,HASCTL	;DO WE HAVE IT?
	STOPCD	STOIOS		;NO. ERROR
	TRZ	S,IOACT
	SOSL	MTREQ		;YES, RETURN IT
	SETOM	MTAVAL
	PUSH P,J
	LDB J,PJOBN
	SETZM JBTABT(J)		;CLEAR THE ABORT LOC (POSSIBLY RELCTL)
	POP P,J
	JRST STOIOS
;COPY STATUS THAT LASTS ACROSS INTERRUPTS. DO NOT MODIFY S
;BITS THAT ARE MEANINGFUL ONLY AT INTERRUPT TIME E.G.EOF

SETPST:	TDZ	S,[XWD MTREW!WRLOK,IOBOT!IOTEND!IODERR]
	CONI	MTS,T1
	MOVEM T1,CNIMTS		;SAVE FOR REFERENCE
	JRST	SETS.1

;COPY ALL STATUS OF MTC INTO IOS. USE AT INTERRUPT LEVEL

SETST:	TDZ	S,[XWD MTREW!WRLOK,IOBOT!IOTEND!IODTER!IODEND!IODERR!IOBKTL]
	CONI	MTS,T1
	MOVEM	T1,CNIMTS
	TRNE	T1,PERROR!BDTAPE ;PARITY ERROR OR BAD TAPE?
	TRO	S,IODTER	;YES.
	TRNE	T1,EOF		;END-OF-FILE?
	TRO	S,IODEND	;YES.
SETS.1:	TRNE	T1,REW!BOT	;AT BOT OR NEARLY?
	TRO	S,IOBOT	;YES.
	TRNE	T1,EOT		;AT EOT?
	TRO	S,IOTEND	;YES.
	SKIPN CHNEWD		;CORE PARITY ERROR FLAG
	TRNE	T1,DLATE!ILLOP!HUNG!CHANER
	TRO	S,IODERR
	TRNE	T1,REW		;STILL REWINDING?
	TLO	S,MTREW	;YES.
	TRNE	T1,WRLK	;IS TRANSPORT WRITE LOCKED?
	TLO	S,WRLOK	;YES.
	TRNN	S,IODERR!IODTER	;ANY ERRORS?
	JRST	STOIOS		;NO.
	MOVEM	T1,MDSERR(F)	;YES. SAVE STATUS
	AOS	MDSCNT(F)		;COUNT ERROR
	JRST	STOIOS

;BUILD F FROM UNIT NUMBER IN T1

GDVDAT:	MOVEI	F,MTADDB
GDVDT1:	MOVE	S,DEVIOS(F)
	HLRZ	T2,DEVNAM(F)
	CAIE	T2,(SIXBIT /MTA/)
	POPJ	P,
	LDB	T2,PUNIT
	CAMN	T2,T1
	JRST	CPOPJ1
	HLRZ	F,DEVSER(F)
	JUMPN	F,GDVDT1
	POPJ	P,
;MTAPE
MTAP0:	TRNE	M,100		;SETTING 7 TRACK MODE?
	JRST	SET9TK		;YES
MTAP:
MTAP1:	PUSHJ	P,DLYCTL	;GET CONTROL FOR THIS TAPE
MTAP3:	TRZ	U,7		;NO DATA TRANSFER
	SETZM	PNTR		;PNTR=0. DISCONNECT CHANNEL AFTER 1 OP
	SETZM SVPNTR		;ALSO SAVE ONE
	MOVEI T1,MTTRY
	MOVNM T1,ERCNT	;THIS IS IN CASE OF WRITE EOF
;CALL MTAPC IF DATA PIA AND PNTR MUST REMAIN INTACT

MTAPC:	ANDI	M,17		;GET FUNCTION
	ROT	M,-1		;TRANSLATE FROM TABLE
	SKIPL	M
	SKIPA	T1,MTPTBL(M)
	HLRZ	T1,MTPTBL(M)
	TRZE	T1,100		;MOVE TAPE BACKWARD?
	TRNN	S,IOBOT	;YES, TAPE AT LOAD POINT OR REWINDING?
	TRNN	T1,-1		;OR NO-OP?
	JRST	RELTAP		;YES, RELEASE CONTROLLER AND EXIT
	TRZE	T1,200		;SKIP TO LOGICAL EOT?
	JRST	LEOT		;YES
	TRNE	T1,1000	;SKIP FILE?
	JRST	SKFILE		;YES.
	TRNE	T1,2000	;BACKSPACE FILE?
	JRST	BKFILE		;YES.
	TRZN	T1,400		;TRY TO WRITE TAPE?
	JRST	MTAGO		;NO.
	TLNE	S,WRLOK	;YES, WRITE LOCKED?
	JRST	[TRO S,IOIMPM ;YES, SET IOIMPM AND EXIT
		JRST RELTAP]
MTAGO:	DPB	T1,[POINT 4,U,26] ;PUT FUNCTION INTO COMMAND
	HRLZM	U,USEWRD	;SAVE COMMAND
	MOVEI	T1,INTSP	;SET INTERRUPT SWITCH
	MOVEM	T1,INTSW
	MOVEM T1,INTSW1		;AND TO SECOND INTERUPT SWITCH
	SETZM ZERPTR	;CHANNEL END WORD REPLACED WITH [0], NONE NOW
MTCGO:	MOVEM	U,CNOMTC	;SAVE CONO
	SETZM CHNEWD
	SKIPE TM10FG
	DATAO MTS,[MTIOC]	;SET INITIAL CONTROL WORD
	CONO	MTC,(U)	;ISSUE COMMAND
	POPJ	P,		;AND RETURN.
;SET 9-TRACK TAPE
SET9TK:	TRNE	M,1
	TLOA	S,COMPAT	;SET IBM COMPAT.
MTAREL:	TLZ	S,COMPAT	;NOT IBM COMPAT
	PUSHJ P,STOIOS
	JRST WAIT1
;SKIP TO LOGICAL EOT
LEOT:	TRNE	S,IOBOT	;TAPE AT BOT?
	JRST	LEOT2		;YES. DONT BACKSPACE
	PUSHJ	P,MTAGO	;BACKSPACE RECORD
	PUSHJ	P,DLYCTL	;WAIT FOR IT.
LEOT2:	PUSHJ	P,SKFILE	;SKIP A FILE
	TRNE	S,IOTEND	;EOT?
	POPJ	P,		;YES. EXIT
	MOVEI	M,6		;SKIP A RECORD
	PUSHJ	P,MTAP
	PUSHJ	P,DLYCTL	;WAIT FOR IT.
	TRNN	S,IODEND!IOTEND	;END OF FILE SEEN?
	JRST	LEOT2		;NO. SKIP TO NEXT FILE
	TRNE	S,IOTEND	;EOT SEEN?
	POPJ	P,		;NO BACKSPACE
	MOVEI	M,7		;YES. BACKSPACE RECORD
	JRST	MTAP3

MTPTBL:	XWD	101,0		;REW,NOP
	XWD	405,0		;WRITE EOF,
	XWD	0,0
	XWD	107,6		;BACKSPACE REC,SKIP REC
	XWD	11,207		;REW&UNLOAD,LOG EOT
	XWD	415,0		;WRITE BLANK TAPE,
	XWD	0,0
	XWD	2117,1016	;BACK FILE,SKIP FILE

;THIS CODE REPLACES FUNCTION 16 SO THAT ONE USER CANNOT
;LOCK UP THE CONTROL

SKFILE:	PUSHJ	P,SKPSET	;SET TO SKIP QUANT RECORDS
	MOVEI	M,6		;SKIP RECORD
	PUSHJ	P,MTAPC
	PUSHJ	P,DLYCTL	;WAIT
	TRNN	S,IODEND!IOTEND ;EOF OR EOT?
	JRST	SKFILE		;NO, CONTINUE
	JRST	RELTAP

;THIS CODE REPLACE FUNCTION 17 SO THAT ONE USER CANNOT
;LOCK UP THE CONTROL

BKFILE:	PUSHJ	P,SKPSET	;SET TO BACKSPACE QUANT RECORDS
	MOVEI	M,7		;BACKSAPCE RECORD
	PUSHJ	P,MTAPC
	PUSHJ	P,DLYCTL
	TRNN	S,IOBOT!IODEND ;EOF OR BOT?
	JRST	BKFILE		;NO,CONTINUE
	JRST	RELTAP
SKPSET:
	MOVSI	T2,(BLKO MTC,)
	HRRI	T2,PNTR
	MOVEM	T2,MTALOC	;SET BLKO FOR 1 INTERRUPT/RECORD
	MOVNI	T1,QUANT
	HRLZM	T1,PNTR	;ALLOW QUANT INTERRUPTS BEFORE JBDONE
	POPJ	P,
;OUTPUT M
MTOUT:	TLNE	S,WRLOK	;WRITE LOCKED?
	JRST	WRLOCK		;YES, SET IOIMPM AND EXIT
	SETZM JBTABT(J)		;DONT NEED IT ANY MORE
	HRLZM U,USEWRD		;SAVE U (IN CASE 0 LENGTH RECORD)
	TLO	S,IO		;NO, INDICATE OUTPUT
	MOVEI	T2,INTWR	;SET INTERRUPT SWITCH
	MOVEM	T2,INTSW
	TRO	U,4000	;FUNCTION = WRITE
	TRZ	U,10000	;WITHOUT LONG EOR GAP
	MOVSI	T2,(BLKO MTC,) ;SETUP BLKO
MTDTGO:	PUSHJ	P,SNCIOA	;BUMP UP JBTIOA.
	PUSHJ	P,MTADJL	;ADJUST LIST IF NEEDED
	HRRZ	T1,DEVCLS(F)	;GET LIST BUFFER POINTER
	HRRZM	T1,MTIOC	;PUT IT IN CHANNEL COMMAND WORD
MTDTG1:	MOVE	T1,@MTIOC	;GET FIRST COMMAND WORD
	PUSHJ	P,SKZRC
	JRST	[PUSHJ P,SDCIOA
		JRST	RELTAP]
MTDTG2:	MOVEM	T1,PNTR	;SAVE BLKI/BLKO POINTER
	MOVEM	T1,SVPNTR
	MOVEI	T1,MTTRY	;INITIALIZE ERROR COUNTER
	TLNN	S,IO		;READING?
	LSH	T1,1		;DOUBLE # OF TRIES
	MOVNM	T1,ERCNT
	HRRI	T2,PNTR	;BLKI/BLKO PNTR
	MOVEM	T2,MTALOC	;INTO INTERRUPT LOC
	HRLZM	U,USEWRD	;SAVE COMMAND
	MOVE	T1,INTSW
	MOVEM	T1,INTSW1	;SAVE CURRENT DISPATCH
	TRO	S,IOACT	;SETACT CLEARS IOW
	PUSHJ	P,STOIOS
	PUSHJ P,SETZPT	;REPLACE END WITH [0] SO WE KNOW TERMINATE
	PUSHJ	P,MTCGO	;START IO AND SAVE CONO
	POPJ	P,		;NO. EXIT THIS INTERRUPT
;
;ADJUST LIST FOR 14 OR 18 BIT LENGTH
;  EXPECTS LIST AT DEVCWP IN 14 BIT FORMAT
;  WILL RETURN WITH LIST INCORRECT FORMAT FOR DEVICE.
;
MTADJL:	
	SKIPGE	TM10FG		;CHECK CONTROLLER TYPE
	POPJ	P,		;YES. LIST IS O.K. AS IS
	PUSH	P,T2		;SAVE REGISTER
	MOVSI	T1,-LENFXL	;LENGTH OF LIST
	HRRI	T1,DEVLSA(F)	;ADDRESS OF LIST
MTADJ1:	MOVE	T2,(T1)		;GET CCW FROM LIST
	ASH	T2,-4		;EXTEND SIGN AND POSITION
	TLNE	T2,-1
	TLO	T2,740000
	HLLM	T2,(T1)		;STORE BACK NEW LENGTH FIELD
	AOBJN	T1,MTADJ1
	POP	P,T2		;RESTORE REGISTER
	POPJ	P,

;INPUT M
MTIN:	TLZ	S,IO		;INPUT
	SETZM JBTABT(J)		;DONT NEED IT ANY MORE
	MOVEI	T2,INTRD	;SET INTERRUPT SWITCH
	MOVEM	T2,INTSW
MTIN1:	
	TRO	U,2000	;FUNCTION = READ
	MOVSI	T2,(BLKI MTC,) ;SETUP BLKI
	JRST	MTDTGO		;GO START TAPE

SETZPT:	PUSH P,T1
	PUSH P,T2
	MOVE T1,MTIOC
	SKIPE (T1)	;SEARCH TO THE END
	AOJA T1,.-1
	MOVEI T2,[0]
	MOVEM T2,(T1)	;REPLACE WITH A CHANNEL TRANSFER
	HRRZM T1,ZERPTR	;REMEMBER WHERE IT IS
	POP P,T2
	JRST TPOPJ
;HERE WHEN BLKI/BLKO COUNTS DOWN TO ZERO.

MTDEND:	0
	CONO	MTS,1		;ISSUE FUNCTION STOP
	JEN	@MTDEND
MTAIN0:	SKIPA T1,MTASAV
MTAINT:	CONSO	MTS,0		;HERE TO CHECK FOR MAG TAPE INT.
MTAIN1:	JRST	.-1
	CONSZ	MTS,HUNG!ILLOP!JBDONE!BDTAPE	;CHAN ERROR ONLY?
	JRST	MTAIN2		;NO
	SKIPN TM10FG
	JRST MTAIN1		;TM10A, DO NOT CHECK CHANNEL BITS
	MOVEM	T1,MTASAV	;YES. SAVE AN AC
	CONI	MTS,T1		;CONI
	TLNN	T1,(WCWDON!DTPAR)	;INTERRUPT FOR TM10B?
	JRST	MTAIN0		;NO, CONTINUE DOWN CONSO CHAIN
	MOVE	T1,MTASAV	;YES
MTAIN2:	JSR	MTASAV		;SAVE AC'S, SET UP PDL
	CONI	MTC,T1		;READ STATUS
	MOVEM	T1,CNIMTC	;SAVE STATUS
	HRRM	T1,USEWRD
	SKIPE ZERPTR	;WAS THE END WORD REPLACE?
	SETZM @ZERPTR	;YES, PUT IT BACK
	SETZM ZERPTR	;AND MARK NO WORD NOW
	LDB	T1,[POINT 3,T1,20]
	PUSHJ	P,GDVDAT	;GENERATE F FOR INTERRUPTING TRANSPORT
	JRST	MTADIS		;NO SUCH TRANSPORT -- IGNORE
				;(PROBABLY OPERATOR PLAYING WITH DIALS)
	LDB	T2,[POINT 3,USEWRD,2]
	CAME	T1,T2	;IS IT THE TRANSPORT WE EXPECTED?
	JRST	MTADIS		;NO, IGNORE (SAME CAUSE)
				;WE WILL GET HUNG DEVICE EVENTUALLY.
	TLNN	S,HASCTL	;WE HAD BETTER HAVE THE CONTROLLER
	STOPCD	.+1		;WE DONT!!
	CONI	MTS,DEVSTS(F) ;SAVE STATUS FOR USER OR DIAGNOSTIC USE
	PUSHJ	P,SETST	;SET UP STATUS IN S
	JRST	@INTSW		;DISPATCH-INTIGN INITIALLY


INTIGN:
INTXIT:	PUSHJ	P,STOIOS	;STORE S
MTADIS:	HRRZ	U,USEWRD	;GET INTERRUPT STATUS
	ANDI	U,760700	;TURN OPERATION TO A NOP.
	PUSHJ	P,MTCGO	;GO DO THE NOP (WITH PIA=0)
	HLLZS	MTAINT		;NOW DISABLE SOFTWARE
	POPJ	P,
INTRD:				;HERE FOR BUFFERED MODE INPUT INTERRUPT
	JSR	ERRCK		;CHECK FOR ERRORS
	TLZE	S,IOW		;IN A WAIT?
	PUSHJ	P,SETIOD	;YES, UNWAIT US.
	TRNE	S,IODEND	;EOF?
	JRST	RDEOF		;YES.
	PUSHJ	P,WRDCNT	;COMPUTE # OF WORDS TRANSFERRED
	 TRO	S,IOBKTL	;NO SKIP IF RECORD TOO LONG
T1,DEVBWC(F)	;ADVANCE COUNT ADDRESS
	HRRZM	T2,-1(T1)	;STORE COUNT FOR UUO LEVEL

	PUSHJ	P,NXTRCD	;ADVANCE BUFFERS-ADDRESS CHECK
	JRST	IOSTOP		;STOP READING
	TRNE	S,IOTEND!IODTER!IODERR!IOBKTL
	JRST	IOSTOP		;STOP IF ERROR
	HLRZ	U,USEWRD	;GET BACK COMMAND
	SOSLE	QUANTM
	JRST	MTIN2
	SKIPE	MTREQ
	JRST	IOSTOP		;STOP WHEN ANOTHER JOB WANTS CONTROL AND
MTIN2:	TRO	U,2000		;INPUT
	MOVSI	T2,(BLKI MTC,)
	JRST	MTDTG1
				;QUANTM EXHAUSTED

RDEOF:	TRZ	S,IODEND
	TLO	S,IOEND
IOSTOP:	PUSHJ	P,SDCIOA	;DEC DON'T SWAP COUNT.
IOSTP2:	PUSHJ	P,RELCTL	;RELEASE CONTROLLER
	JRST	INTXIT		;EXIT THIS INTERRUPT.

NXTRCD:	AOS	DEVABC(F)	;ADVANCE BUFFER COUNT
	HRRZ	T1,MTIOC	;START OF CURRENT LIST
NXTRC1:	SKIPE	(T1)		;AT END OF RECORD?
	AOJA	T1,NXTRC1		;NO. KEEP LOOKING
	ADDI	T1,1
	MOVEM T1,MTIOC		;SAVE AS NEW POINTER
	SKIPN T1,(T1)		;IS THAT WORD 0 TOO?
	POPJ P,			;YES, END OF ENTIRE LIST
SKZRC:	TLNN	T1,777760	;NO, ZERO REQUEST?
	SKIPGE	TM10FG		;
	JRST	CPOPJ1		;
	TLNN	T1,1		;
	JRST	NXTRCD		;
	JRST	CPOPJ1		;

INTWR:				;BUFFERED MODE WRITING
	JSR	ERRCK		;CHECK FOR ERRORS
	TLZE	S,IOW
	PUSHJ	P,SETIOD
ADVOUT:	PUSHJ	P,NXTRCD	;ADVANCE OUTPUT RECORD
	JRST	IOSTOP		;NO MORE.
	TRNE	S,IOTEND!IODTER!IODERR!IOBKTL
	JRST	IOSTOP		;STOP IF ERROR
	HLRZ	U,USEWRD	;GET BACK COMMAND
	SOSLE	QUANTM
	JRST	MTOUT2
	SKIPE	MTREQ
	JRST	IOSTOP		;STOP AFTER QUANTM EXHAUSTED AND SOME JOB WAITING FOR CONTROL
MTOUT2:	TRO	U,4000
	TRZ	U,10000
	MOVSI	T2,(BLKO MTC,)
	JRST	MTDTG1

INTDMP:				;DUMP MODE I/O
	JSR	ERRCK
	TRNN	S,IOTEND!IODTER!IODERR!IOBKTL
	JRST	DMPBLK		;GET NEXT RECORD
DMPEND:	TLZE	S,IOW
	PUSHJ	P,SETIOD
	JRST	IOSTOP

INTSP:			;HERE FOR INTERRUPT ON SPACING MTAPE
	LDB	T1,[POINT 4,USEWRD,8]	;GET FUNCTION
	CAIE	T1,5		;IS IT WRITE EOF?
	TRZA S,IODTER!IODERR!IOBKTL	;OTHER SPACING, NO ERR
	JSR	ERRCK	;YES.CHECK FOR ERRORS
	TLZE	S,IOW
	PUSHJ	P,SETIOD
	JRST	IOSTP2		;TERMINATE THE OPERATION

ERRCK:	0			;SAVE RETURN
	TRNN	S,IODTER!IODERR!IOBKTL
	JRST	@ERRCK		;NO ERRORS
	SKIPN CHNEWD
	CONSZ	MTS,CHANER
	JRST	CHNERR		;CHANNEL ERROR
	CONSO	MTS,ILLOP!HUNG!RCERR ;IS THIS ERROR CORRECTBALE?
	TRNE	S,IONRCK	;CAN WE TRY TO CORRECT?
	JRST	@ERRCK		;NO TO EITHER
	SKIPE SVPNTR	;THIS IS TRUE ONLY ON WRITE EOF
	TLNE	S,IO		;WRITING?
	SKIPA
	JRST	READRC		;NO. READ RECOVERY
	SETZM	BLANKN		;CLEAR COUNT OF 3" BLANK SECTIONS

RETRY:	PUSHJ	P,LCALC	;RETRUN COUNT OF 3"
				;BLANK SECTIONS IN T1
	MOVEM	T1,BLANK3	;SECTIONS TO BLANK
	ADDB	T1,BLANKN
	CAIL	T1,^D100	;100. 3" SECTIONS=25 FEET
	JRST	ERRXIT		;TRIED ENOUGH BLANK TAPE, GIVE ERROR
	JSR	BACKSP		;SPACE REVERSE OVER RECORD IN ERROR
WB.1:	HLRZ	U,USEWRD
	ANDI	U,760770
	IORI	U,015000	;WRITE 3" OF BLANK TAPE
	PUSHJ	P,MTEROP
	SOSLE	BLANK3		;ENOUGH WRITTEN?
	JRST	WB.1		;NO, CONTINUE

;DO THE ORIGINAL WRITE OPERATION OVER AGAIN

	MOVE	T1,SVPNTR
	MOVEM	T1,PNTR	;RESTORE IOWD
	HLRZ	U,USEWRD
	PUSHJ P,SETZPT	;SET ZERO END CHECK
	PUSHJ	P,MTEROP	;DO THE OPERATION
	AOS	MDRWRT(F)		;WRITE RETRYS
	TRNN	S,IODTER!IODERR	;ANY ERRORS
	JRST	RET.0		;NO, CHECK IT
	AOSGE	ERCNT		;TRIED ENOUGH?
	JRST	RETRY		;TRY TO WRITE AGAIN
	JRST ERR.1

;AT THIS POINT THE RECORD IS PRESUMABLY WRITTEN WITHOUT ERROR
;HOWEVER TO BE ASSURED OF THAT DO
; 2 BACKSPACES AND 2 DUMMY READ TO VERIFY THAT NO ERRORS OCCUR.

RET.0:	JSR	BACKSP
	JSR	BACKSP
	TRNN	S,IOBOT	;NOW AT LOAD POINT?
	JSR	ERREAD		;READ PREVIOUS DATA
RET.2:	JSR	ERREAD		;READ THE BLOCK REWRITTEN
	MOVE	T1,DCOUNT	;COUNT OF WORDS
	SUBI	T1,NOISE
	TRNE	S,IODTER	;PARITY OR BAD TAPE?
	JUMPL	T1,RET.2	;YES-IGNORE AND TRY NEXT
				; TRYING TO PASS "NOISE" RECORD
	PUSHJ P,TRNCNT	;CACLULATE THE COUNT FOR THE TRANSFER
	CAME	T1,DCOUNT	; = LENGTH JUST READ?
	JRST	ERRXIT		;NO. NOTE ERROR
	TRNE	S,IODTER!IODERR ;ERRORS?
	JRST	ERR.1		;NO RECOVERY
	AOS	MDWREC(F)		;COUNT RECORD SUCCESSFULLY REWRITTEN
	MOVE	T1,INTSW1
	MOVEM	T1,INTSW	;RESTORE DISPATCH
	JRST	@INTSW		;DISPATCH TO ORIGINAL HANDLER

ERRXIT:	TRO	S,IODTER!IODERR	;INDICATE ERROR TO USER PROGRAM
ERR.1:	AOS	MDWFAL(F)		;COUNT RECOVERY FAILURE
	JRST	@ERRCK
;HERE TO RECOVER FROM A READ ERROR

READRC:	AOSL	ERCNT		;TRIED ENOUGH?
	JRST	READ.3		;YES EXIT WITH ERROR
	PUSHJ	P,WRDCNT	;COMPUTE RECORD LENGTH
	 JRST	READ.1		;RECORD LENGTH .GT. WORD COUNT
	CAIL	T2,NOISE	;CAN WE CALL IT A NOISE RECORD?
	JRST	READ.1		;NO
	AOS	NOISER		;COUNT NOISE RECORD
	JRST	READ.2		;FORGE AHEAD

READ.1:	JSR	BACKSP
READ.2:	MOVE	T1,SVPNTR
	MOVEM	T1,PNTR	;RESTORE IOWD
	HLRZ	U,USEWRD
	PUSHJ P,SETZPT		;RESET END AND REPEAT OP
	PUSHJ	P,MTEROP	;DO THE READ AGAIN
	AOS	MDRRED(F)		;COUNT REREAD ATTEMPTS
	MOVE	T1,INTSW1
	MOVEM	T1,INTSW	;RESTORE DISPATCH(SAVED AT MTDTGO)
	JRST	@INTSW		;DISPATCH TO ORIGINAL HANDLER
READ.3:	AOS	MDRFAL(F)		;COUNT REREAD FAILURES
	JRST	@ERRCK
ERREAD:	0
	MOVE	T1,[JSR DUMMY]
	EXCH	T1,MTALOC
	MOVEM	T1,SVBLKI	;SET FOR "NULL" READ
	SETZM	DCOUNT		;PREPARE TO COUNT WORDS
	MOVE	T1,SVPNTR
	MOVEM	T1,PNTR	;RESTORE IOWD FOR DATA
	SKIPE TM10FG
	PUSHJ P,SETZPT		;SET END CHECK POINTER
	MOVE	T1,MTIOC
	MOVEM	T1,CPNTR+1	;LINK TO OLD COMMAND LIST
	MOVEI	T1,CPNTR
	MOVEM	T1,MTIOC	;USE DIFFERENT CHANNEL COMMAND LIST
	HLRZ	U,USEWRD
	ANDI	U,760777	;LEAVE DATA PI
	IORI	U,002000	;FUNCTION=READ
	SKIPE TM10FG
	IORI U,003000		;READ COMPARE FOR TM10B
	PUSHJ	P,MTEROP
	MOVE	T1,SVBLKI
	MOVEM	T1,MTALOC	;RESTORE BLKI/BLKO
	HRRZ	T1,CPNTR+1
	MOVEM	T1,MTIOC	;RESTORE NORMAL CCW LIST
	SKIPN TM10FG
	JRST @ERREAD		;DONE IF TM10A
	PUSHJ	P,WRDCNT
	 JFCL
	MOVEM	T2,DCOUNT	;STORE RECORD LENGTH AS THO COUNTED UP
	CONSZ	MTS,RCERR
	TRO	S,IODTER	;CONSIDER COMPARE ERROR AS DATA ERROR
	JRST	@ERREAD

DUMMY:	0			;HERE TO READ A RECORD TO CHECK
				;FOR LENGTH AND ANY ERRORS
	DATAI	MTC,SINK
	AOS	DCOUNT
	JEN	@DUMMY

MTEROP:	POP	P,INTSW	;RETURN TO MTEROP CALLER
				;ON DONE INTERRUPT
	JRST	MTCGO		;DO OPERATION AND EXIT THIS INTERRUPT

BACKSP:	0
	MOVE	T1,[JSR MTDEND]	;SET FOR POSITIVE STOP OF BACKSPACE
	EXCH	T1,MTALOC
	MOVEM	T1,SVBLKI
	HLRZ	U,USEWRD
	ANDI	U,760777	;LEAVE DATA PI FOR STOPPING
	SETZM	@MTIOC		;STOP WITH NO DATA TRANSFER
	IORI	U,007000
	PUSHJ	P,MTEROP	;ISSUE BACKSPACE
	MOVE	T1,PNTR
	MOVEM	T1,@MTIOC	;RESTORE OLD COMAND WORD
	MOVE	T1,SVBLKI
	MOVEM	T1,MTALOC	;RESTORE BLKI
	JRST	@BACKSP
;CALCULATE NUMBER OF 3" SECTIONS OF BLANK TAPE TO
;WRITE TO COVER RECORD IN ERROR

LCALC:	LDB	T2,[POINT 2,USEWRD,11] ;GET DENSITY (0,1,2,3)
	HLRZ	T1,LTABLE(T2)	;ASSUME 7 CHANNEL
	CONSO	MTS,CHAN7	;SEVEN CHANNEL TAPE?
	HRRZ	T1,LTABLE(T2)	;NO. 9 CHANNEL
	MOVE	T2,T1	;COPY ENTRY
	HLRZ	T1,USEWRD	;GET COMMAND
	TRNE	T1,1B22	;CORE DUMP MODE?
	MOVEI	T2,^D600	;YES. 600. WORDS/3"
	PUSHJ P,TRNCNT	;FIND OUT THE REQUESTED COUNT
	IDIV	T1,T2	; / WORDS-3"
	ADDI	T1,1		;ROUND UP
	CAILE	T1,^D10	
	MOVEI	T1,^D10	;ALLOW ONLY 30" BLANK TAPE PER CALL
				; SO 25' LIMIT NOT EXCEEDED BY MTTRY RETRIES
	POPJ	P,

LTABLE:	XWD ^D100,^D120		;7 CHANNEL,9 CHANNEL WORDS/3" OF TAPE
	XWD ^D278,^D333		;556 BPI
	XWD ^D400,^D480		;800 BPI
	XWD ^D400,^D480		;800 BPI

TRNCNT:	MOVEI T1,0	;FIND OUT THE COUNT FOR THIS TRANSFER
	PUSH P,T2
	PUSH P,T3
	MOVE T2,MTIOC
TRNCT1:	SKIPN T3,(T2)	;IS THIS THE END?
	JRST	[POP P,T3	;YES, RESTORE
		POP P,T2
		POPJ P,]
	HLROS T3
	SKIPGE TM10FG
	ASH T3,-4	;22-BIT DF-10
	MOVNS T3
	ADDM T3,T1
	AOJA T2,TRNCT1	;ADD COUNT OF NEXT IOWD
;HERE ON CHANNEL ERROR

CHNERR:	CONI	MTS,U		;READ ERROR BITS
	TLNN	U,(DTPAR)		;DATA PARITY ERROR?
	JRST	REFRNS		;NO, CONTROL WORD HAS BEEN STORED
	CONO	MTS,21	;YES. RESET MTS
	SETOM CHNEWD
	POPJ	P,		;AND EXIT INTERRUPT. WILL COME BAKC
				;LATER ON CCW WORD WRITTEM INTERRUPT

;HERE ON A CHANNEL ERROR AFTER THE CHANNEL CONTROL WORD IS WRITTEN
;REFERNCING THE WORD WHICH THE CHANNEL SAYS IS BAD SHOULD
;CASUE THE MACHINE TO INTERUPT - IF IT DOESN'T1, LIGHT ERROR BIT AND GO AWAY

REFRNS:	CONO	MTS,10		;CLEAR ERROR BITS
	TRO	S,IODERR	;NO, LIGHT DEVICE ERR BIT
	JRST @ERRCK		;EXIT FROM INTERUPT
EXTERNAL WAIT1
MTDMPI:	TRNE	S,IODEND	;CHECK FOR EOF
	JRST	RELTAP		;DONT READ PAST EOF
	TLZA	S,IO
MTDMPO:	TLO	S,IO
	SETZM JBTABT(J)		;DONT NEED IT ANY MORE
	HRLM	U,USEWRD	;SAVE U
	TLNE	S,IO		;CHECK WRITE LOCK
	CONSO	MTS,EOT!WRLK	;AND EOT IF WRITING
	JRST	MTDMP2
	CONSO	MTS,EOT		;ERROR
WRLOCK:	TROA	S,IOIMPM	;WRITE LOCK
	TRO	S,IOTEND+IOBKTL  ;EOT
	AOS	DEVABC(F)
	JRST	RELTAP		;GIVE UP TAPE AND RETURN


MTDMP2:	PUSHJ	P,SNCIOA	;BUMP JBTIOA.
	HRRZ	T2,DEVCLS(F)
	MOVEM	T2,MTIOC		;SET UP CHANNEL WORD
	TLZE S,IOBEG
	SETZM MDDCNT(F)	;THE COUNT IN THIS OPERATION
	PUSHJ	P,MTADJL	;ADJUST LIST FOR CONTROLLER TYPE
	SETZM DRPTR		;NO DUMP RECORDS OR NOT CONTINUED
	JRST	DMPBL1
DMPBLK:	PUSHJ P,WRDCNT
	JFCL
	HRRZS T2
	ADDM T2,MDDCNT(F)	;INCREMENT THE DUMP COUNT
	SKIPE DRPTR
	JRST MTDMR1		;DUMP RECORDS AND OUTPUT
DMPBK1:	PUSHJ	P,NXTRCD	;GET NEXT COMMAND
	JRST	DMPEND		;DONE WITH LIST.
DMPBL1:	MOVEI	T2,INTDMP
	HLRZ	U,USEWRD	;RESTORE DEVICE COMMAND
	MOVEM	T2,INTSW	;SET INTERRUPT SWITCH
	TRNN S,1	;IS IT DUMP RECORD
	JRST MTDMPR
	TLNE	S,IO		;WRITING?
	JRST	MTOUT2		;YES. GO WRITE RECORD
	JRST	MTIN2		;GO READ RECORD
MTDMPR:	TLNN S,IO	;WRITING
	JRST	[TRO U,10000	;READ, JUST SET IGNORE RECORDS
		JRST MTIN2]
MTDMR3:	DMOVE T1,@MTIOC
	DMOVEM T1,DRPTR	;SAVE THE (POSSIBLY) 2 WORDS
	HLRO T1,DRPTR
	SKIPGE TM10FG
	ASH T1,-4
	MOVNS T1	;COUNT IN FIRST WORD
	CAIGE T1,200	;SEE HOW BIG IT IS
	JRST MTDMR4	;NOT AT LEAST 1 RECORD
	MOVNI T1,200
	DPB T1,[POINT 14,@MTIOC,13]
	SKIPL TM10FG
	HRLM T1,@MTIOC	;SET COUNT TO 200
	HRRZ T1,MTIOC
	SETZM 1(T1)	;AND NEXT WORD TO 0
	JRST MTOUT2	;AND STRT TRANSFER

MTDMR4:	SKIPN DRPTR+1	;IF ONLY 1 WORD AND SMALL COUNT
	JRST MTOUT2	;DO IT
	HLRO T2,DRPTR+1
	SKIPGE TM10FG
	ASH T2,-4
	MOVNS T2
	ADD T2,T1	;GET TOTAL COUNT
	CAIG T2,200
	JRST MTOUT2	;NOT TOO BIG, GO DO IT
	MOVEI T2,200
	SUB T2,T1
	MOVE T1,MTIOC
	MOVNS T2
	DPB T2,[POINT 14,1(T1),13]	;COUNT FOR SECOND WORD
	SKIPL TM10FG
	HRLM T2,1(T1)
	MOVE T2,2(T1)
	MOVEM T2,DRPTR+2	;NEED AN EXTRA WORD FOR TEMINATE
	SETZM 2(T1)
	JRST MTOUT2

;HERE TO CONTINUE A DUMP RECORD OUTPUT

MTDMR1:	MOVEI T2,200
	ADDM T2,DRPTR
	HLRZ T1,DRPTR	;UPDATE LOC AND COUNT
	SKIPGE TM10FG
	MOVEI T2,200_4
	ADD T1,T2
	HRLM T1,DRPTR
	TLNN T1,-1
	JRST MTDMR2	;NO OVERFLOW, JUST CONTINUE
	SKIPN DRPTR+1	;IS THERE A SECOND WORD?
	JRST DMPBK1	;WE MUST BE FINISHED, FIND NEXT TRANSFER
	PUSH P,T1	;SAVE EXCESS COUNT
	DMOVE T1,DRPTR+1
	DMOVEM T1,DRPTR	;WE MUST HAVE SAVE EXTRA WORD
	AOS MTIOC	;AND MOVE UP POINTER
	POP P,T1	;RESTORE COUNT
	HRRZS T1
	SKIPGE TM10FG
	LSH T1,-4
	ADDM T1,DRPTR	;NO ADJUST LOC OF SECOND WORD
	SKIPGE TM10FG
	LSH T1,4
	HLRZ T2,DRPTR
	ADD T2,T1
	TLNE T2,-1
	JRST DMPBK1	;JUST SKIP OVER THESE
	HRLM T2,DRPTR		;RESET COUNT
MTDMR2:	DMOVE T1,DRPTR
	DMOVEM T1,@MTIOC
	JRST DMPBL1	;CONTINUE
WRDCNT:	SKIPN T1,SVPNTR
	JRST WRDC4	;MUST BE WRITE EOF
	HRRZS	T1	;ADDRESS OF FIRST WORD (-1)
	SKIPE TM10FG
	JRST WRDC2		;DIFFERENT ROUTINE FOR TM10B
	HRRZ	T2,PNTR	;ADDRESS OF LAST WORD TRANSMITTED
	SUB	T2,T1	;LAST LOC. - FIRST
	CONI MTS,T1
	TLNE T1,7
	SUBI T2,1	;WE HAVE NON INTEGER CHR CNT, SUB 1
	CONSO	MTS,RLINC	;RECORD LENGTH=REQUEST?
	JRST	WRDC1		;YES
	HLRZ	T1,PNTR	;GET RESIDUE OF WORD COUNT
	SKIPE	T1		;IS IT 0?
WRDC1:	AOS	(P)		;NO. RECORD LENGTH .LE. WORD COUNT
WRDC3:	POPJ	P,		;NO SKIP IF LONG RECORD

WRDC4:	MOVSI T2,1
	JRST WRDC1	;ONLY FOR WRITE EOF

;CALCULATE WORD COUNT FOR DF-10

WRDC2:	PUSH P,T3
	PUSH P,T4
	MOVEI T2,0	;ZERO COUNT SO FAR
	MOVE T4,MTIOC
	HLRZ T3,MTCCW	;GET END COMMAND WORD POINTER
	SKIPL TM10FG
	TRZA T3,740000	;KEEP ONLY LOW 14 BITS FOR 18 BIT DF-10
	LSH T3,-4	;SINCE THATS ALL THATS THERE FOR 22 BIT
WRDC2A:	SKIPN (T4)
	JRST	[POP P,T4	;FOUND A HALT, END OF COUNTING
		POP P,T3
		CONSZ MTS,RLINC
		JRST WRDC3	;DIFFER, RECORD>COUNT
		JRST WRDC1]	;RECORD=COUNT
	MOVEI T1,1(T4)
	ANDI T1,37777
	CAMN T1,T3	;CHECK FOR MATCH ON LOW 14 BITS
	JRST WRDC5	;YES
	HLRO T1,(T4)
	SKIPGE TM10FG
	ASH T1,-4	;GET COUNT
	SUB T2,T1	;UPDATE COUNT
	AOJA T4,WRDC2A

WRDC5:	MOVE T1,MTCCW
	SUB T1,(T4)	;SUTRACT START FROM END
	HRRZS T1
	ADDM T1,T2
	CONI MTS,T4
	TLNE T4,7
	SUBI T2,1	;NON-INTEGER CHR CNT, SUB 1
	POP P,T4
	POP P,T3
	SOJA T2,WRDC1	;MUST BE < COUNT, COUNT 1 TOO LARGE
USEWRD:	0		;LH STORE COMMAND ISSUED BY CONO MTC,
			;RH STORES STATUS READ IT AT MTAINT

ZERPTR:	0	;POINTER TO 0 WORD REPLACED WITH [0] SO END OF TRANSFER IDENTIFIABLE

ERCNT:	0		;RETRY COUNTER, -3,-2,-1,0,...10

QUANTM:	0		;COUNTED DOWN ON CONSECUTIVE READS OR WRITES
LSTLOC:	0
CPNTR:	IOWD 1,[EXP 0]	;EXTRA ZERO WORD FOR READ/COMPARE
	0		;WORD FOR LINK TO PREVIOUS COMMAND LIST
PNTR:	0		;BLKI/BLKO POINTER WORD OR
			;FIRST WORD OF DF10 CHANNEL COMMAND PROGRAM
		EXP .+1	;LEAVE AN EXTRA COMMAND WORD FOR SHORT
			;OR LONG RECORD TEST
	0		;END OF CHANNEL COMMAND LIST

SVPNTR:	0		;COPY OF IOWD
SVBLKI:	0		;COPY OF BLKI/BLKO SAVED BY ERREAD
SINK:	0		;PLACE TO STUFF DATA
DCOUNT:	0		;COUNT OF WORDS READ BY ERREAD
NOISER:	0		;COUNT OF NOISE RECORDS IGNORED
BLANKN:	0		;TOTAL NUMBER OF 3" TO BLANK
BLANK3:	0		;COUNT OF 3" TO BLANK
INTSW:	0		;DISPATCH ADDRESS- INTIGN,INTRD,INTWR,INTSP,...
INTSW1:	0		;COPY OF ORIGINAL DISPATCH(BEFORE ERROR)
CHNEWD:	0		;CHANEL PARITY ERROR FLAG
TM10FG:	0		;NON-ZERO IF TM10B .  >0=18 BIT,<0 =22BIT
DRPTR:	BLOCK 3		;USED IN DUMP RECORD OUTPUT TO SPLIT I/O
;DUMP MODE IO CONTROL FLAGS

BADCOM:	0		;ERROR FLAG


CNIMTC:	0		;STATUS AFTER LAST INTERRUPT
CNIMTS:	0		;RESULT OF LAST SETST
CNOMTC:	0		;LAST COMMAND ISSUED AT MTCGO


MTANMS:	SIXBIT /MTAHGS/
	SIXBIT /MTAHGC/
	SIXBIT /MTAHFC/
	SIXBIT /MTAHTM/
	SIXBIT /MTAHCT/
	SIXBIT /MTAERR/
	SIXBIT /MTAERC/
	SIXBIT /MTARWT/
	SIXBIT /MTAWFL/
	SIXBIT /MTAWRT/
	SIXBIT /MTARRD/
	SIXBIT /MTARFL/

MTANMN==.-MTANMS

MTALIT:	LIT
MTAEND:	END
      b[.^