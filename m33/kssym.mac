;THIS MODULE ASSEMBLED WITH KS-10 PARAMETER FILE - KSSYM.MAC

	IF2,<IFNDEF LISTSN,<		;LIST KSSYM.MAC IN COMMON ONLY
	.CREF
					TAPE>>
					;SKIP PASS2 IN ALL OTHER CASES
IF2,<
SUBTTL KS-10 PARAMETER DEFINTIONS FOR PDP-10 MONITOR
>;END IF2

;CPU TYPE SYMBOL DEFINITION

CPUTYP==CPUKS
DEFINE IFKMC<REPEAT 1,>		;The KMC is standard in TYMSHARE XX systems.
DEFINE IFNKMC<REPEAT 0,>	;The file NOKMC.MAC redefines these two
				;macros for non-standard 2020 systems.

DEFINE PRINTF(A,B,C,D),<;;;PRINTX A B C D>	;;Output on F3 builds only
SUBTTL KS-10 INSTRUCTION DEFINITIONS

OPDEF	ADJSP	[105000000000]	;Adjust stack pointer
OPDEF	DADD	[114000000000]	;Double integer ADD
OPDEF	DSUB	[115000000000]	;Double integer SUB
OPDEF	DMUL	[116000000000]	;Double integer MUL (quad-word result)
OPDEF	DDIV	[117000000000]	;Double integer DIV (quad-word dividend)
OPDEF	ADJBP	[IBP]		;Adjust byte pointer if AC field nonzero
OPDEF	PXCT	[XCT]		;Previous context XCT

OPDEF	APRID	[700000000000]	;BLKI  APR, Read APR ID (CPU serial number)
OPDEF	WRAPR	[700200000000]	;CONO  APR, set APR priority assignment
OPDEF	RDAPR	[700240000000]	;CONI  APR, read APR status bits
OPDEF	WRPI	[700600000000]	;CONO  PI,  write PI status
OPDEF	RDPI	[700640000000]	;CONI  PI,  read PI status
OPDEF	CLRPT	[701100000000]	;BLKO  PAG, clear pager tables
OPDEF	WREBR	[701200000000]	;CONO  PAG, write Exec Base Register
OPDEF	RDEBR	[701240000000]	;CONI  PAG, read Exec Base Register
OPDEF	WRUBR	[701140000000]	;DATAO PAG, write User Base Register
OPDEF	RDUBR	[701040000000]	;DATAI PAG, read User Base Register
DEFINE	WRADB(X),<PRINTX KS does not have an address break register X>
DEFINE	RDADB(X),<PRINTX KS does not have an address break register X>
OPDEF	WRPUR	[702140000000]	;Write Process Use Register
OPDEF	RDPUR	[702100000000]	;Read Process Use Register
OPDEF	WRSPB	[702400000000]	;Write SPT Base Address
OPDEF	RDSPB	[702000000000]	;Read SPT Base Address
OPDEF	WRCSB	[702440000000]	;Write CST Base Address
OPDEF	RDCSB	[702040000000]	;Read CST Base Address
OPDEF	WRCSTM	[702540000000]	;Write CST Mask
OPDEF	RDCSTM	[702500000000]	;Read CST Mask
OPDEF	WRTIME	[702600000000]	;WRITE 2 WORD TIME BASE.
OPDEF	RDTIME	[702200000000]	;READ 2 WORD TIME BASE.
OPDEF	WRINT	[702640000000]	;WRITE INTERVAL TIMER PERIOD
OPDEF	RDINT	[702240000000]	;READ CURRENT VALUE OF INTERVAL TIMER
OPDEF	WRHSB	[702700000000]	;WRITE HALT STATUS BLOCK BASE ADR
OPDEF	RDHSB	[703000000000]	;READ HALT STATUS BLOCK BASE ADR
OPDEF	UMOVE	[704000000000]	;MOVE FROM USER
OPDEF	UMOVEM	[705000000000]	;MOVE TO USER
OPDEF	TIOE	[710000000000]	;Test I/O word, skip if equal to zero
OPDEF	TION	[711000000000]	;Test I/O word, skip if non zero
OPDEF	RDIO	[712000000000]	;Read I/O word
OPDEF	WRIO	[713000000000]	;Write I/O word
OPDEF	BSIO	[714000000000]	;Bit Set I/O word
OPDEF	BCIO	[715000000000]	;Bit Clear I/O word
OPDEF	TIOEB	[720000000000]	;  same as above, but I/O byte
OPDEF	TIONB	[721000000000]
OPDEF	RDIOB	[722000000000]
OPDEF	WRIOB	[723000000000]
OPDEF	BSIOB	[724000000000]
OPDEF	BCIOB	[725000000000]
;APRID BITS.
APRSER==37777		;PROCESSOR SERIAL NUMBER.

;WRAPR (CONO APR) BITS.
LP.IOR==1B19		;IO RESET
LP.ESF==1B20		;ENABLE SELECTED FLAGS (BITS 26-31)
LP.DSF==1B21		;DISABLE SELECTED FLAGS (BITS 26-31)
LP.CSF==1B22		;CLEAR SELECTED FLAGS (BITS 26-31)
LP.SSF==1B23		;SET SELECTED FLAGS (BITS 26-31)
LP.I8C==1B25		;INTERRUPT 8080 CONSOLE
LP.PWF==1B26		;POWER FAIL
LP.NXM==1B27		;NXM
LP.HPE==1B28		;HARD MEMORY ERROR
LP.SPE==1B29		;SOFT MEMORY ERROR
LP.TIM==1B30		;INTERVAL TIMER
LP.80C==1B31		;8080 CONSOLE
LP.INT==1B32		;GENERATE INTERUPT REQUEST
LP.PIA==7B35		;PIA

;LEFT HALF OF RDAPR(CONI APR) BITS
LP.PFE==1B8		;POWER FAIL ENABLED
LP.NEE==1B9		;NON-EXISTENT MEMORY ERROR ENABLED
LP.HEE==1B10		;HARD MEMORY ERROR INTERUPT ENABLED
LP.SEE==1B11		;SOFT MEMORY ERROR INTERRUPT ENABLED
LP.ITE==1B12		;INTERVAL TIMER ENABLED
LP.80E==1B13		;8080 CONSOLE INTERRUPT ENABLED

;RIGHT HALF OF RDAPR(CONI APR) BITS
LP.PWF==1B26		;POWER FAIL ERROR
LP.NXM==1B27		;NON-EXISTENT MEMORY ERROR
LP.HPE==1B28		;HARD MEMORY ERROR
LP.SPE==1B29		;SOFT MEMORY ERROR
LP.ITD==1B30		;INTERVAL TIMER DONE
LP.80I==1B31		;8080 CONSOLE INTERUPT
LP.INT==1B32		;INTERRUPT REQUEST
LP.PIA==7B35		;PIA

;BITS IN WRPI (CONO PI.).

LI.CPP==1B22		;CLEAR PROGRAM REQUESTS ON SELECTED CHANNELS
LI.CPS==1B23		;CLEAR PI SYSTEM
LI.REQ==1B24		;REQUEST INTERRUPTS ON SELECTED CHANNELS
LI.CON==1B25		;TURN SELECTED CHANNEL ON.
LI.COF==1B26		;TURN SELECTED CHANNEL OFF.
LI.PIF==1B27		;TURN SYSTEM OFF
LI.PIN==1B28		;TURN SYSTEM ON.
LI.CO1==1B29
LI.CO2==1B30
LI.CO3==1B31
LI.CO4==1B32
LI.CO5==1B33
LI.CO6==1B34
LI.CO7==1B35
LI.ACO==LI.CO1+LI.CO2+LI.CO3+LI.CO4+LI.CO5+LI.CO6+LI.CO7

;LEFT HALF CONI PI BITS
LI.PR1==1B11		;PROGRAM P1 REQUEST FOR CHANNEL 1
LI.PR2==1B12		;PROGRAM PI REQUEST FOR CHANNEL 2
LI.PR3==1B13		;PROGRAM PI REQUEST FOR CHANNEL 3
LI.PR4==1B14		;PROGRAM PI REQUEST FOR CHANNEL 4
LI.PR5==1B15		;PROGRAM PI REQUEST FOR CHANNEL 5
LI.PR6==1B16		;PROGRAM PI REQUEST FOR CHANNEL 6
LI.PR7==1B17		;PROGRAM PI REQUEST FOR CHANNEL 7

;RIGHT HALF PI CONI BITS.

LI.IP1==1B21			;INTERRUPT IN PROGRESS ON PI CHANNEL 1
LI.IP2==1B22			;INTERRUPT IN PROGRESS ON PI CHANNEL 2
LI.IP3==1B23			;INTERRUPT IN PROGRESS ON PI CHANNEL 3
LI.IP4==1B24			;INTERRUPT IN PROGRESS ON PI CHANNEL 4
LI.IP5==1B25			;INTERRUPT IN PROGRESS ON PI CHANNEL 5
LI.IP6==1B26			;INTERRUPT IN PROGRESS ON PI CHANNEL 6
LI.IP7==1B27			;INTERRUPT IN PROGRESS ON PI CHANNEL 7
LI.IPA==LI.IP1+LI.IP2+LI.IP3+LI.IP4+LI.IP5+LI.IP6+LI.IP7
				;INTERRUPT IN PROGRESS ON ANY OR ALL PI CHANNELS
LI.PIA==1B28			;PI ACTIVE
LI.CO1==1B29			;PI CHANNEL 1 ON
LI.CO2==1B30			;PI CHANNEL 2 ON
LI.CO3==1B31			;PI CHANNEL 3 ON
LI.CO4==1B32			;PI CHANNEL 4 ON
LI.CO5==1B33			;PI CHANNEL 5 ON
LI.CO6==1B34			;PI CHANNEL 6 ON
LI.CO7==1B35			;PI CH7NNEL 7 ON
LI.ACO==LI.CO1+LI.CO2+LI.CO3+LI.CO4+LI.CO5+LI.CO6+LI.CO7


;BITS IN WREBR (CONO PAG).
LG.KLP==1B21		;KL PAGING IN EFFECT.
LG.TEN==1B22		;TRAP ENABLE
LG.EPT==3777		;ADDRESS OF EPT

;BITS IN WRUBR (DATAO PAG).
LG.LAB==1B0		;LOAD AC BLOCKS
LG.LUB==1B2		;LOAD USER BASE REGISTER
LG.CAC==7B8		;CURRENT AC BLOCK #
LG.PAC==7B11		;PREV. AC BLOCK #
LG.UPT==3777		;ADDRESS OF UBR

;HERE ARE APR BITS THAT ARE COMPATIBLE BETWEEN KS, KL, AND KI.
; USE NAMES FORMERLY USED FOR KI10 APR BITS TO MAKE
; THINGS EASIER.

XP APRIOB,LP.IOR	;IOB RESET
XP APRNXM,LP.NXM	;NXM
XP APRPOW,LP.PWF	;POWER FAILURE
XP APRPAR,LP.HPE	;HARD PARITY ERROR

;MASKS FOR INTERRUPTS

XP APFMSK,LP.PWF+LP.NXM	;FATAL ERROR INTERRUPTS
XP APRMSK,APFMSK+LP.ITD+LP.80I+LP.HPE	;MASK FOR ALL INTERRUPT CONDITIONS

DEFINE CLPARF<WRAPR LP.CSF+LP.HPE>
XP CLRNXM,<LP.CSF+LP.NXM+LP.HPE>	;CONO APR,CLRNXM CLEARS NXM

; HERE ARE THE DEFINITION OF THE CTY(8080) INTERFACE WORDS

;KSSS4==MTIOC(=24) THE WORD RESERVED FOR COMMUNICATING THE SENSE SWITCH INFORMATION
	XP SS4,4	;"SENSE SWITCH 4",USED FOR AUTO RELOAD SELECTION

;RLWORD==31 THE RELOAD WORD FOR COMMUNICATING BETWEEN THE KS AND THE 8080
	KPACT==1B5		;KEEP ALIVE ACTIVE
	KPALIV==377B27		;KEEP ALIVE WORD
		KPALVE==^D27	;END OF KEEP ALIVE BYTE
		KPALVL==8	;LENGTH OF KEEP ALIVE BYTE

;CTYIWD==32 THE INPUT FROM CTY WORD
	CTYICH==377B35		;CTY INPUT CHARACTER
	CTYIVL==1B27		;INPUT VALID FLAG

;CTYOWD==33 THE OUTPUT TO CTY WORD
	CTYOCH==377B35		;CTY OUTPUT CHARACTER
	CTYOVL==1B27		;OUTPUT VALID FLAG

SUBTTL HARDWARE PAGING PARAMETERS

;PAGE FAIL (AND MAP INSTRUCTION) WORD DEFINITIONS

XP PFW.U,(1B0)		;USER/EXEC ADDRESS SPACE BIT
XP PFW.H,(1B1)		;"HARDWARE" REASON FOR PAGE FAIL.

;THE FOLLOWING DEFINITIONS APPLY IF PFW.H IS ZERO:

XP PFW.A,(1B2)		;COPY OF A BIT FROM MAP SLOT
XP PFW.W,(1B3)		;W BIT FROM MAP SLOT
XP PFW.S,(1B4)		;S BIT FROM MAP SLOT
XP PFW.T,(1B5)		;ON IF WRITE WAS ATTEMPTED.
			;(DOESN'T SAY THATS WHY IT FAILED, THO.)
XP PFW.C,(1B7)		;C BIT FROM MAP SLOT.
XP PFW.R,(1B8)		;PAGED REFERENCE (MAP INSTRUCTION)

;IF PFW.H IS 1, FOLLOWING CODES APPLY:

XP PF.NXD,20		;IO INSTR TO NX DEVICE OR REGISTER
			; (BITS 14-35 HOLD IO ADDR.).
XP PF.ABK,23		;ADDRESS BREAK (NOT MEANINGFUL ON KS)
XP PF.PTP,25		;PAGE TABLE PARITY ERROR
XP PF.HME,36		;HARD MEMORY ERROR.
XP PF.NXM,37		;NXM.

;PAGE MAP POINTER BITS (KI PAGING)

XP PGE.A,400000
XP PGE.P,0		;PUBLIC (NOT MEANINGFUL ON KS)
XP PGE.W,100000
XP PGE.S,40000
XP PGE.C,20000		;CACHE BIT

;PC BITS.

XP PC.FPD,1B22	;FIRST PART DONE
XP PC.USR,1B23
XP PC.PUB,0		;PUBLIC (NOT MEANINGFUL ON KS)
XP PC.UIO,1B24	;USER IO
XP PC.ADR,1B26	;ADDRESS FAILURE INHIBIT( NOT MEANINGFUL ON KS)
XP PC.TRP,3B28	;TRAP FLAGS
XP PC.OV,1B18	;OVERFLOW
XP PC.FOV,1B21	;FLOATING OVERFLOW
XP PC.FXU,1B29	;FLOATING EXPONENT UNDERFLOW
XP PC.DCK,1B30	;DIVIDE CHECK

;LOCATIONS IN UPT FIXED BY KS-10 HARDWARE

XP UPTGP0,0		;PAGE 0 OF USER
XP UPTEP0,400		;FIRST PAGE OF EXEC (340) IN UPT
XP UPTPGT,420		;(SOFTWARE LOC. DESC. AS ADDRESS OF LUUO BLOCK ON UPT PICTURE)

XP UPTOVT,421		;OVERFLOW TRAP INSTRUCTION
XP UPTPOV,422		;PDL OVERFLOW
XP UPTTR3,423		;TRAP 3
XP UPTMUU,424		;MUUO STORED HERE
XP UPTMUP,425		;MUUO PC STORED HERE
XP UPTPCW,426		;PROCESS CONTEXT WORD (SECTION, ETC)
			; (427 UNUSED)
XP UPTKNT,430		;KERNAL NO TRAP WORD
XP UPTKTR,431		;KERNEL TRAP
XP UPTSNT,432		;SUPERVISOR NO TRAP
XP UPTSTR,433		;SUPERVISOR TRAP
XP UPTPNT,434		;CONCEALED NO TRAP,USED EQUIVALENT TO KI/KL PUBLIC
XP UPTCNT,434		;CONCEALED NO TRAP, USED EQUIVALENT TO KI/KL PUBLIC
XP UPTPTR,435		;CONCEALED TRAP,USED EQUIVALENT TO PUBLIC ON KI/KL
XP UPTCTR,435		;CONCEALED TRAP,USED EQUIVALENT TO PUBLIC ON KI/KL
			; (436 TO 477 AVAILABLE TO SOFTWARE.)
XP UPTPFW,500		;PAGE FAIL WORD, USER OR EXEC, STORED HERE.
XP UPTOPP,501		;OLD PAGE FAIL PC
XP UPTNPP,502		;NEW PAGE FAIL PC
XP UPTFSL,520		;BEGINNING OF CONTIGUOUS AREA AVAILABLE
			; TO SOFTWARE.  (REALLY STARTS AT 503,
			; BUT COMMON WANTS TWENTY WORD BOUNDARY.

;AC BLOCK DEFINITIONS

XP USRACB,0             ;USER AC BLOCK (MUST BE DEFINED AS ZERO)
XP EX0ACB,1             ;FOR EXEC MODE.
XP EX1ACB,2             ; ALTERNATE BETWEEN THESE TWO AS UUOS AND PAGE FAULTS ARE DONE.
XP NULACB,2             ;CONTAINS NULL JOB
XP SA0ACB,3             ;AC BLOCK FOR SA 10 CHANNEL'S PI LEVEL.
XP SA1ACB,3             ;FOR BOTH CHANNELS.
XP RS1ACB,6             ;RESERVED (KL PAGING)
XP RS2ACB,7             ;RESERVED TO UCODE (EXT. INST, PARITY ERROR DATA)
XP NUMACB,6		;NUMBER OF AC BLOCKS AVAILABLE ON THIS MACHINE

;MACRO TO USE WHEN JUST ENTERING EXEC MODE TO SWITCH TO
; THE EXEC AC BLOCK

DEFINE EXECAC,<SALL
        WRUBR [LG.LAB+<EX0ACB>B8+<USRACB>B11]>

DEFINE USERAC,<SALL
        WRUBR   [LG.LAB+<USRACB>B8+<USRACB>B11]
>

;LOCATIONS IN EPT FIXED BY KS-10 HARDWARE

XP EPTLUU,40		;LOCAL UUO STORED HERE
XP EPTLUI,41		;INSTRUCTION EXECUTED FOR LOCAL UUOS

			; (42-57) STANDARD PI INTERRUPT INSTRUCTIONS
			; (40+2*N)

;VECTOR INTERRUPT TABLE PNTRS.
XP EPTUB0,100
XP EPTUB1,101
XP EPTUB2,102
XP EPTUB3,103
XP EPTUB4,104
XP EPTUB5,105
XP EPTUB6,106
XP EPTUB7,107
XP EPUB10,110
XP EPUB11,111
XP EPUB12,112
XP EPUB13,131
XP EPUB14,114
XP EPUB15,115
XP EPUB16,116
XP EPUB17,117

;PAGE MAP POINTERS

XP EPTPG0,200		;FIRST WORD OF PAGE MAP SLOTS (PG 400) IN EPT
;ORIGIN OF VECTOR INTERRUPT TABLE

XP EPTVIT,400		;NO CONFLICT ASSUMED WITH DEVICE INT ADDR. AND 420-423
XP EPTPGT,420		;(SOFTWARE LOCATION IN KS)
XP EPTOVT,421		;OVERFLOW
XP EPTPOV,422		;PDL OVERFLOW
XP EPTTR3,423		;TRAP 3

XP EPTMP0,600		;FIRST LOCATION OF MAP SLOTS FOR EXEC
			; PAGES 0-337. (USED TO BE UNMAPPED,
			; BUT NEED SLOTS TO CONTROL CACHE.)
XP EPTFSL,760		;START OF CONTIGUOUS BLOCK AVAILABLE TO SOFTWARE.

SUBTTL SYSTEM MACROS - CLEAR PAGE TABLE

;MACROS TO CLEAR EITHER ALL OF PAGE TABLE, OR ONE ENTRY.

DEFINE CLRPTA,<SALL
	IF2,<IFNDEF EPT,<EXTERN EPT>
	     IFNDEF EPTEBR,<EXTERN EPTEBR>>
	WREBR	@EPT+EPTEBR>


;CLEAR ONE ENTRY IN PAGE TABLE. ARG IS ADDRESS OF
; LOCATION TO CLEAR (CAN BE INDEXED, INDIRECT).

DEFINE CLRPTO(ARG)<SALL
	IFB <ARG>,<PRINTX MISSING ARGUMENT TO CLRPTO
			QQQQQQ>
	CLRPT	ARG>

;MACRO TO CLEAR PAGE TABLE FOR PAGE WHOSE NUMBER IS IN RH(W).
; PAGE NUMBER IS IN CORE1 STYLE FORMAT (1000 IS EXEC
; 340)

DEFINE CLRPTW<SALL
	IF2,<IFNDEF CLPTW,<EXTERN CLPTW>>
	PUSHJ	P,CLPTW>

SUBTTL CACHE INVALIDATE MACRO DEFINITION

;MACRO TO INVALIDATE THE CACHE

DEFINE CSHIVL<
	PUSHJ	P,CSINVL##>	;ENTRY POINT IN PICON

SUBTTL SYSTEM MACROS - CHARGING

; MACROS TO MANIPULATE CHARGING CLOCK.

DEFINE CHARGE<SALL
	IF2,<IFNDEF KSCHRG,<EXTERNAL KSCHRG>>
	PUSHJ P,KSCHRG>

DEFINE NOCHARGE<SALL
	IF2,<IFNDEF KSNOCH,<EXTERNAL KSNOCH>>
	PUSHJ P,KSNOCH>

;MACRO TO CONSTRUCT PARAMETER IN SIXBIT TO 1ST BREAK CHAR.
;  ON COMPLETION ZZ = RIGHT ADJUSTED SIXBIT PARAMETER
DEFINE STPBRK(LOC),<SALL
ZZ==0		;BUILD THE SIXBIT PARAMETER
YY==0		;FLAG A BREAK CHARACTER FOUND
IRPC LOC,<
	IFL "'LOC"-"0" <STOPI
		     YY==1>	;FLAG BREAK FOUND
	IFG "'LOC"-"Z" <STOPI
			YY==1>
	IFG "'LOC"-"9" <
	  IFL "'LOC"-"A" <STOPI
			  YY==1>>
	IFE YY,<ZZ==<ZZ_6>+''LOC''>
>; END IRPC
>;END STPBRK

;MACRO TO DETERMINE IF "LOC" IS A REGISTER OR NOT

DEFINE LSTTST(LOC,A)<SALL
REGYES==0
STPBRK 'LOC
IRP A,<IFE ''A''-ZZ,<
	REGYES==1>>
>;END LSTTST


DEFINE REGTST(LOC),<SALL
	LSTTST 'LOC,<S,P,J,PG,F,U,T1,T2,T3,T4,W,M,P1,P2,P3,P4>>

DEFINE CHGSTS(LOC)<SALL
	IF2,<IFNDEF TBVALUE,<EXTERNAL TBVALUE,TBON>>
	REGTST 'LOC
	IFN REGYES,<MOVE 'LOC,TBON>	;IF REGISTER
	IFE REGYES,<			;NOT A REGISTER
	JRST	[PUSH P,T1
		 MOVE T1,TBON
		 TLO  T1,1		;FORCE NOT ZERO VALUE
		 MOVEM T1,'LOC
		 POP   P,T1
		 JRST  .+1]>
	>; END CHGSTS

;MACRO TO SAVE AND RESTORE THE TIME BASE IN THE INTERRUPT ROUTINES
;  IN THE FOLLOWING MACROS "LOC" IS A POINTER TO 2 CONSECUTIVE WORDS

DEFINE TBSAVE(LOC),<SALL
	RDTIME 'LOC>

DEFINE TBSET(LOC),<SALL
	WRTIME  'LOC>

XP CHGON,1

SUBTTL SYSTEM MACROS - EXECUTIVE EXECUTE.
;SAME IN KS AND KL.

;BITS IN PXCT AC FIELD
	PX.EAC==10		;EFFECTIVE ADDRESS OF OBJECT INSTRUCTION
	PX.MEM==4		;MEMORY OPERAND (BOTH FETCH AND STORE)
	PX.BYT==2		;EFFECTIVE ADDRESS OF BYTE POINTER
	PX.SRC==1		;STACK WORD IN PUSH/POP; SOURCE IN BLT

	DEFINE	XCTBU(INST)<SALL
	GINST==<PXCT PX.MEM,[INST]>


	PXGEN(<INST>,<DPB,IDPB,LDB,ILDB>,<PX.SRC>)
			;;INCLUDE BYTE INSTRUCTIONS BECAUSE XCTBU IS USED ON KI10 FOR READ-MODIFY-WRITE.
	PXGEN(<INST>,<BLT,PUSH,POP>,<PX.SRC!PX.MEM>)
	GINST
	PURGE GINST
>;END XCTBU MACRO DEFINITION

	DEFINE XCTFU(INST)<SALL
	GINST==<PXCT PX.MEM,[INST]>
		;;INCLUDE DPB AND IDPB BECAUSE XCTFU USED FOR RMW ON KI
	PXGEN(<INST>,<LDB,ILDB,DPB,IDPB,POP,BLT>,<PX.SRC>)
	GINST
	PURGE GINST
>;END XCTFU MACRO DEFINITION

	DEFINE XCTTU(INST)<SALL
	GINST==<PXCT PX.MEM,[INST]>
	PXGEN(<INST>,<LDB,ILDB,IDPB,DPB>,<QQQQQQ>)	;;CAN'T LOAD USERS AC THIS WAY.
				;;MAKE IDPB AND DPB ILLEGAL BECAUSE CAN'T DO IT ON KI, MUST USE FU OR BU INSTEAD.
	PXGEN(<INST>,<PUSH>,<PX.SRC>)
	PXGEN(<INST>,<POP,BLT>,<PX.MEM>)
	GINST
	PURGE GINST
>;END XCTTU MACRO DEFINITION


	DEFINE PXGEN(INST,CODES,BITS)<
	ZZ==0
	IRPC INST,<
	ZZ1==0
	IFIDN < > <INST>,<ZZ1==1>
	IFIDN <	> <INST>,<ZZ1==1>
	IFN ZZ1,<STOPI>
	IFE ZZ1,<
	ZZ==ZZ_6
	ZZ==ZZ+''INST''
>;END IFE ZZ1
>;END IRPC INST
	IRP CODES,<
	IFE <ZZ-''CODES''>,<GINST==<PXCT BITS,[INST]>>
>;END IRP CODES

	PURGE ZZ1
>;END PXGEN MACRO DEFINITION


	ASUPPRESS		;ONLY LIST REFERENCED SYMBOLS

IFDEF LISTSN,<IFN LISTSN,<PAGE>>	;No $END for KISYM,KLSYM,KSSYM,F3SYM

  