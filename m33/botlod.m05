TITLE	BOTLOD for both KI and KL, absolute location 334000 (112K-2K)
SUBTTL	Program to load BOOTS from IBM disks on an SA10 channel
IF2,<PRINTX BOTLOD for KI (paper tape) and KL (DECtape)>

COMMENT ~	Revision history for BOTLOD.

V20  ??-???-??	Loads from KI paper tape, relocates itself into physical
		addresses 774000-777777 on KI's with at least 256K of core.
		BOOTS is 6 blocks long, starting at record 13 of track 0 cyl 0,
		going to record 18 of track 0 cylinder 0.

V20  24-JUN-76	BOOTS is now 7 blocks long, the 7th block is on record 0 of
		track 1 cylinder 0 (an imbedded SEEK and SEARCH ID= was added).

V20   2-JUN-78	No change in KI version, the KL version is loaded by KLCDP into
		locations 334000-337000 (last 2K of unmapped core).

xxx  10-DEC-85	Converted BOTLOD.M02 to use IFCPU macros.
BOTLOD.M03	(Just to get a CREF listing.)

V21  20-JAN-86	Rewrote BOTLOD for the 3650 project (7 pages per track).
BOTLOD.M04	Make KI and KL versions exactly the same, load into page 334.
		Read all 3 pages (12 blocks) reserved for BOOTS into pages
		335-337, using READ MULTITRACK commands.

V22  16-Feb-86	READ MULTITRACK appears to read R0, which is not wanted.  Moved
BOTLOD.MAC	BOTLOD to page 333, BOOTS to pages 334-336, data in 337.  Three
		different command lists are tried: 3650 with 7 pages per track,
		3675 with 5 pages per track, 3675 with 18 blocks per track.

~  ;End of COMMENT

	T5=1+<T4=1+<T3=1+<T2=1+<T1=1>>>>;ACs 1-5
	P= 17	;PDL
	SA=16	;SA-10 number, 0 or 1
	CH=15	;Channel number, 0 to 3
	DU=14	;Disk unit, X'C0' to X'FF' in 3rd byte
	CL=13	;Pointer to command list
	CM=12	;Command for disk
	P1=T5+1	;Pointer to SABASE, 300-334 in multiples of 4

	LOC	137
JOBVER::EXP	<VERSIO=22>		;Version number of BOTLOD
	RELOC
SUBTTL	BOTLOD - Load BOOTS from pages 3-5 of the disk

;Disk Page Number 1 is Head 0 Records 5-8 on 3330 or RM03/RP06 (block format)
;Disk Page Number 1 is Head 0 Record 2 on 3650 or F3/CDC disk  (page format)
;
;DPN    3330      3650    Use
;00   H0R01-R04   H0R1    IPL     IBM Initial Program Load, KS/8080 boot pointer
;01   H0R05-R08   H0R2    HOM1    Primary HOM page
;02   H0R09-R12   H0R3    BAT1    Primary BAT page
;03   H0R13-R18   H0R4    BOOT1   First 4 blocks of BOOTS
;04  H0R17/H1R2   H0R5    BOOT2   Two blocks on 1st track, two on 2nd track
;05   H1R03-R06   H0R6    BOOT3   Last 4 blocks of BOOTS
;06   H1R07-R10   H0R7    HOM2    Secondary HOM page
;07   H1R11-R14   H1R1    BAT2    Secondary BAT page
;10   H1R15-R18   H1R2    SATRIB  RIB for SAT.SYS


;Device addresses (CONI/CONO)

	APR== 000	;CPU Arithmetic processor
	PI==  004	;Priority interrupt system
	SAX1==274	;First SA10 device code
	SAX2==400	;Second SA10 device code

;Addresses in low core

	SABASE=300	;SABASE is set by DIP switches on the SA10
	S1BASE=SABASE+00;Locations used by 1st SA10
	S2BASE=SABASE+20;Locations used by 2nd SA10

;Disk unit address on the controller

	FDISKA==300	;First TYMCOM-X disk address is X'C0'
	LDISKA==377	;Last  TYMCOM-X disk address is X'FF'
SUBTTL	Program to load BOOTS from IBM disks on an SA10 channel

;This entire program is read in READ-IN MODE on the KI, it is loaded from
;a SAV format file by KLDCP on the KL.  BOTLOD would run on a KA as well.

	BOOTS=:334000
BTS000:	IOWD	BOTLEN,BOOTFI		;1st word of SAV file and paper tape
BTS001:	PHASE	BOOTS-1000		;Put this in top 2K of unmapped core
BOOTFI::CONO	APR,200000		;BOOTS First Instruction = Reset I/O bus
	CONO	PI,10400+1177		;Clear PI, off PI, off selected PI
	MOVE	P,[IOWD PDLLEN,PDL]	;Set up stack
	MOVE	T1,NOSA10		;Set up HALT instruction
	MOVEM	T1,BOOTS		; if nothing can be read

;Try both SA10 device codes

	MOVSI	SA,-SAXN		;AOBJN for two SA10's
SALOOP:	HRRZ	P1,SA			;SABASE has 4 words per channel,
	IMULI	P1,4*4			; 4 channels per SA10
	ADDI	P1,SABASE		;(disks are on SA0:CH1=304)
	XCT	BPCNI1(SA)		;Do CONI into T1
	SKIPE	T1			;Bit 17 always set on a working SA10
	 PUSHJ	P,SAFND			;Go check out this I/O device
	AOBJN	SA,SALOOP		;Try next SA10
	SKIPN	BOOTS			;Was nonzero data read in?
NOSA10:: HALT	NOSA10			;Could not find BOOTS anywhere
	JRST	BOOTS			;*HACK* Yes, go to it anyway

;Found an SA10, try all 4 channels on it

;SA/ SAX number, 0 or 1
;P1/ pointer to 4-word block in SABASE
;CH/ channel number, 0 to 3

SAFND:	MOVSI	CH,-CHANN		;AOBJN to do 4 channels on each SA10
SAFND1:	MOVEI	T1,^D100000		;Loop counter
	MOVE	T3,REQSTS(CH)		;Request status be stored
	XCT	BPCNO3(SA)
	MOVE	T2,SSBITS(CH)		;Check if SS bit has come on yet
	XCT	BPCNS2(SA)
	 SOJG	T1,.-1			;Not yet, wait a while
	SKIPE	T1			;If we did not time out,
	 PUSHJ	P,CHFND			;Go investigate this channel
	ADDI	P1,4			;Point to next 4-word block at SABASE
	AOBJN	CH,SAFND1		;Try all 4 channels
	POPJ	P,			;Done all, try next SA10
SUBTTL	CONO and CONI bits for SA10

;CONO commands to SA10
	SA.RST==400000	;Reset the SA10
	SSTS==640	;Set STATUS STORED bit for channel
	CSTS==600	;Clear STATUS STORED bit for channel
	SREQ==540	;Request status for channel
	BUSY==440	;Set GO flag for channel
	CHN0== 00	;This command is for channel 0 (tape on TYMCOM-X)
	CHN1== 10	;This command is for channel 1 (disk on TYMCOM-X)
	CHN2== 20	;This command is for channel 2 (not used by TYMCOM-X)
	CHN3== 30	;This command is for channel 3 (not used by TYMCOM-X)
	PIA==   7	;Set PI Assignment

SETGO:	EXP	BUSY+CHN0,BUSY+CHN1,BUSY+CHN2,BUSY+CHN3
	CHANN==.-SETGO	;4 channels, index by CH
REQSTS:	EXP	SREQ+CHN0,SREQ+CHN1,SREQ+CHN2,SREQ+CHN3
CLRSTS:	EXP	CSTS+CHN0,CSTS+CHN1,CSTS+CHN2,CSTS+CHN3
SETSTS:	EXP	SSTS+CHN0,SSTS+CHN1,SSTS+CHN2,SSTS+CHN3

;CONI bits from SA10			;Bit 17 always on
IEBITS:	EXP	40000,20000,10000,04000	;Interrupt is enabled for channel
GOBITS:	EXP	02000,01000,00400,00200	;GO flag is set for channel
SSBITS:	EXP	00100,00040,00020,00010	;Status has been Stored

BPCNI1:	CONI	SAX1,T1		;Check if device responds
	CONI	SAX2,T1
	SAXN==.-BPCNI1	;2 SA10 devices per CPU
BPCNS2:	CONSO	SAX1,(T2)	;Skip if status stored
	CONSO	SAX2,(T2)
BPCNO3:	CONO	SAX1,(T3)	;Set GO, STATUS, etc
	CONO	SAX2,(T3)
SUBTTL	Found a working SA10 channel

;SA/ SAX number, 0 or 1
;P1/ pointer to 4-word block in SABASE
;CH/ channel number, 0 to 3
;DU/ disk unit number in 3rd byte

CHFND:	MOVE	CM,[TIC,,NOPCMD]	;Transfer to no-op command
	MOVEM	CM,(P1)			;Set CCW for this channel
	MOVE	DU,NOOPD0		;NO-OP to first disk on this channel
CHFN1:	MOVEM	DU,NOPCMD		;Store command
	PUSHJ	P,STRTIT		;Start device
	  JRST	CHFN2			;Device not responding
	PUSHJ	P,UTFND			;Found working unit
CHFN2:	CAML	DU,MAXDEV		;Last device?
	 POPJ	P,			;Done, try next channel
	ADDI	DU,<BYTE(8)0,0,1>	;No, increment unit number in 3rd byte
	JRST	CHFN1			;Try next disk unit

;Found a working disk unit.  Third byte of DU has unit number
;SA=SAX#, CH=Channel #, P1=Channel base, CL=command list, CM=command

UTFND:	LDB	T1,[POINT 8,DU,23]	;Get device address
	MOVEI	CL,LIST0		;Start of command lists

;Modify all 6+8+17 occurrances of FDISKA to be current device address

UTFND0:	HLRZ	CM,(CL)			;Get LH of command
	CAIN	CM,TIC			;Transfer in channel?
	 ADDI	CL,1			;Yes, skip over it
	DPB	T1,[POINT 8,0(CL),23]	;No, store new device address
	ADDI	CL,2			;Point to next pair
	CAIGE	CL,LIST9		;Hit end of last list?
	 JRST	UTFND0			;No, do more commands

	MOVSI	CL,-NLISTS		;Try all supported formats
READIT:	MOVE	T1,LISTS(CL)		;Point to a command list
	MOVEM	T1,(P1)			;Tell channel where to go
	PUSHJ	P,STRTIT		;Start channel and device
	  JRST	NOREAD			;Some sort of error
	MOVE	T1,BOOTS		;Check first word
	CAMN	T1,BOOTFI		;Is it CONO APR,200000
	 JRST	BOOTS			;All good.  Go start it
NOREAD:	AOBJN	CL,READIT		;Try the next one
	POPJ	P,			;Unknown format

LISTS:	TIC,,LIST1			;3650 in pages
	TIC,,LIST2			;3675 in pages
	TIC,,LIST3			;3675 in blocks
NLISTS==.-LISTS
SUBTTL	Routine to start I/O on the channel and device

;Bits returned from channel in SABASE+1
	SELERR==(1B2)		;Select error - no control unit at this address
	LENERR==(1B6)		;Length error - count does not match
	BSY==(BYTE (8)0,020)	;Control unit is busy
	CUE==(BYTE (8)0,040)	;Control unit end
	SM== (BYTE (8)0,100)	;Status modifier

;Here to start I/O on an IBM disk, skip return if successful

STRTIT:	MOVEI	T1,^D50000		;Wait for previous activity to stop
	SOJG	T1,.
STRT1:	MOVE	T3,SETSTS(CH)		;Tell channel to store status now
	XCT	BPCNO3(SA)
	MOVE	T3,SETGO(CH)		;Set the GO flag
	XCT	BPCNO3(SA)
	MOVEI	CM,0			;No error bits seen yet
STRT2:	MOVE	T3,CLRSTS(CH)		;CLEAR STATUS
	XCT	BPCNO3(SA)
	MOVE	T3,REQSTS(CH)		;Now request that status be stored
	XCT	BPCNO3(SA)
	MOVEI	T1,^D100000		;Time out loop
	MOVE	T2,SSBITS(CH)		;Wait for STATUS STORED bit to set
	XCT	BPCNS2(SA)
	 SOJG	T1,.-1
	JUMPE	T1,STRT4		;Timed out
	CAIE	CM,0			;Previous BUSY status?
	 HRLZI	CM,BSY			;Yes, make this one BUSY + new status
	IOR	CM,1(P1)		;Get status word
	TLNN	CM,BSY			;BUSY?
	 JRST	STRT3			;No, transfer is done
	TLNE	CM,SM			;BUSY and STATUS MODIFIER?
	 JRST	STRT2			;Yes, wait for CONTROL UNIT END
	TLNE	CM,CUE			;BUSY and CONTROL UNIT END?
	 JRST	STRT1			;Yes, restart
STRT3:	TLNN	CM,175114		;Any errors?
	 JRST	CPOPJ1			;No, give skip return
	TLNE	CM,SELERR		;If it was a SELECT ERROR
	 TRO	DU,<BYTE (8)0,0,7>	; then skip rest of disk string
STRT4:	MOVEI	T3,SA.RST		;Reset all channels on the SA10
	XCT	BPCNO3(SA)
	SKIPN	T1			;Timed out?
	 MOVE	DU,MAXDEV		;Go to new channel
	POPJ	P,			;Give error return from STRTIT
CPOPJ1:	AOS	(P)			;And skip return for success
CPOPJ:	POPJ	P,
SUBTTL	Command list for IBM 3330-II disks

  ;1st byte = mode for channel
BYTMOD==72	;Send bytes to controller, ignore length error, CMD chain
OFSMOD==BYTMOD+1;Offset byte mode for SEARCH ID==
WRDMOD==160	;Read words in natural mode, CMD chain
NOXFER==240	;Don't transfer bytes to/from memory
DHALT==200	;Halt device (CMD chain is off)
TIC=200000	;Tranfer In Channel = GOTO word

  ;2nd byte == command to disk
NOOP==3		;No operation (to test for SELECT ERROR)
READ==6		;Read one record
SEEK==7		;Position to cylinder, select head
SEARCH==61	;Search for ID=

  ;3rd byte = device address
NOOPD0:	BYTE	(8)NOXFER,NOOP,FDISKA	;NOOP for first disk address X'C0'=300
MAXDEV:	BYTE	(8)NOXFER,NOOP,LDISKA	;NOOP for last disk address  X'FF'=377

LIST0:!		;Start address of UTFND0

;Command list for 3650 formatted in pages (records 1-7 on head 0)

LIST1:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R4		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R4		; for CYL 0, HEAD 0, REC 4 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+0000	;Disk page 3 into core page 335
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+1000	;Disk page 4 into core page 336
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+2000	;Disk page 5 into core page 337
NOPCMD:	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
IF2,<IFN <LIST2-.>,<PRINTX ? UTFND0 expects LIST2 to be NOPCMD+2>>

;Command list for 3675 formatted in pages (records 1-5 on head 0)

LIST2:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R4		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R4		; for CYL 0, HEAD 0, REC 4 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+0000	;Disk page 3 into core page 335
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+1000	;Disk page 4 into core page 336
	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H1R1		; to BIN 0, CYL 0, HEAD 1
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H1R1		; for CYL 0, HEAD 1, REC 0 (DPN=6)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+2000	;Disk page 6 into core page 337
	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
IF2,<IFN <LIST3-.>,<PRINTX ? UTFND0 expects LIST3 to follow LIST2>>

;Command list for disks formatted in blocks (records 1-18 on head 0)

LIST3:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R13		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R13		; for CYL 0, HEAD 0, REC 13 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0000	;Disk block 12 into core page 335
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0200	;Block 13
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0400	;Block 14
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0600	;Block 15
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1000	;Disk block 16 into core page 336
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1200	;Block 17
	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H1R1		; to BIN 0, CYL 0, HEAD 1
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H1R1		; for CYL 0, HEAD 1, REC 0 (DPN=4.5)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1400	;Block 18
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1600	;Block 19
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2000	;Disk block 20 into core page 337
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2200	;Block 21
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2400	;Block 22
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2600	;Block 23
	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
LIST9:!		;End address for UTFND0

H0R4:	BYTE	(16)0,0,0(8)^D4		;BIN 0, CYL 0, HEAD 0, REC  4
H1R1:	BYTE	(16)0,0,1(8)^D1		;BIN 0, CYL 0, HEAD 1, REC  1
H0R13:	BYTE	(16)0,0,0(8)^D13	;BIN 0, CYL 0, HEAD 0, REC 13

LITS:	LIT
BOTLEN=.-BOOTFI			;Length of Exec mode BOTLOD
BTSDAT:	DEPHASE
			;End of BOTLOD
	JRST	BOOTFI	;*HACK*;
BTS999:	JRST	BOOTFI		;Tell KLDCP to jump to first instruction
	JRST	BOOTFI	;*HACK*;
	BLOCK	20	;*HACK*;


	PDLLEN==20
PDL=:BTSDAT			;Stack
BTSEND=:PDL+PDLLEN		;End of BOTLOD data area
	UNUSED==BOOTFI+1000-BTSEND	;Block of unused words on page 333


DEFINE PR(A,B),<IF2,<PRINTX [A B]>>
	LALL
	PR(Length of BOTLOD =,\BOTLEN)
	PR(\UNUSED,words unused in page 333)
SUBTTL	Program to output "RELOAD TAPE"

BEL000:	IOWD	ENDSZ,PRLP	;00
	PHASE	1
PRLP:	MOVEI	0,STR		;01 Point to ASCIZ message
	HRLI	0,(POINT 7,0)	;02
PRLP1:	ILDB	17,0		;03
	JUMPE	17,PRLP		;04 Loop at end of string
	CONSZ	TTY,20		;05 Wait until output done
	 JRST	.-1		;06
	DATAO	TTY,17		;07
	JRST	PRLP1		;10
STR:	BYTE	(7) "G"-100,177,177,177,177	;11
	ASCII	/RELOAD TAPE..../		;12,13,14
	BYTE	(7) "G"-100,177,177,177,15,12,177,177,177,177,177 ;15,16
	BYTE	(7) 0		;17
	JRST	PRLP		;20
ENDSZ==.-PRLP
	DEPHASE
BEL999:	JRST	PRLP		;21 Last word on READ-IN-MODE tape
SUBTTL	User mode program to punch BOTLOD on paper tape for KI-10

	PC.USR=1B5
BOTLOD:	JSP	T1,.+1			;Get PC flags
	TLNE	T1,(PC.USR)		;In user mode?
	 JRST	USERM			;Yes
	MOVE	T1,[BTS001,,BOOTFI]	;No, must be testing BOTLOD in exec mode
	BLT	T1,337777		;BLT BOTLOD into proper location
	JRST	BOOTFI			;Go to it

USERM:	RESET				;START OF KI BOTLOD, PUNCH PAPER TAPE
	MOVE	P,[IOWD PDLLEN,PDLX]
	OUTSTR	[ASCIZ	/
This version of BOTLOD works on IBM disks formatted in blocks or pages.
/]
	PUSHJ	P,WRITEL		;Output DSK:BOTLOD.KL
	PUSHJ	P,GETNUM		;Ask for number of copies

COPLP:	PUSHJ	P,FEED			;Blank tape
	MOVE	T2,[BTS000-BTS999-1,,BTS000]
	PUSHJ	P,DUMPIT		;Output PTP:BOTLOD.KI
	SOJG	T1,COPLP

	PUSHJ	P,FEED			;More blank tape
	MOVE	T2,[BEL000-BEL999-1,,BEL000]
	PUSHJ	P,DUMPIT		;Output "RELOAD TAPE" routine
	PUSHJ	P,FEED

	CLOSE	PT,0
	STATZ	PT,760000		;Check for errors
	  JRST	PTPERR
	EXIT				;Done
PT==1	;PAPER TAPE PUNCH CHANNEL

WRITEL:	OPEN	PT,[17			;DUMP mode
		SIXBIT	/DSK/
		XWD	0,0]
	  JRST	NODSK
	MOVE	T1,[SIXBIT /BOTLOD/]
	MOVE	T2,[SIXBIT /KL/]
	SETZB	T3,T4
	ENTER	PT,T1			;Create DSK:BOTLOD.KL
	  JRST	NODSK
	OUT	PT,KL.SAV		;Output it in SAV file format
	 SKIPA	T1,[[ASCIZ /Created DSK:BOTLOD.KL/]]
NODSK:	  MOVEI	T1,[ASCIZ  /?Could not create DSK:BOTLOD.KL/]
	OUTSTR	(T1)
	CLOSE	PT,
	RELEAS	PT,
	POPJ	P,

KL.SAV:	IOWD	BTS999-BTS000+1,BTS000	;Write it in SAV file format
	0				;With JRST BOOTFI as jump word


GETNUM:	OPEN	PT,[10			;BINARY mode
		SIXBIT	/PTP/
		XWD	OBUF,0]
	  JRST	NOPTP			;CAN NOT GET PTP
	MOVE	T1,[SIXBIT /BOTLOD/]
	MOVE	T2,[SIXBIT /KI/]
	SETZB	T3,T4
	ENTER	PT,T1			;IN CASE OF "ASSIGN DSK PTP"
	  JRST	NOPTP
	OUTPUT	PT,
	OUTSTR	[ASCIZ /
Number of copies of KI-BOTLOD to punch: /]
NUMRD1:	MOVEI	T1,0
NUMRD:	INCHWL	T4
	CAIG	T4,"9"
	CAIGE	T4,"0"
	  JRST	WTLF			;FINISHED WITH NUMBER
	IMULI	T1,^D10
	ADDI	T1,-"0"(T4)
	JRST	NUMRD

	INCHWL	T4
WTLF:	CAIE	T4,12
	  JRST	.-2			;WAIT FOR END OF LINE
	CAILE	T1,0
	CAILE	T1,^D12			;SET SOME LIMITS ON TAPE SIZE
	  JRST	BADNUM
	POPJ	P,

NOPTP:	OUTSTR	[ASCIZ /
?Device PTP is not available.  Run this program on a KI with paper tape punch./]
	EXIT

BADNUM:	OUTSTR	[ASCIZ /
Number out of range, try again: /]
	JRST	NUMRD1

;BOTLOD BUFFERED OUTPUT ROUTINES
FEED:	MOVEI	T3,0
	MOVEI	T4,200			;SOME BLANK TAPE
	PUSHJ	P,PTOUT
	SOJG	T4,.-1
	POPJ	P,
PTPERR:	OUTSTR	[ASCIZ /
?Error punching paper tape  /]
	EXIT

PTOUT:	IDPB	T3,OBUF+1
	SOSG	OBUF+2
	OUT	PT,
	  POPJ	P,			;ALL OK
	JRST	PTPERR

DUMPIT:	MOVE	T4,(T2)			;T2 HAS AOBJN POINTER
	MOVEI	T5,6
DUMPT1:	MOVEI	T3,0
	LSHC	T3,6
	TRO	T3,200
	PUSHJ	P,PTOUT
	SOJG	T5,DUMPT1
	AOBJN	T2,DUMPIT
	POPJ	P,

PDLX:	BLOCK	PDLLEN
OBUF:	BLOCK	3

	END	BOTLOD
  