
XP CORSIZ,4		;NO. OF WORDS IN MONITOR FREE CORE BLOCKS
XP BIOSIZ,<^D6+^D100>	;BLOCK I/O BUFFER SIZE (HEADER + DATA AREA)
XP BIONUM,^D10		;NO. OF PORTS CONFIGURED FOR BLOCK I/O
BIOCOR==<BIOSIZ+CORSIZ-1>/CORSIZ  ;NO. OF 4WD BLOCKS FOR BIO BUFFER.

IFNDEF INDPPN,<XP INDPPN,777777>	;NON-ZERO IF CUSTOMER WANTS PROGRAMMER NOS
			; IN PROJECT X TO BE INDEPENDENT OF THOSE IN PROJECT Y

CTNBPE==1	;NUMBER OF BITS PER ENTRY IN CORTAB
		;MUST EVENLY DIVIDE 36 AND BE 1 OR A POWER OF TWO
CTNMCI==1	;PUT THIS IN CORTAB TO INDICATE A BLOCK IN USE BY MONITOR OR NXM

CTNBPW==^D36/CTNBPE	;NUMBER OF BYTES/WORD

SUBTTL	Magic locations in low memory (used by BOOT, CTY, etc)

;*; DPCIOC==22		;CHANNEL ADDRESS FOR RP10 DATA CHANNEL (LEVEL C ONLY)
;*; DPCCCW==DPCIOC+1	;CHANNEL STORE, TERMINATION WORD FOR RP10
;*; MTIOC==24		;CHANNEL ADDRESS FOR TM10B DATA CHANNEL
;*; MTCCW==MTIOC+1	;FINAL CONTROL WORD STORED HERE
;*; RAXIOC==26		;XWD 0,ADDRESS FOR RA-10'S DATA CHANNEL (LEVEL C ONLY)
;*; RAXCCW==RAXIOC+1	;CHANNEL STORE, TERMINATION WORD
;*; RCXIOC==34		;INITIAL CONTROL WORD FOR RC-10'S DATA CHANNEL
;*; RCXCCW==RCXIOC+1	;CHANNEL STORES FINAL CONTROL WORD HERE ON TERMINATION

;*; CURJOB=:20	;RH=Current job on master CPU, LH=Current job on slave CPU
;*; CLKDDT=:21	;Jump to EDDT if DEBUG set, else physical addr of BOOTS data
    BOOTWD=:22	;Pointer to BOOT text
           ;23	; zero (22 and 23 used to read BOOTS from RP02 disk)
    KSSS4=: 24	;"Sense Switch 4" word for KS
;*; CRSDTM=:24	;(TOPS10) Date/Time of previous crash (default time on RELOAD)
;*; CRSWHY=:25	;(TOPS10) Stopcode name (duplicates %SYSNM but in low core)
    REPSID=:26	;Restart Pack Set ID to verify consistancy of disk packs
    RESTRT=:27	;Restart states and actions (MANUAL, FULL DSKCLN, etc)
;*; CPNDDT=:27	;(TOPS10) Nonzero if at EDDT breakpoint, slave CPUs loop in ACs
    CRSHWD=:30	;If nonzero, jump to REBOOT at clock tick
    RLWORD=:31	;KS reload bits, to enable/disable Keep-Alive with the 8080
    CTYIWD=:32	;2020 CTY input word
    CTYOWD=:33	;2020 CTY output word
    KLIIWD=:34	;2020 KLINIK input word
    KLIOWD=:35	;2020 KLINIK output word
    DDTSYM=:36	;Like JOBSYM, but after symbol table has been moved
;*; SYSSNP=:37	;(TOPS10) If nonzero, JSR @SYSSNP at clock tick (output to LPT)
    FORTY=: 40	;LUUO stored at here on KL-10 (not in the EPT)
    JOB41=: 41	;JSR to LUUO handler on KL-10
        ;42-57	;Priority interrupt for KA-10
    JOBREL=:44	;(user mode) Size of SYSTEM.SAV
;*; ARSLOC=:70	;(TOPS10) Instruction executed on a reload after power failure
    KAFLOC=:71	;Instruction executed on a Keep Alive Failure
;*; WRSINS=:72	;(TOPS10) Instruction executed on a Warm ReStart
           ;73	; zero
    JOBDDT=:74	;<ending,,starting> address of EDDT
;*; JOBHSO=:75	;(TOPS10) High Segment Origin
;*; JOBBPT=:76	;(TOPS10) Address of DDT's breakpoint #0
;*; LIGHTS= 77	;(TOPS10) Data to be displayed in lights (KA-10 and KI-10)
;*; JOBEDV=:112	;(TOPS10) Address of Exec Data Vector
    DDTSA=: 114	;Like JOBDDT, but after symbol table has been moved
    JOBHRL=:115	;(TOPS10) Length,,start of hiseg
    JOBSYM=:116	;Pointer to DDT symbol table as set up by LINK/LOADER
    JOBSA=: 120	;RH has starting address, LH has initial JOBFF
    JOBFF=: 121	;First Free location in lowseg, used by DDT autopatch
    JOBS41=:122	;Copy of JOB41 when creating/reading SAV file
    JOBCOR=:133	;Size of SYSTEM.SAV
    JOBCST=:136	;Reserved for customer definition
    JOBVER=:137	;Version number, pointer to CONFIG table in TYMCOM-X

	LOC	137
	EXP	CONFIG	;Pointer to configuration table for CRSHID

;SYSTEM INITIALIZATION DISPATCH TABLE, STARTING AT LOCATION 140

Subttl	BASE communications areas

	LOC 150		;Data locs for VARIAN-620 or EBUS base
BASEDB:
KEY620::0		;(150) Set to 63375150626 when system is up
	0		;(151) Alarm cell (BBORQ & BBOIO on F3)
	0		;(152) Location for 620 to dump core (obsolete)
IRINGA::IRING_4		;(153) Location of input ring in BASE format
IRINGS::1_<SIZIRG+4>	;(154) Size of input ring in BASE format
IRPPDP::0		;(155) PDP-10 pointer to empty input ring
IRP620::0		;(156) BASE pointer to fill input ring
ORINGA::ORING_4		;(157) Location of output ring in BASE format
ORINGS::1_<SIZORG+4>	;(160) Size of output ring in BASE format
ORPPDP::0		;(161) PDP-10 pointer to fill output ring
ORP620::0		;(162) BASE pointer to empty output ring
D620FN:!-1		;(163) SET 0 BY 620 WHEN 10 COMES UP, NON-0 WHEN
			;      620 FINISHED DUMPING (OBSOLETE)
LIVWRD:!0		;(164) Used by RMTSER if NUMPRT # 0
	0		;(165) if NUMPRT # 0, then QTOST_4
	0		;(166) NOT USED
	0		;(167) NOT USED
;Locations 150-167 are BLT'ed to 170-207 when the system crashes.  /JMS

	LOC	170		;Even on the F3, so CRSHID can dump the rings
BASAVE::BLOCK 20	;(170-207) Copy of IRING/ORING pointers in crash
BASDWN::BASMSG		;(210) + = startup, 0 = ok, -1=base went down
			;(211-277 unused)

	LOC	300	;This location set by DIP switches on the SA-10
SAXBAS::BLOCK 40	;4 words per channel, 4 channels per SA-10, 2 SA-10s
SA0BAS=:SAXBAS		;SA #0 (TYMCOM-X uses only channels 0 and 1)
SA1BAS=:SA0BAS+20	;SA #1 (if any)

	LOC 340
SASAVE::BLOCK 40	;340-377 Copy of SAXBAS in crash

	;(400-777 unused)

	LOC	540		; Channel command words (for now) RA10N!RP10N!RD10N
	LOC <.+1>&777776	;GET TO EVEN LOC FOR CHANNEL COMMAND WORDS
LOCOCW:	BLOCK ALLKON*2


	LOC 1000
EPT::	BLOCK 1000		;EPT in locations 1000-1777

	LOC 2000	;The pointers and rings for the F3 must be in page 2
BASEDB:
KEY620::0		;(2000) Set to 63375150626 when system is up
BBORQ:	0		;(2001) BLOCK I/O REQUEST STORAGE WORD FOR UCODE
BBOIO:	0		;(2002) BLOCK I/O IO WORD FOR MICROCODE
IRINGA::IRING_4		;(173) LOC OF INPUT RING (for CRSHID, ignored by uCODE)
IRINGS::1_<SIZIRG+4>	;(174) SIZE OF INPUT RING (for CRSHID, ignored by uCODE)
IRPPDP::0		;(2005) HOST IRING POINTER
IRP620::0		;(2006) BASE IRING POINTER
ORINGA::ORING_4		;(177) LOC OF INPUT RING (for CRSHID, ignored by uCODE)
ORINGS::1_<SIZORG+4>	;(200) SIZE OF INPUT RING (for CRSHID, ignored by uCODE)
ORPPDP::0		;(2011) HOST OUTPUT RING POINTER
ORP620::0		;(2012) BASE OUTPUT RING POINTER
D620FN:!-1		;(2013) BASE NEVER DUMPS IN PDP-10 MEMORY
LIVWRD:!0		;(2014) Unused if NUMPRT = 0
	0		;(2015) QTOST_4 if NUMPRT # 0
	0		;(2016) NOT USED
	0		;(2017) NOT USED
;Locations 2000-2017 are BLT'ed to 170-207 when the system crashes.  /JMS
			;(2020-2200) unused

	LOC 2200	;LOCATION FIXED BY F3 MICROCODE
IRING::	BLOCK	200	;SIZE FIXED BY F3 MICROCODE
ORING::	BLOCK	400	;SIZE FIXED BY F3 MICROCODE


	LOC <.+777>&777000	;Page aligned for Rings in same page
IRING::	BLOCK	1_SIZIRG	;2000-2177
ORING::	BLOCK	1_SIZORG	;2200-2577
	LOC <.+777>&777000	;Go to start of next page

UPT::	BLOCK	SIZCTX*1000	;Context pages for null job (and crash dump)
UPDEND==.-1			;End of BLT for crash dump

SUBTTL	KS-LPT - Page aligned data for the 2020 lineprinter

IFG LPTN,<LOC <.+777>&777000	;Go to start of next page
  ;This data must all fit into one page or else LPTSER must be changed to use
  ;more than one UNIBUS paging RAM register.

NXDLPT::EXP LPRUN		;IF 0 THEN LPT IS A NON-EXISTANT DEVICE
LPVLPT::VLDATL,,<<.&777>*4>+4	;output pointer to load DAVFUQ
	XWD 356,37437		;start code,,channels 1-11
	REPEAT <<LPTFS-4>/2>,<	;this sets up most of the lines
	XWD 37037,37037		;generate 2 DAVFU lines w/ ch2-ch11
	>;REPEAT
	IFE MOD(LPTFS,2),<XWD 37037,37077
			  XWD 167400,0>;for even form sizes
	IFN MOD(LPTFS,2),<XWD 37077,16740>;for odd form sizes
VLDATL==.-LPVLPT-1
	BLOCK ^D46-VLDATL	;leave room for form sizes up to ~88/GL
LPCFPT::1,,<<.&777>*4>+4
	BYTE (2) 0 (8) 14,15
NEWTOF::1,,<<.&777>*4>+4	;new top of form /GL
	BYTE (2) 0 (8) 357,0	;stop byte /GL
LPTEPT::LTEDAT,,<<.&777>*4>+4
REPEAT ^D16,<BYTE (2) 0 (8) "8","8" (2) 0 (8) "8","8">
	BYTE (2) 0 (8) 12,15
LTEDAT==.-LPTEPT-1

IFN LPTN-1,<PRINTX LPT BUFFER ALLOCTION DONE FOR ONLY ONE PRINTER.>
LPBSIZ==40
LPTBUF:	BLOCK <LPBSIZ*5>/4+1
>; IFG LPTN

SUBTTL	Start of relocatable COMMON (byte pointers, etc)

;Everything defined before here have fixed locations in absolute low core

	STOPCD(,ENTRY,COMMON)	;Default for noname stopcodes

IRINGX::BLOCK	1_SIZIRG	;Copy of IRING in crash dump
ORINGX::BLOCK	1_SIZORG	;Copy of ORING in crash dump
				;See also BASAVE at locations 170-207
KEYTIM::0			;UPTIME when the base last cleared KEY620
IRPTIM::0			;UPTIME when the message read from IRING
ORPTIM::0			;UPTIME when the last message was put in ORING

XP EPTEBR,EPTFSL		;(KI) WHERE TO DO CONO PAG FROM.
XP EPTACB,100			;(F3) PLACE TO STORE NON-CURRENT AC BLOCKS

;LMAP AND UPT GENERATION

  UP%000=:%UPT+000	;User page map
  UP%200=:%UPT+200	;User HISEG map
  UP%400=:%UPT+400	;Funnyspace map
  UP%500=:%UPT+500	;Page fail words (KI uses 426)
  UP%600=:%UPT+600	;Stack and such  (KI uses 440)
			;PGT,MUU,MUP,KNT defined in K?SYM
  UP%PGT=:%UPT+UPTPGT	;Trap instructions (420-423)
  UP%MUU=:%UPT+UPTMUU	;UUO or illegal instruction stored here (424)
  UP%MUP=:%UPT+UPTMUP	;PC of UUO or illegal instruction (425)
  UP%KNT=:%UPT+UPTKNT	;Start of dispatch table (430-437)


%UPT.V==UPTFSL		;START OF UPT LOCATIONS RELATIVE TO %UPT (440 or 600)

;THE FOLLOWING LOCATIONS MUST BE IN THE FIRST ^D512 WORDS

	XP XACSTL,4	;eXec AC STack Length (UUOs nested 4 deep)
UARRAY(UPTAC0,<<20*XACSTL>+1>)	;Extra word for stack pointer overflow
	IFN UPTAC0&17,<PRINTX UPTAC0 MUST BE ON 20 WORD BOUNDARY>
  UP%AC0=:%UPT+UPTAC0
UVAR(UPTSTS)	;JOB IN CORE STATUS BITS
			;18-35	STARTING ADDRESS IF STRTAD SET
	XP XPNCOR,1	;17	CORE NEEDS TO BE EXPANDED
	XP STRTAD,2	;16	RIGHT HALF CONTAINS A STARTING ADDRESS
	XP UPSCLK,4	;15	CLOCK SHOULD BE ON
	XP SAVCHG,10	;14	CHARGES ARE SAVED IN UPT
	XP REC.WR,20	;13	WRITE STREAM ACCTG RECORD NEXT EXIT
	XP LSAREC,40	;12	LOCAL STREAM ACCTG DONE
	XP SG.SWR,100	;11	CURRENT HISEG LOADED FROM .SWR FILE
	XP UPNPSR,^D10	;8-10	(POS) PENDING STREAM REC TYPE
	XP UPSPSR,^D3	;	(SIZ) SEE START CMD AND USRXIT
	XP UPSSWE,2000	;7	JOB GOT SWAP ERROR FOR USER PAGE
			;	WHILE IT OWNED DISK RESOURCE, AND
			;	JBTABT NOT SET UP. UTRP SET WITH
			;	THIS BIT SO USRXIT SEES IT.
	XP UPSABK,4000	;6	ADDRESS BREAK DURING UUO.
	XP STRTCL,10000	;5	INCREMENT START ADDRESS BEFORE USING IT.
			;0-4	(UNUSED)

 UPYPSR::POINT UPSPSR,%UPT+UPTSTS,UPNPSR ;POINTER TO PENDING STREAM REC TYPE
 USYPSR::POINT UPSPSR,%UPS+UPTSTS,UPNPSR ; One for %UPS
 UXYPSR::POINT UPSPSR,%UPX+UPTSTS,UPNPSR ; One for %UPX

UVAR(UPTJOB)		;HAS JOB NUMBER OWNING THIS UPT
UVAR(UPTPC)		;HAS THE JOB'S PC WHEN NEXT SET TO RUN
  UP%PC=:%UPT+UPTPC
UVAR(UPTACP)		;STACK POINTER TO SAVED EXEC AC'S
UVAR(UPTLDC)		;COUNT OF NUMBER OF LMAP SLOTS KEPT IN ACS FROM THIS UPT
UVAR(UPTABK)		;ADDRESS BREAK WORD.
  XP EPLLEN,176	;LENGTH EXEC PDL
UVAR(UPTUUO)		;Top level MUUO (called from user mode)
  UP%UUO=:%UPT+UPTUUO
UARRAY(UPTPDL,EPLLEN)	;SYSTEM UUO PDL FOR CURRENT JOB
  UP%PDL=:%UPT+UPTPDL		;Stack in funny space
	XP NUMCHN,^D48		;MAX NUMBER OF IO CHANNELS
	XP MAXCHN,<NUMCHN-1>
UARRAY(UPTJDA,NUMCHN)	;RH==DDB ADDRESSES (JOB DEV ASSIGNMENTS)
  UP%JDA=:%UPT+UPTJDA	;LH= VARIOUS STATUS BITS FOR CHANNEL:
			;(INITB,LOOKB,ICLOSB..ETC SEE S.MAC)
UARRAY(UPTSIM,NUMCHN)	;SIMULATED BUFF/DUMP MODE
			;IO DATABASE. LH=SEQUENCE STAMP. RH=
			;SIMIO STATUS BITS+PAGE NUMBER FIELD
UARRAY(UPTPOS,NUMCHN)	;BLOCK POSITION IN (DSK) FILE ON THIS CHANNEL
UVAR(UPTPBM)		;PAGE BIT MAP. BITS 0-31 SET IF PER-PROCESS
			;PGS 340-377 USED FOR SIMIO
UVAR(UPTIOC)	;SIMIO IO COUNT, FOR SEQ. STAMP
UARRAY(UPTXAC,20)	;EXEC ACS HERE WHEN JOB ISN'T RUNNING.
UARRAY(UPTUAC,20)	;USER ACS WHEN JOB ISN'T RUNNING (FORMERLY IN PAGE 0)
  UP%UAC=:%UPT+UPTUAC
	XP CHGSIZ,<^D22>
UARRAY (UPTCHG,CHGSIZ)	;SAVED TRU COMPONENTS. 17 PRE-P031

UVAR(UPTHCU)		;HIGHEST USER I/O CHANNEL IN USE.
UVAR(UPTENB)		;LH=UNUSED,RH=APR CONSO FLAGS FOR USER
			; APR TRAPPING.  SET BY APRENB UUO.
UVAR(UPTTPN)		;HAS TRAP NUMBERS FOR VARIOUS TRAPS
UVAR(UPTTP1)		;MORE TRAP NUMBERS
UVAR(UPTMTM)		;Micro-cycle interrupt timer
UVAR(UPTABL)		;SAVED LOCATION FOR ADDRESS BREAK (SO CAN REPORT WHERE UUO WAS)
UVAR(UPTUFI)		;USER WORKING SET PAGE FAULT INFORMATION
UVAR(UPTXFI)		;LIKE UFI, BUT FOR TIMES TRAP CAN'T HAPPEN
UVAR(UPTUEI)		;USER ERROR INFORMATION (FOR PAGES)
UVAR(UPTXEI)		;LIKE UEI, BUT USED WHEN TRAP CAN'T HAPPEN
UVAR(UPTURI)		;USER REF BIT TRAP INFO
UVAR(UPTXRI)		;LIKE URI, BUT USED WHEN TRAP CAN'T HAPPEN.
UVAR(UPTUII)		;ILL MEM REF, WRITE VIOL, ADDR BREAK INFO WORDS
UVAR(UPTXII)		; RETURNED BY PGISTS UUO.

  XP UPTTCB,UPTTPN	;FIRST LOC TO CLEAR IN APRENB
  XP UPTTCE,UPTXII	;LAST LOC.
UVAR(UPTREL)		;LH/0; RH/LOWSEG HI ADDR OR 0 IF NO LOWSEG
UVAR(UPTHRL)		;LH/0;  RH/HISEG HI ADDR, OR 0 IF NO HISEG
UVAR(UPTRNM)		;RESTRICTED COMMAND FILE NAME
UVAR(UPTRPN)		;RESTRICTED COMMAND FILE PPN
UVAR(UPTALD)		;ALTERNATE LOGOUT PROGRAM DEVICE
UVAR(UPTALP)		;ALTERNATE LOGOUT PROGRAM PPN
UVAR(UPTALN)		;ALTERNATE LOGOUT PROGRAM NAME
UVAR(UPTPJC)		;SESSION PROJECT CODE WORD 0
UVAR(UPTPJ1)		;WORD 1
UVAR(UPTPJ2)		;WORD 2,BIT 35 IS "LICENSE REQD" BIT
UVAR(UPTSAT)		;HAS STATUS BITS FOR + ADDR OF %SAT PCB.
UVAR(UPTRIB)		;HAS STATUS BITS FOR + ADDR OF %RIB PCB.
UVAR(UPTRB2)		;HAS STATUS BITS FOR + ADDR OF %RB2 PCB.
UVAR(UPTPID)		;PID FOR CURRENT PROGRAM - FROM RUN FILE'S PID.
UVAR(UPTSPD)		;SAVED PID, SO PIDSET UUO CAN SET IT TO 0 AND BACK

UVAR(UPTLOG)		;Originating Port for this frame.
  UP%LOG=:%UPT+UPTLOG
UVAR(UPTLKJ)		;JOB NUMBER OF JOB WHO OWNS CONTEXT PAGE WRITE LOCK FOR THESE CONTEXT PAGES
UVAR(UPTLKW)		;HEAD OF WAITERS FOR CTX PAGE WRITE INTERLOCK
UVAR(UPTOFD)		;FRAME DESCRIPTOR SET BY SETOTF UUO.
UVAR(UPTLKC)		;NUMBER OF TIMES OWNER OF LOCK CALLED FOR IT AGIN+1
			; (NESTED PAGE FAULTS INSIDE UUOS, ETC.)
UVAR(UPTETP)		;(0) CLASS,,TYPE WITHIN CLASS OF ERROR TRAP
XP UPTHST,UPTETP	;FIRST LOCATION OF HALT STATUS BLOCK
UVAR(UPTECN)		;(1) COUNT TO TELL HOW MANY ERRORS HAPPENED.
UVAR(UPTEPC)		;(2) PC OF ERROR TRAP
UVAR(UPTEUP)		;(3) PC OF LAST TOP LEVEL UUO PERFORMED
UVAR(UPTEDV)		;(4) DEVICE NAME, LOCATION, ETC.
UVAR(UPTELC)		;(5) LOCATION, OTHER DATA
UVAR(UPTEL1)		;(6) ANOTHER LOCATION FOR ERROR DATA.
XP FHSMXC,<UPTEL1-UPTHST+1> ;MAXIMUM COUNT

XP FHIMAX,FHIN-1	;MAXIMUM VALUE FOR INDEXING INTO UPTFHT

UARRAY(UPTFHT,FHIN)	;FRAME HANDLE ADDRESSES.

UARRAY(UPTS2P,.ARSIZ)	;BITS FOR ACCESS RIGHTS OF SELF OVER PARENT
UARRAY(UPTP2S,.ARSIZ)	;BITS FOR ACCESS RIGHTS OF PARENT OVER SELF
UARRAY(UPTMFR,.ARSIZ)	;MAX INWARD RIGHTS FOR THINGS THAT NEED CONTEXT PAGES IN.

UVAR(UPTSTV)		;CONTAINS SIZE,,START ADDRESS OF START VECTOR
;DEFINE LMAP LOCATIONS
UARRAY(UPTLMA,<VPMAX+1>);BASIC LMAP SLOT DATA, INDEXED BY VP
UARRAY(UPTMWB,<<VPMAX+1+^D35>/^D36>)
			;MONITOR WORKING SET BIT TABLE.
AGECPW==:<^D36/AGESIZ>
AGEMAX==:<<1_AGESIZ>-1>
UARRAY(UPTAGE,<<^D512+AGECPW-1>/AGECPW>)
			;PAGE AGE TABLE
UARRAY(UPTUWB,<<^D512+^D35>/^D36>)
			;USER WORKING SET BIT TABLE
UVAR(UPTUWS)		;USER WORKING SET DATA
			;CURRENT SIZE IS IN JBYUWS.
 UPYUWL::POINT 10,%UPT+UPTUWS,25	;CURRENT LIMIT
 USYUWL::POINT 10,%UPS+UPTUWS,25 ;ONE FOR %UPS
 UXYUWL::POINT 10,%UPX+UPTUWS,25 ;ONE FOR %UPX
 UPYUWM::POINT 10,%UPT+UPTUWS,35	;CEILING FOR CURRENT LIMIT
 USYUWM::POINT 10,%UPS+UPTUWS,35 ;ONE FOR %UPS
 UXYUWM::POINT 10,%UPX+UPTUWS,35 ;ONE FOR %UPX

UVAR(UPTNTV)		;TICKS UNTIL NEXT PAGE AGE RECOMPUTATION
UVAR(UPTMAT)		;# OF MATURE PAGES (AGE .GE. C(AGEMAT))
UVAR(UPTELD)		;# OF ELDERLY PAGES (AGE .GT. C(AGEELD))
UVAR(UPTRPT)		;POINTER FOR CIRCULAR PAGE REPLACEMENT ALGORITHM

UVAR(UPTRES)		;WORD FOR SWAPPER TO REMEMBER RESERVED PAGES
 USYSIN::POINT 10,%UPS+UPTRES,15	;NUMBER OF PAGES SWAPPED IN
			; FOR SETTING UP ICPT
 USYRES::POINT 10,%UPS+UPTRES,25	;NUMBER OF RESERVES PAGES JOB OWNS STILL
 USYLSP::POINT 10,%UPS+UPTRES,35	;LMAP SCAN POINTER (WHERE
			; SWAPPER STARTS SWAPPING IN ON A CYCLE

XP UPTEND,%UPT.V-1	;Ending location to clear, end of BLT when crashing
NCTXPG==:<%UPT.V!777+1>/1000
ONSZCK(CONTEXT,NCTXPG,CTX)	;Check if enough space allocated for CTX pages
  PDL=:   UPT+%UPT.V		;Stack for null job and scheduler
  NULUPL==NCTXPG*1000-%UPT.V	;Null job UPT limit = until end of page
  IFL <NULUPL-60>,<PRINTX ? Null job PDL is too small>
NULPDL::IOWD NULUPL,PDL		;Null job gets a short stack (70 words)

VPUMAX==:VPMAX-NCTXPG	;MAXIMUM NON-CONTEXT PAGE VP

XP %UPT.N,VPUMAX+1-CNVVPN 	;START PAGE OF CONTEXT PAGES
XP %UPT,<%UPT.N_9>	;START ADDRESS OF CONTEXT PAGES IN UPT
XP %UPLMA,%UPT+UPTLMA	;THIS ADDR+VP GIVES LMAP SLOT DATA
XP %UPLMX,%UPX+UPTLMA	;DITTO FOR %UPX.

XP %COW.N,%UPT.N-1	;USED FOR COPY ON WRITE
XP %COW,<%COW.N_^D9>

;%UPX IS A SPECIAL SET OF PAGES THAT EITHER CONTAINS POINTERS IDENTICAL
; TO %UPT POINTERS IF THE SLOTS DON'T EXIST, OR LMAP SLOTS FOR
; ANOTHER FRAMES'S CONTEXT PAGES.

XP %UPX.N,%COW.N-NCTXPG	;PLACE FOR VIRTUAL UUOS THAT WORK ON OTHER FRAMES TO
			; ACCESS CURRENT CONTEXT PAGES
XP %UPX,<%UPX.N_^D9>

;ADD OTHER PERMANENTLY ALLOCATED EXEC PER PROCESS VALUES ABOVE HERE
XP %LEP.N,%UPX.N-1	;LAST DYNAICALLY ALLOCATED EXEC PER PROCESS PAGE

PBMMSK::-1_<340-%LEP.N+1>	;MASK FOR DYNAMIC ALLOCATER.
				; 1 MEANS IN USE.

XP %UPS.N,EVPMAX-NCTXPG+1	;FIRST EPT PAGE NUMBER THAT CONTEXT PGES MAPPED IN
XP %UPS,<%UPS.N_9>	;FIRST CONTEXT PAGE ADDRESS IN EPT
XP %UPLMS,%UPS+UPTLMA	;THIS ADDR PLUS VP GIVES 36 BIT LMAP SLOT DATA

UPYPTN:: UPMPTR(%UPT.N)		;
UPYPTM:: UPMPTR(%UPT.N-1)	; (CORE1)
UPYPXN:: UPMPTR(%UPX.N)		;
UPYPXM:: UPMPTR(%UPX.N-1)	; (CORE1)

USYPTN:: UPSPTR(%UPT.N)		; (ONCE)(CORE1)
USYPXN:: UPSPTR(%UPX.N)		;
USYPTM:: UPSPTR(%UPT.N-1)	;
USYPXM:: UPSPTR(%UPX.N-1)	; (SCHED1)

UXYPTN:: UPXPTR(%UPT.N,%UPT)	;
UXYPTM:: UPXPTR(%UPT.N-1,%UPT)	; (COMCON)

EPYPSN:: EPTPTR(%UPS.N)		; (ONCE)(PICON)(UUOCON)
EPYPSM:: EPTPTR(%UPS.N-1)	; (CORE1)(SCHED1)
SUBTTL	Start of zeroed data

SYSBEG::		;FIRST LOCATION CLEARED ON 143 RESTART (SEE SYSINI)

   JOB=:.CPJOB		;Number of current job stored in CDB

COMCNT::0			;NUMBER OF COMMANDS TYPED-IN BUT NOT DECODED
				;SET BY SCNSER, DECREMENTED BY COMCON
HNGTIM::0			;HUNG DEVICE TIME COUNT CHECK FOR HUNG I/O
				;DEVICES WHEN THIS GOES TO ZERO (ONCE PER HNGSEC)
HNGMIN::0			;COUNTER FOR ONCE A MINUTE
CLKFLG::0			;NON-ZERO WHEN CLK INTERRUPT FORCED FOR ANY R
STPFLG::0			;SET WHEN CURRENT JOB MAY BE STOPPED
				;CLK INT AND NOT EXEC MODE OR USCHED
TIMEF::	0			;NON-ZERO FOR CLOCK INTERRUPT ON APR
				;SET BY APRSER, TESTED AND CLEARED BY CLK ROUTINE
				;SET BY APRSER, CLEARED BY CLK ROUTINE (CLOCK)
DTMADJ::0			;Number of ticks to adjust date/time
APRPC::	0			;PC WHEN APR ERROR DETECTED
				;LH=-1 ON MEM PARITY ERROR
SCHEDF::0			;FORCED RESCHEDULING FLAG FOR CLK ROUTINE
				;USED TO FORCE RESCHEDULING WHEN JOB IS IN EXEC MODE
NULERR::0			;SET NON-ZERO IF MONITOR DETECTS ERROR WHILE
				; NULL JOB IS RUNNING
POTLST::0			;-1 WHEN SCHEDULER SEES THAT THERE ARE JOBS WHICH
				; ARE POTENTIALLY RUNABLE BUT HAS TO RUN NULL JOB.
				;0 WHEN IT FINDS A REAL JOB TO RUN OR NULL JOB IS
				; ONLY JOB WHICH WANTS TO RUN.  'LSTWRD' IS
				; INCREMENTED EVERY JIFFY IF THIS FLAG IS -1 AND
				; PREVIOUS JOB WAS NULL JOB.
SLJOBN==JOBN*2			;LEAVE TWO ENTRIES PER JOB
CIPWT::	BLOCK SLJOBN+3		;CLOCK REQUEST QUEUE
				; LH-MONITOR ADDRESS TO PUSHJ TO AT CLOCK LEVEL
				; WHEN BITS 24-35 COUNT DOWN TO ZERO
				; BITS 18-23 ARE DATA SET IN AC T1 WHEN PUSHJ DONE
				; BITS 24-35 ARE NUMBER OF CLK TICKS LEFT TO GO
	CIPWTM==:CIPWT-1		;FIRST LOC-1 OF CLOCK QUEUE
;STORAGE FOR VARIOUS CORE ALLOCATION FUNCTIONS


	XP PAGSIZ,1000		;BASIC UNIT OF CORE IN WORDS

BASVER::BYTE(8)0,0,0,0		;BASE version from type 3 or type 4 message
;*;	BYTE(8)0,0,0,0		;Version # of 2nd base
;*;	BYTE(8)0,0,0,0		;Version # of 3rd base
;*;	BYTE(8)0,0,0,0		;Version # of 4th base

NSWTBL::			;Words 0-7 were CORTAB on a PDP-6 monitor
	0			;(0) unused
	0			;(1) unused
	0			;(2) unused
	0			;(3) unused
	0			;(4) unused

;; NEW entries here re-using ancient CORTAB entries	;;  backwards
;;	which have also been made obsolete by DEC.	;;  from 7-0

;WARNING: This table is zeroed out at startup.  See NZRINI in ONCE

SYSUDT::-1			;(5) Date/Time when system was loaded
KSYS::  0			;(6) Minutes until timesharing ends
INADEF::INADFL			;(7) DEFAULT INACTIVITY TIMEOUT LIMIT MINUTES
CORMAX::0			;(10) MAXIMUM CORE REQUEST+1 (IE LARGEST REL. ADR,+1)
				; CAN BE RESTRICTED TO LESS THAN ALL OF USER CORE
				; BY BUILD AND/OR ONCE
	0			;*(11) 1 BIT BYTE POINTER TO LAST FREE BLOCK POSSIBLE
				; SET BY SYSINI ON 143 STARTUP
	0			;?(12) TOTAL NUMBER OF FREE+DORMANT+IDLE CORE BLKS LEFT
	0			;*(13) JOB NUMBER SHUFFLER HAS TEMPORARILY STOPPED FOR
				; ITS I/O DEVICES TO BECOME INACTIVE BEFORE SHUFFLING
	0			;*(14) ABSOLUTE ADDRESS OF LOWEST HOLE IN CORE, 0=NONE
UPTIME::0			;(15) NUMBER OF CLOCK TICKS SINCE SYSTEM LOADED OR
				; RESTARTED AT 143
	0			;*(16) TOTAL NUMBER OF WORDS SHUFFLED BY SYSTEM
	0			;*(17) JOB CURRENTLY USING THE SYSTEM TAPE
				; NEEDED SO CONTROL C WILL NOT TIE UP SYSTEM TAPE
HIGHJB::0			;(20) HIGHEST JOB NUMBER CURRENTLY ASSIGNED
CLRWRD::0			;(21) TOTAL NUMBER OF WORDS CLEARED BY 'CLRCOR' RTN.
LSTWRD::0			;(22) TOTAL NUMBER OF CLOCK TICKS WHEN NULL JOB RAN
				; BUT OTHER JOBS WANTED TO RUN AND COULD NOT
				; DO SO BECAUSE: ---
				;  1. SWAPPED OUT OR ON WAY IN OR OUT
				;  2. MONITOR WAITING FOR I/O TO STOP SO
				;      IT CAN SHUFFLE OR SWAP
				;  3. JOB BEING SWAPPED OUT BECAUSE IT IS
				;      EXPANDING CORE
MEMSIZ::0		;(23)SIZE OF PHYSICAL MEMORY IN WORDS (=FIRST NON EXIST WORD)
			; SET BY SYSINI ON 143 RESTARTS UNLESS SYMBOLS SAVED BY
			; PATCHING SYSLIM SMALLER.
PARTOT::0		;(24) TOTAL NUMBER OF BAD MEMORY PARITY ERRORS FOUND BY MONITOR
			;WHILE PROCESSOR WAS IN USER MODE
			; WHILE SYSTEM WAS RUNNING (IF MONITOR HALTS
			; THIS LOC ALREADY UPDATED)
PARSPR::0		;(25) TOTAL NUMBER OF SPURIOUS MEMORY PARITY ERRORS
			; FOUND BY APR, I.E. ONES WHICH DID NOT OCCUR
			; WHEN MONITOR SWEPT THRU CORE LOOKING FOR BAD
			; PARITY.
PARCON::0		;(26) COUNT OF NUMBER OF TIMES OPERATOR PUSHED CONTINUE
			; AFTER MEMORY PARITY HALT (PC) IN EXEC MODE OR MORE THAN 1
			; BAD PARITY WORD WHEN PC WAS IN USER MODE)
PARADR::0		;(27) LAST BAD PHYSICAL MEMORY ADDRESS FOUND
			; WHEN MONITOR SWEPT THRU CORE AFTER
			; PROCESSOR DETECTED FIRST BAD PARITY
PARWRD::0		;(30) CONTENTS OF LAST BAD WORD FOUND BY MONITOR
			; WHEN MONITOR SWEPT THRU CORE AFTER FIRST PARITY
PARPC::	0		;(31) PC OF LAST MEM PARITY (NOT COUNTING SWEEP THRU CORE)
			;INSERT NEW LOCATIONS HERE WHICH ARE OF INTEREST
			; TO USERS IN NON-SWAP AND SWAP SYSTEMS
EPOCNT::0		;*(32) TOTAL #  OF PDL OVF'S  AT M LEVEL IN EXEC MODE
EPOREC::0		;*(33) # OF PDL OVF'S AT M LEVEL IN EXEC MODE
NULTIM::0		;(34) NUMBER OF CLOCK TICS NULL JOB HAS BEEN
			;RUNNING SINCE STARTUP
NULMNT::0		;(35) NUMBER OF CLOCK TICES NULL JOB RAN
			;IN PREVIOUS MINUTE
ALR620::0		;(36) 620 ALARM CELL (UNHAPPY MSGS)
USRMAX::0		;(37) MAXIMUM SIZE THAT A JOB'S MWS CAN GET.
			; SETUP BY ONCE TO BE NUMBER OF USER PAGES AVAILABLE.
SYSUID::0		;(40) last allocated universal frame id number
THSTIM::0		;(41) UPTIME when SCNSER last ran
MXTIM::	0		;(42) all time max of (THSTIM-UPTIME)

NSWMXL==:<.-NSWTBL-1>B26	;MAXIMUM ENTRY FOR GETTAB SHIFTED LEFT 9

SYSBG2:			;1ST. LOCATION FOR ONCE ONLY CODE TO BE ASSEMBLED HERE
			;CORE ALLOCATION DATA NOT AVAILABLE VIA GETTAB
LASCOR::0		;LAST JOB OR HIGH SEG TO CALL CORE ROUTINES
PARFLG::0		;-NO. OF PARITY ERRORS ALLOWED IN EXEC MODE
			; BEFORE HALT.  USED TO DETECT SWEEP THRU CORE

RCMAX:	177		;MAX SIZE OF USER JOB IN K
CORMXK::0		;MIN-MAXIMUM SIZE OF USER JOB IN K
MWSLIM::0		;CURRENT MWS LIMIT. SETUP BY ONCE TO C(USRMAX)
HLTBRK::0		;IF NON-ZERO, WE WILL HALT ON ADRESS BRK
Subttl SWPTBL - DATA LOCATIONS PRESENT ONLY IN SWAPPING SYSTEMS

SWPTBL::			;FIRST LOCATION OF MONITOR DATA STORAGE
				; RETURNED BY GETTAB M (THESE LOCATIONS
				; PRESENT ONLY IN SWAP SYSTEMS)
				; OCTAL NUMBERS IN () CORRESPOND TO GETTAB ARG
	0			;(0) CURRENT BIGGEST HOLE IN CORE (IN PAGES)
	0			;(1) IF +, THEN JOB NUMBER OF JOB BEING SWAPPED IN,
				;IF -, THEN JOB NUMBER OF JOB BEING SWAPPED OUT
	0			;(2) JOB NUMBER BEING FORCED TO SWAP OUT
	0			;(3) JOB NUMBER WAITING TO BE FITTED INTO CORE
	0			;(4) NUMBER OF FREE PAGES OF SWAPPING SPACE LEFT
				; (COUNTING DORMANT SEGMENTS AS IF FREE).
				; PRINTED WITH CORE COMMAND (NO ARG) OR ERROR
				; USUALLY THE SAME AS THE AMOUNT OF VIRTUAL CORE
				; LEFT IN SYSTEM, EXCEPT WHILE R,RUN,KJOB,GET
				; COMMAND ARE WAITING TO BE SWAPPED IN, BECAUSE
				; THE OLD DISK SPACE HAS NOT BEEN RETURNED YET,
				; BUT VIRTUAL CORE IS ONLY 140 WORDS FOR SWAPIN
SWPERC::0			;(5) LH= NUMBER OF SWAPPER READ OR WRITE FAILURES
				; RH= ERROR BITS (BITS 18-21) + NUMBER OF J OF
				; DISCARDED SWAPPING SPACE

				;INSERT NEW LOCATIONS HERE WHICH ARE OF INTEREST
				; TO USER PROGS IN SWAPPING SYSTEMS
LASIN::	0			;(6) last job or high seg swapped in
LASOUT::0			;(7) last job or high seg swapped out
SWPMXL==:<.-SWPTBL-1>B26	;MAXIMUM ENTRY FOR GETTAB SHIFTED LEFT 9

;MORE SWAPPING SYSTEM LOCATIONS (NOT RETURNED BY GETTAB)

FULCNT::0			;PRINT DISK IS FULL EVERY 30 SECONDS

;DEFINE BLOCK FOR BIT TABLE DENOTING 4 WORD BLOCKS AVAILABLE (=0), IN USE (=1)
; USE MULTIPLES OF 4*^D36 WORDS SO THE TABLE WILL HAVE A MULTIPLE OF ^D36 BITS
; ADD 7 WORDS TO ACCOMODATE A POSSIBLE 1K BEYOND FRECOR AMOUNT
;MONITOR TABLES WITH ONE ENTRY PER JOB

JBTSTS::BLOCK 	JOBN		;JOB STATUS WORD
				;LH==STATUS BITS (SEE S.MAC FOR DESCRIPTION)
				;BITS 18-23=EXTENDED JOB STATUS BITS

JBTWRS::BLOCK	JOBN		;LAST 6 JOB STATE CODES (DEBUGGING)

JBTCTX::BLOCK	JOBN*NCTXPG	;DISK ADDRESSES, STATUS BITS FOR
				; CONTEXT PAGES

JBTIOA::BLOCK	JOBN		;LH=UNUSED (Was interrupt assignments!!!)
				;RH=COUNT OF CAN'T SWAP WHILE IO
				;WHICH USES USER CORE IS IN
				;PROGRESS. =0 MEANS SWAPPABLE.

JBTUPM::BLOCK	JOBN		;LH = NUMBER OF EXISTENT PAGES IN
				; USER ADDRESS SPACE. RH = USER
				; AC BLOCK, LOAD UBR BIT
				; AND PHYSICAL PAGE NUMBER OF UPT

JBTPGO::BLOCK	JOBN		;LH SEE BELOW, RH LINK TO NEXT JOB
				; WAITING FOR CORE PAGE. CHAIN STARTS
				; IN PGYPGO.

JBTFIT::BLOCK	JOBN		;DOUBLY LINKED LIST OF JOBS BEING
				; SWAPPED IN.

JBTMWS::BLOCK	JOBN		;MONITOR WORKING SET WORD
				;BITS 26-35 (JBYUWS) UWS SIZE
				;BITS 16-25 (JBYMWL) MWS SIZE LIMIT
				;BITS  6-15 (JBYMWS) MWS SIZE
				;BITS  0-5  (JBYPPP) # OF PER-PROCESS
				;PAGES

JBTICT::BLOCK	JOBN		;LH=IN CORE PROTECT TIME FOR JOB
				;RH=QUANTUM RUN TIME

JBTFTR::BLOCK	JOBN		;FRAME TREE TABLE. CONTAINS 3 12 BIT
				; FIELDS - PARENT, RIGHT HAND NEIGHBOR, AND LEFTMOST CHILD.

JBTUID::BLOCK	JOBN		;UNIVERSAL FRAME ID
JBTPNO::BLOCK	JOBN		;"PROGRAM NUMBER" - RIGHTS GO AWAY AFTER MISMATCH AGAINST THIS
JBTSPN::BLOCK	JOBN		;SELF TO PARENT RIGHTS PROGRAM NUMBER
JBTP2S::BLOCK	JOBN		;FAST ACCESS RIGHTS BITS FOR PARENT TO SELF
JBTS2P::BLOCK	JOBN		;FAST ACCESS RIGHTS BITS FOR SELF TO PRENT
JBTMFR::BLOCK	JOBN		;FAST MAXIMUM INWARD RIGHTS
				; (DEFAULT RIGHTS FOR FRAMES THAT DON'T KNOW EACH OTHER WELL)

JBTPPN::BLOCK JOBN	;.GTPPN=2  GFD'd Project Programmer Number
JBTNM1::BLOCK JOBN	;.GTNM1=31 GFD'd Username (1st half) sixbit chars 1-6
JBTNM2::BLOCK JOBN	;.GTNM2=32 GFD'd Username (2nd half) sixbit chars 7-12

RTIME::	BLOCK JOBN		;TOTAL RUN TIME SINCE LAST IJOB OR RUNTIME

JBTTMP::BLOCK	JOBN		;TMPCOR POINTERS, FREE SPACE FOR NULL JOB.
				; EACH ENTRY HAS THE FORM   XWD <QUOTA>,<LINK>

JBTNAM::BLOCK JOBN		;NAME OF FILE USED IN LAST R,RUN,GET, ETC
				; USED BY SYSTAT PROGRAM, subject to SETNAM
JBTPRG==:JBTNAM			;(TOPS10) Name of program, immune to SETNAM

JBTKCT::BLOCK JOBN		;PRODUCT OF CORE LENGTH (IN J) * NUMBER OF JIFFIES
				; PROGRAM USED CPU. USED FOR TIME ACCOUNTING.

JBTWCH::BLOCK JOBN		;BITS 1-5 = ENABLE BITS - SEE S.MAC
				;BITS 13-35 = TIME OF DAY IN JIFFIES USER
				;STARTED TO WAIT FOR RESPONSE FROM SYSTEM
				;REST UNUSED

JBTINT::BLOCK	JOBN		; INTASS interrupt channel assignments.
				; Bits  0-5  (4)  Timer trap (SETTIM)
				; Bits  6-11 (6)  Wake UUO
				; Bits 12-17 (13) Notice to quit/hang
				; Bits 18-23 (14) Exit in any/all child frame
				; Bits 24-29 (16) TRU limit exceeded

JBTFNT::BLOCK	JOBN		; FINASS interrupt channel assignments.
				; Bits  0-5  (2) Frame int from parent
				; Bits  6-11 (3) Frame int from child
				; Bits 12-17 (4) Frame int from sibling
				; Bits 18-23 (5) Frame int from anyone

JBTPNT::BLOCK	JOBN		; FINASS interrupt set by parent for child.
				; Bits  0-5  (0) Int parent when child is lost
				; Bits  6-11 (1) Int parent when child exits

JBTSTA::BLOCK	JOBN		;Used by .USESTAT command

JBTLIC::BLOCK	JOBN		;FOR LICENSE BITS (process,,frame)
JBTSLC::BLOCK	JOBN		;Saved license    (process,,frame)
				; RH use by ENABLE and DISABLE commands

JBTFPN::BLOCK JOBN		;PPN OF PROGRAM LAST RUN OR CURRENTLY
				;BEING RUN BY THIS JOB.  (0 IF PROGRAM
				;CAME FROM MAGTAPE.).

JBTAUN::BLOCK JOBN	;.GTAUN=-23 Logged-in PPN (Accounting user number)
JBTUNM::BLOCK JOBN	;.GTUNM=-22 Logged-in Username (1st half) sixbit chars
JBTUN1::BLOCK JOBN	;.GTUN1=-21 Logged-in Username (2nd half) sixbit chars
JBTSLM::BLOCK JOBN	; Console settable TRU limit     - Frame global
JBTLIM::BLOCK JOBN	; Console/UUO settable TRU limit - Process local

JBTDLK::BLOCK JOBN	;LOOKUPS
JBTERN::BLOCK JOBN	;ENTERS AND RENAMES
JBTSLK::BLOCK JOBN	;LOOKUPS*SIZE
JBTSER::BLOCK JOBN	;ENTERS AND RENAMES*SIZE
JBTSIN::BLOCK JOBN	;DISK BLOCKS READ*SIZE
JBTSOT::BLOCK JOBN	;DISK BLOCKS WRITTEN*SIZE
JBTCIN::BLOCK JOBN	;CHRS IN
JBTCOT::BLOCK JOBN	;CHRS OUT
JBTELP::BLOCK JOBN	;ELAPSED TIME*SIZE
JBTCNK::BLOCK JOBN	;CONNECT TIME (DETACHED NOT COUNTED)
JBTBCS::BLOCK JOBN	;BREAK CHRS *SIZE
JBTSOK::BLOCK JOBN	;FROM SOAKEM UUO
JBTCMP::BLOCK JOBN	;MICRO CYCLES FROM DK10
JBTCP2::BLOCK JOBN	;HIGH ORDER PART OF MICRO CYCLES
JBTCPU::BLOCK JOBN	;HIGH ORDER BITS OF MICRO CYC*SIZE

JBTABT::BLOCK JOBN	;ROUTINE TO CALL ON SWAP ERROR OR ILL MEM REF


JBTBET::BLOCK JOBN		;ELAPSED TIME IN BLOCK I/O MODE (IN SECONDS)
JBTBIO::BLOCK JOBN		;BIO CHARS IN/OUT

JBTAJF::BLOCK JOBN		;# FAULTS FOR PAGES IN UWS BUT NOT
				;IN MWS (# FAULTS CCAUSED BY MWS
				;ADJUST ALGORITHM)

JBTSCA::BLOCK	JOBN			;TRU scaling word

JBTENB::BLOCK JOBN	;CHANELS ENABLED. BIT 0 IS 1 IF PI SYSTEM
			;IS ENABLED, BITS 1-35 INDICATE CHANELS ENABLED

JBTPIP::BLOCK JOBN	;CHANELS IN PROGRESS. BITS 0 INDICATES
			;OLD APRENB SYSTEM. IF BIT 0=1 BITS 1 IS TRAP
			;IN PROGRESS. IF BIT 0=0 BITS 1-35 ARE THE
			;CHANELS IN PROGRESS

JBTAWQ::BLOCK JOBN	;CHANELS AWAITING REQUEST. IF BIT0=1
			;MEANS TAKE A TRAP AS SOON AS POSSIBLE
			;IF OLD STYLE APRENB, ALL BITS BUT BIT 0 USED
			;TO STORE FLAGS GIVING REASON FOR TRAP

;THIS MAY NOT GO AWAY

;BITS 0-5 UUO TRAP NUMBER
;BITS 6-11 CLOCK TRAP NUMBER
;BITS 12-17 PAGE TRAP NUMBER
;BITS 18-23 HUNG DEVICE TRAP NUMBER
;BITS 24-29 TIMER TRAP NUMBER
;BITS 30-35 DEVICE ERROR TRAP NUMBER

JBTPRV::BLOCK JOBN		;PRIVILEGE BITS FOR JOB SET BY LOGIN

QUEPCB::BLOCK	JOBN		;PCBIO DATABASE AREA.
JBTPCB::BLOCK	JOBN		;FOR LAYOUT, SEE PCBIO MODULE.

JBTCLB::BLOCK JOBN		;TABLE USED BY THE CLUB FACILITY

JBTINA::BLOCK	JOBN		;INACTIVITY TIMEOUT
				;LH - LIMIT
				; NOTE THAT THIS FIELD IS MUCH LARGER THAN
				; IT NEEDS TO BE
				;RH - # MIN SINCE JOB LAST RAN

JBTPC::	BLOCK	JOBN		;LH=DDB, RH=PC, for Control-T

	BLOCK MXQUE		;NUMBER OF QUEUES FOR SWAPPING SCHEDULER
JBTQ::	BLOCK JOBN		;ONE ENTRY PER JOB,
				; LH=PREVIOUS JOB, RH=NEXT JOB IN QUEUE
				; NEGATIVE MEANS THIS IS FIRST (LH) OR LAST (RH)
				; JOB IN QUEUE

;TTYTAB IS A TABLE OF CONTROLLING (ATTACHED) TTY'S FOR EACH JOB,
;INDEXED BY JOB NUMBER. IF C(TTYTAB)=0 THEN NO TTY IS ATTACHED.
;OTHERWISE, RH(TTYTAB(N)) IS CONTROLLING DDB FOR JOB N.

TTYTAB::BLOCK JOBN

;COMFLG is a bit table with one bit per frame, indicating whether
; there is a command pending for that frame.  Whenever the
; COMFLG bit is set for a particular frame, the "command
; request" bit (CMDCMR) in the left half of TTYTAB should also
; be set.

COMFLG::BLOCK	CFLG==<JOBN/^D36>+1	;Number of entries in COMFLG table


NRSVDP::0			;Number of pages actually reserved by ONCE
RSVDPG:: ;*;PRINTF(<[RSVDPG - reserving pages at 1 meg boundries for SA10 bug]>)
;*;	EXP 03777,04000		;*HACK* 1 page before and after 1 meg boundry
;*;	EXP 07777,10000		;*HACK* to get around SA10 bug that affects
;*;	EXP 13777,14000		;*HACK* systems with more than 1 meg of core
;*;	EXP 17777		;*HACK* (removed 20-Mar-87)
;*;	EXP 775,776,777		;Last 3 unmapped pages reserved for BOOTS
	EXP 0			;Zero marks end of list

;MORE PARAMETERS FOR TEMPORARY IN-CORE FILE STORAGE FOR SHORT (CCL) FILES

TMPNX==JOBN*^D20		;IF SIZE OF SPACE NOT SET, DEFAULT VALUE
TMPBKS==<TMPNX+TMPBL>/<TMPBL+1>	;NUMBER OF BLOCKS (LINKED LIST) IN AREA
TMPSZ==TMPBKS*TMPBL		;NUMBER OF DATA WORDS AVAILABLE
TMPSZT==TMPBKS*<TMPBL+1>	;TOTAL TABLE LENGTH (ROUNDED)
TMPBKJ==<<^D60+TMPBL>/<TMPBL+1>> ;USER SPACE QUOTA. DEFAULT VALUE
TMPSZJ==TMPBKJ*TMPBL		;QUOTA OF DATA WORDS PER USER


				; (DO NOT DESTROY ONCE)
				; FLAG NON-ZERO IF CALLED BY JRST LINKDB
				; (OK TO DESTROY ONCE CODE)

DDSTAR::Z		;STARTING ADDR OF STR DATA BLOCKS ETC. IN HIGH CORE
			;(USED BY ONCMOD AND REFSTR)
;;MACROS TO DEFINE PI CHANNEL NUMBER AND GENERATE INTERRUPT CHAINING
;; INFORMATION FOR ONCE SO IT CAN LINK THE DEVICE INTERRUPT SERVICE
;; ROUTINES AND THE DEVICE DATA BLOCKS

;;TABLE INTTAB IS GENERATED WITH PAIRS OF ENTRIES FOR EACH DEVICE
;; WHICH HAS A DEVICE DATA BLOCK
;;FIRST WORD: BIT 0==1 IF DECTAPE, BITS 1-9==NUMBER OF DDBS, BITS 9-17==PI
;; CHANNEL (0-7) WHERE 0 MEANS NO PI CHANNEL (E.G., PTY)
;;SECOND WORD: LH==0 IF SINGLE DEVICE,==LENGTH OF DDB IF MULTIPLE, RH==DDB ADDRESS

;NOW GENERATE THE TABLE FOR ONCE AND DEFINE PI CHANNEL ASSIGNMENTS


				; ONE FOR EACH JOB + NULL JOB (EXTRA ONE)
		APRN==1		;ALWAYS AN APR
		CLKN==1		;ALWAYS LOWEST PRIORITY CLOCK
		TIMN==1		;(KI) ALWAYS A DK10
		TM2N==1		;(KI) SECOND DK-10 FOR TIMING

INTTAB:			;TABLE OF DATA FOR DEFINING PI CHAN AND NUMBER OF DOB
	NOSAV==0	;DO NOT SUPPRESS GENERATION OF SAVE ROUTINES
	INTTB1==INTTAB+1

	ASGSAV SCN,0	;NO PI CHANNEL FOR SCNSER (AT CLOCK)
	ASGSAV ACT,0
NEXTCH		;BEGIN AT CHANNEL 1

;THE FOLLOWING ARE GROUPED ON A CHANNEL FOR HIGH-PRIORITY DEVICES
	ASGSAV CDR,\.CH

	ASGINT APR,\.CH

	ASGINT TIM,\.CH	;DK10S ONLY EXIST ON KI
	ASGINT TM2,\.CH	;DK10S ONLY EXIST ON KI
NEXTCQ

;THE FOLLOWING ARE MEDIUM-PRIORITY DEVICES, AS A GROUP
	ASGSAV PTR,\.CH
	MULASG LPT,LP,\.CH,0
;	ASGSAV DTA,\.CH
;	ASGSAV DTC,\.CH
;	ASGSAV MTA,\.CH
;	ASGSAV MTB,\.CH
;	ASGSAV MTC,\.CH

NEXTCQ

;THE FOLLOWING ARE LOWER-PRIORITY DEVICES, AS A GROUP
;FIRST ARE THE VARIOUS TYPES OF DISK CONTROLLERS....

	MULASG FHD,FH,\.CH,1
	MULASG DPC,DP,\.CH,1
	MULASG SAX,SA,\.CH,-1
	MULASG APX,AP,\.CH,-1
IFN SAXN,<SAXCHN==:SA0CHN
	  SAXSAV==:SA0SAV>
IFN APXN,<APXCHN==:AP0CHN
	  APXSAV==:AP0SAV>
	ASGSAV DSK,0	;GET DSK IN CHAIN, NO INTERUPT CODE (SEE ABOVE
	ASGSAV MAG,\.CH

	MNYASG(FT,<A,B,C,D,E,F,G,H,J,K,L>)	;ASGSAV for FTA, FTB, FTC, etc

;	ASGSAV PEN,\.CH
	ASGSAV PTP,\.CH
;	ASGSAV CDP,\.CH
	ASGSAV PLT,\.CH

NEXTCQ

;THE DISPLAY GETS ITS OWN LOW-PRIORITY CHANNEL
;	ASGSAV DIS,\.CH

NEXTCQ

;(KS)  GEN INTTAB ENTRIES OF FORM: NO. OF DDBS, DEVINT
;			LENGTH OF DDBS , PROTOT DDB ADDR.

	XWD	0,RMXINT##	;WORD 1 OF INTTAB ENTRY FOR THE DISK
	0

	ASGSAV DSK,0
IFN LPTN,<1*1000,,0
	LP0DDS,,LP0DDB>

	0,,MAGINT##		;Entry for tapes.  Note 0 "units" indicates
	MAGDDS##,,MAGDDB##	; the DDBs are already linked.

;LAST IS THE SCHEDULER, ON CHANNEL 7 BY ITSELF

IFG <.CH-7>, <	PRINTX ;NOT ENOUGH PI'S TO SERVICE THIS CONFIGURATION.
		PRINTX ;SUGGEST EDITING COMMON TO PUT MORE DEVICES ON
		PRINTX ; A SINGLE CHANNEL
>

.CH==7
	ASGINT CLK,\.CH

;	SPCINT
				;GENERATE ANY SPECIAL DEVICES CUSTOMER IS SUPPLYING
				; WHICH DO NOT USE A CHANNEL SAVE ROUTINE AND HAVE
				; NO DEVICE DATA BLOCK
;	SPCDDB
				;GENERATE ANY SPECIAL DEVICES CUSTOMER IS SUPPLYING
				;WHICH HAVE MULTIPLE DEVICE DATA BLOCKS (0 MEANS NONE)
;	SPCSAV
				;GENERATE ANY SPECIAL DEVICES CUSTOMER IS SUPPLYING
				; WHICH DO NEED A CHANNEL SAVE ROUTINE

;END OF THE ASSIGNMENT TABLE

	INTNUM==INTTAB-.	;-LENGTH OF INTERRUPT CHANNEL ASSIGNMENT TABLE

XP ITMCHN,APRCHN		;INTERVAL TIMER PI ASSIGNMENT SAME AS THAT OF APR.

RM0VEC=254		;(KS)
MAGVEC=224		;(KS)
TBISAV::GENVEC <RM0,LPR,MAG>
	TBISIZ==:.-TBISAV

;EPT+EPTVIT WILL BE THE REAL TABLE, NO CONFLICT ASSUMED
;  BETWEEN THE DEVICE VECTOR ADDRESSES AND EPT DEFINED SLOTS

;SYSTEM CONSTANTS AND PARAMETERS

;; Negative indexes from CNFTBL are used by CRSHID and are not GETTAB-able.
;; Their position is subject to change and should not be published!

	CRSDB,,NUMTAB##		;(-2) so CRSHID can do "GETTABs"
CURUPT::0			;(-1) CONTAINS DATAO STUFF FOR CURRENT UPT

CNFTBL:: ;origin of GETTAB table 11 (configuration data)
	; octal numbers in () correspond to the index relative to CNFTBL
	; certain tools expect physical address 137 to point to CNFTBL
	; (these locations not cleared by SYSINI)
CONFIG::SYSNAM			;(0-4) NAME OF SYSTEM, IN ASCII
	LOC CONFIG+5		; ALWAYS LEAVE 5 WORDS (24 CHARS)
SYSDAT::SYSDAT			;(5,6) GENERATE SYSTEM DATE
	LOC SYSDAT+2		; ALWAYS LEAVE 2 WORDS (9 CHARS)
SYSTAP::SYSDEV			;(7) NAME OF SYSTEM DEVICE, IN SIXBIT
;LOCATIONS SETUP BY ONCE ONLY OPERATOR DIALOGUE AND NEVER RESET ON RESTARTS
TIME::	0			;(10) TIME OF DAY IN JIFFIES (60TH OR 50THS OF A SEC)
THSDAT::0			;(11) TODAY'S DATE ((Y-1964)*12+(M-1))*31+(D-1)
SYSSIZ::exp PATCH##		;(12) SIZE OF MONITOR (FIRST LOC NOT USED)
DEVOPR::sixbit /CTY/		;(13) SIXBIT PHYSICAL NAME OF OPERATORS CONSOLE
				; (IF THIS LOCATION CONTAINS 0, NONE HAS
				; BEEN DESIGNATED)
				; PUBLIC LOGICAL NAME "OPR" WILL BE THIS
				; DEVICE. ALSO UNEXPLAINED MONITOR ERROR
				; MESSAGES WILL BE TYPED ON TTY OPR:
DEVLST::xwd 0,0			;(14) LH CONTAINS ADDRESS OF FIRST DEVICE DATA BLOCK
				; ONCE ONLY CODE LINKS DEVICE DATA BLOCKS
	xwd 0,JOBN		;(15) AOBJN POINTER TO 1ST HIGH SEG IN JBTXXX TABLES
				; LH= - NUMBER OF HIGH SEGS,  RH= 1ST HIGH SEG NUMBER
				;(NO MORE HISEGS, BUT SOME USE THIS
				; TO GET NUMBER OF JOBS, USE C(RH)-1)
	0			;(16) FLAG TO INDICATE WHETHER BOTH HARDWARE AND
				; SOFTWARE HAVE 2 RELOC REG CAPACITY
				; NON-ZERO IF BOTH DO, 0 IF EITHER OR BOTH DO NOT
				; SET BY ONCE ONLY CODE

;STATES WORD LH BITS:
	ZZ==0
	ZZ==ZZ!1B0		; 1 IF DISK SYSTEM (ANALOGOUS TO FTDISK)
	ZZ==ZZ!1B1		; 1 IF SWAPPING SYSTEM (ANALOGOUS TO FTSWAP)
	ZZ==ZZ!1B2		; 1 IF LOGIN (ANALOGOUS TO FTLOGIN)
	ZZ==ZZ!1B3		; 1 FOR TTCALL, FULL DUPLEX
	ZZ==ZZ!1B4		; 1 IF PRIVILEGE FEATURE INCLUDED
	ZZ==ZZ!1B5		; 1 IF REENTRANT SOFTWARE
	ZZ==ZZ!1B9		; 1 IF LEVEL D DISK SOFTWARE
				; 0 if level C, 2 if spooled disk
	IFN INDPPN,<ZZ==ZZ!1B10>; 1 IF INDEPENDENT PROJ-R NUMBERS
	ZZ==ZZ!1B11		; 1 FOR IMAGE, 8-BIT SCNSER
;B12-B17 defined for TOPS-10, not applicable to TYMCOM-X
	ZZ==ZZ!0B12		; 1 if dual processor system
	ZZ==ZZ!0B13		; 1 if TOPS-10 style multiple RIBs
	ZZ==ZZ!0B14		; 1 if high precision time accounting
;*;	ZZ==ZZ!1B15		; 1 if exclude monitor overhead from accounting
	ZZ==ZZ!0B16		; 1 if system includes real-time clock
;*;	ZZ==ZZ!1B17		; 1 if system built for FOROTS version 5A

;STATES word, TOPS-10 RH bits:
;000001=1B35  no login except on CTY or subjob of OPSER
;000002=1B34  no login on "remote" lines (don't answer datasets)
;000004=1B33  batch jobs only
;000010=1B32  no logins from ANF10 or DECnet nodes
;000100=1B29  allow ASSIGN of restricted devices
;000200=1B28  allow unspooling for all users
;000400=1B27  no operator in attendance
;001000=1B26  no automatic reload of ANF-10 nodes (NETLDR program)

;STATES word, TYMCOM-X RH bits (defined in S.MAC):
;STAUTO	;1B17 System in auto-restart (note: this is an LH bit!)
;STSHUT	;1B18 System is shut
;STSUPR	;1B19 System is super-shut (don't allow shut-override)
;STRLB	;1B20 Restricted logins.  See LOGINN.MAC at NONRES-7
;STMDED	;1B?? IF CHKPNT WATCHDOG FOUND CHKPNT DEAD

STATES::exp ZZ!STAUTO!STSHUT!STSUPR ;(17) LH BITS=TYPE OF SYSTEM
				; RH PATCHED BY "SCHED" COMMAND TO
				; INDICATE OPERATIONAL STATE OF SYSTEM
SERIAL::exp <APRSN&777777>	;(20) SERIAL NUMBER OF CENTRAL PROCESSOR (APR)
				; GETS OVERWRITTEN BY APRID IN ONCE
MEMNSP::exp NSPMEM		;(21) NANO-SEC PER MEMORY CYCLE
FREPTR:: 0			;(22) AOBJN WORD POINTING TO USE BIT MAP OF
				; MONITOR FREECORE BLOCKS. SET BY ONCE
				; NEVER CHANGED WHILE MONITOR RUNS.
;T10; PTYCNF: XWD PTYOFS##,PTYN	;(22) PTY PARAMETERS FOR BATCH (RPORTN,,PPORTN)
LOCORE:: 0			;(23) LH=0, RH=ABS. ADR. OF 1ST FREECORE CHUNK
				; SET BY ONCE ONLY CODE AND NEVER CHANGED WHILE
				; MONITOR RUNS.
;T10; FREPTR::0			;T10; (23) AOBJN WORD FOR FREE-CORE BIT MAP
NUMLIN::exp PORTN		;(24) # OF PORTS
;T10; LOCORE::0			;T10; (24) RH=ABS. ADR. FOR 4-WORD CHUNKS
LGONAM::SIXBIT /LOGOUT/		;(25) NAME OF LOGOUT PROGRAM
;T10; STBPTR::EXP 0		;T10; (25) POINTER NOT USED WITH NETWORKS
JFYSEC::0			;(26) JIFFIES/SEC
;T10; OPRLDB::0			;T10; (26) LDB OF OPR TELETYPE
JFYMIN::0			;(27) JIFFIES/MIN
;T10; TTFREE::0			;T10; (27) FILLED IN AT ONCE TIME BY FREE LIST ADR
JFYHR::	0			;(30) JIFFIES/HOUR
;T10; TTCLST::XWD TTCHKN,0	;T10; (30) NUMBER OF TTY CHUNKS, ADDRESS OF FIRST ONE
HGHBLK::777			;(31) HIGHEST BLOCK IN ADRESSABLE CORE
;T10; TTFREN::0			;T10; (31) NUMBER OF FREE TTY CHUNKS AT THE MOMENT
HFDBUF::xwd M.SBSZ,0		;(32) HISTOGRAM FACILITY (SNOOPY)
				; BUFF PTR. 0 IF NONE ALLOCATED BY LNKDB
				; (STANDARD); ELSE SIZE,,BEG LOC
;T10; LINSAV::0			;T10; (32) POINTER TO CURRENT TTY SEEN BY COMMAND DECODER
SYSNUM::.-.			;(33)SYSTEM NUMBER, FILLED IN BY ONCE ONLY.
;T10; LINPTR::XWD MTTYLN##,LINTAB;T10;(33) POINTER TO EXAMINE TTY LINE TABLE,
FRECOR::exp FCWDS		;(34)AMOUNT OF FREECORE ALLOCATED
;T10; MONVER: EXP A00VER	;T10; (34) VERSION OF MONITOR (LH FOR CUSTOMER)
CRSCNT::exp ^D1800		;(35)TICS ALLOWED FOR SOFT CRASH
;T10; DSCPTR::XWD MDSLN##,DSCTAB##;T10; (35) POINTER TO DATASET CONTROL TABLE
	SAV30,,NUMTAB##		;(36)ADDRESS OF THINGS FOR CRSHID
;T10; DLSRWD::0			;T10; (36) LAST RECEIVE INTERRUPT FROM DC10
extern	PATCH,PATEND,TTYINI,TTIEND
DSKPAT::PATCH-PATEND,,PATCH	;(37)AOBJN pointer to PATCH area patches
;T10; CCIRWD::0			;T10; (37) LAST RECEIVE INTERRUPT FROM 680
RUNPAT::TTYINI-TTIEND,,TTYINI	;(40)AOBJN pointer to TTYINI area patches
;T10; SEGPT1::EXP JOBN		;T10; (40) LAST DORMANT SEG NUMBER THROWN AWAY
CNFCPU::CPUTYP			;(41)cpu model index (KI,KL,KS,F3)
;T10; LASPOK::0			;T10; (41) CONTAINS ADR. OF LAST LOCATION POKED
PATMAP::0			;(42)bit mask of patches installed
;T10; LASPUC::0			;T10; (42) JOB#,,COUNT OF POKES
CNFSID::;SYSID			;(43)sixbit monitor ID (serial number)
SYSIDL##,,SYSIDR##; work around MACRO/LOADER bug regarding 36bit externs
;T10; WHYCOD::0			;T10; (43) SIXBIT ANSWER FOR "WHY RELOAD" AT ONCE

  ;Start of TOPS-10 entries added in P034/P

TICSEC:: ^D60		;(44) CONTAINS NUMBER OF TICKS PER SECOND
PDBPTR:	XWD 0,0;JBTPDB	;(45) RH=POINTER TO TABLE OF PDB'S FOR JOBS
			; LH=0 FOR FUTURE EXPANSION
RTCUPS:: 0		;(46) RESOLUTION (UNITS/SEC.) OF CLOCK USED FOR RUN ACCT
SYSCHN::XWD CHN0CB##,0	;(47) LH=ADR OF FIRST CHANNEL (DF10) DATA BLOCK, RH=UNUSED
LOGMAX::EXP	JOBMAX	;(50) MAX.# JOBS ALLOWED TO BE LOGGED IN
BATMAX::EXP 0;	M.BMAX	;(51) MAX.# BATCH JOBS ALLOWED
BATMIN::EXP 0;	M.BMIN	;(52) MIN.# BATCH JOBS GUARENTEED (RESERVED)
DATE::	 0		;(53) DATE TIME IN UNIVERSAL DATE/TIME (UDT) FORMAT
	;See also GMTUDT; LH = DAYS SINCE NOV. 17, 1858, RH = FRACTION OF A DAY
LOGNUM:: 0		;(54) NUMBER JOBS CURRENTLY LOGGED IN
BATNUM:: 0		;(55) NUMBER BATCH JOBS CURRENTLY LOGGED IN.
LOCYER:: 0		;(56) LOCAL YEAR
LOCMON:: 0		;(57) LOCAL MONTH (1,2,...,12)
LOCDAY:: 0		;(60) LOCAL DAY OF MONTH (1,2,3,...)
LOCHOR:: 0		;(61) LOCAL HOUR (MIDNIGHT=0) reset by HOUR routine
LOCMIN:: 0		;(62) LOCAL MINUTE (0,1,...,59)
LOCSEC:: 0		;(63) LOCAL SECOND (0,1,...,59)
GMTDIF:: <TIMZON>B17/^D24;(64) DIFFERENCE BETWEEN LOCAL AND GMT TIME. (UDT)
			; IN SAME UNITS AS DATE --
			; E.G. DATE + GMTDIF = LOCAL DATE-TIME
			; (LH = DAY, RH = FRACT. OF DAY)
DEBUGF:: DEFDEB!DEFBPT	;(65) DEBUGGING STATES WORD - SIGN BIT=1 IF SYSTEM PROG IS
			; DEBUGGING MONITOR (SPEED UP ONCE ONLY)
			; BIT1=1 TO RELOAD ON DEBUG STOPCD'S
			; BIT2=1 TO RELOAD ON STOPCD'S WHICH ONLY
			; AFFECT 1 JOB
			; BIT3=1 TO DISABLE AUTO-RELOADS
			; BIT4=1 TO STOP SYSTEM IF ANY CPU GETS A CPU STOPCD
FRUSED:: 0		;(66) AMOUNT OF FREE CORE IN USE
RCCMAX:: 0		;(67) NUMBER OF BYTES IN TTY CHUNKS
CNFCVN: EXP	A00CVN	;(70) CUSTOMER VERSION (=C(136))
CNFDVN: EXP	AXXDVN	;(71) DEC VERSION (=C(137))
CNFCHN::EXP	CHNN##	;(72) NUMBER OF DATA CHANNELS (DF10 or RH11S or F3)
CNFRTD::EXP 0;	M.RTD	;(73) NUMBER OF REAL TIME DEVICES
CNFHPQ::EXP 0;	M.HPQ	;(74) NUMBER OF HPQ'S
CNFLDB::EXP	DDBLDB##;(75) WORD IN TTY DDB WHICH POINTS TO LDB
CNFMVO::EXP 0;	PSIMVO	;(76)MAX. VECTOR OFFSET FOR PISYS. UUO
CNFMIP::EXP 0;	PSIMPI	;(77)MAX. PRIORITY FOR PSISER
CNFMTA::XWD	TUBRID##,MT0DDB##  ;(100) POINTER TO FIRST MTA DDB AND INDEX
				   ; OF START OF DAEMON INFORMATION
CNFET1:	EXP 0;	JOBDAC##+T1	;(101) EXEC AC1 IN USER'S ADDRESS SPACE
CNFLSD:	EXP	DEVLSD		;(102) LENGTH OF SHORT DDB
CNFLLD:	EXP	DEVLLD		;(103) LENGTH OF LONG DDB
CNFLDD:	EXP	DDBLEN##	;(104) LENGTH OF DISK DDB
CNFEXM:	EXP	JOBEXM##	;(105) WORD IN JOBDAT USED BY "E" AND "D" COMMAND
	ZZ==0
	ZZ==ZZ!1B35		;BIT 35=1 IF SWAP SPACE ALLOCATED IN PAGES
;IFN M.TM10,<ZZ==ZZ!1B34>	;BIT 34=1 IF MTA ERROR REPORTING
	ZZ==ZZ!1B33		;BIT 33=1 IF VM MONITOR
;IFN M.IPCF,<ZZ==ZZ!1B32>	;BIT 32=1 IF IPCSER IS LOADED
;IFN M.PSI,<ZZ==ZZ!1B31>	;BIT 31=1 IF PSISER IS LOADED
;IFN M.MSG,<ZZ==ZZ!1B30>	;BIT 30=1 IF MSGSER IS LOADED
	ZZ==ZZ!1B29		;BIT 29=1 IF NON-SUPER ENTER IS SUPPORTED
;IFN FTNSCHED,<ZZ==ZZ!1B28>	;BIT 28=1 IF NEW CLASS SCHEDULER IS PRESENT
;IFN M.EQDQ,<ZZ==ZZ!1B27>	;BIT 27=1 IF ENQ/DEQ IS LOADED
;IF2, <ZZ==ZZ!<<ZGAL>B26>>	;BIT 26=1 IF MONITOR CONTAINS GALAXY-10 FEATURES
;ZZ==ZZ!1B25			;BIT 25=1 MONITOR SUPPORTS MASSBUS ERROR REPORTING
;ZZ==ZZ!1B24			;BIT 24=1 IF NEW TAPSER
;ZZ==ZZ!1B23			;BIT 23=1 IF NEW ERROR REPORTING
;ZZ==ZZ!1B22			;BIT 22=1 IF JOB NUMBERS ARE 9 BITS NOT 7
;IFN M.EXE,<ZZ==ZZ!1B21>	;BIT 21=1 IF "SAVE" COMMAND PRODUCES EXE FILE
;IFN M.EMRT,<ZZ==ZZ!ST%EMR>	;BIT 20=1 IF EBOX/MBOX RUNTIME IS IN EFFECT (KL ONLY)
;IFN M.XPI,<ZZ==ZZ!ST%XPI>	;BIT 19=1 IF PI TIME IS EXCLUDED FROM USER RUNTIME (KL ONLY)
;ZZ==ZZ!1B18			;BIT 18=1 IF FULL 6 CHAR DEVICE NAMES "LPT231"
;IFN M.ITA,<ZZ==ZZ!ST%ITA>	;BIT 17=1 IF INTERVAL TIMER ON KL10 IS AVAILABLE
;IFE M.CLSS,<ZZ==ZZ!ST%NCS>	;BIT 16=1 IF NOT CLASS SYSTEM SCHED.
;ZZ==ZZ!ST%NER			;BIT 15=1 MONITOR SUPPORTS 6.03 ERROR REPORTING
;IFN M.ACV,<ZZ==ZZ!ST%ACV>	;BIT 14=1 IF ACCOUNT VERIFICATION SHOULD BE DONE
;IFN FTKL10!FTKS10,<ZZ==ZZ!ST%LSC> ;BIT 13=1 IF LOW SEGMENT OF MONITOR IS CACHED
;IFN FTMDA,<ZZ==ZZ!ST%MDA>	;BIT 12=1 IF ALLOCATOR WILL RUN
;IFN FTKLP,<ZZ==ZZ!1B11>	;BIT 11=1 IF KL RATHER THAN KI PAGING IN MONITOR
;IFN M.DECN,<ZZ==ZZ!1B10>	;BIT 10=1 IF PHASE 3 DECNET LOADED
CNFST2::EXP	ZZ		;(106) FLAG BITS DEFINED ABOVE
PISYMN: EXP 0;	M.PSI*C$MIN	;(107) MINIMUM CONDITION FOR PISYS.UUO
PITLEN: EXP 0;	PITSIZ		;(110)LENGTH OF PI TABLE
CNFPIA::EXP 0;	JBTPIA		;(111)ADDRESS OF JBTPIA
%CNMNT:	BYTE	(1)0(17)0(6)5(6)0(6)0	;(112) TYPE OF MONITOR
					;    (1)=STRANGE
					;    (17)=RESERVED TO DEC
					;    (6)=TYPE:	1=TOPS-10
					;		2=I.T.S.
					;		3=TENEX
					;		4=TOPS-20
					;		5=TYMCOM-X
					;		REST RESERVED TO DEC
					;    (6)=SUBTYPE (RESERVED TO DEC)
					;    (6)=RESERVED TO CUSTOMERS

  ;Items added for P035 monitor

	EXP 0; CR0DDB,,CDRCNT##	;(113)OFFSET TO CARD COUNT FOR CDR
	EXP 0; CP0DDB##,,CDPCTO##;(114)OFFSET TO CARD COUNT FOR CDP
	EXP	PAGSIZ		;(115)BASIC UNIT OF CORE ALLOCATION
	EXP 0;	MINMAX		;(116)MIN VALUE FOR CORMAX
	EXP 0;	M.CLSN		;(117)NUMBER OF SCHEDULER CLASSES
	EXP	0		;(120)EXPONENTIAL FACTOR USED IN COMPUTING USER TIME
SYSORG::	0		;(121)START OF MONITOR HISEG
SYSLEN::	0		;(122)LENGTH OF MONITOR HISEG
NWCORE::^D<512*1024>		;(123)NUMBER OF WORDS OF CORE MINIMUM
NXMPTR::0			;(124)AOBJN POINTER TO NXMTAB USED TO SCAN FOR ZEROES
	EXP 0;	NETNDB##	;(125)POINTER TO THE FIRST NODE BLOCK
CNFTKB:	EXP	TKBCDB##	;(126)POINTER FROM KDB TO CDB FOR MAGTAPES
	XWD CTYPTR##,CTYBUF##	;(127)POINTER TO CTY OUTPUT,,ADDR OF BUFFER
HNGLST::XWD	0,0		;(130)LH IS ADDRESS OF FIRST DEVICE WHICH SHOULD BE
				; CHECKED TO SEE IF IT IS HUNG
	EXP	BOOTXT		;(131) ADDRESS OF RELOAD CCL TEXT
	EXP	TUBDDB##	;(132) OFFSET OF DDB PTR'S IN TUB
	EXP	MT0KDB##	;(133) 1ST MTA KDB IN SYS
NOCPUS::EXP	1		;(134) NO OF CPUS MONITOR WAS BUILT FOR
CNFDJB:	XWD	PJBNLH,DEVJOB	;(135) GETTABLE PJOBN (SANS INDEX FIELD)
;T10; UPTIME::
SYSUPT::EXP	0		;(136) SYSTEM UPTIME
BOOTCP::EXP	-1		;(137) BOOT CPU NUMBER
BOOTCT::EXP 0;	CT0LIN		;(140) BOOT CPU CTY LINE NUMBER
NCPRUN::EXP	1		;(141) NUMBER OF CPUS ALLOWED TO RUN
STRMON::SIXBIT	/SYS/		;(142) FILE STRUCTURE MONITOR WAS BOOTED FROM
FILMON::SIXBIT	/SYSTEM/	;(143) FILE NAME
EXTMON::SIXBIT	/SAV/		;(144) EXTENSION
PPNMON::XWD	1,4		;(145) PPN
SYSNBP::EXP	MAXNBP		;(146) MAXIMUM NUMBER OF BREAK POINTS FOR SNOOP.
MONVFF::EXP	MONORG		;(147) FIRST FREE VIRTUAL ADDRESS ABOVE MONITOR
LDBVRG::EXP	0		;(150) VIRTUAL ADDRESS OF THE ORGIN OF LDBS
FOPHXC::EXP 0;	HIGHXC-20	;(151) NUMBER OF EXTENDED CHANNELS AVAILABLE VIA FILOP.
MONHSO:	EXP	MONORG		;(152) VIRTUAL ADDRESS OF START OF MONITOR HIGHSEG
SUPTIM::EXP	0		;(153) UNIVERSAL DATE/TIME OF LAST ROLE SWITCH
CNFDCH:	XWD LDBSTR##,LDBDCH##	;(154) OFFSET OF LDBDCH IN LDB'S, AUX STRING
SFDMON::EXP	0		;(155) 1ST SFD MONITOR WAS BOOTED FROM
	EXP	0		;(156) 2ND SFD MONITOR WAS BOOTED FROM
	EXP	0		;(157) 3RD SFD MONITOR WAS BOOTED FROM
	EXP	0		;(160) 4TH SFD MONITOR WAS BOOTED FROM
	EXP	0		;(161) 5TH SFD MONITOR WAS BOOTED FROM
	EXP 0;	FRCLIN		;(162) TTY LINE NUMBER OF FRCLIN
PTYPTR:	XWD	-PTYN,PTYTAB	;(163) POINTER TO PTY TABLE

;* * *
;* * * THIS IS THE END OF THE CONFIG GETTAB TABLE: add new entries above
;* * *
CNFMXL==:<.-CNFTBL-1>B26		;MAXIMUM ENTRY IN CNFTBL FOR GETTAB M

REPEAT 0,<;Unused TOPS-10 entries
	XWD	-LATLEN##,NETLAT## ;(164)-LENGTH,,LOCATION LINK ADDRESS TABLE
CNFLPD:	EXP	.PDLEN		;(165) LENGTH OF A PDB (SIZCTX*1000?)
	XWD	0,PAGSIZ	;(166) XWD FLAG, SIZE OF LARGEST JOBPEK TRANSFER
				; WHERE FLAG=0 IF SWAP SPACE JOBPEK'S MAY NOT
				; CROSS A PAGE BOUNDARY, FLAG=1 IF THEY MAY
	EXP	CNFDAE		;(167) XWD OLD DAEMON NAME,CURRENT MONITOR
				; VERSION. OLD DAEMON NAME IS THE SIXBIT NAME
				; OF THE PREVIOUS MONITOR, E.G. 701.
CNFHSH::XWD	-HSHLEN,HSHTAB	;(170) AOBJN POINTER TO HSHTAB FOR ENQ/DEQ
	EXP	<.PDACS-.PDBEG>	;(171) OFFSET IN PDB FOR ACCOUNT STRING
	XWD	TOPLN1##,TOPTB1## ;(172) POINTER TO TOPTB1, TRMOP DISPATCH
	EXP	JBTSFD##	;(173) POINTER TO JBTSFD
	EXP	CIPWT		;(174) POINTER TO CLOCK QUEUE
CNFMXL==:<.-CNFTBL-1>B26	;MAXIMUM ENTRY IN CNFTBL FOR GETTAB UUO
				;(175) JBTPRV for INITIA
				;(176) CTERM data in 8-bit bytes, first 4
				;(177) CTERM data, 4 more 8-bit bytes
				;(200) LAT host node database
				;(201) AND mask for .GTIMI/.GTIMO
				;(202) ACB
				;(203) AHB

;----------------------------------
;INSERT HERE ANY NEW LOCATIONS OF INTEREST WHICH ARE SET UP BY ONCE ONLY CODE.
; OR ARE CONSTANTS WHICH ARE NOT CLEARED AT STARTUP
;-------------------------------------
TIMLST::0			;VALUE OF "TIME" LAST TIME AT CLOCK LEVEL
				; USED FOR ALL TIMING FUNCTIONS, E.G.,
				; MAINTAINING CLOCK QUEUE AND SMITHSONIAN DATE
>  ;End of TOPS-10 definitions

BGBENF::1B0+<XWD ^D<4*60>,0>	;Output at system startup, then every 4 hours
LOCWEK::0			;Pointer to ASCIZ string for day of week
;GETTAB TABLE OF QUEUE CODES FOR JOBS - TABLE(RH)=25
;MUST BE A SEPARATE TABLE SINCE THE NUMBER OF ENTRIES VARIES ACCORDING
;TO THE CONFIGURATION

;ENTRIES ARE 2 SIXBIT CHARACTERS, THREE PER WORD
;STATE CODE 0 IS LEFT THIRD, 1 IS MIDDLE THIRD, 2 IS RIGHT THIRD OF FIRST WORD
;STATE CODE 3 IS LEFT THIRD OF SECOND WORD, ETC.

STSTBL::QUEUES
	CODES
STSMXL==:<.-STSTBL-1>B26	;MAX ENTRY IN STSTBL FOR GETTAB UUO

ODPTBL::			;FIRST LOCATION IN MONITOR DATA AREA FOR DISK-
				; RELATED LOCATIONS WHICH ARE NOT SET TO 0
				; WHEN THE SYSTEM IS STARTED UP.
				; ODPTBL IS GETTAB TABLE NUMBER 15.

SWPHGH::0	; (obsolete)	;(0) HIGHEST LOGICAL BLOCK # ASSIGNED FOR
				; SWAPPING. SPACE IS ASSIGNED FROM HIGHEST
				; BLOCK # DOWNWARDS.

K4SWAP:	0	; (obsolete)	;(1) # OF K OF DISK WORDS SET ASIDE FOR
				; SWAPPING. ASSIGNED AT ONCE ONLY REFRESH
				; TIME.

ICPFACTOR==:1			;FACTOR BY WHICH TO MULTIPLY AVERAGE SWAP-IN
				; TIMES TO PRODUCE IN-CORE PROTECT TIMES.
KXFTIM==1			;SET PROTECT TIMES TO 1
IFCPU (<KI,KL>),<SEEKTM==1>	;Set PROT0 to 2 for KI and KL
IFNCPU(<KI,KL>),<SEEKTM==3>	;Set PROT0 to 4 for KS and F3

PROT::	EXP ICPFACTOR*KXFTIM	;(2) IN-CORE PROTECT TIME PARAMETER TO BE
				; MULTIPLIED BY <J-1> OF CORE IN JOB.

PROT0::	EXP ICPFACTOR*<SEEKTM+KXFTIM>;(3) IN-CORE PROTECT TIME PARAMETER TO
				; BE ADDED TO ABOVE RESULT.

MXPROT::  EXP ^D60		;(4) MAX VALUE FOR ICPT FUNCTION, KEEP CORE
				; FROM GETTING CLOGGED WITH HUGE JOBS WITH
				; HUGE ICPT WHICH SCHEDULER DOESNT WANT TO
				; RUN. /AA

DCN::	DCFULL+(DCNDFT)		;(5) DSKCLN TYPE DESIRED, DEF IS FULL, INIT HM
EXTERN	DCNDFT			; Default DSKCLN bits from ONCDSK

;INSERT HERE ANY NEW LOCATIONS OF INTEREST WHICH ARE SET UP BY
; ONCE ONLY CODE AND WHICH PERTAIN ONLY TO DISK SYSTEMS.
ODPMXL==:<.-ODPTBL-1>B26	;MAXIMUM ENTRY IN ODPTBL FOR GETTAB M

;DISK LOCATIONS NOT IN GETTAB

REFLAG:: 0			;FLAG LOCATION TO INDICATE WHETHER ANY REFRESHING
				; OCCURRED AND TO CONTAIN THE [PROJ,R]
				; NUMBERS FOR AUTOMATIC LOG-IN FOLLOWING REFRESH.
;MORE DATA LOCATIONS SETUP AT ASSEMBLY TIME OR ONCE ONLY TIME
; BUT NOT OF INTEREST TO USER PROGRAMS

;MONTH TABLE FOR DAYTIME COMMAND PRINTING

PMONTB::POINT 6,MONTAB(T1),5	;POINTER TO NUMBER OF DAYS IN MONTH
MONTAB::EXP ^D30B5+"JAN"
	EXP ^D27B5+"FEB"
	EXP ^D30B5+"MAR"
	EXP ^D29B5+"APR"
	EXP ^D30B5+"MAY"
	EXP ^D29B5+"JUN"
	EXP ^D30B5+"JUL"
	EXP ^D30B5+"AUG"
	EXP ^D29B5+"SEP"
	EXP ^D30B5+"OCT"
	EXP ^D29B5+"NOV"
	EXP ^D30B5+"DEC"

;The following are set up by ONCE when it calculates jiffies per second
MIDNIT::0	;JIFFIES TILL MIDNIGHT
JFYSC2::0	;JIFFIES IN 1/2 SEC
JFY2SC::0	;JIFFIES IN 2 SEC
JFYS12::0	;Jiffies in 1/12 second
QQYTTY::0	;Jiffies for TTY satisified quantum (1/2 second)
QQYSD:: 0	;Jiffies for swap done (1/10 second)

SYSSZP::0	;SYSTEM SIZE IN PAGES
MEMSZP::0	;MEMORY SIZE IN PAGES
MAXPCB::0	;LARGEST PCB PAGE NUMBER
MINPCB::0	;SMALLEST PCB PAGE NUMBER

;TABLE TRANSLATING BIT NUMBERS TO BITS

BITTBL::ZZ==1B0
REPEAT ^D36,<
	ZZ
	ZZ==ZZ_<-1>
>;END REPEAT ^D36

;Table which gives the absolute number of bit 0 in any given word in a
; bit table.  This is used by SCNSER and COMCON to determine what port
; or frame number a given bit in a given word corresponds to.
; NFLG is the number of words in SCNSER's LINFLG table;
; CFLG is the number of words in COMCON's COMFLG table;
; BFLG is MAX(NFLG,CFLG)+1 for safety.

	BFLG==NFLG+1
IFG <CFLG-NFLG>,<BFLG==CFLG+1>

BITNTB::XYZZY==0
REPEAT BFLG,<
	XYZZY
	XYZZY==XYZZY+^D36
>
SUBTTL	Feature Test Table  (GETTAB '71)

; "YES"=Is in P034/P      "NO"=Is not in P034/P    "NO !"=Should be in P034/Q
; "OTHER"=Same function, different UUO    "BUG??"=Not sure if it works right

  ;	%FTTYM==-1,,71       TYMSHARE
  ;F%14ND 35        YES   14-bit node numbers
  ;F%16ND 34        NO    16-bit node numbers
  ;F%LHST 33        MAYBE Login host number available
  ;F%SUDT 32        YES   SYSUDT in NSWTBL+5 and KSYS in NSWTBL+6
FETTYM:	17,,1B32!1B33!1B35	;(-1) TYMSHARE bits

FETTBL::		;Feature Test Table (GETTAB table 71)

  ;	%FTUUO==0,,71        UUOS
  ;F%2REL 35 FT0    NO    2-REGISTER RELOCATION
  ;F%GETT 34 FT1    YES   GETTAB UUO
  ;F%DAEM 33 FT1    NO    DAEMON FUNCTIONS, ETC.
  ;F%PRV  32 FT1    YES   JOB PRIVS
  ;F%SPL  31 FTSPL  NO    SPOOLING (LPT TO DSK)
  ;F%JCON 30 FT1    YES   JOB CONTINUE
  ;F%POKE 29 FTPOKE OTHER POKE. UUO
  ;F%PEEK 28 FTPEEK YES   PEEK UUO
  ;F%PTYU 27 FT1    NO !  JOBSTS AND CTLJOB UUOS
  ;F%CCIN 26 FT1    OTHER CONTROL-C INTERCEPT
  ;F%IPCF 25 FTIPCF NO    IPCF
  ;F%PI   24 FTPI   OTHER SOFT. PI SYS
  ;F%GALA 23 FT1    NO    GALAXY-10 FEATURES
  ;F%EQDQ 22 FTEQDQ OTHER ENQ./DEQ.
  ;F%MIC  21 FTMIC  NO !  MACRO COMMAND PROCESSOR
  ;F%MLOG 20 FTMLOG NO    MIC LOG FILE SUPPORT
  ;F%MDA  19 FTMDA  NO    MOUNTABLE DEVICE ALLOCATOR
    ;(0) LIST OF MONITOR NON-I/O FEATURES WHICH DIRECTLY IMPACT CUSPS (THIS WORD IS FULL)
  ;*;	FTBITS<0,1,1,1,SPL,1,POKE,PEEK,1,1,IPCF,PI,1,EQDQ,MIC,MLOG,MDA>
FETUUO:	377777,,1B28!1B30!1B32!1B34	;(0) Monitor Call features

  ;	%FTRTS==1,,71        REAL TIME AND SCHEDULER
  ;F%HPQ  35 FTHPQ  NO    HIGH PRIORITY RUN QUEUES
  ;F%HIBW 34 FT1    YES   HIBER/WAKE UUOS
  ;F%SLEE 33 FT1    YES   SLEEP UUO
  ;F%RTTR 32 FTRTTR NO    RTTRAP UUO
  ;F%TRPS 31 FTTRPS NO    TRPSET UUO
  ;F%LOCK 30 FTLOCK NO    LOCK UUO
  ;F%RTC  29 FT0    KI10  DK10 SERVICE
  ;F%SHFL 28 FT0    NO    SHUFFLER
  ;F%SWAP 27 FT1    NO    SWAPPER
  ;F%VM   26 FT1    YES   VIRTUAL MEMORY
  ;F%NSCH 25 FTNSCH NO    NEW SCHEDULER
  ;F%PSCD 24 FTPSCD NO    SCHEDULER PERFORMANCE GATHERING
  ;F%CMSR 23 FTCMSR NO    COMMUNICATION MEASUREMENT CODE
  ;       22-19 unused as of 7.03
    ;(1) REAL-TIME AND SCHEDULING FEATURES
  ;*;	FTBITS<HPQ,1,1,RTTRAP,TRPSET,LOCK,0,0,1,1,NSCHED,PSCD,CMSR>
FETRTS:	017777,,1B26!1B33!1B34	;(1) Realtime & Scheduler features

  ;	%FTCOM==2,,71        COMMANDS
  ;F%ATTA 35 FT1    YES   ATTACH COMMAND/UUO
  ;F%TALK 34 FT1    YES   SEND
  ;F%EXAM 33 FT1    YES   E AND D
  ;F%REAS 32 FT1    YES   REASSIGN UUO/COMMAND
  ;F%FINI 31 FT1    YES   FINISH AND CLOSE
  ;F%WATC 30 FT1    YES   WATCH
  ;F%SEDA 29 FT1    YES   SET DAYTIME AND SET DATE
  ;F%BCOM 28 FT1    NO !  BATCH CONTROL FILE
  ;F%VERS 27 FT1    YES   VERSION
  ;F%SET  26 FT1    YES   SET UUO/COMMAND
  ;F%QCOM 25 FT1    NO !  QUEUE AND FRIENDS
  ;F%CCLX 24 FT1    YES   COMPIL-CLASS
  ;F%CCL  23 FT1    YES   COMPIL COMMANDS
  ;F%MONL 22 FT1    NO    SET MEMORY ON LINE
  ;F%MOFF 21 FT1    NO    SET MEMORY OFF LINE
  ;F%EXE  20 FT1    NO !  .EXE FORMAT FILES SUPPORTED
  ;F%PJOB 19 FT1    YES   EXTENDED PJOB COMMAND
    ;(2) COMMAND FEATURES (THIS WORD IS FULL)
  ;*;	FTBITS<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1>
FETCON:	377777,,1B19!1B23!1B24!1B26!1B27!1B29!1B30!1B31!1B32!1B33!1B34!1B35 ;(2) Command features

  ;	%FTACC==3,,71        ACCOUNTING INFO
  ;F%TIME 35 FT1    YES   RUN TIME
  ;F%KCT  34 FT1    YES   KILO-CORE-TICKS
  ;F%UNAM 33 FT1    YES   USER NAME
  ;F%CNO  32 FT1    NO    CHARGE NUMBER
  ;F%TLIM 31 FT1    YES   TIME/CORE LIMITS, ETC.
  ;F%FDAE 30 FTFDAE NO    FILE DAEMON SUPPORT
  ;F%EMRT 29 FTEMRT KL10  KL10 EBOX/MBOX USER RUNTIME CAPABILITY
  ;F%ACCT 28 FT1    YES   ACCOUNTING SUPPORT
  ;       27-19 unused as of 7.03
    ;(3) ACCOUNTING FEATURES
  ;*;	FTBITS<1,1,1,1,1,FDAE,EMRT,1>
FETACC:	000377,,1B28!1B31!1B33!1B34!1B35	;(3) Accounting features

  ;	%FTERR==4,,71        ERROR CONTROL AND OPTIONS
  ;F%MEMP 35 FT1    YES   MEMORY PARITY RECOVERY CODE
  ;F%MS   34 FTMP   NO    MULTI-PROCESSORS
  ;F%EL   33 FT1    NO    DAEMON ERROR LOGGING
  ;F%2SWP 32 FT1    NO    MULT. SWAPPING DEVICES
  ;F%BOOT 31 FT1    YES   BOOTS BOOTSTRAP
  ;F%KII  30 FT1    NO    KI-10 INSTR CHECK ON KA10
  ;F%EXON 29 FT1    YES   EXECUTE ONLY FILES
  ;F%METR 28 FT0    NO    METER. UUO
  ;F%KI10 27 FT0    KI10  THIS IS A KI10
  ;F%PDBS 26 FT0    NO    SWAPPING PDB
  ;F%22BI 25 FT1    YES   22 BIT CHANNEL (DF10C)
  ;F%KA10 24 FT0    F3    THIS IS A KA10
  ;F%KL10 23 FTKL10 KS10  THIS IS A KL10
  ;F%MNXM 22 FT1    YES   NXM ERROR RECOVERY CODE
  ;F%KS10 21 FTKS10 KS10  THIS IS A KS10
  ;F%KLP  20 FT1    NO    KL10 PAGING
  ;F%SCA  19 FTSCA  NO    SYSTEMS COMMUNICATIONS ARCHITECTURE (ethernet)
    ;(4) NON I/O FEATURES NOT RELATED TO DEBUGGING (THIS WORD IS FULL)
  ;*;	FTBITS<1,MP,1,1,1,1,1,0,0,0,1,0,KL10,1,KS10,1,SCA>
FETERR:				;(4) Error Recovery features
    IFCPU (KI),<177777,,1B22!1B27!1B29!1B31!1B35> ;(4) KI
    IFCPU (KL),<177777,,1B22!1B23!1B29!1B31!1B35> ;(4) KL
    IFCPU (KS),<177777,,1B22!1B21!1B29!1B31!1B35> ;(4) KS
    IFCPU (F3),<177777,,1B22!1B24!1B29!1B31!1B35> ;(4) KA bit used for F3

  ;	%FTDEB==5,,71        DEBUGGING FEATURES
  ;F%CHEC 35 FT0    NO    MONITOR CHECKSUMMED
  ;F%MONP 34 FT0    NO    MONITOR WRITE PROTECTED
  ;F%RCHK 33 FT1    MAYBE INTERNAL REDUNDANCY CHECKS
  ;F%HALT 32 FT1    YES   HALTS IN MONITOR
  ;F%TRAC 31 FT0    NO    BACK TRACKING FEATURES
  ;F%PATT 30 FTPATT YES   PATCH SPACE IN TABLES
  ;F%WHY  29 FT1    NO !  WHY RELOAD
  ;F%RSP  28 FTRSP  NO    RESPONSE TIME
  ;F%2SEG 27 FT1    NO !  2 SEGMENT MONITOR
  ;       26-19 unused as of 7.03
    ;(5) NON I/O DEBUGGING FEATURES
  ;*;	FTBITS<0,0,1,1,0,PATT,1,RSP,1>
FETDEB:	000777,,1B30!1B32!1B33	;(5) Debugging features

  ;	%FTSTR==6,,71        FILE STRUCTURE PARAMS
  ;F%MOUN 35 FT1    YES   STRUUO FUNCTIONS
  ;F%SFD  34 FT1    NO    SUB FILE DIRECTORIES
  ;F%PHYO 33 FT1    YES   PHYSICAL ONLY
  ;F%5UUO 32 FT1    NO !  MISC. 5-SERIES UUOS (LIB AND PATH)
  ;F%STR  31 FT1    NO !  MULTIPLE STRUCTURES
  ;F%DQTA 30 FT1    YES   DISK QUOTAS
  ;F%DSUP 29 FT1    YES   SUPER USETI/O
  ;F%DSEK 28 FT0    NO    SEEK UUO
  ;F%DRDR 27 FT1    YES   RENAME ACROSS DIRECTORIES
  ;F%GSRC 26 FT1    NO !  GENERIC DEVICE SEARCH
  ;F%AIR  25 FT1    MAYBE APPEND IMPLIES READ
  ;F%APLB 24 FTAPLB MAYBE APPEND TO LAST BLOCK
  ;F%DPRI 23 FTDPRI NO    DISK PRIORITY TRANSFERS
  ;F%LIB  22 FT1    NO !  LIB/SYS/OLD/NEW ETC.
  ;F%NUL  21 FT1    NO !  NUL
  ;F%DSIM 20 FT1    OTHER MULTI. ACCESS UPDATE
  ;F%DHIA 19 FT1    MAYBE HIGH AVAIL. FEATURES
    ;(6) DISK UUO FEATURES (THIS WORD IS FULL)
  ;*;	FTBITS<1,1,1,1,1,1,1,0,1,1,1,APLB,DPRI,1,1,1,1>
FETSTR:	377777,,1B20!1B27!1B29!1B30!1B33!1B35	;(6) File structure features

  ;	%FTDSK==7,,71        INTERNAL DISK PARAMS
  ;F%DOPT 35 FT1    YES   LATENCY OPTIMIZATION
  ;F%DBAD 34 FT1    YES   DISK OFF-LINE RECOVERY
  ;F%DHNG 33 FT1    YES   HUNG DISK RECOVERY
  ;F%DSTT 32 FT1    YES   DISK USAGE STATISTICS
  ;F%DALC 31 FT1    NO    ALLOCATION OPTIMISATIONS
  ;F%DSMC 30 FT1    NO    SMALLER ALLOC. OF DISK CORE BLOCKS
  ;F%DMRB 29 FT1    YES   MULTI RIBS
  ;F%DETS 28 FT1    NO    DISK ERROR SIMULATOR
  ;F%DUFC 27 FTDUFC NO    UFD COMPRESSOR
  ;F%DBBK 26 FT1    BUG?? BAD BLOCK MARKING
  ;F%SWPE 25 FT1    NO    SWAP READ ERROR RECOVERY
  ;F%FFRE 24 FT0    NO    PREVENT RACES IN FILFND
  ;F%DISK 23 FT1    YES   DISK SYSTEM
  ;F%LOGI 22 FT1    YES   LOGIN
  ;F%CBDB 21 FTCBDB MAYBE DEBUG CB INTERLOCK
  ;F%2ATB 20 FT0    NO    2 PART ACCESS BLOCKS
  ;F%SLCK 19 FT0    NO    DEBUG SEARCH LIST CODE
    ;(7) DISK "INVISIBLE" FEATURES (THIS WORD IS FULL)
  ;*;	FTBITS<1,1,1,1,1,1,1,1,DUFC,1,1,0,1,1,CBDB,0,0>
FETDSK:	377777,,1B22!1B23!1B29!1B32!1B33!1B34!1B35	;(7) Internal disk features

  ;	%FTSCN==10,,71        SCANNER OPTIONS
  ;F%HDPX 35 FT0    YES   TRULY HALF DUPLEX TERMINALS
  ;F%GPO2 34 FT0    NO    U.K. MODEM SUPPORT
  ;F%630H 33 FT0    NO    SINGLE SCANNER 630
  ;F%MODM 32 FT1    YES   MODEM CONTROL
  ;F%SCNR 31 FT1    YES   HARDWARE SCANNER
  ;F%SCLC 30 FT0    NO    SPECIAL LINE CONTROL
  ;F%DIAL 29 FT1    NO    AUTO DIALER
  ;F%TPAG 28 FT1    YES   PAGE AND DISPLAY KNOWLEDGE (^S/^Q BS-SP-BS)
  ;F%TBLK 27 FT1    NO !  TTY BLANK COMMAND
  ;F%CAFE 26 FT1    NO    DC76
  ;F%2741 25 FT0    YES   SUPPORT 2741-LIKE TERMINALS
  ;F%TYPE 24 FT0    NO    TYPESET-10 FEATURES IN DC76
  ;F%TVP  23 FT1    NO !  FANCY VERTICAL POSITIONING
  ;F%DCXH 22 FT1    NO    DC10-H (2741 ON DC10) SUPPORTED
  ;F%RDX  21 FTRDX  NO    REMOTE DATA ENTRY SERVICE
  ;F%RP04 20 FT1    KS10  INCLUDE RP04 & RP06 SUPPORT
  ;       19 unused as of 7.03
    ;(10) SCANNER, RP04 FEATURES
  ;*;	FTBITS<0,0,0,1,1,0,1,1,1,1,0,0,1,1,RDX,1>
FETSCN:	177777,,1B25!1B28!1B31!1B32!1B35	;(10) Scanner features

  ;	%FTPER==11,,71        I/O PARAMS
  ;F%TMP  35 FT1    YES   TMPCOR AREA
  ;F%MTSE 34 FT1    NO !  MTA DENSITY/BLOCK COMMANDS
  ;F%CDRS 33 FT1    NO    CDR SUPER IMAGE MODE
  ;F%OPRE 32 FT1    YES   DEVICE ERRS TO OPER
  ;F%LPTR 31 FT1    YES   LPT DEVICE ERROR RECOVERY
  ;F%NET  30 FTNET  OTHER NETWORK SOFTWARE, REMOTE ANF10 STATIONS
  ;F%CTY1 29 FT1    NO !  SUPPORT CTY1 ON DUAL-SMP
  ;F%CRTR 28 FT1    NO    CDR TROUBLE INTERCEPT
  ;F%CPTR 27 FT1    NO    CDP TROUBLE INTERCEPT
  ;F%HSLN 26 FT1    NO !  HIGH-SPEED LOGICAL DEVICE SEARCH
  ;F%MSGS 25 FTMSGS NO    MSGSER (MPX DEVICE)
  ;F%XTC  24 FTXTC  NO    DA28-C NETWORK SUPPORT
  ;F%DAS7 23 FTDN60 NO    DAS78 (REMOTE 360/370/2780) SUPPORT
  ;F%TASK 22 FTTSK  OTHER TASK TO TASK NETWORK SUPPORT
  ;F%TLAB 21 FTTLAB NO    TAPE LABEL SUPPORT
  ;F%TAPO 20 FT1    NO !  TAPOP. UUO
  ;F%RDBA 19 FT1    NO    READ BACKWARDS ON TU70
    ;(11) OTHER PERIPHERALS (THIS WORD IS FULL)
  ;*;	FTBITS<1,1,1,1,1,NET,1,1,1,1,MSGS,XTC,DN60,TSK,TLAB,1,1>
FETPER:	377777,,1B31!1B32!1B35	;(11) I/O features

  ;	%FTPE2==12,,71        I/O PARAMS (SECOND WORD)
  ;F%DX10 35 FTDX10 YES   DX10 DEVICE - CHAINING (MAGTAPES)
  ;       34-19 unused as of 7.03
    ;(12) OTHER PERIPERALS (SECOND WORD)
  ;*;	FTBITS<DX10>
FETPE2:	1,,0			;(12) More I/O features

  ;	%FTDS2==13,,71        INTERNAL DISK PARAMS
  ;F%DUAL 35 FTDUAL NO    DUAL-PORTED DISKS (RP04,RP06)
  ;       34-19 unused as of 7.03
    ;(13) DISK "INVISIBLE" FEATURES (SECOND WORD)
  ;*;	FTBITS<DUAL>
FETDS2:	1,,0			;(13) More Internal Disk features

  ;	%FTST2==14,,71        FILE STRUCTURE PARAMS
  ;F%PSTR 35 FTPSTR NO    PRIVATE FILE STRUCTURE
  ;F%SETS 34 FTSETS NO !  DON'T MOUNT CERTAIN DISKS AT ONCE-ONLY
  ;       33-19 unused as of 7.03
    ;(14) DISK UUO FEATURES (SECOND WORD)
  ;*;	FTBITS<PSTR,SETS>
FETST2:	3,,0			;(14) More File Structure features

  ;	%FTUU2==15,,71        UUOS
  ;F%MPB  35 FTMPB  NO    OLD VBATCH CODE
  ;       34-19 unused as of 7.03
    ;(15) LIST OF MONITOR NON-I/O FEATURES WHICH DIRECTLY IMPACT CUSPS (SECOND WORD)
  ;*;	FTBITS <MPB>
FETUU2:	1,,0			;(15) More Monitor Call features

FETLEN==.-FETTBL		; Table length
FETMXL==:<FETLEN-1>_^D9		; Length-1 for GETTABs
SUBTTL	Start of STOPCD data (see DIE:: in ERRCON)

;Data base to limit the number of STOPCD's per unit time so that we don't keep
;getting "continuable" STOPCD's that really aren't.  The data base consists of
;two tables, SCCTAB and SCLTAB.  SCCTAB is the count of the number of STOPCD's
;processed during the period indicated by the offset to it in the table.  SCLTAB
;contains, in the left half, the period for this entry and, in the right half,
;the limit of the number of STOPCD's during the period.  Both tables must be
;ordered such that the period of each entry is monotonically increasing.  The
;limits of each period are changable via the MONGEN dialog and may be changed
;by the customer.  When a STOPCD is processed by DIE, STCLIM increments the
;counts of STOPCD's for each entry and compares each with the limit for the
;entry.  If a limit has been exceeded, DIE turns the continuable STOPCD into a
;"stop" STOPCD.  If no limit has been exceeded, STCLIM puts in a clock request
;to call DECSCC after the period of the lowest entry in the table.  DECSCC
;decrements the count of STOPCD's for this entry and puts in a clock request to
;decrement the next higher count.  This continues until all have been
;decremented.  Note, that since the clock queue is used to decrement STOPCD
;counts, the period of the largest entry cannot be larger than 2**18-1 ticks.

SCCTAB::EXP	0		;Number of stopcodes in the last 60 seconds
	EXP	0		;Number of stopcodes in the last  8 minutes
	EXP	0		;Number of stopcodes in the last 60 minutes
SCCTBL==:.-SCCTAB		;LENGTH OF TABLE

ND LIM1MS,2	;Default values, can be overridden by MONGEN
ND LIM8MS,4
ND LIM1HS,8

SCLTAB::XWD	^D60,  LIM1MS	;Period = 1 minute,  Limit = LIM1MS = 2
	XWD	^D480, LIM8MS	;Period = 8 minutes, Limit = LIM8MS = 4
	XWD	^D3600,LIM1HS	;Period = 1 hour,    Limit = LIM1HS = 8

GMTUDT::^D<30-17+31+1<<1964-1859>*365>+<<1964-1859>/4>-1>,,0 ;112773,,0
			;Number of days since 17-NOV-1858 and 1-JAN-1964

  ;Data for STOPCD processor (see DIE:: in ERRCON)
DINITF:: 0		;Nonzero during disk initialization (ONCE)
DIECDB:: 0		;Physical address of CPU Data Block of crashing CPU
EPTSTS:: 0		;EPT status
UPTSTX:: 0		;UPT status

CCPNAM==:'CRSCPY'	;Name of program to run to copy crash

IFCPU (KL),<
SKPMRN::	;Routine to skip if master PDP-11 is running on KL
	JRST	CPOPJ1
CSDMP::	CSHUNL	;Routine to do a cache sweep on a KL
	POPJ	P,
>  ;End of IFCPU KL
SUBTTL	SYSTBL - System wide error data, GETTAB table .GTSYS=51

SYSTBL::!
%SYERR:: 0		;(00) System wide error count
%SYCCO::
CMNOTF:: 0		;(01) Number of times COMCNT was wrong
%SYDEL:: 0		;(02) Count of errors when error logging was disabled
%SYSPC:: 0		;(03) EXEC PC of most recent stopcode
%SYNDS:: 0		;(04) Number of DEBUG stopcodes
%SYNJS:: 0		;(05) Number of JOB stopcodes
%SYNCP::
COMTOT:: 0		;(06) Number of commands processed
%SYSJN:: 0		;(07) Job that caused most recent stopcode
%SYSTN:: 0		;(10) TTY name belong to user at most recent stopcode
%SYSPN:: 0		;(11) Program name running at most recent stopcode
%SYSUU:: 0		;(12) UUO in progress at most recent stopcode
%SYSUP:: 0		;(13) PC of UUO at most recent stopcode
%SYSPP:: 0		;(14) PPN of user running at most recent stopcode
%SYSPD:: 0		;Program directory
%SYSCP:: 0		;Number of CPU that got most recent stopcode
%SYSNM:: 0		;Name of most recent stopcode
%SYSTY:: 0		;Type of most recent stopcode
%SYSDT:: 0		;Date/time of most recent stopcode
%SYNCS:: 0		;Number of continued CPU stopcodes
%SYNIS:: 0		;Number of INFO/EVENT stopcodes
SYSMXL==:<.-SYSTBL-1>B26

DSKBAD:: 0		;Number of INFO/JOB stopcodes that set SLOCRS

SUBTTL	GTBWHY - Operator Reload Comments, GETTAB table .GTWHY=52
;In a running monitor, this table contains the comment the Operator gave when
;reloading the system, such as "Base crash - had to reload KL".
;In a crash dump, this table has the ACs in use at the time of a STOPCD.

CRSHAC:: BLOCK	20	;Operators answer to "Why reload" question in ASCIZ
PREVAC:: BLOCK	20	;Previous context ACs
WHYMXL==:<.-CRSHAC-1>B26

.CPCAC:: BLOCK 20	;Contents of AC block 0
.CPCA0=.CPCAC
.CPCA1::		;This block is not contiguous with .CPCAC in TOPS-10
IFCPU (F3),<BLOCK 20*3>	;AC blocks 1,2,3
IFCPU (KI),<BLOCK 20*3>	;AC blocks 1,2,3
IFCPU (KL),<BLOCK 20*5>	;AC blocks 1,2,3,4,5 (6 and 7 are special in microcode)
IFCPU (KS),<BLOCK 20*5>	;AC blocks 1,2,3,4,5


	DTE0==200	;Data Ten/Eleven interface (DTE0=console front end)
	DTE1==204
	DTE2==210
	DTE3==214
	RH20==540	;RH20 Massbus controller - Disk and Tape on KL
	RH21==544	; (RP04/RP05/RP06 disks)
	RH22==550	; (DX20 with TU70/TU71/TU72 tape drives)
	RH23==554	; (DX20 with RP20 fixed disk)
	RH24==560
	RH25==564
	RH26==570
	RH27==574
	MTR== 024	;Meter
	TIM== 020	;Timer

;;Not needed yet for TYMCOM-X hardware
; 000=CPA   004=PI    010=PAG   014=CCA   020=TIM   024=MTR   030=ADC2  034=
; 040=      044=      050=      054=      060=DLB1  064=DLC2  070=CLK1  074=CLK2
; 100=PTP   104=PTR   110=CDP   114=CDR   120=TTY   124=LPT1  130=DIS1  134=DIS2
; 140=PLT1  144=PLT2  150=CR1   154=CR2   160=DLB2  164=DLC2  170=DSK1  174=DSK2
; 200=DTE0  204=DTE1  210=DTE2  214=DTE3  220=DX10  224=      230=LPT3  234=LPT2
; 240=DLS1  244=DLS2  250=DPC1  254=DPC2  260=DPC3  264=DPC4  270=FSD1  274=FSD2
; 300=DCSA  304=DCSB  310=      314=      320=DTC1  324=DTS1  330=DTC2  334=DTS2
; 340=TMC1  344=TMS1  350=TMC2  354=TMS2  360=FSD3  364=      370=      374=
; 400=      404=      410=      414=      420=      424=      430=      434=
; 440=      444=      450=      454=      460=DSS1  464=DSI1  470=DSS2  474=DSI2
; 500=      504=      510=      514=      520=      524=      530=      534=
; 540=RH20  544=RH21  550=RH22  554=RH23  560=RH24  564=RH25  570=RH26  574=RH27
; 600=      604=      610=      614=      620=      624=      630=      634=
; 640=      644=      650=      654=      660=      664=      670=      674=
; 700=      704=      710=      714=      720=      724=      730=      734=
; 740=user  744=user  750=user  754=user  760=user  764=user  770=user  774=user

;Device codes, in alphabetical order
	CCI== 014	;Computer-Computer Interface (KI to PDP-8 on DA-10)
	CLK1==070	;Real-time clock
	CLK2==074
	CDP== 110	;Card punch
	CDR== 114	;Card reader
	CDR1==150	;Buffered card reader
	CDR2==154
	DAC== 320	;DECtape controller (TD10+TU55)
	DAS== 324
	DBC== 330	;DTB:
	DBS== 334
	DLB1==060	;Old PDP-11 interface
	DLB2==160
	DLC1==064
	DLC2==164
	DLS1==240	;Data line scanner
	DLS2==244
	DPC1==250	;Disk pack control (RD10 with RP02 or RP03)
	DPC2==254
	DPC3==260
	DPC4==264
	DX10==220	;Old TU-70 tape controller
	FHD1==170	;Fixed Head Disk controller (RD10)
	FHD2==174
	FSD1==270	;?
	FSD2==274
	FSD3==360
	LPT1==124	;Lineprinter
	LPT2==234
	LPT3==230
	PLT1==140	;Plotter
	PLT2==144
	PTP== 100	;Paper tape reader/punch
	PTR== 104
	TMC1==340	;Magtape controller
	TMS1==344
	TMC2==350
	TMS2==354
	TTY== 120	;Console TTY (KI only)

KSCTAB==.			;START OF KS10 DEVICE ADDRESS TABLE
UB1STS:	XWD	1,UNBSTW	;UBA1 STATUS REGISTER
UB3STS:	XWD	3,UNBSTW	;UBA3 STATUS REGISTER
RH1STS:	RH11CA			;RPCS1
RH1ST2:	RH11CA+10		;RPCS2
RH2STS:	RH21CA			;MTCS1
RH2ST2:	RH21CA+10		;MTCS2
LPTSTS:	LP11CA			;LPT CSRA
LPTST2:	LP11CA+2		;LPT CSRB
CDRSTS:	CD11BA			;CDR CDST
KSCEND==.			;END OF KS10 DEVICE ADDRESS TABLE
KSCTBL==KSCEND-KSCTAB	;LENGTH OF KS10 DEVICE ADDRESS TABLE

SUBTTL	CRSDB - crash data block definitions

  ;Per CPU data (This table needs to be rearranged in the right order)

.CPSLF:: .		;Pointer to start of CDB for this CPU
.CPDWD:: -1		;DIE word, checks for recursion in stopcode handler
.CPEVN:: -1		;NODIE word, checks for INFO and EVENT stopcodes
.CPCPC:: 0		;Continue PC, defaults to location after STOPCD macro
.CPCPI:: 0		;Saves CONI PI, during STOPCD
.CPCPG:: 0		;Pager status (including AC set in use) at STOPCD
.CPSCB:: 0		;STOPCD block address
.CPSNM:: 0		;STOPCD name
.CPSPC:: 0		;STOPCD EXEC PC
.CPSTY:: 0		;STOPCD type
.CPSDT:: 0		;STOPCD date/time
.CPSJN:: 0		;STOPCD job number
.CPSPN:: 0		;STOPCD program name
.CPSPD:: 0		;STOPCD program directory
.CPSPP:: 0		;STOPCD PPN
.CPSTN:: 0		;STOPCD TTY name
.CPSUU:: 0		;STOPCD UUO
.CPSUP:: 0		;STOPCD user PC
.CPSND:: 0		;STOPCD number of DEBUG stopcodes
.CPSNJ:: 0		;STOPCD number of JOB stopcodes
.CPSNC:: 0		;STOPCD number of CPU stopcodes
.CPSNI:: 0		;STOPCD number of INFO/EVENT stopcodes

.GTCRS:: ;Crash data block (The numbers in parens are defined for TOPS-10)
.CPAPD:: 0		;(0) APRID
.CPACN:: 0		;(1) CONI APR,
.CPPIC:: 0		;(2) CONI PI,
.CPPGD:: 0		;(3) DATAI PAG,
.CPPGC:: 0		;(4) CONI PAG,
.CPUP0:: BLOCK 4	;(5-10) UPT LOCS 424-427 (MUUO AREA)
  ;11-125 meaningful on KL only
.CPERA:: 0		;(11) RDERA
.CPRHC:: BLOCK 8	;(12-21) CONI RH20, FOR ALL 8 RH'S
.CPDTC:: BLOCK 4	;(22-25) CONI DTEn
.CPEP0:: BLOCK 40	;(26-65) EPT LOCS 0-37 (RH20 LOGOUT AREAS)
.CPEP1:: BLOCK 40	;(66-125) EPT LOCS 140-177  (DTE CONTROL BLOCKS)
  ;125-141 not on KI
.CPUP1:: BLOCK 4	;(126-131) UPT LOCS 500-503  (PAGE FAIL AREA)
.CP6::   BLOCK 5	;(132-135) AC BLOCK 6, REGS 0-3 AND 12
.CP7::   BLOCK 3	;(136-141) AC BLOCK 7, REGS 0-2
  ;142-211 on KL only
.CPSBD:: BLOCK 50	;(142-211) SBDIAG DATA
.CPSBR:: 0		;Status, SR.CSB set if 0-136 have saved data


.CPUPT:: UPT		;Physical address of the UPT, negative if invalid
.CPEPT:: EPT		;Physical address of the EPT for this CPU
.CPCPN:: 1		;Number of this CPU
.CPJOB:: 0		;Number of job running on this CPU
.CPISF:: 0		;In Scheduler-context Flag
.CPCTN:: '0'-'0'	;CTY: is line 0, TTY0:=CTYLDB
.CPTOA==:COMTOA##	;Address of routine to output to the CTY
.CPEPD:: IOWD 60,.CPPDL	;To reset the stack
.CPPDL:: BLOCK 60	;Stack for error processing
  SYSPDL=:.CPPDL+1	;Used by ONCE and CRASH code
.CPDDT:: JRST DDTX##	;Instruction to enter DDT on this CPU
.CPLOG:: APRNAM		;Logical name (AA, BB, CC, etc) ,, base node #
.CPCPU:: APRSN		;CPU type in LH,,Serial number system was built for
			;ONCE sets SERIAL to APRID but leaves .CPCPU alone
.CPSNO:: SYSNO		;System number from CONF##.MAC (right justified SIXBIT)
.CPSVA:: 0		;Do JSR .CPSVA to save all AC blocks
	 JRST SVSETS	;Jump to routine to save ACs
.CPACA:: 0		;Address of active ACs

;Data locations for PICON when APRINT detects parity error
.CPPER:  0		;Results of CONI APR, on PARITY/NXM interrupt
.CPAER:  0		;Results of RDERA on PARITY/NXM interrupt
.CPSB0:  4B4+0		;SBUS DIAG, controller 4 (DMA20), function 0
.CPS0A:  0		; result stored here after parity error
.CPSB1:  4B4+1		;SBUS DIAG, controller 4 (DMA20), function 1
.CPS1A:  0		; result stored here after parity error
	SAVAPR=:.CPPER		;CONI APR,SAVAPR done in PICON
	SAVERA=:.CPAER		;RDERA SAVERA done in PICON
	SAVSB0=:.CPSB0		;SBDIAG SAVSB0 done in PICON
	SAVSB1=:.CPSB1		;SBDIAG SAVSB1 done in PICON

;End of DEC's crash data block
;-------------------------------------------------------------------------------
;Start of TYMSHARE's crash data block

IFCPU (KL),<;KL specific CPU registers
SBDST1:: 4B4+0		;(-5) SBUS DIAG, controller 4 (DMA20), function 0
         0		;(-4) result stored here after stopcode
SBDST2:: 4B4+1		;(-3) SBUS DIAG, controller 4 (DMA20), function 1
         0		;(-2) result stored here after stopcode
ERASTS:: 0		;(-1) Results of RDERA after stopcode
>; IFCPU KL

IFCPU (KS),<;KS specific CPU registers
KAFPC::	0		;(-25) 4 word block for XPCW if keep alive fails
	0		;(-24) KAFPC+0 = old flags, KAFPC+1 = old 30-bit PC
	0		;(-23) KAFPC+2 = new flags (zero for kernel)
	KAFCRS		;(-22) KAFPC+3 = new 30-bit PC
HLTSTS::0		;(-21) MAG register
	0		;(-20) PC register
	0		;(-17) HR register
	0		;(-16) AR register
	0		;(-15) ARX register
	0		;(-14) BR register
	0		;(-13) BRX register
	0		;(-12) ONE (1) register
	0		;(-11) EBR register
	0		;(-10) UBR register
	0		;(-7) MASK register
	0		;(-6) FLG (flags,page fail code) register
	0		;(-5) PI register
	0		;(-4) XWD1 (1,,1) register
	0		;(-3) T0 register
	0		;(-2) T1 register
	0		;(-1) VMA (with flags)
>; IFCPU KS

IFCPU (KI),<;KI specific CPU registers - none>
IFCPU (F3),<;F3 specific CPU registers - none>

CRSDB::	; * * * CRASH DATA BLOCK * * *
	; + index are processor independent
	; - index are processor dependent
	; CRSDB is pointed to by lh(CONFIG-2) so CRSHID can find it
;symbol			index  instruction          cpus
;------			-----  ----------- 	    ----
PISTS::	0		;(0)  CONI  PI,  (RDPI)	    ILS3
APRSTS::0		;(1)  CONI  APR, (RDAPR)    ILS3
PAGDTI::0		;(2)  DATAI PAG, (RDUBR)    ILS3
PAGCNI::0		;(3)  CONI  PAG, (RDEBR)    ILS3
AIDSTS::0		;(4)  BLKI  APR, (APRID)    .LS.
APRDTI::0		;(5)  DATAI APR, (RSW)	    IL.3 (KL address break)
	0		;(6)
	0		;(7)
	0		;(10)
	0		;(11)
	0		;(12)
	0		;(13)
	EPT,,CRSHAC	;(14) address of some useful stuff
SAV30::	0		;(15) value of 30 saved here
STOPCN::0		;(16) count of times we tried to crash
STOPPC::0		;(17) real PC of first STOPCD we hit
CRSLEN==.-CRSDB
CRSMXL==:<CRSLEN-1>_^D9

  ;These variables should be moved somewhere else
BADINT::0		;bad interrupts weve gotten
BADQUE::0		;attempts to assign a job not in NUL queue
BADQTM::0		;time last job assignment was made
SUBTTL	COMMON SUBROUTINE RETURNS

CPOPJ2::AOS	(P)		;DOUBLE SKIP SUBROUTINE RETURN
RSKP::!				;FOR MACSYM USERS
CPOPJ1::AOSA	(P)		;SKIP SUBROUTINE RETURN
DPOPJ::	MOVEM	S,DEVIOS(F)	;DEPOSIT I/O STATUS WORD IN DDB
RTN::!
CPOPJ::	POPJ	P,

TPOPJ1::AOSA	-1(P)		;RESTORE T1 THEN SKIP RETURN
TTPOPJ::POP	P,T2
TPOPJ::	POP	P,T1		;RESTORE T1
	POPJ	P,		;AND RETURN
JPOPJ1::			;DUPLICATE NAME (PREFERRED)
IPOPJ1::AOS	-1(P)		;SET FOR SKIP RETURN
JPOPJ::				;DUPLICATE NAME (PREFERRED)
IPOPJ::	POP	P,J		;RESTORE J (USUALLY JOB OR HIGH SEG NUMBER)
	POPJ	P,
	POP	P,
T2POJ1::AOS	-1(P)
T2POPJ::POP	P,T2		;RESTORE T2
	POPJ	P,
MPOPJ::	POP	P,M
	POPJ	P,
WPOPJX::CAIA			;NETSER PUSHES THIS ADDR ON THE STACK THEN
WPOPJ1::AOS	-1(P)		; EVENTUALLY DOES A CPOPJ1 RETURN
WPOPJ::	POP	P,W
	POPJ	P,
T3POPJ::POP	P,T3
	POPJ	P,
P3POPJ::POP	P,P3
	POPJ	P,


FUPOJ1::POP	P,F
UPOPJ1::
LPOPJ1::AOSA	-1(P)		;SKIP AND RESTORE LINE
FUPOPJ::POP	P,F
UPOPJ::
LPOPJ::	POP	P,U		;RESTORE LINE AND RETURN
	POPJ	P,0		;RETURN
FPOPJ1::AOS	-1(P)
FPOPJ::	POP	P,F		;RESTORE F
	POPJ	P,0		;RETURN
ZPOPJ::	TDZA	T1,T1
M1POPJ::SETOM	T1
	POPJ	P,


ANYCPU::CAME	J,.CPJOB
	 AOS	(P)
	POPJ	P,		;TURN ON DEVICE PI LEVEL

ONPOPJ::SYSPIN			;Turn on PI system
	POPJ	P,

DEFINE	NTGIVE,<		;;ROUTINE TO GIVE UP THE INTERLOCK ON AN ERROR
;*;	IFNDEF NTLERR,<EXTERNAL NTLERR>
;*;	PUSHJ	P,NTLERR>	;;GIVE UP THE INTERLOCK ONLY IF WE OWN IT

GIVLOK::NTGIVE
	POPJ	P,
SUBTTL	SYSTEM BYTE POINTERS

PUUOAC::POINT	4,M,12		;M AC FIELD
PIOMOD::POINT	4,S,35		;MODE BITS
XP PJBNLH,350700		;LEFT HALF OF "POINT 7,XXX,6"
DEVJOB==:DEVCHR
PJOBN::	XWD PJBNLH+F,DEVJOB	;DEVICE JOB ASSIGNMENT
PUNIT::	POINT	7,DEVCHR(F),23	;DEVICE UNIT NUMBER
PJBSTS::POINT	JWSIZ,JBTSTS(J),JWPOS ;JOB WAIT STATE (QUEUE) CODE
PJBST2::POINT	JWSIZ,T2,JWPOS	;ONE FOR T2
				;IN JOB STATUS WORD
PDVTIM::POINT	3,DEVCHR(F),9	;CODE FOR TIME DEVICE MAY
				;BE ACTIVE BEFORE BEING DECLARED
				;HUNG. N MEANS 2^N-1 SECONDS
PDVCNT::POINT	7,DEVCHR(F),16	;COUNTED DOWN EACH SECOND,
				;1 TO 0 TRANSITION MEANS HUNG DEVICE
IADPTR::POINT	2,DEVIAD(F),2	;COUNT OF NUMBER OF USER CHANNELS INITED
				; ON THIS DEVICE (DECTAPE ONLY)
DEYCLS::POINT 2,DEVCLS(F),1	;DEVICE CLASS CODE
DEYMCT::POINT 4,DEVCLS(F),13	;DEVICE MAX FREE CORE COUNT
DEYTCT::POINT 4,DEVCLS(F),17	;DEVICE CURRENT FREE CORE COUNT
JBYQNT::POINT JBSQNT,JBTICT(J),JBNQNT ;POINTER TO QUANTUM RUN TIME FOR JOB
				;(NO OF JIFFIES BEFORE NEXT LOWER RUN QUEUE)

CTXTAB::			;TABLE OF BYTE POINTERS TO DISK
				; ADDRESSES. ALSO USED TO COMPUTE
				; EFFECTIVE ADDRESSES IN JBTCTX
ZZ==0
REPEAT NCTXPG,<
	POINT 27,JBTCTX+ZZ(J),35 ;POINTER TO DISK ADDRESS FOR PAGE ZZ
	ZZ==ZZ+JOBN
>

JBYSWS::POINT 2,JBTPGO(J),1	;SWAPPER STATE
JBYACT::POINT 10,JBTPGO(J),11	;NUMBER OF ACTIVE LMAP SLOTS
JBYCTR::POINT 5,JBTPGO(J),17	;NUMBER OF PAGES RESERVED FOR
				;CONTEXT PAGES
IFG NCTXPG-<1_<5-1>>,<PRINTX JBYCTR FIELD OVERFLOW>
JBYPPP::POINT 6,JBTMWS(J),5	;# OF PER-PROCESS PAGES
JBYMWS::POINT 10,JBTMWS(J),15	;MONITOR WORKING SET SIZE
JBYMWL::POINT 10,JBTMWS(J),25	;LIMIT
JBYUWS::POINT 10,JBTMWS(J),35	;USER WORKING SET SIZE.

JBYWCH::POINT 23,JBTWCH(J),35 ;BYTE POINTER TO TIME OF DAY STARTED WAITING

JBYRPT::POINT 2,JBTLIC(J),LICRPS
JBYWPT::POINT 2,JBTLIC(J),LICWPS
JBLMSZ==:^D17				;INACTIVITY TIMEOUT LIMIT FIELD SIZE
JBLMSK==:<1_JBLMSZ>-1			;INACTIVITY TIMEOUT LIMIT MASK
INADFL==:^D15				;INACTIVITY TIMEOUT DEFAULT LIMIT
INAHIT==:(1B0)				;INACTIVITY TIMEOUT LIMIT HAS BEEN HIT
JBYINA:: POINT JBLMSZ,JBTINA(J),17	;POINTER TO INACTIVITY LIMIT FIELD (J)
JBYIN2:: POINT JBLMSZ,JBTINA(T2),17	;POINTER TO INACTIVITY LIMIT FIELD (T2)
PVYMOD::POINT PVSMOD,JBTPRV(J),PVNMOD
PVZMOD::POINT PVSMOD,JBTPRV(T1),PVNMOD
PVYCOR::POINT PVSCOR,JBTPRV(J),PVNCOR
PVYTIM::POINT PVSTIM,JBTPRV(J),PVNTIM
PVYCRM::POINT PVSCRM,JBTPRV(J),PVNCRM
PVYHNG::POINT PVSHNG,JBTPRV(J),PVNHNG

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;									;;;
;;;	NOTE:  This following table is in order by INTASS cause number	;;;
;;;	       and should not be re-arranged for any reason.		;;;
;;;									;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INTBYP::	; INTASS interrupt channel assignments
JBYUUO::POINT 6,%UPT+UPTTPN,5	; (0) UUO TRAP NUMBER
JBYCLK::POINT 6,%UPT+UPTTPN,11	; (1) CLOCK TRAP NUMBER
JBYPGT::POINT 6,%UPT+UPTTPN,17	; (2) PAGE TRAP NUMBER
JBYHNG::POINT 6,%UPT+UPTTPN,23	; (3) HUNG DEVICE TRAP NUMBER
JBYTIM::POINT 6,JBTINT(J),5	; (4) TIMER TRAP NUMBER
JBYERR::POINT 6,%UPT+UPTTPN,29	; (5) DEVICE ERROR TRAP NUMBER
JBYWAK::POINT 6,JBTINT(J),11	; (6) WAKE UUO
JBYSAL::POINT 6,%UPT+UPTTP1,5	; (7) UWS FAULT, SIZE AT LEAST LIMIT
JBYSLL::POINT 6,%UPT+UPTTP1,11	;(10) UWS FAULT, SIZE LESS THAN LIMIT
JBYREF::POINT 6,%UPT+UPTTP1,17	;(11) REF BIT TRAP
JBYPER::POINT 6,%UPT+UPTTP1,23	;(12) TRAP ON I/O ERRORS.
JBYNTQ::POINT 6,JBTINT(J),17	;(13) NOTICE TO QUIT (TO BE HUNG)
JBYEXC::POINT 6,JBTINT(J),23	;(14) Exit in any/all child frame
JBYMCY::POINT 6,%UPT+UPTTP1,29	;(15) Micro-cycle interrupt timer
JBYLIM::POINT 6,JBTINT(J),29	;(16) TRU limit interrupt
INTRNM==:.-INTBYP	;Number of INTASS interrupts

JBYSC1::POINT 9,JBTSCA(J),8	;Numerator for non-kcore factor
JBYSC2::POINT 9,JBTSCA(J),17	;Denominator for non-kcore
JBYSC3::POINT 9,JBTSCA(J),26	;Num. for kcore factor
JBYSC4::POINT 9,JBTSCA(J),35	;Denom. for kcore (or 0 if absolute)
COMMENT $
HERE IS THE INNFORMATION FOR THE PAGE TABLE. THIS TABLE
IS USED FOR SWAP IN AND OUT AND OTHER THINGS. THE BYTES
ARE ARRANGED SO THAT THE MOST FREQUENTLY USED BYTES ARE
RIGHT JUSTIFIED IN THE WORD TO MINIMIZE SHIFTING TIME REQUIRED
DURING THE BYTE INSTRUCTIONS.

THIS TABLE IS ALLOCATED AT ONCE TIME AND ALL POINTER ADDRESSES ARE
ADJUSTED. THE POINTER WILL HAVE A LOWER ADDRESS THAN THE FIRST
ENTRY SO THAT ALL THE MONITOR PAGES ARE NOT POINTED TO
$

;FIRST WORD

PGYUNU::POINT 6,.-.(PG),10	;UNUSED
PGYPGO::POINT 12,.-.(PG),22	;OUTPUT WAIT FOR THIS PAGE LINK
PGYFPL::POINT 13,.-.(PG),35	;FORWARD LINK (PAGE NUMBER)
			;PGYFPL MUST BE IN THE FIRST WORD.

;SECOND WORD

PGYLMA::POINT 22,.-.(PG),22	;LMA CHAIN START (LINKS
SNDPGY==:PGYLMA	;DEFINED FOR ONCE TIME.  MUST BE A PNTR
			;TO THE SECOND WORD, AND PGYFPL MUST BE
			;IN THE FIRST WORD.
				; ALL ACTIVE SLOTS FOR CORE PAGE
PGYLMV::POINT 10,.-.(PG),10	;VP NUMBER OF NEXT SLOT
PGYLMJ::POINT 12,.-.(PG),22	;JOB NUMBER OF NEXT SLOT, 0 IF END
PGYBPL::POINT 13,.-.(PG),35	;BACKWARD LINK (PAGE NUMBER)

;THIRD WORD

PGYLST::POINT 3,.-.(PG),2	;WHICH LIST PAGE IS ON (SEE CORE1
				; FOR LIST NUMBER DEFINITIONS)
	XP DIOMAX,77		;MAXIMUM THAT DIO CAN BE.
PGYDIO::POINT 6,.-.(PG),8	;DIRECT I/O COUNT (TAPE, NOT DISK)
  XP PGPDIO,001000
PGYADR::POINT 27,.-.(PG),35	;DISK ADDRESS. (RETRIEVAL POINTER FORMAT)
PGYUNI::POINT 8,.-.(PG),16	;UNIT NUMBER PART
PGYPNO::POINT 19,.-.(PG),35	;PAGE ADDRESS WITHIN UNIT

;FOURTH WORD

PGYSPT::POINT 22,.-.(PG),22	;SPT BASE + OFFSET
PGYSPB::POINT 18,.-.(PG),18	;SPT BASE
PGYSPO::POINT 4,.-.(PG),22	;OFFSET
PGYCHT::POINT 13,.-.(PG),35	;LINK TO NEXT CORE PAGE ON CHT

;FIFTH WORD

PGYNXM::POINT 1,.-.(PG),0	;NXM
PGYERR::POINT 2,.-.(PG),2	;IODERR,IODTER
PGYSIP::POINT 1,.-.(PG),3	;SWAP IN IN PROGRESS
PGYSOP::POINT 1,.-.(PG),4	;SWAP OUT IN PROGRESS
PGYDRT::POINT 1,.-.(PG),5	;DIRTY

PGYSTS::POINT 6,.-.(PG),5	;CORE PAGE STATUS WORD
	XP PGPNXM,40		;BIT IN STATUS WORD FOR NXM
	XP PGPDER,20		;DEVICE ERROR
	XP PGPDTE,10		;DATA ERROR
	 XP PGMERR,PGPDER!PGPDTE ;MASK FOR ERRORS
	XP PGPSIP,4		;SWAP IN IN PROGRESS
	XP PGPSOP,2		;SWAP OUT IN PROGRESS
				; MUST BE 1B34!! (SEE DECUSE)
	XP PGPDRT,1		;DIRTY
				;MUST BE 1B35!! (SEE DECUSE)

PGYSIO::POINT 2,.-.(PG),4	;COVERS SIP AND SOP.

PGYATB::POINT 13,.-.(PG),18	;PLACE TO REMEMBER ATB ADDRESS WHILE
				; PAGE IS ON LMA CHAIN (SO DON'T HAVE
				; FIND LAST SLOT ON CHAIN TO FIND ATB)
	XP USEMAX,377777	;MAXIMUM THAT USE COUNT CAN BE.
PGYUSE::POINT 17,.-.(PG),35	;NUMBER OF REASONS WHY PAGE IS IN CORE
				;MUST BE RIGHT JUSTIFIED FOR AOS @PGYUSE.

;SIXTH WORD

PGYCSH::POINT 36,.-.(PG),35	;WHOLE WORD (TO MAKE CODE FASTER)
				; SAVED CACHE SWEEP SERIAL NUMBER.
CNTPGY==:6		;NUMBER OF PGY WORDS (FOR ONCE).

ADRNCT::EXP	1B<35-27>-1	;IF PGYADR IS EQUAL TO THIS, CORE PAGE
			; IS NOT IN CHT AND HAS NO DP ASSOCIATED WITH IT.
ADRDUM::EXP	1B<35-27>-2	;IF PGYADR IS EQUAL TO THIS, CORE PAGE
			; HAS NO DISK PAGE ASSOCIATED WITH IT, BUT
			; CAN BE USED AS A PRIVATE PAGE AS LONG AS ITS NOT
			; DEACTIVATED. USED BEFORE DSKCLN FINISHED FIXING DISK.
;(WAS A PROBLEM WITH DSKCLN DOING SUPER I/O AND WRITING IN ITSELF,
; AND DSKCLN OVERWRITING RIBS AFTER IT HAD CHECKED THEM BY
; WRITING IN ITS OWN CORE IMAGE)

IFCPU (KL),<
;HERE ARE FOUR LOCATIONS WHICH HAVE THE ADDRESSES OF FOUR CACHED
; PAGES. BY LOADING THE RELATIVE ADDRESS IN THE PAGE
; INTO T1 AND THEN REFERENCING @CSRTAB+0,1,2,3, ONE CAN ENSURE
; THAT A CERTAIN FOUR WORD CHUNK HAS BEEN UNLOADED FROM THE CACHE
; WITHOUT HAVING TO DO A CACHE SWEEP.
;
;USE THE MACRO "CSHREF" TO DO THIS.

CSRTAB::.-.(T1)
	.-.(T1)
	.-.(T1)
	.-.(T1)
>;END IFCPU KL
;TABLES FOR MWS ADJUST AND PAGE AGEING CODE

AGEHST::BLOCK AGEMAX+1	;HISTOGRAM FOR OBSERVING AGE DISTRIBUTION

AGEPTR::		;TABLE OF BYTE POINTERS FOR ACCESSING
			;AGE CELLS
ZZBIT=2
REPEAT <AGECPW>,<
	POINT AGESIZ,%UPT+UPTAGE(T1),ZZBIT
	ZZBIT=ZZBIT+AGESIZ
>


;SCANNER ENTRY POINTS AND BIT DEFINITIONS

LINFLG::BLOCK NFLG		;FOR LINE OUTPUT BITS

;XP LINTBE,LINTAB+PORTN

;TELETYPE LINE CHARACTERISTICS (LH OF LINTAB)
;USED BY SCNSER

XP TTVINI,200			;RUN INITIAL CUSP
XP TTVIN2,400			;RUN INITIAL CUSP FROM SETUUO

;LINES TO RUN INITIA

INI0==1	;LINE 0 INITIA AT START TIME
IN21==1	;LINE 1 INITIA FROM SETUUP
IN22==1	;ALSO LINE 2
IN23==1	;AND LINE 3
IN24==1	;AND LINE 4
IN25==1	;AND LINE 5 (see INITIA.MAC for what these are used for)

;NOW DEFINE THE LINE TABLE FOR EACH TTY'S CHARACTERISTICS
;USING THE INFO FROM CONFIG, AND DATA FROM TTYTAB AREA.

LINTAB::GENLIN(\LIN)	;LINE CHARACTERISTICS (NOT CLEARED ON SYSTEM STARTUP)

PTYN==PPORTN		;Number of PTY lines
PTYTAB=:LINTAB+RPORTN	;Address in LINTAB where PTYs start

;THE FOLLOWING SLIDING SCALE DEFINES THE LENGTH OF THE TTY FREE LIST

IFNDEF TTCHKN,<IFL PORTN-10,<XP TTCHKN,7*PORTN>>
IFNDEF TTCHKN,<IFL PORTN-20,<XP TTCHKN,6*PORTN>>
IFNDEF TTCHKN,<XP TTCHKN,^D10*PORTN>

TTFREE::EXP .-.		;FILLED IN AT ONCE TIME BY FREE LIST ADR
TTCLST::XWD TTCHKN,.-.	;# OF TTY CHUNKS,,ADDRESS OF FIRST ONE
XP TTCHKS,4		;CHUNK SIZE

CSUPTN:: BLOCK 1	;PHYS PG NO UPT SAVED IN ON CRASH
CRSBLK:: BLOCK ^D10	;HARDWARE MAP DATA OVERWRITTEN IS SAVED HERE AFTER PAGCNI
	SAVDMP==:<SIXBIT /   SAV/>	;EXTENSION FOR SAVED FILES == "SAV"
      e"