TITLE	BOTLOD - Load BOOTS from pages 3-5 of the disk (KI and KL)
;Note that this routine runs on both the KI and the KL, no CPU dependencies.

	BOOTS=774000		;Top 2 K of core with paging disabled

;Disk Page Number 1 is Head 0 Records 5-8 on 3330 or RM03/RP06 (block format)
;Disk Page Number 1 is Head 0 Record 2 on 3650 or F3/CDC disk  (page format)
;
;DPN    3330      3650    Use
;00   H0R01-R04   H0R1    IPL     IBM Initial Program Load, KS/8080 boot pointer
;01   H0R05-R08   H0R2    HOM1    Primary HOM page
;02   H0R09-R12   H0R3    BAT1    Primary BAT page
;03   H0R13-R18   H0R4    BOOT1   First 4 blocks of BOOTS
;04  H0R17/H1R2   H0R5    BOOT2   Two blocks on 1st track, two on 2nd track
;05   H1R03-R06   H0R6    BOOT3   Last 4 blocks of BOOTS
;06   H1R07-R10   H0R7    HOM2    Secondary HOM page
;07   H1R11-R14   H1R1    BAT2    Secondary BAT page
;10   H1R15-R18   H1R2    SATRIB  RIB for SAT.SYS

	SA=J	;SA-10 number, 0 or 1
	CH=F	;Channel number, 0 to 3
	DU=U	;Disk unit, X'C0' to X'FF'
	CL=M	;Pointer to command list
	CM=W	;Command for disk
	P1=P1	;Pointer to SABASE
	P=P
	T1=T1
	T2=T2
	T3=T3
	T4=T4

	APR== 000	;CPU Arithmetic processor
	PI==  004	;Priority interrupt system
	PAG== 010	;Pager
	SAX1==274	;First SA10 device code
	SAX2==400	;Second SA10 device code

	SABASE=300	;Base of block in absolute low core for SA10
			;SABASE is set by DIP switches on the SA10
;BOTLOD - Called via 146 restart, or when ONCE wants to reload BOOTS from disk
;Memory layout:
;  BOTLOD is BLT'ed to the first half of page 334 and executed from there.
;  Pages 335,336,337 are undisturbed (COMMON puts context pages there).
;  BOOTS is read in to pages 774 + 775 + 776, and uses page 777.

BOTLOD::JSP	1,.+1		;Get PC flags
	TLNE	1,PC.USR	;In user mode?  (1B5)
	 JRST	USERM		;Yes, write BOTLOD to PTP or DSK
	CONO	PAG,0		;Disable paging on KL,KS,F3
	MOVEI	1,400000	;Load right for KI (do not update accts others)
	DATAO	PAG,1		;Disable paging on KI
	SKIPA	1,.+1		;Cannot use literals to load AC
	 BTS001,,BOOTFI		;Source,,destination
	BLT	1,BTSEND	;Put where paper-tape or DECtape puts BOTLOD
	JRST	BOOTFI		;Go to BOOT First Instruction

USRMSG:	ASCIZ	/User-mode portion of BOTLOD is not yet implemented/
USERM:	OUTSTR	USRMSG
	EXIT
SUBTTL	Program to load BOOTS from IBM disks on an SA10 channel

BTS000:	IOWD	BOTLEN,BOOTFI		;1st word of SAV file and paper tape

					;CRASH code copies UPT to pages 335-337
BTS001:	PHASE	334000			;Put this below 112K boundry for KLDCP
BOOTFI::CONO	APR,200000		;BOOTS First Instruction = Reset I/O bus
	CONO	PI,10400+1177		;Clear PI, off PI, off selected PI
	MOVE	P,[IOWD PDLLEN,EPDL]	;Set up stack
	MOVE	T1,NOSA10		;Set up HALT instruction
	MOVEM	T1,BOOTS		; if nothing can be read

;Try both SA10 device codes

	MOVSI	SA,-SAXN		;AOBJN for two SA10's
SALOOP:	HRRZ	P1,SA			;SABASE has 4 words per channel,
	IMULI	P1,4*4			; 4 channels per SA10
	ADDI	P1,SABASE		;(disks are on SA0:CH1=304)
	XCT	BPCNI1(SA)		;Do CONI into T1
	SKIPE	T1			;Bit 17 always set on a working SA10
	 PUSHJ	P,SAFND			;Go check out this I/O device
	AOBJN	SA,SALOOP		;Try next SA10
	SKIPN	BOOTS			;Was nonzero data read in?
NOSA10:: HALT	NOSA10			;Could not find BOOTS anywhere
	JRST	BOOTS			;*HACK* Yes, go to it anyway

;Found an SA10, try all 4 channels on it

;SA/ SAX number, 0 or 1
;P1/ pointer to 4-word block in SABASE
;CH/ channel number, 0 to 3

SAFND:	MOVSI	CH,-CHANN		;AOBJN to do 4 channels on each SA10
SAFND1:	MOVEI	T1,^D100000		;Loop counter
	MOVE	T3,REQSTS(CH)		;Request status be stored
	XCT	BPCNO3(SA)		;  CONO SA,540
	MOVE	T2,SSBITS(CH)		;Check if SS bit has come on yet
	XCT	BPCNS2(SA)		;  CONSO SA,100
	 SOJG	T1,.-1			;Not yet, wait a while
	SKIPE	T1			;If we did not time out,
	 PUSHJ	P,CHFND			;Go investigate this channel
	ADDI	P1,4			;Point to next 4-word block at SABASE
	AOBJN	CH,SAFND1		;Try all 4 channels
	POPJ	P,			;Done all, try next SA10
SUBTTL	CONO and CONI bits for SA10

;CONO commands to SA10
	SA.RST==400000	;Reset SA10 and all 4 channels on it
	SSTS==     640	;Set STATUS STORED bit for channel
	CSTS==     600	;Clear STATUS STORED bit for channel
	SREQ==     540	;Request status for channel
	BUSY==     440	;Set GO flag for channel
	CHN0==      00	;This command is for channel 0 (tape on TYMCOM-X)
	CHN1==      10	;This command is for channel 1 (disk on TYMCOM-X)
	CHN2==      20	;This command is for channel 2 (not used by TYMCOM-X)
	CHN3==      30	;This command is for channel 3 (not used by TYMCOM-X)
	PIA==        7	;Set PI Assignment

SETBSY:	EXP	BUSY+CHN0,BUSY+CHN1,BUSY+CHN2,BUSY+CHN3
	CHANN==.-SETBSY	;4 channels, index by CH
REQSTS:	EXP	SREQ+CHN0,SREQ+CHN1,SREQ+CHN2,SREQ+CHN3
CLRSTS:	EXP	CSTS+CHN0,CSTS+CHN1,CSTS+CHN2,CSTS+CHN3
SETSTS:	EXP	SSTS+CHN0,SSTS+CHN1,SSTS+CHN2,SSTS+CHN3

;CONI bits from SA10			;Bit 17 always on
IEBITS:	EXP	40000,20000,10000,04000	;Interrupt is enabled for channel
GOBITS:	EXP	02000,01000,00400,00200	;GO flag is set for channel
SSBITS:	EXP	00100,00040,00020,00010	;Status has been Stored

BPCNI1:	CONI	SAX1,T1		;Check if device responds
	CONI	SAX2,T1
	SAXN==.-BPCNI1	;2 SA10 devices per CPU
BPCNS2:	CONSO	SAX1,(T2)	;Skip if status stored
	CONSO	SAX2,(T2)
BPCNO3:	CONO	SAX1,(T3)	;Set GO, STATUS, etc
	CONO	SAX2,(T3)
SUBTTL	Found a working SA10 channel

;SA/ SAX number, 0 or 1
;P1/ pointer to 4-word block in SABASE
;CH/ channel number, 0 to 3
;DU/ disk unit number in 3rd byte

CHFND:	MOVE	CM,[TIC,,NOPCMD]	;Transfer to no-op command
	MOVEM	CM,(P1)			;Set CCW for this channel
	MOVE	DU,NOOPD0		;NO-OP to first disk on this channel
CHFN1:	MOVEM	DU,NOPCMD		;Store command
	PUSHJ	P,STRTIT		;Start device
	  JRST	CHFN2			;Device not responding (DU modified)
	PUSHJ	P,UTFND			;Found working unit
CHFN2:	CAML	DU,MAXDEV		;Last device?
	 POPJ	P,			;Done, try next channel
	ADDI	DU,<BYTE(8)0,0,1>	;No, increment unit number in 3rd byte
	JRST	CHFN1			;Try next disk unit

;Found a working disk unit.  Third byte of DU has unit number
;SA=SAX#, CH=Channel #, P1=Channel base, CL=command list, CM=command

UTFND:	LDB	T1,[POINT 8,DU,23]	;Get device address
	MOVEI	CL,LIST0		;Start of command lists

;Modify all 6+8+17 occurrances of FDISKA to be current device address

UTFND0:	HLRZ	CM,(CL)			;Get LH of command
	CAIN	CM,TIC			;Transfer in channel?
	 ADDI	CL,1			;Yes, skip over it
	DPB	T1,[POINT 8,0(CL),23]	;No, store new device address
	ADDI	CL,2			;Point to next pair
	CAIGE	CL,LIST9		;Hit end of last list?
	 JRST	UTFND0			;No, do more commands

;Tell SA10 to look a command list and read BOOTS from the disk

	MOVSI	CL,-NLISTS		;Try all supported formats
READIT:	MOVE	T1,LISTS(CL)		;Point to a command list
	MOVEM	T1,(P1)			;Tell channel where to go
	PUSHJ	P,STRTIT		;Start channel and device
	  JRST	NOREAD			;Some sort of error
	MOVE	T1,BOOTS		;Check first word
	CAMN	T1,BOOTFI		;Is it CONO APR,200000 ?
	 JRST	BOOTS			;All good.  Go start it
NOREAD:	AOBJN	CL,READIT		;Try the next one
	POPJ	P,			;All tries to read failed

LISTS:	TIC,,LIST1			;3650 in pages
	TIC,,LIST2			;3675 in pages
	TIC,,LIST3			;3675 in blocks
NLISTS==.-LISTS
SUBTTL	Routine to start I/O on the channel and device

;Bits returned from channel in SABASE+1
	;     ==(3B1)		;Type of status 0=end,1=init,2=async,3=requested
	SELERR==(1B2)		;Select error - no control unit at this address
	;     ==(1B3)		;Bus In Parity Error
	;     ==(1B4)		;Control error
	;     ==(0B5)		; always zero
	LENERR==(1B6)		;Length error - count does not match
	;     ==(1B7)		;Program requested interrupt
	;  ==(BYTE (8)0,200)	;Attention
	SM== (BYTE (8)0,100)	;Status modifier
	CUE==(BYTE (8)0,040)	;Control unit end
	BSY==(BYTE (8)0,020)	;Control unit busy (SM=1) or string busy (SM=0)
	CE== (BYTE (8)0,010)	;Channel end
	DE== (BYTE (8)0,004)	;Device end
	;  ==(BYTE (8)0,002)	;Unit check
	;  ==(BYTE (8)0,001)	;Unit exception
	;   ==BYTE (8)0,000,377	;Device address

;Here to start I/O on an IBM disk, skip return if successful

STRTIT:	MOVEI	T1,^D50000		;Wait for previous activity to stop
	SOJG	T1,.			;*HACK*
STRT1:	MOVE	T3,SETSTS(CH)		;Tell channel to store status now
	XCT	BPCNO3(SA)		;  CONO SA,640
	MOVE	T3,SETBSY(CH)		;Set the GO flag
	XCT	BPCNO3(SA)		;  CONO SA,440
	MOVE	T3,CLRSTS(CH)		;Clear the Status Stored bit
	XCT	BPCNO3(SA)		;  CONO SA,600

	MOVEI	T1,^D100000		;Time out loop
	MOVE	T2,SSBITS(CH)		;Wait for Status Stored bit to set
	XCT	BPCNS2(SA)		;  CONSO SA,100
	 SOJG	T1,.-1
	JUMPE	T1,STRT4		;Timed out, channel is not working
	MOVE	CM,1(P1)		;Get status word
	TLNE	CM,SELERR		;Select error?
	 JRST	STRT4A			;Yes, no disks at this address
	TLNN	CM,BSY			;BUSY?
	 JRST	STRT3			;No, transfer is done
	TLNE	CM,SM			;BUSY and STATUS MODIFIER?
	 JRST	STRT2			;Yes, wait for CONTROL UNIT END
	TLNE	CM,CUE			;BUSY and CONTROL UNIT END?
	 JRST	STRT1			;Yes, restart
STRT3:	TLNN	CM,CE+DE		;Channel End and Device End?
	 JRST	STRT5			;No.  BSY should not be off!
	TLNN	CM,175114		;Any errors?
	 JRST	CPOPJ1			;No, give skip return

;Here for reasonable errors, such as unit exists but is off-line

STRT5:	MOVEI	T3,SA.RST		;Reset all channels on the SA10
	XCT	BPCNO3(SA)		;  CONO SA,400000
	POPJ	P,			;Error return to try next unit

;Here on timeout
STRT4:	MOVE	DU,MAXDEV		;Go to new channel

;Here on select error - no disk string responded to this address
STRT4A:	TRO	DU,<BYTE (8)0,0,7>	;Skip rest of disk string
	POPJ	P,			;Give error return from STRTIT

;Here for BSY+SM = SCU (3672/3674) is busy (as opposed to 3673+3675 busy)

STRT2:	MOVE	T3,CLRSTS(CH)		;Clear status stored bit
	XCT	BPCNO3(SA)		;  CONO SA,600
	MOVEI	T1,^D100000
	MOVE	T2,SSBITS(CH)		;Wait for new status to be stored
	XCT	BPCNS2(SA)		;  CONSO SA,100
	 SOJG	T1,.-1
	MOVE	CM,1(P1)		;Get new status
	TLNE	CM,CUE			;Control Unit End?
	 JRST	STRT1			;Finally.  Now go get device status
	JRST	STRT2			;No, wait unit it does show up


CPOPJ1:	AOS	(P)			;And skip return for success
CPOPJ:	POPJ	P,
SUBTTL	Command list for IBM 3330-II disks

  ;1st byte = mode for channel
BYTMOD== 10+40+20+2	;Byte mode, execute, CMD chain, ignore length error
OFSMOD== 10+40+20+2+1	;Offset byte mode for SEARCH ID==
WRDMOD==100+40+20	;Read words in natural mode, execute, CMD chain
NOXFER==200+40		;Don't transfer bytes to/from memory, execute
DHALT== 200		;No memory transfer, don't execute (end of command list)
TIC=(BYTE(8)100)	;200000 = Tranfer In Channel = GOTO word

  ;2nd byte == command to disk
NOOP==   3		;No operation (to test for SELECT ERROR)
SENSE==  4		;Read sense bits
WRITE==  5		;Write one record
READ==   6		;Read one record
SEEK==   7		;Position to cylinder, select head
SEARCH==61		;Search for ID=

  ;3rd byte = device address
FDISKA==300		;First TYMCOM-X disk address is X'C0'
LDISKA==377		;Last  TYMCOM-X disk address is X'FF'

NOOPD0:	BYTE	(8)NOXFER,NOOP,FDISKA	;NOOP for first disk address X'C0'=300
MAXDEV:	BYTE	(8)NOXFER,NOOP,LDISKA	;NOOP for last disk address  X'FF'=377

;Command list for 3650 formatted in pages (records 1-7 on head 0)

LIST0:!		;Start address of UTFND0
LIST1:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R4		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R4		; for CYL 0, HEAD 0, REC 4 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+0000	;Disk page 3 into core page 774
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+1000	;Disk page 4 into core page 775
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+2000	;Disk page 5 into core page 776
NOPCMD:	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
IF2,<IFN <LIST2-.>,<PRINTX ? UTFND0 expects LIST2 to be NOPCMD+2>>

;Command list for 3675 formatted in pages (records 1-5 on head 0)

LIST2:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R4		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R4		; for CYL 0, HEAD 0, REC 4 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+0000	;Disk page 3 into core page 774
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+1000	;Disk page 4 into core page 775
	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H1R1		; to BIN 0, CYL 0, HEAD 1
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H1R1		; for CYL 0, HEAD 1, REC 0 (DPN=6)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-1000(24)BOOTS+2000	;Disk page 6 into core page 776
	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
IF2,<IFN <LIST3-.>,<PRINTX ? UTFND0 expects LIST3 to follow LIST2>>

;Command list for disks formatted in blocks (records 1-18 on head 0)

LIST3:	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H0R13		; to BIN 0, CYL 0, HEAD 0
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H0R13		; for CYL 0, HEAD 0, REC 13 (DPN=3)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0000	;Disk block 12 into core page 774
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0200	;Block 13
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0400	;Block 14
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+0600	;Block 15
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1000	;Disk block 16 into core page 775
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1200	;Block 17
	BYTE	(8)BYTMOD,SEEK,FDISKA	;SEEK
	BYTE	(12)-6(24)H1R1		; to BIN 0, CYL 0, HEAD 1
	BYTE	(8)OFSMOD,SEARCH,FDISKA	;SEARCH ID=
	BYTE	(12)-5(24)H1R1		; for CYL 0, HEAD 1, REC 0 (DPN=4.5)
	  XWD	TIC,.-2			;TIC if search fails
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1400	;Block 18
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+1600	;Block 19
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2000	;Disk block 20 into core page 776
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2200	;Block 21
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2400	;Block 22
	 BYTE	(8)WRDMOD,READ,FDISKA	;READ
	 BYTE	(12)-200(24)BOOTS+2600	;Block 23
	BYTE	(8)NOXFER,NOOP,FDISKA	;NO OP
	BYTE	(8)DHALT		;End of command list
LIST9:!		;End address for UTFND0

H0R4:	BYTE	(16)0,0,0(8)^D4		;BIN 0, CYL 0, HEAD 0, REC  4
H1R1:	BYTE	(16)0,0,1(8)^D1		;BIN 0, CYL 0, HEAD 1, REC  1
H0R13:	BYTE	(16)0,0,0(8)^D13	;BIN 0, CYL 0, HEAD 0, REC 13

LITS:	LIT
BOTLEN=.-BOOTFI			;Length of Exec mode BOTLOD
BTSDAT:	DEPHASE
			;End of BOTLOD
	JRST	BOOTFI	;*HACK*;
BTS999:	JRST	BOOTFI		;Tell KLDCP to jump to first instruction
	JRST	BOOTFI	;*HACK*;
	BLOCK	20	;*HACK*;


	PDLLEN==20
EPDL=:BTSDAT			;Stack
BTSEND=:EPDL+PDLLEN		;End of BOTLOD data area
	UNUSED==BOOTFI+1000-BTSEND	;Block of unused words on page 334


DEFINE PR(A,B),<IF2,<PRINTX [A B]>>
	LALL
	PR(BOTLOD starts at,\BOOTFI)
	PR(Length of BOTLOD =,\BOTLEN)
	PR(BOTLOD ends at,\BTSEND)
	PR(\UNUSED,words unused in page 334)

	END
    